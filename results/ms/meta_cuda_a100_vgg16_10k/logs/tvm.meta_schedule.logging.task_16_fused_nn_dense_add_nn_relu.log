2024-04-30 01:35:01 [INFO] [task_scheduler.cc:160] Initializing Task #16: "fused_nn_dense_add_nn_relu"
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT = T.alloc_buffer((T.int64(1), T.int64(4096)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4096)))
        for i0, i1, k in T.grid(T.int64(1), T.int64(4096), T.int64(25088)):
            with T.block("T_matmul_NT"):
                v_i0, v_i1, v_k = T.axis.remap("SSR", [i0, i1, k])
                T.reads(p0[v_i0, v_k], p1[v_i1, v_k])
                T.writes(T_matmul_NT[v_i0, v_i1])
                with T.init():
                    T_matmul_NT[v_i0, v_i1] = T.float32(0)
                T_matmul_NT[v_i0, v_i1] = T_matmul_NT[v_i0, v_i1] + p0[v_i0, v_k] * p1[v_i1, v_k]
        for ax0, ax1 in T.grid(T.int64(1), T.int64(4096)):
            with T.block("T_add"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(T_matmul_NT[v_ax0, v_ax1], p2[v_ax0, v_ax1])
                T.writes(T_add[v_ax0, v_ax1])
                T_add[v_ax0, v_ax1] = T_matmul_NT[v_ax0, v_ax1] + p2[v_ax0, v_ax1]
        for ax0, ax1 in T.grid(T.int64(1), T.int64(4096)):
            with T.block("T_relu"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(T_add[v_ax0, v_ax1])
                T.writes(T_relu[v_ax0, v_ax1])
                T_relu[v_ax0, v_ax1] = T.max(T_add[v_ax0, v_ax1], T.float32(0))
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
            p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
            for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_1_i1_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for i0_2_i1_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for k_0 in range(T.int64(14)):
                            for ax0_ax1_fused in range(T.int64(1792)):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(1792) + ax0_ax1_fused)
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p0_shared[v0, v1] = p0[v0, v1]
                            for ax0_ax1_fused in range(T.int64(3670016)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(1792) + ax0_ax1_fused % T.int64(1792))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1] = p1[v0, v1]
                            for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(112), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(8)):
                                with T.block("T_matmul_NT"):
                                    v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                    v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(32) + i1_3 * T.int64(8) + i1_4)
                                    v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(1792) + k_1 * T.int64(16) + k_2)
                                    T.reads(p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                    T.writes(T_matmul_NT_local[v_i0, v_i1])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                                    T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                        for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                            with T.block("T_matmul_NT_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(32) + ax1)
                                T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                                T.writes(T_relu[v0, v1])
                                T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 32, 2, 4, 8])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[14, 112, 16])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
            p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
            for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_1_i1_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for i0_2_i1_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for k_0_fused in T.serial(T.int64(14), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_fused in range(T.int64(1792)):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(1792) + ax0_ax1_fused)
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p0_shared[v0, v1] = p0[v0, v1]
                            for ax0_ax1_fused in range(T.int64(3670016)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(1792) + ax0_ax1_fused % T.int64(1792))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1] = p1[v0, v1]
                            for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(112), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(8)):
                                with T.block("T_matmul_NT"):
                                    v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                    v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(32) + i1_3 * T.int64(8) + i1_4)
                                    v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(1792) + k_1 * T.int64(16) + k_2)
                                    T.reads(p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                    T.writes(T_matmul_NT_local[v_i0, v_i1])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                                    T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                        for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                            with T.block("T_matmul_NT_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(32) + ax1)
                                T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                                T.writes(T_relu[v0, v1])
                                T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 32, 2, 4, 8])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[14, 112, 16])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
            p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
            for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_1_i1_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for i0_2_i1_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for k_0_fused in T.serial(T.int64(14), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_fused in range(T.int64(1792)):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(1792) + ax0_ax1_fused)
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p0_shared[v0, v1] = p0[v0, v1]
                            for ax0_ax1_fused in range(T.int64(3670016)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(1792) + ax0_ax1_fused % T.int64(1792))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1] = p1[v0, v1]
                            for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(112), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(8)):
                                with T.block("T_matmul_NT"):
                                    v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                    v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(32) + i1_3 * T.int64(8) + i1_4)
                                    v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(1792) + k_1 * T.int64(16) + k_2)
                                    T.reads(p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                    T.writes(T_matmul_NT_local[v_i0, v_i1])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                                    T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                        for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                            with T.block("T_matmul_NT_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(32) + ax1)
                                T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                                T.writes(T_relu[v0, v1])
                                T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 32, 2, 4, 8])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[14, 112, 16])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
2024-04-30 02:11:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:11:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 02:11:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 511 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1022 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1531 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2041 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2547 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3058 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3565 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4072 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4583 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5094 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6621 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7641 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8150 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8659 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9167 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9677 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:55 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 02:11:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:11:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:12:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:12:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:12:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9977  0.9974  0.9958  0.9952  0.9927  0.9902  0.9892  0.9872  0.9871  0.9867  0.9847  0.9840  0.9804  0.9804  0.9804
[17 : 32]:	0.9794  0.9784  0.9769  0.9757  0.9748  0.9743  0.9718  0.9715  0.9711  0.9697  0.9686  0.9686  0.9686  0.9674  0.9663  0.9653
[33 : 48]:	0.9651  0.9646  0.9642  0.9597  0.9591  0.9587  0.9579  0.9570  0.9560  0.9559  0.9552  0.9539  0.9527  0.9510  0.9510  0.9502
[49 : 64]:	0.9472  0.9470  0.9447  0.9442  0.9442  0.9434  0.9424  0.9419  0.9410  0.9391  0.9388  0.9381  0.9379  0.9379  0.9368  0.9350
2024-04-30 02:12:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:12:01 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(2) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(1792), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(14) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(14))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(28)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(14) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(14))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(2) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(14) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 4, 32, 2, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[1792, 14, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3_init * T.int64(4) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(784)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(32) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) * T.int64(4) + ax0_ax1_fused_2 < T.int64(32))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(64)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(32) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3 * T.int64(4) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(32) + k_1 * T.int64(16) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 1, 64, 1, 4])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[784, 2, 16])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62, l63 = sch.split(loop=l60, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l63)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b74)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l91, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l91, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105 = sch.get_loops(block=b76)
b106 = sch.get_block(name="T_matmul_NT", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b106)
b117 = sch.decompose_reduction(block=b106, loop=l110)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(2) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(25088)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0)
                                    T.where(ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(2)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused_0 * T.int64(1024) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(T.int64(25088), k_0)
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(2) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 4, 256, 2, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_1_i1_1_fused * T.int64(2048) + i0_2_i1_2_fused * T.int64(16) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(25088)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0)
                                    T.where(ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(8)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(T.int64(25088), k_0)
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_1_i1_1_fused * T.int64(2048) + i0_2_i1_2_fused * T.int64(16) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(16)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_1_i1_1_fused * T.int64(2048) + i0_2_i1_2_fused * T.int64(16) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 2, 128, 16, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #5: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(6272), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(4) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(4))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(16)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(4) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) % T.int64(4))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(4) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 1, 64, 2, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[6272, 4, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70 = sch.split(loop=l68, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b73)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102 = sch.get_loops(block=b75)
b103 = sch.get_block(name="T_matmul_NT", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b103)
b114 = sch.decompose_reduction(block=b103, loop=l107)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #6: GFLOPs: 1.9952. Time: 103009.9587 us. Best GFLOPs: 1.9952
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #7: GFLOPs: 17.9712. Time: 11436.6006 us. Best GFLOPs: 17.9712
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #8: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(3584)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 < T.int64(7))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1) * T.int64(4) + ax0_ax1_fused_2 < T.int64(1792))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(7) + k_1 * T.int64(7) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 1, 128, 1, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[3584, 1, 7])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #9: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(1792)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(14) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 < T.int64(14))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(7)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(14) + (ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(14))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(14) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 1, 256, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[1792, 7, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 256, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #10: GFLOPs: 147.0717. Time: 1397.4755 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #11: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(1792), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(14) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(14))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(14)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(14) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(14))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(14) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[32, 1, 32, 2, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[1792, 14, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l90, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l90, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #12: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(12544)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + (ax0_ax1_fused_0 * T.int64(1024) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(1024) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(2) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[8, 2, 256, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 1, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #13: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(3136)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(8) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(8))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(128)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(8) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1) % T.int64(8))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(8) + k_1 * T.int64(8) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[8, 4, 32, 4, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[3136, 1, 8])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69 = sch.split(loop=l67, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b71)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b72)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b73)
l97, l98, l99, l100, l101 = sch.get_loops(block=b74)
b102 = sch.get_block(name="T_matmul_NT", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #14: GFLOPs: 17.2068. Time: 11944.6190 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #15: GFLOPs: 1.5197. Time: 135244.8017 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #16: GFLOPs: 55.4611. Time: 3705.8220 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #17: GFLOPs: 13.3417. Time: 15405.0564 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #18: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(3584)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(7))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(56)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(7))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(7) + k_1 * T.int64(7) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 4, 64, 4, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[3584, 1, 7])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #19: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3_init * T.int64(4) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(12544)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(2)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + i1_3 * T.int64(4) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(2) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 1, 64, 1, 4])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 2, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #20: GFLOPs: 39.1046. Time: 5255.8741 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #21: GFLOPs: 3.2368. Time: 63497.5583 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #22: GFLOPs: 68.4282. Time: 3003.5728 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #23: GFLOPs: 53.1986. Time: 3863.4338 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #24: GFLOPs: 69.7793. Time: 2945.4155 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #25: GFLOPs: 5.0005. Time: 41101.3107 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #26: GFLOPs: 118.9684. Time: 1727.5939 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #27: GFLOPs: 8.5253. Time: 24108.2366 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #28: GFLOPs: 4.7033. Time: 43698.8573 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #29: GFLOPs: 58.4890. Time: 3513.9797 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #30: GFLOPs: 1.8593. Time: 110543.5280 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #31: GFLOPs: 15.3190. Time: 13416.5764 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #32: GFLOPs: 5.7284. Time: 35879.2520 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #33: GFLOPs: 8.9820. Time: 22882.3042 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #34: GFLOPs: 83.3463. Time: 2465.9668 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #35: GFLOPs: 66.7432. Time: 3079.4021 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #36: GFLOPs: 10.0616. Time: 20427.1620 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #37: GFLOPs: 15.6354. Time: 13145.0881 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #38: GFLOPs: 18.5618. Time: 11072.7165 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #39: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(12544)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(8)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(2) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(8)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 2, 64, 4, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 1, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #40: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(12544)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(32)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(2) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(8)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 4, 64, 4, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 1, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #41: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3_init * T.int64(4) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(6272), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(4) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(4))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(8)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(4) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(4))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3 * T.int64(4) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(4) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(8)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[8, 1, 64, 2, 4])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[6272, 4, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l90, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l90, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #42: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(2) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(12544), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(2) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(2) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(2) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(2) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_1_i1_1_fused * T.int64(64) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[32, 2, 32, 1, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 1, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l90, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l90, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #43: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(8) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(25088), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused)
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(16)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused)
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(8) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(8)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(8) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 8, 32, 8, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l90, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l90, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #44: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(2) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(12544), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(2) + (ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1) * T.int64(2) + ax0_ax1_fused_2 < T.int64(2))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused * T.int64(2) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1) % T.int64(2))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(2) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused * T.int64(2) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[8, 1, 256, 1, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 2, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63, l64 = sch.split(loop=l61, factors=[None, 256, 2], preserve_unit_iters=True)
sch.vectorize(loop=l64)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l65, l66, l67, l68, l69 = sch.get_loops(block=b46)
l70, l71 = sch.split(loop=l69, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #45: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(3136)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(8) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1) * T.int64(4) + ax0_ax1_fused_2 < T.int64(8))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(128)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(8) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1) % T.int64(8))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(8) + k_1 * T.int64(4) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[8, 4, 32, 4, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[3136, 2, 4])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62, l63 = sch.split(loop=l60, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l63)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70 = sch.split(loop=l68, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #46: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(25088)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0)
                                    T.where(ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(8)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(T.int64(25088), k_0)
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 8, 256, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69 = sch.split(loop=l67, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b71)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b72)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b74)
b102 = sch.get_block(name="T_matmul_NT", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #47: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(25088)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0)
                                    T.where(ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(T.int64(25088), k_0)
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(2048) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 8, 128, 1, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #48: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(784)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(32) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) * T.int64(4) + ax0_ax1_fused_2 < T.int64(32))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(128)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(32) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) % T.int64(32))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(32) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 2, 64, 1, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[784, 16, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62, l63 = sch.split(loop=l60, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l63)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70 = sch.split(loop=l68, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #49: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(3584)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(7))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(112)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) // T.int64(7))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) % T.int64(7))
                                    T.reads(p1[v0, v1])
                                    T.writes(p1_shared[v0, v1])
                                    p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(7) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(8)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_1_i1_1_fused * T.int64(512) + i0_2_i1_2_fused * T.int64(8) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 2, 64, 8, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[3584, 7, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69 = sch.split(loop=l67, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b71)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b72)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b74)
b102 = sch.get_block(name="T_matmul_NT", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #50: GFLOPs: 19.2021. Time: 10703.4622 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #51: GFLOPs: 4.2023. Time: 48908.9710 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #52: GFLOPs: 8.8270. Time: 23284.2228 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #53: GFLOPs: 6.0355. Time: 34053.4617 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #54: GFLOPs: 1.4745. Time: 139386.1997 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #55: GFLOPs: 112.5710. Time: 1825.7733 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #56: GFLOPs: 14.1329. Time: 14542.5556 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #57: GFLOPs: 13.3729. Time: 15369.1016 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #58: GFLOPs: 48.1459. Time: 4268.8803 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #59: GFLOPs: 18.5791. Time: 11062.3741 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #60: GFLOPs: 18.8071. Time: 10928.2739 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #61: GFLOPs: 39.9630. Time: 5142.9869 us. Best GFLOPs: 147.0717
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #62: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(8)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_2_i1_2_fused * T.int64(128) + i1_3_init * T.int64(8) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(12544)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(64)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(8)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_2_i1_2_fused * T.int64(128) + i1_3 * T.int64(8) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(2) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(128)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_2_i1_2_fused * T.int64(128) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 32, 16, 8])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 2, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:17:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #63: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_2_i1_2_fused * T.int64(4) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(25088), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused)
                                    T.where(ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(2)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused)
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_2_i1_2_fused * T.int64(4) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(1024) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 1, 256, 4, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 256, 2], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l90, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l90, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:17:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:17:37 [INFO] [evolutionary_search.cc:715] Picked top 38 candidate(s) from database
2024-04-30 02:17:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 473 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 942 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1415 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1888 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2354 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2826 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3298 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3769 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4237 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4709 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5183 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5656 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6598 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7070 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7541 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8013 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8959 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9432 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9906 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 10379 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 10848 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:54 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-30 02:17:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:17:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:18:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:18:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:18:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2984  1.2851  1.2851  1.2851  1.2780  1.2780  1.2714  1.2695  1.2695  1.2695  1.2639  1.2639  1.2385  1.2385  1.2365  1.2365
[17 : 32]:	1.2365  1.2215  1.2215  1.2215  1.2214  1.2144  1.1785  1.1732  1.1732  1.1714  1.1688  1.1688  1.1671  1.1671  1.1671  1.1659
[33 : 48]:	1.1659  1.1620  1.1607  1.1588  1.1588  1.1588  1.1550  1.1549  1.1546  1.1546  1.1546  1.1511  1.1479  1.1479  1.1479  1.1440
[49 : 64]:	1.1408  1.1408  1.1359  1.1359  1.1340  1.1340  1.1340  1.1278  1.1258  1.1143  1.1126  1.1126  1.1124  1.1124  1.1079  1.1079
2024-04-30 02:18:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:18:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #64: GFLOPs: 119.9070. Time: 1714.0701 us. Best GFLOPs: 147.0717
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #65: GFLOPs: 147.5899. Time: 1392.5689 us. Best GFLOPs: 147.5899
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #66: GFLOPs: 147.5733. Time: 1392.7253 us. Best GFLOPs: 147.5899
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #67: GFLOPs: 147.5688. Time: 1392.7680 us. Best GFLOPs: 147.5899
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #68: GFLOPs: 147.5628. Time: 1392.8249 us. Best GFLOPs: 147.5899
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #69: GFLOPs: 147.6200. Time: 1392.2844 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #70: GFLOPs: 84.9266. Time: 2420.0777 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #71: GFLOPs: 88.1719. Time: 2331.0050 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #72: GFLOPs: 88.1674. Time: 2331.1240 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #73: GFLOPs: 88.1575. Time: 2331.3861 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #74: GFLOPs: 120.0443. Time: 1712.1106 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #75: GFLOPs: 120.0285. Time: 1712.3363 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #76: GFLOPs: 84.9694. Time: 2418.8586 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #77: GFLOPs: 84.9369. Time: 2419.7851 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #78: GFLOPs: 88.2025. Time: 2330.1954 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #79: GFLOPs: 88.1656. Time: 2331.1718 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #80: GFLOPs: 88.1692. Time: 2331.0765 us. Best GFLOPs: 147.6200
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #81: GFLOPs: 173.1119. Time: 1187.2618 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #82: GFLOPs: 173.0820. Time: 1187.4665 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #83: GFLOPs: 169.7500. Time: 1210.7752 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #84: GFLOPs: 139.2681. Time: 1475.7798 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #85: GFLOPs: 173.0609. Time: 1187.6111 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #86: GFLOPs: 122.9050. Time: 1672.2603 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #87: GFLOPs: 100.2936. Time: 2049.2748 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #88: GFLOPs: 115.1341. Time: 1785.1278 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #89: GFLOPs: 122.8962. Time: 1672.3797 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #90: GFLOPs: 80.4119. Time: 2555.9551 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #91: GFLOPs: 99.7554. Time: 2060.3298 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #92: GFLOPs: 151.9317. Time: 1352.7732 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #93: GFLOPs: 154.8672. Time: 1327.1310 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #94: GFLOPs: 96.0433. Time: 2139.9638 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #95: GFLOPs: 122.8862. Time: 1672.5163 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #96: GFLOPs: 122.9137. Time: 1672.1407 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #97: GFLOPs: 122.9062. Time: 1672.2432 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #98: GFLOPs: 84.9412. Time: 2419.6632 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #99: GFLOPs: 122.9263. Time: 1671.9701 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #100: GFLOPs: 122.9075. Time: 1672.2261 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #101: GFLOPs: 122.9238. Time: 1672.0043 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #102: GFLOPs: 151.9441. Time: 1352.6625 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #103: GFLOPs: 122.8974. Time: 1672.3626 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #104: GFLOPs: 171.2734. Time: 1200.0061 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #105: GFLOPs: 168.3894. Time: 1220.5581 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #106: GFLOPs: 168.3929. Time: 1220.5330 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #107: GFLOPs: 151.9565. Time: 1352.5517 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #108: GFLOPs: 151.9208. Time: 1352.8700 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #109: GFLOPs: 151.9457. Time: 1352.6486 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #110: GFLOPs: 154.8594. Time: 1327.1983 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #111: GFLOPs: 154.8955. Time: 1326.8884 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #112: GFLOPs: 90.4343. Time: 2272.6883 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #113: GFLOPs: 90.4315. Time: 2272.7607 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #114: GFLOPs: 99.7494. Time: 2060.4552 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #115: GFLOPs: 80.4054. Time: 2556.1600 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #116: GFLOPs: 81.1039. Time: 2534.1440 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #117: GFLOPs: 82.4758. Time: 2491.9914 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #118: GFLOPs: 81.1039. Time: 2534.1440 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #119: GFLOPs: 84.9455. Time: 2419.5413 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #120: GFLOPs: 88.1746. Time: 2330.9335 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #121: GFLOPs: 84.9523. Time: 2419.3462 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #122: GFLOPs: 71.2720. Time: 2883.7302 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #123: GFLOPs: 169.7604. Time: 1210.7011 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #124: GFLOPs: 88.1845. Time: 2330.6716 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #125: GFLOPs: 2.2451. Time: 91546.6207 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #126: GFLOPs: 2.9902. Time: 68733.2710 us. Best GFLOPs: 173.1119
2024-04-30 02:20:28 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #127: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(3584)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1 < T.int64(7))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(28)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(7) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(7))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(7) + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(4)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(256) + i0_1_i1_1_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(4) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[16, 2, 32, 2, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[3584, 7, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:20:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:20:28 [INFO] [evolutionary_search.cc:715] Picked top 101 candidate(s) from database
2024-04-30 02:20:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 816 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1225 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1631 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2040 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2446 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2854 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3261 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3670 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4081 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4901 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5311 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5722 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6543 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6953 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7363 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7773 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8182 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8586 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8995 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9814 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:44 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 02:20:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:20:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6399  1.6248  1.6181  1.6181  1.6049  1.5969  1.5956  1.5956  1.5956  1.5956  1.5956  1.5950  1.5914  1.5900  1.5886  1.5880
[17 : 32]:	1.5863  1.5863  1.5861  1.5861  1.5861  1.5861  1.5844  1.5743  1.5740  1.5740  1.5739  1.5711  1.5695  1.5681  1.5681  1.5646
[33 : 48]:	1.5644  1.5600  1.5365  1.5351  1.5351  1.5312  1.5220  1.5176  1.5125  1.5095  1.5081  1.5081  1.5036  1.4992  1.4913  1.4897
[49 : 64]:	1.4894  1.4869  1.4855  1.4851  1.4832  1.4832  1.4811  1.4795  1.4792  1.4776  1.4751  1.4751  1.4749  1.4735  1.4733  1.4730
2024-04-30 02:20:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:20:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #128: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(784)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(32) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(32))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(8)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(32) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(32) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[64, 1, 64, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[784, 16, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #129: GFLOPs: 193.1207. Time: 1064.2519 us. Best GFLOPs: 193.1207
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #130: GFLOPs: 215.6814. Time: 952.9292 us. Best GFLOPs: 215.6814
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #131: GFLOPs: 169.4611. Time: 1212.8392 us. Best GFLOPs: 215.6814
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #132: GFLOPs: 206.0197. Time: 997.6185 us. Best GFLOPs: 215.6814
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #133: GFLOPs: 215.9004. Time: 951.9625 us. Best GFLOPs: 215.9004
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #134: GFLOPs: 306.2889. Time: 671.0302 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #135: GFLOPs: 301.2217. Time: 682.3183 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #136: GFLOPs: 305.8874. Time: 671.9108 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #137: GFLOPs: 291.5682. Time: 704.9091 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #138: GFLOPs: 288.0682. Time: 713.4737 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #139: GFLOPs: 215.8977. Time: 951.9746 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #140: GFLOPs: 84.8668. Time: 2421.7843 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #141: GFLOPs: 92.5005. Time: 2221.9236 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #142: GFLOPs: 79.5723. Time: 2582.9219 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #143: GFLOPs: 247.6006. Time: 830.0832 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #144: GFLOPs: 206.5654. Time: 994.9833 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #145: GFLOPs: 206.5612. Time: 995.0036 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #146: GFLOPs: 247.6082. Time: 830.0578 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #147: GFLOPs: 247.5754. Time: 830.1678 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #148: GFLOPs: 247.5880. Time: 830.1255 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #149: GFLOPs: 247.5905. Time: 830.1170 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #150: GFLOPs: 206.5675. Time: 994.9731 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #151: GFLOPs: 306.2889. Time: 671.0302 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #152: GFLOPs: 82.1008. Time: 2503.3760 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #153: GFLOPs: 82.1826. Time: 2500.8828 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #154: GFLOPs: 59.0377. Time: 3481.3174 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #155: GFLOPs: 59.0204. Time: 3482.3416 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #156: GFLOPs: 59.0503. Time: 3480.5761 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #157: GFLOPs: 82.1473. Time: 2501.9567 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #158: GFLOPs: 81.8139. Time: 2512.1536 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #159: GFLOPs: 80.7694. Time: 2544.6399 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #160: GFLOPs: 80.2070. Time: 2562.4832 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #161: GFLOPs: 80.2407. Time: 2561.4080 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #162: GFLOPs: 79.5602. Time: 2583.3157 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #163: GFLOPs: 76.3225. Time: 2692.9044 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #164: GFLOPs: 78.2748. Time: 2625.7374 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #165: GFLOPs: 24.5532. Time: 8370.7732 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #166: GFLOPs: 82.1345. Time: 2502.3487 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #167: GFLOPs: 82.1647. Time: 2501.4272 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #168: GFLOPs: 80.8133. Time: 2543.2575 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #169: GFLOPs: 80.2685. Time: 2560.5202 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #170: GFLOPs: 80.7849. Time: 2544.1536 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #171: GFLOPs: 78.1526. Time: 2629.8421 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #172: GFLOPs: 64.8307. Time: 3170.2436 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #173: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(12544)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(2))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(2) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(2) + k_1 * T.int64(2) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[32, 1, 64, 2, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[12544, 1, 2])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #174: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(392)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(64) + ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1)
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(16)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(64) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(64) + k_1 * T.int64(64) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[64, 1, 64, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[392, 1, 64])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #175: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(6272)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(4) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) * T.int64(4) + ax0_ax1_fused_2 < T.int64(4))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(4) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(4))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(4) + k_1 * T.int64(4) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[32, 1, 64, 2, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[6272, 1, 4])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62, l63 = sch.split(loop=l60, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l63)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b74)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l91, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l91, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105 = sch.get_loops(block=b76)
b106 = sch.get_block(name="T_matmul_NT", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b106)
b117 = sch.decompose_reduction(block=b106, loop=l110)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #176: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(392)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(64) + ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1)
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(32)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(64) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(64) + k_1 * T.int64(4) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[64, 1, 64, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[392, 16, 4])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #177: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(6272)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(4) + (ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1) * T.int64(4) + ax0_ax1_fused_2 < T.int64(4))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(4) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(4))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(4) + k_1 * T.int64(4) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[32, 1, 64, 2, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[6272, 1, 4])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62, l63 = sch.split(loop=l60, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l63)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b74)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b75)
l101, l102, l103, l104, l105 = sch.get_loops(block=b76)
b106 = sch.get_block(name="T_matmul_NT", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b106)
b117 = sch.decompose_reduction(block=b106, loop=l110)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #178: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(6272)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(4) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 < T.int64(4))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(4)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(4) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(4))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(4) + k_1 * T.int64(4) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(128) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[32, 1, 64, 2, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[6272, 1, 4])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #179: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(392)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(64) + ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1)
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(32)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(64) + (ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(64) + k_1 * T.int64(64) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[64, 1, 64, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[392, 1, 64])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62 = sch.split(loop=l60, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l63, l64, l65, l66, l67 = sch.get_loops(block=b46)
l68, l69, l70 = sch.split(loop=l67, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l70)
sch.bind(loop=l69, thread_axis="threadIdx.x")
b71 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b71, ann_key="meta_schedule.unroll_explicit")
b72, b73, b74, b75 = sch.get_child_blocks(b71)
l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b72)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b73)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b74)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b75)
b104 = sch.get_block(name="T_matmul_NT", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #180: GFLOPs: 301.2594. Time: 682.2330 us. Best GFLOPs: 306.2889
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #181: GFLOPs: 306.3141. Time: 670.9749 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #182: GFLOPs: 206.5612. Time: 995.0036 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #183: GFLOPs: 247.5476. Time: 830.2609 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #184: GFLOPs: 169.8798. Time: 1209.8498 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #185: GFLOPs: 247.5552. Time: 830.2355 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #186: GFLOPs: 57.6707. Time: 3563.8387 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #187: GFLOPs: 57.4882. Time: 3575.1498 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #188: GFLOPs: 68.3549. Time: 3006.7953 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #189: GFLOPs: 23.6517. Time: 8689.8346 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #190: GFLOPs: 9.6971. Time: 21194.9568 us. Best GFLOPs: 306.3141
2024-04-30 02:23:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #191: GFLOPs: 2.5210. Time: 81527.4657 us. Best GFLOPs: 306.3141
2024-04-30 02:33:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:33:26 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 02:33:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 813 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1220 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1627 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2036 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2444 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2852 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3261 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3668 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4074 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4889 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5297 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5706 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6523 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6927 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7337 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7744 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8152 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8562 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8970 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:40 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 02:33:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:33:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5146  1.5146  1.5146  1.5146  1.5146  1.5127  1.5104  1.5104  1.5104  1.5097  1.5097  1.5097  1.5055  1.5051  1.5046  1.5046
[17 : 32]:	1.5035  1.5021  1.5021  1.4997  1.4978  1.4978  1.4878  1.4878  1.4605  1.4605  1.4605  1.4605  1.4556  1.4556  1.4537  1.4505
[33 : 48]:	1.4505  1.4480  1.4379  1.4273  1.4224  1.1302  1.1302  1.1276  1.0186  1.0186  1.0167  1.0140  1.0109  0.9850  0.9850  0.9830
[49 : 64]:	0.9749  0.9749  0.9674  0.9674  0.9654  0.9654  0.9641  0.9603  0.9594  0.9594  0.9573  0.9573  0.9573  0.9540  0.9540  0.9540
2024-04-30 02:33:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:33:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #192: GFLOPs: 179.2230. Time: 1146.7784 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #193: GFLOPs: 179.7799. Time: 1143.2262 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #194: GFLOPs: 180.0640. Time: 1141.4225 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #195: GFLOPs: 179.6683. Time: 1143.9360 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #196: GFLOPs: 180.0915. Time: 1141.2480 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #197: GFLOPs: 180.0768. Time: 1141.3411 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #198: GFLOPs: 178.1867. Time: 1153.4477 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #199: GFLOPs: 178.0904. Time: 1154.0715 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #200: GFLOPs: 177.9797. Time: 1154.7895 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #201: GFLOPs: 179.8073. Time: 1143.0517 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #202: GFLOPs: 180.0860. Time: 1141.2829 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #203: GFLOPs: 179.6793. Time: 1143.8662 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #204: GFLOPs: 178.1104. Time: 1153.9421 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #205: GFLOPs: 180.0787. Time: 1141.3294 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #206: GFLOPs: 179.6464. Time: 1144.0756 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #207: GFLOPs: 180.0695. Time: 1141.3877 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #208: GFLOPs: 178.0087. Time: 1154.6012 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #209: GFLOPs: 179.6391. Time: 1144.1222 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #210: GFLOPs: 180.0603. Time: 1141.4459 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #211: GFLOPs: 180.0805. Time: 1141.3178 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #212: GFLOPs: 177.9942. Time: 1154.6954 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #213: GFLOPs: 178.0523. Time: 1154.3187 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #214: GFLOPs: 178.0614. Time: 1154.2599 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #215: GFLOPs: 177.9797. Time: 1154.7895 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #216: GFLOPs: 169.3032. Time: 1213.9705 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #217: GFLOPs: 169.6981. Time: 1211.1452 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #218: GFLOPs: 169.3359. Time: 1213.7361 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #219: GFLOPs: 170.5093. Time: 1205.3837 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #220: GFLOPs: 170.5337. Time: 1205.2109 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #221: GFLOPs: 169.2774. Time: 1214.1555 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #222: GFLOPs: 170.5180. Time: 1205.3220 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #223: GFLOPs: 170.5215. Time: 1205.2973 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #224: GFLOPs: 169.3204. Time: 1213.8471 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #225: GFLOPs: 170.5093. Time: 1205.3837 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #226: GFLOPs: 170.5302. Time: 1205.2357 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #227: GFLOPs: 179.6738. Time: 1143.9011 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #228: GFLOPs: 179.7909. Time: 1143.1564 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #229: GFLOPs: 192.0005. Time: 1070.4613 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #230: GFLOPs: 189.5278. Time: 1084.4270 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #231: GFLOPs: 222.5117. Time: 923.6775 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #232: GFLOPs: 306.1576. Time: 671.3179 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #233: GFLOPs: 306.1952. Time: 671.2354 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #234: GFLOPs: 306.2140. Time: 671.1942 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #235: GFLOPs: 306.1607. Time: 671.3110 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #236: GFLOPs: 301.0619. Time: 682.6806 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #237: GFLOPs: 306.1890. Time: 671.2492 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #238: GFLOPs: 301.0864. Time: 682.6249 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #239: GFLOPs: 306.1984. Time: 671.2285 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #240: GFLOPs: 306.1670. Time: 671.2973 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #241: GFLOPs: 306.2297. Time: 671.1598 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #242: GFLOPs: 306.1952. Time: 671.2354 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #243: GFLOPs: 301.0926. Time: 682.6110 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #244: GFLOPs: 301.0619. Time: 682.6806 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #245: GFLOPs: 291.4710. Time: 705.1443 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #246: GFLOPs: 301.0649. Time: 682.6737 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #247: GFLOPs: 156.6870. Time: 1311.7174 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #248: GFLOPs: 301.0097. Time: 682.7990 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #249: GFLOPs: 306.1294. Time: 671.3798 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #250: GFLOPs: 306.1702. Time: 671.2904 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #251: GFLOPs: 301.0741. Time: 682.6527 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #252: GFLOPs: 301.0834. Time: 682.6318 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_dense_add_nn_relu] Trial #253: GFLOPs: 35.0820. Time: 5858.5315 us. Best GFLOPs: 306.3141
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #254: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + i1_3_init * T.int64(2) + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0_fused in T.serial(T.int64(25088), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p0_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(25088), k_0_fused)
                                    T.where(ax0_ax1_fused_0 * T.int64(128) + ax0_ax1_fused_1 < T.int64(1))
                                    T.reads(p0[v0, v1])
                                    T.writes(p0_shared[v0, v1])
                                    p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1 * T.int64(4) + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(T.int64(25088), k_0_fused)
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + i1_3 * T.int64(2) + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0_fused + k_1 + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(512) + i0_1_i1_1_fused * T.int64(256) + i0_2_i1_2_fused * T.int64(2) + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[8, 2, 128, 1, 2])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[25088, 1, 1])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
l55 = sch.fuse(l30, preserve_unit_iters=True)
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l55, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l57, l58, l59, l60, l61 = sch.get_loops(block=b37)
l62, l63 = sch.split(loop=l61, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b73)
l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b74)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b75)
l100, l101, l102, l103, l104 = sch.get_loops(block=b76)
b105 = sch.get_block(name="T_matmul_NT", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b105)
b116 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-30 02:36:10 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_dense_add_nn_relu] Trial #255: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(25088)), "float32"), p1: T.Buffer((T.int64(4096), T.int64(25088)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4096)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4096)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_matmul_NT_local = T.alloc_buffer((T.int64(1), T.int64(4096)), scope="local")
        p0_shared = T.alloc_buffer((T.int64(1), T.int64(25088)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4096), T.int64(25088)), scope="shared")
        for i0_0_i1_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_1_i1_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for i0_2_i1_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for i0_3_init, i1_3_init, i0_4_init, i1_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_init"):
                            v_i0 = T.axis.spatial(T.int64(1), i0_3_init + i0_4_init)
                            v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_1_i1_1_fused * T.int64(32) + i0_2_i1_2_fused + i1_3_init + i1_4_init)
                            T.reads()
                            T.writes(T_matmul_NT_local[v_i0, v_i1])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            T_matmul_NT_local[v_i0, v_i1] = T.float32(0)
                    for k_0 in range(T.int64(448)):
                        for ax0_ax1_fused_0 in range(T.int64(1)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p0_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(56) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * T.int64(32) + ax0_ax1_fused_1) * T.int64(2) + ax0_ax1_fused_2 < T.int64(56))
                                        T.reads(p0[v0, v1])
                                        T.writes(p0_shared[v0, v1])
                                        p0_shared[v0, v1] = p0[v0, v1]
                        for ax0_ax1_fused_0 in range(T.int64(56)):
                            for ax0_ax1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(25088), k_0 * T.int64(56) + (ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1 * T.int64(2) + ax0_ax1_fused_2) % T.int64(56))
                                        T.reads(p1[v0, v1])
                                        T.writes(p1_shared[v0, v1])
                                        p1_shared[v0, v1] = p1[v0, v1]
                        for k_1, i0_3, i1_3, k_2, i0_4, i1_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                            with T.block("T_matmul_NT_update"):
                                v_i0 = T.axis.spatial(T.int64(1), i0_3 + i0_4)
                                v_i1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_1_i1_1_fused * T.int64(32) + i0_2_i1_2_fused + i1_3 + i1_4)
                                v_k = T.axis.reduce(T.int64(25088), k_0 * T.int64(56) + k_1 * T.int64(28) + k_2)
                                T.reads(T_matmul_NT_local[v_i0, v_i1], p0_shared[v_i0, v_k], p1_shared[v_i1, v_k])
                                T.writes(T_matmul_NT_local[v_i0, v_i1])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                T_matmul_NT_local[v_i0, v_i1] = T_matmul_NT_local[v_i0, v_i1] + p0_shared[v_i0, v_k] * p1_shared[v_i1, v_k]
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("T_matmul_NT_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(4096), i0_0_i1_0_fused * T.int64(64) + i0_1_i1_1_fused * T.int64(32) + i0_2_i1_2_fused + ax1)
                            T.reads(T_matmul_NT_local[v0, v1], p2[v0, v1])
                            T.writes(T_relu[v0, v1])
                            T_relu[v0, v1] = T.max(T_matmul_NT_local[v0, v1] + p2[v0, v1], T.float32(0))
b0 = sch.get_block(name="T_matmul_NT", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6 = sch.get_loops(block=b0)
v7, v8, v9, v10, v11 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l12, l13, l14, l15, l16 = sch.split(loop=l4, factors=[v7, v8, v9, v10, v11], preserve_unit_iters=True)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[64, 2, 32, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l5, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29 = sch.sample_perfect_tile(loop=l6, n=3, max_innermost_factor=64, decision=[448, 2, 28])
l30, l31, l32 = sch.split(loop=l6, factors=[v27, v28, v29], preserve_unit_iters=True)
sch.reorder(l12, l22, l13, l23, l14, l24, l30, l31, l15, l25, l32, l16, l26)
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="blockIdx.x")
l34 = sch.fuse(l13, l23, preserve_unit_iters=True)
sch.bind(loop=l34, thread_axis="vthread.x")
l35 = sch.fuse(l14, l24, preserve_unit_iters=True)
sch.bind(loop=l35, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b36 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b36, loop=l35, preserve_unit_loops=True, index=-1)
b37 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b37, loop=l30, preserve_unit_loops=True, index=-1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b37)
l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
v45 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch", ann_val=v45)
b46 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b46, loop=l30, preserve_unit_loops=True, index=-1)
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
v54 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch", ann_val=v54)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
v55 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v55)
sch.enter_postproc()
sch.unannotate(block_or_loop=b37, ann_key="meta_schedule.cooperative_fetch")
l56, l57, l58, l59, l60 = sch.get_loops(block=b37)
l61, l62, l63 = sch.split(loop=l60, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l63)
sch.bind(loop=l62, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b46, ann_key="meta_schedule.cooperative_fetch")
l64, l65, l66, l67, l68 = sch.get_loops(block=b46)
l69, l70, l71 = sch.split(loop=l68, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l71)
sch.bind(loop=l70, thread_axis="threadIdx.x")
b72 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.unroll_explicit")
b73, b74, b75, b76 = sch.get_child_blocks(b72)
l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b74)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b75)
sch.annotate(block_or_loop=l91, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l91, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105 = sch.get_loops(block=b76)
b106 = sch.get_block(name="T_matmul_NT", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b106)
b117 = sch.decompose_reduction(block=b106, loop=l110)
2024-04-30 02:36:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:36:10 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 02:36:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 817 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1227 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 1636 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2042 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2449 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 2857 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3262 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 3672 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4080 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 4895 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5299 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 5708 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6526 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 6932 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7342 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 7751 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8565 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 8973 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45074c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa16b1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8ba9818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86108e8)]: 9383 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85a16e8)]: 0 failure(s)
2024-04-30 02:36:25 [WARNING] [evolutionary_search.cc:719] Cannot sample enough initial population, evolutionary search failed.
