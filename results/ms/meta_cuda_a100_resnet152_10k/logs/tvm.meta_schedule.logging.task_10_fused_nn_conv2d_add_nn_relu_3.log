2024-04-29 11:32:37 [INFO] [task_scheduler.cc:160] Initializing Task #10: "fused_nn_conv2d_add_nn_relu_3"
2024-04-29 11:32:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 11:32:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 11:32:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[8, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 4, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 11:32:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[8, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 4, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 11:32:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[8, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 4, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 11:51:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:51:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 11:51:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 492 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 11:51:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 962 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 11:51:10 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-04-29 11:51:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 11:51:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 11:51:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 11:51:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 11:51:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9992  0.9991  0.9986  0.9981  0.9968  0.9952  0.9952  0.9949  0.9932  0.9928  0.9924  0.9923  0.9919  0.9915  0.9908
[17 : 32]:	0.9902  0.9892  0.9865  0.9859  0.9858  0.9857  0.9836  0.9835  0.9831  0.9813  0.9805  0.9805  0.9805  0.9803  0.9790  0.9786
[33 : 48]:	0.9770  0.9756  0.9753  0.9745  0.9745  0.9743  0.9731  0.9720  0.9698  0.9688  0.9686  0.9685  0.9666  0.9661  0.9654  0.9647
[49 : 64]:	0.9645  0.9645  0.9639  0.9638  0.9629  0.9624  0.9621  0.9618  0.9593  0.9581  0.9581  0.9572  0.9561  0.9559  0.9556  0.9541
2024-04-29 11:51:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:51:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #1: GFLOPs: 3484.8396. Time: 59.2061 us. Best GFLOPs: 3484.8396
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #2: GFLOPs: 725.0903. Time: 284.5490 us. Best GFLOPs: 3484.8396
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #3: GFLOPs: 1102.4627. Time: 187.1480 us. Best GFLOPs: 3484.8396
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #4: GFLOPs: 1157.9770. Time: 178.1760 us. Best GFLOPs: 3484.8396
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #5: GFLOPs: 1142.0247. Time: 180.6648 us. Best GFLOPs: 3484.8396
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #6: GFLOPs: 1105.5565. Time: 186.6243 us. Best GFLOPs: 3484.8396
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #7: GFLOPs: 4017.2315. Time: 51.3597 us. Best GFLOPs: 4017.2315
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #8: GFLOPs: 4880.2906. Time: 42.2769 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #9: GFLOPs: 371.7444. Time: 555.0150 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #10: GFLOPs: 31.1371. Time: 6626.3041 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #11: GFLOPs: 80.0313. Time: 2578.0381 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #12: GFLOPs: 3227.0181. Time: 63.9363 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #13: GFLOPs: 3522.4671. Time: 58.5736 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #14: GFLOPs: 2078.9819. Time: 99.2427 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #15: GFLOPs: 1105.9310. Time: 186.5611 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #16: GFLOPs: 189.7911. Time: 1087.1095 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #17: GFLOPs: 383.1716. Time: 538.4630 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #18: GFLOPs: 1869.3284. Time: 110.3732 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #19: GFLOPs: 2430.7424. Time: 84.8809 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #20: GFLOPs: 2422.0800. Time: 85.1845 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #21: GFLOPs: 2898.7945. Time: 71.1757 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #22: GFLOPs: 1073.9582. Time: 192.1152 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #23: GFLOPs: 3767.3439. Time: 54.7664 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #24: GFLOPs: 534.7503. Time: 385.8319 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #25: GFLOPs: 29.6620. Time: 6955.8273 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #26: GFLOPs: 25.9670. Time: 7945.6100 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #27: GFLOPs: 44.7421. Time: 4611.3978 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #28: GFLOPs: 3945.1260. Time: 52.2984 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #29: GFLOPs: 22.5001. Time: 9169.9197 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #30: GFLOPs: 766.5486. Time: 269.1593 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #31: GFLOPs: 4304.2638. Time: 47.9347 us. Best GFLOPs: 4880.2906
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #32: GFLOPs: 5838.8260. Time: 35.3365 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #33: GFLOPs: 395.9926. Time: 521.0292 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #34: GFLOPs: 587.4584. Time: 351.2141 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #35: GFLOPs: 909.7684. Time: 226.7871 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #36: GFLOPs: 35.6049. Time: 5794.8159 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #37: GFLOPs: 781.3093. Time: 264.0743 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #38: GFLOPs: 182.5184. Time: 1130.4270 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #39: GFLOPs: 1907.9983. Time: 108.1362 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #40: GFLOPs: 2540.5424. Time: 81.2125 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #41: GFLOPs: 1308.1215. Time: 157.7252 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #42: GFLOPs: 2738.0235. Time: 75.3550 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #43: GFLOPs: 142.4352. Time: 1448.5449 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #44: GFLOPs: 3227.3240. Time: 63.9303 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #45: GFLOPs: 909.8380. Time: 226.7697 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #46: GFLOPs: 1677.9579. Time: 122.9612 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #47: GFLOPs: 438.0479. Time: 471.0071 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #48: GFLOPs: 2532.4154. Time: 81.4731 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #49: GFLOPs: 41.1322. Time: 5016.1151 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #50: GFLOPs: 1058.5453. Time: 194.9125 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #51: GFLOPs: 91.2876. Time: 2260.1500 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #52: GFLOPs: 2697.1861. Time: 76.4959 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #53: GFLOPs: 119.5958. Time: 1725.1751 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #54: GFLOPs: 15.2865. Time: 13497.0884 us. Best GFLOPs: 5838.8260
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #55: GFLOPs: 6043.3392. Time: 34.1407 us. Best GFLOPs: 6043.3392
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #56: GFLOPs: 7639.1669. Time: 27.0087 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #57: GFLOPs: 3484.0032. Time: 59.2203 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #58: GFLOPs: 170.8834. Time: 1207.3947 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #59: GFLOPs: 1008.9419. Time: 204.4951 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #60: GFLOPs: 632.1810. Time: 326.3681 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #61: GFLOPs: 205.2335. Time: 1005.3120 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #62: GFLOPs: 103.7633. Time: 1988.4072 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #63: GFLOPs: 125.7844. Time: 1640.2969 us. Best GFLOPs: 7639.1669
2024-04-29 12:20:38 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #64: GFLOPs: 25.5503. Time: 8075.1853 us. Best GFLOPs: 7639.1669
2024-04-29 15:47:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:47:36 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 15:47:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 429 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:47:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 851 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:47:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 1276 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:47:43 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-04-29 15:47:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:47:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:47:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:48:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x14aec8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe087a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe088008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3160618)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcb815d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcac5768)]: 148 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb45fb8)]: 0 failure(s)
2024-04-29 15:48:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5838  1.4084  1.3777  1.3777  1.3725  1.3718  1.3718  1.3624  1.3607  1.3604  1.3600  1.3599  1.3583  1.3563  1.3555  1.3548
[17 : 32]:	1.3533  1.3513  1.3506  1.3506  1.3494  1.3465  1.3461  1.3454  1.3446  1.3413  1.3407  1.3351  1.3351  1.3344  1.3328  1.3325
[33 : 48]:	1.3312  1.3276  1.3261  1.3182  1.3070  1.2736  1.2713  1.2654  1.2621  1.2572  1.2383  1.2376  1.2376  1.2309  1.2265  1.2262
[49 : 64]:	1.2261  1.2258  1.2258  1.2257  1.2235  1.2235  1.2213  1.2207  1.2140  1.2108  1.2108  1.2104  1.2072  1.2065  1.2035  1.1986
2024-04-29 15:48:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:48:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #65: GFLOPs: 2297.5840. Time: 89.8003 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #66: GFLOPs: 1600.4212. Time: 128.9184 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #67: GFLOPs: 1629.2864. Time: 126.6344 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #68: GFLOPs: 1629.4887. Time: 126.6187 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #69: GFLOPs: 1542.2082. Time: 133.7846 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #70: GFLOPs: 1653.5710. Time: 124.7746 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #71: GFLOPs: 1653.2622. Time: 124.7979 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #72: GFLOPs: 1656.5701. Time: 124.5487 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #73: GFLOPs: 1542.0737. Time: 133.7963 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #74: GFLOPs: 1542.4638. Time: 133.7624 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #75: GFLOPs: 1643.5769. Time: 125.5333 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #76: GFLOPs: 1653.6956. Time: 124.7652 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #77: GFLOPs: 1644.2369. Time: 125.4830 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #78: GFLOPs: 1533.4057. Time: 134.5526 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #79: GFLOPs: 1542.1603. Time: 133.7888 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #80: GFLOPs: 1653.3709. Time: 124.7897 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #81: GFLOPs: 1533.3007. Time: 134.5618 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #82: GFLOPs: 1533.7436. Time: 134.5230 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #83: GFLOPs: 1650.6556. Time: 124.9950 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #84: GFLOPs: 1656.6122. Time: 124.5456 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #85: GFLOPs: 1437.9799. Time: 143.4816 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #86: GFLOPs: 1656.3178. Time: 124.5677 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #87: GFLOPs: 1533.5116. Time: 134.5433 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #88: GFLOPs: 1656.6624. Time: 124.5418 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #89: GFLOPs: 1437.9607. Time: 143.4836 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #90: GFLOPs: 1656.2694. Time: 124.5713 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #91: GFLOPs: 1653.7899. Time: 124.7581 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #92: GFLOPs: 1435.7144. Time: 143.7080 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #93: GFLOPs: 1435.1712. Time: 143.7624 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #94: GFLOPs: 1427.7664. Time: 144.5080 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #95: GFLOPs: 1438.6956. Time: 143.4103 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #96: GFLOPs: 1438.3141. Time: 143.4483 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #97: GFLOPs: 1656.3068. Time: 124.5685 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #98: GFLOPs: 1438.3643. Time: 143.4433 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #99: GFLOPs: 1424.4361. Time: 144.8459 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #100: GFLOPs: 1434.4005. Time: 143.8397 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #101: GFLOPs: 1522.8838. Time: 135.4822 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #102: GFLOPs: 1537.5293. Time: 134.1917 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #103: GFLOPs: 1390.6844. Time: 148.3613 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #104: GFLOPs: 1537.4046. Time: 134.2026 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #105: GFLOPs: 1537.7658. Time: 134.1711 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #106: GFLOPs: 1561.6613. Time: 132.1181 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #107: GFLOPs: 1543.8772. Time: 133.6400 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #108: GFLOPs: 1664.7877. Time: 123.9340 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #109: GFLOPs: 1654.4913. Time: 124.7052 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #110: GFLOPs: 1663.7067. Time: 124.0145 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #111: GFLOPs: 1543.6356. Time: 133.6609 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #112: GFLOPs: 1543.6322. Time: 133.6612 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #113: GFLOPs: 1653.2853. Time: 124.7962 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #114: GFLOPs: 1660.4025. Time: 124.2613 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #115: GFLOPs: 1649.7553. Time: 125.0632 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #116: GFLOPs: 1648.7698. Time: 125.1380 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #117: GFLOPs: 1664.4488. Time: 123.9592 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #118: GFLOPs: 1647.9328. Time: 125.2015 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #119: GFLOPs: 1544.0325. Time: 133.6265 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #120: GFLOPs: 1663.9906. Time: 123.9933 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #121: GFLOPs: 1664.6723. Time: 123.9425 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #122: GFLOPs: 1648.3408. Time: 125.1705 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #123: GFLOPs: 1654.6159. Time: 124.6958 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #124: GFLOPs: 1441.0860. Time: 143.1724 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #125: GFLOPs: 1547.0304. Time: 133.3676 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #126: GFLOPs: 260.9045. Time: 790.8018 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #127: GFLOPs: 871.3740. Time: 236.7797 us. Best GFLOPs: 7639.1669
2024-04-29 15:49:16 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_conv2d_add_nn_relu_3] Trial #128: GFLOPs: 2040.7642. Time: 101.1012 us. Best GFLOPs: 7639.1669
