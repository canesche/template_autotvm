2024-04-29 11:32:43 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_global_avg_pool2d"
2024-04-29 11:32:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 11:32:43 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 11:32:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 11:32:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(512)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 12:18:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:18:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 12:18:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9202c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b628968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6808a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x131b74e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4b14c78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xca0de38)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b5d6d98)]: 0 failure(s)
2024-04-29 12:18:09 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 12:18:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9202c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b628968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6808a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x131b74e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4b14c78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xca0de38)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b5d6d98)]: 0 failure(s)
2024-04-29 12:18:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9202c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b628968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6808a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x131b74e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4b14c78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xca0de38)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b5d6d98)]: 0 failure(s)
2024-04-29 12:18:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9202c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b628968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6808a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x131b74e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4b14c78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xca0de38)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b5d6d98)]: 0 failure(s)
2024-04-29 12:18:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9202c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b628968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6808a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x131b74e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4b14c78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xca0de38)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b5d6d98)]: 0 failure(s)
2024-04-29 12:18:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9966  0.9953  0.9922  0.9734  0.9660  0.9649  0.9626  0.9601  0.9539  0.9528  0.9510  0.9486  0.9484  0.9405  0.9373  0.9353
[17 : 32]:	0.9349  0.9242  0.9239  0.9228  0.9039  0.9037  0.8943  0.8941  0.8888  0.8870  0.8792  0.8749  0.8746  0.8715  0.8691  0.8579
[33 : 48]:	0.8537  0.8528  0.8523  0.8521  0.8514  0.8443  0.8438  0.8434  0.8409  0.8378  0.8293  0.8291  0.8288  0.8220  0.8193  0.8027
[49 : 64]:	0.8020  0.7967  0.7960  0.7952  0.7904  0.7693  0.7684  0.7659  0.7586  0.7489  0.7451  0.7433  0.7378  0.7235  0.7199  0.7115
2024-04-29 12:18:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:18:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 13.8375. Time: 7.4002 us. Best GFLOPs: 13.8375
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 22.1475. Time: 4.6236 us. Best GFLOPs: 22.1475
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 22.1870. Time: 4.6153 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 5.8632. Time: 17.4649 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 12.5741. Time: 8.1437 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 12.5019. Time: 8.1907 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 9.1357. Time: 11.2088 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 16.5568. Time: 6.1848 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 16.5209. Time: 6.1982 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 5.8769. Time: 17.4242 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 12.4562. Time: 8.2208 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 15.1732. Time: 6.7487 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 9.1262. Time: 11.2205 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 15.1743. Time: 6.7483 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 9.1355. Time: 11.2090 us. Best GFLOPs: 22.1870
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 23.5954. Time: 4.3398 us. Best GFLOPs: 23.5954
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 5.8645. Time: 17.4609 us. Best GFLOPs: 23.5954
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 22.2527. Time: 4.6017 us. Best GFLOPs: 23.5954
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 16.5444. Time: 6.1894 us. Best GFLOPs: 23.5954
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 16.6361. Time: 6.1553 us. Best GFLOPs: 23.5954
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 12.4422. Time: 8.2300 us. Best GFLOPs: 23.5954
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 23.7174. Time: 4.3175 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 9.1265. Time: 11.2200 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 16.7063. Time: 6.1294 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 17.9986. Time: 5.6893 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 13.8600. Time: 7.3881 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 16.6340. Time: 6.1561 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 22.2599. Time: 4.6002 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 16.6244. Time: 6.1596 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 9.1215. Time: 11.2263 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 20.0538. Time: 5.1063 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 15.0904. Time: 6.7858 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 9.1304. Time: 11.2152 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 16.5548. Time: 6.1855 us. Best GFLOPs: 23.7174
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 23.7189. Time: 4.3172 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 16.6246. Time: 6.1595 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 23.6301. Time: 4.3335 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 16.6235. Time: 6.1600 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 9.1532. Time: 11.1874 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 16.5631. Time: 6.1824 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 5.8770. Time: 17.4239 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 18.0230. Time: 5.6816 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 15.0837. Time: 6.7888 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 12.4552. Time: 8.2215 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 5.8705. Time: 17.4432 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 9.1549. Time: 11.1853 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 20.0538. Time: 5.1063 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 14.9751. Time: 6.8380 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 12.4931. Time: 8.1965 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 16.3737. Time: 6.2539 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 5.8631. Time: 17.4650 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 5.8629. Time: 17.4656 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 16.5359. Time: 6.1926 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 23.7153. Time: 4.3179 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 12.5049. Time: 8.1888 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 22.1512. Time: 4.6228 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 18.0170. Time: 5.6835 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 12.5005. Time: 8.1917 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 9.1554. Time: 11.1846 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 15.1018. Time: 6.7806 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 18.0203. Time: 5.6825 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 18.0240. Time: 5.6813 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 17.9058. Time: 5.7188 us. Best GFLOPs: 23.7189
2024-04-29 12:21:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 9.1265. Time: 11.2201 us. Best GFLOPs: 23.7189
