2024-04-29 11:32:35 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_conv2d_add_nn_relu_2"
2024-04-29 11:32:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 11:32:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 11:32:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1792)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(56)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 28])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 11:32:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1792)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(56)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 28])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 11:32:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1792)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(56)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 28])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 11:43:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:43:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 11:43:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 489 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:43:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 983 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:43:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 1473 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:43:48 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-29 11:43:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:43:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:44:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:44:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 11:44:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9990  0.9990  0.9989  0.9984  0.9982  0.9964  0.9963  0.9950  0.9944  0.9940  0.9939  0.9937  0.9922  0.9916  0.9901
[17 : 32]:	0.9900  0.9895  0.9894  0.9891  0.9880  0.9877  0.9876  0.9873  0.9867  0.9864  0.9854  0.9849  0.9847  0.9839  0.9832  0.9828
[33 : 48]:	0.9821  0.9819  0.9817  0.9811  0.9810  0.9807  0.9794  0.9773  0.9766  0.9760  0.9749  0.9731  0.9696  0.9694  0.9690  0.9681
[49 : 64]:	0.9675  0.9669  0.9659  0.9638  0.9636  0.9636  0.9618  0.9617  0.9608  0.9601  0.9595  0.9579  0.9572  0.9571  0.9570  0.9552
2024-04-29 11:44:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:44:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #1: GFLOPs: 31.4372. Time: 3281.5236 us. Best GFLOPs: 31.4372
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 4, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #3: GFLOPs: 162.1567. Time: 636.1862 us. Best GFLOPs: 162.1567
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #4: GFLOPs: 2670.0842. Time: 38.6362 us. Best GFLOPs: 2670.0842
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #5: GFLOPs: 474.9438. Time: 217.2086 us. Best GFLOPs: 2670.0842
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #6: GFLOPs: 214.8673. Time: 480.1188 us. Best GFLOPs: 2670.0842
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #7: GFLOPs: 4524.1309. Time: 22.8026 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #8: GFLOPs: 956.2956. Time: 107.8765 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #9: GFLOPs: 421.1948. Time: 244.9267 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #10: GFLOPs: 2379.8007. Time: 43.3489 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #11: GFLOPs: 89.6825. Time: 1150.3011 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #12: GFLOPs: 1003.5294. Time: 102.7990 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #13: GFLOPs: 421.3672. Time: 244.8265 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #14: GFLOPs: 1499.1124. Time: 68.8153 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #15: GFLOPs: 1198.9451. Time: 86.0439 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #16: GFLOPs: 363.4904. Time: 283.8090 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #17: GFLOPs: 25.6806. Time: 4017.1109 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #18: GFLOPs: 624.6897. Time: 165.1410 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #19: GFLOPs: 130.7268. Time: 789.1411 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #20: GFLOPs: 217.7648. Time: 473.7306 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #21: GFLOPs: 79.4202. Time: 1298.9373 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #22: GFLOPs: 1310.4061. Time: 78.7251 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #23: GFLOPs: 33.5271. Time: 3076.9648 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #24: GFLOPs: 881.0914. Time: 117.0842 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #25: GFLOPs: 2603.2660. Time: 39.6279 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #26: GFLOPs: 3.1637. Time: 32608.2573 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #27: GFLOPs: 34.4459. Time: 2994.8988 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #28: GFLOPs: 3303.0381. Time: 31.2324 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 1, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #30: GFLOPs: 595.7543. Time: 173.1617 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #31: GFLOPs: 666.9398. Time: 154.6794 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #32: GFLOPs: 421.5310. Time: 244.7313 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #33: GFLOPs: 106.1624. Time: 971.7362 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #34: GFLOPs: 2344.8412. Time: 43.9952 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #35: GFLOPs: 9.0339. Time: 11419.4200 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #36: GFLOPs: 15.6474. Time: 6592.8959 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #37: GFLOPs: 2619.3834. Time: 39.3840 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #38: GFLOPs: 1151.2188. Time: 89.6110 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #39: GFLOPs: 321.3987. Time: 320.9778 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #40: GFLOPs: 496.0061. Time: 207.9850 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #41: GFLOPs: 413.4562. Time: 249.5110 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #42: GFLOPs: 37.3878. Time: 2759.2371 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #43: GFLOPs: 1063.8432. Time: 96.9709 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #44: GFLOPs: 498.7708. Time: 206.8322 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #45: GFLOPs: 243.0726. Time: 424.4076 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #46: GFLOPs: 3264.6973. Time: 31.5992 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #47: GFLOPs: 904.6094. Time: 114.0402 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #48: GFLOPs: 1120.3343. Time: 92.0813 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #49: GFLOPs: 1096.8102. Time: 94.0563 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #50: GFLOPs: 80.0982. Time: 1287.9425 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #51: GFLOPs: 471.6998. Time: 218.7023 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #52: GFLOPs: 663.3632. Time: 155.5134 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #53: GFLOPs: 467.2721. Time: 220.7747 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #54: GFLOPs: 59.6880. Time: 1728.3530 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #55: GFLOPs: 350.1916. Time: 294.5869 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #56: GFLOPs: 887.5205. Time: 116.2360 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #57: GFLOPs: 912.8764. Time: 113.0075 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #58: GFLOPs: 188.3777. Time: 547.6330 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #59: GFLOPs: 1133.7530. Time: 90.9915 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #60: GFLOPs: 1490.1572. Time: 69.2288 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #61: GFLOPs: 71.8310. Time: 1436.1747 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #62: GFLOPs: 2861.9921. Time: 36.0455 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #63: GFLOPs: 12.2126. Time: 8447.1467 us. Best GFLOPs: 4524.1309
2024-04-29 12:20:33 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #64: GFLOPs: 2014.6707. Time: 51.2053 us. Best GFLOPs: 4524.1309
2024-04-29 14:16:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:16:36 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 14:16:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 438 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:16:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 870 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:16:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 1309 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:16:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 1747 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:16:44 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 14:16:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:16:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:16:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:17:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbefb178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0890a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc6b7c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1321a708)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe07fe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb338)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc6f8df8)]: 0 failure(s)
2024-04-29 14:17:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8069  1.5790  1.5790  1.5359  1.5232  1.4975  1.4305  1.4096  1.3502  1.3334  1.3293  1.3124  1.3084  1.3053  1.2991  1.2842
[17 : 32]:	1.2838  1.2806  1.2788  1.2785  1.2776  1.2772  1.2762  1.2666  1.2390  1.2377  1.2233  1.2181  1.2169  1.2153  1.2147  1.2069
[33 : 48]:	1.2068  1.2017  1.1975  1.1937  1.1876  1.1846  1.1778  1.1726  1.1515  1.1490  1.1377  1.1375  1.1319  1.1169  1.1142  1.1141
[49 : 64]:	1.1122  1.1093  1.1039  1.1037  1.1037  1.1022  1.0968  1.0960  1.0915  1.0910  1.0905  1.0852  1.0849  1.0807  1.0732  1.0728
2024-04-29 14:17:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:17:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #65: GFLOPs: 2826.5996. Time: 36.4968 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #66: GFLOPs: 2359.0320. Time: 43.7306 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #67: GFLOPs: 2494.2503. Time: 41.3599 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #68: GFLOPs: 1453.4914. Time: 70.9752 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #69: GFLOPs: 2931.3345. Time: 35.1928 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #70: GFLOPs: 1690.8490. Time: 61.0119 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #71: GFLOPs: 873.8374. Time: 118.0561 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #72: GFLOPs: 1670.6876. Time: 61.7481 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #73: GFLOPs: 620.4389. Time: 166.2724 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #74: GFLOPs: 620.4399. Time: 166.2721 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #75: GFLOPs: 609.2651. Time: 169.3218 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #76: GFLOPs: 3098.1599. Time: 33.2978 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #77: GFLOPs: 1945.1062. Time: 53.0366 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #78: GFLOPs: 2900.2868. Time: 35.5695 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #79: GFLOPs: 2896.4634. Time: 35.6165 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #80: GFLOPs: 3095.3540. Time: 33.3280 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #81: GFLOPs: 3091.1799. Time: 33.3730 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #82: GFLOPs: 3091.4968. Time: 33.3695 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #83: GFLOPs: 3088.9165. Time: 33.3974 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #84: GFLOPs: 620.5277. Time: 166.2486 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #85: GFLOPs: 2896.8872. Time: 35.6113 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #86: GFLOPs: 606.8566. Time: 169.9938 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #87: GFLOPs: 4214.7363. Time: 24.4765 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #88: GFLOPs: 4184.6673. Time: 24.6523 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #89: GFLOPs: 2792.3427. Time: 36.9446 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #90: GFLOPs: 3169.6781. Time: 32.5465 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #91: GFLOPs: 3105.1770. Time: 33.2225 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #92: GFLOPs: 242.4211. Time: 425.5482 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #93: GFLOPs: 3363.3694. Time: 30.6722 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #94: GFLOPs: 2978.5618. Time: 34.6348 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #95: GFLOPs: 2072.8842. Time: 49.7673 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #96: GFLOPs: 3012.8969. Time: 34.2401 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #97: GFLOPs: 3143.8119. Time: 32.8143 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #98: GFLOPs: 3099.1955. Time: 33.2867 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #99: GFLOPs: 3098.9127. Time: 33.2897 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #100: GFLOPs: 2969.5859. Time: 34.7395 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #101: GFLOPs: 2909.1449. Time: 35.4612 us. Best GFLOPs: 4524.1309
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #102: GFLOPs: 4535.3074. Time: 22.7464 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #103: GFLOPs: 238.5329. Time: 432.4849 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #104: GFLOPs: 3318.2622. Time: 31.0891 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #105: GFLOPs: 1204.6563. Time: 85.6359 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #106: GFLOPs: 2837.7114. Time: 36.3539 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #107: GFLOPs: 736.5572. Time: 140.0595 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #108: GFLOPs: 4345.2187. Time: 23.7415 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #109: GFLOPs: 675.7200. Time: 152.6695 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #110: GFLOPs: 4154.6594. Time: 24.8304 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #111: GFLOPs: 704.5536. Time: 146.4216 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #112: GFLOPs: 4085.2790. Time: 25.2521 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #113: GFLOPs: 704.5489. Time: 146.4226 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #114: GFLOPs: 4203.5358. Time: 24.5417 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #115: GFLOPs: 4338.8945. Time: 23.7761 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #116: GFLOPs: 247.5755. Time: 416.6884 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #117: GFLOPs: 247.5659. Time: 416.7047 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #118: GFLOPs: 1525.8430. Time: 67.6097 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #119: GFLOPs: 2060.1099. Time: 50.0759 us. Best GFLOPs: 4535.3074
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #120: GFLOPs: 5516.1369. Time: 18.7018 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #121: GFLOPs: 5514.9144. Time: 18.7060 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #122: GFLOPs: 3840.7582. Time: 26.8598 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #123: GFLOPs: 5454.1197. Time: 18.9145 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #124: GFLOPs: 4202.3552. Time: 24.5486 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #125: GFLOPs: 4193.1008. Time: 24.6028 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #126: GFLOPs: 652.5236. Time: 158.0967 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #127: GFLOPs: 28.1206. Time: 3668.5532 us. Best GFLOPs: 5516.1369
2024-04-29 14:18:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #128: GFLOPs: 69.9247. Time: 1475.3280 us. Best GFLOPs: 5516.1369
