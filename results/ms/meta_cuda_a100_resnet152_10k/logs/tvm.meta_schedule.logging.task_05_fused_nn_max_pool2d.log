2024-04-29 11:32:34 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_max_pool2d"
2024-04-29 11:32:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-04-29 11:32:34 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 11:32:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
2024-04-29 11:32:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                            v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(4) + rv0_rv1_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(4) + rv0_rv1_fused_1) % T.int64(3))
                            T.where(rv0_rv1_fused_0 * T.int64(4) + rv0_rv1_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
2024-04-29 11:40:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:40:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 11:40:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13182b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b637f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcb3e198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x162fd598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x186e4808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb708)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b637a98)]: 0 failure(s)
2024-04-29 11:40:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 11:40:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13182b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b637f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcb3e198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x162fd598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x186e4808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb708)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b637a98)]: 0 failure(s)
2024-04-29 11:40:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13182b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b637f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcb3e198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x162fd598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x186e4808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb708)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b637a98)]: 0 failure(s)
2024-04-29 11:40:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13182b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b637f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcb3e198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x162fd598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x186e4808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb708)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b637a98)]: 0 failure(s)
2024-04-29 11:40:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13182b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1b637f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcb3e198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x162fd598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x186e4808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1b6eb708)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1b637a98)]: 0 failure(s)
2024-04-29 11:40:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9987  0.9927  0.9858  0.9811  0.9789  0.9713  0.9709  0.9678  0.9513  0.9315  0.9083  0.8824  0.8706  0.8395  0.8281  0.7986
[17 : 32]:	0.7899  0.7864  0.7834  0.7800  0.7705  0.7679  0.7133  0.6913  0.6874  0.6808  0.6764  0.6659  0.6435  0.6339  0.6035  0.6015
[33 : 48]:	0.5898  0.5679  0.5639  0.5441  0.5350  0.5140  0.5092  0.5071  0.5063  0.4261  0.3323  0.3263  0.3261  0.3193  0.3138  0.3015
[49 : 64]:	0.3007  0.2980  0.2885  0.2773  0.2767  0.2557  0.2489  0.2394  0.2200  0.2154  0.1746  0.1482  0.1452  0.1364  0.1345  0.1095
2024-04-29 11:40:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:40:50 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_max_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(128) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(128) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(128) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.enter_postproc()
b21 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b21, ann_key="meta_schedule.unroll_explicit")
b22, = sch.get_child_blocks(b21)
l23, l24, l25 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l23, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l23, ann_key="pragma_unroll_explicit", ann_val=1)
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #2: GFLOPs: 11.8737. Time: 152.1290 us. Best GFLOPs: 11.8737
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #3: GFLOPs: 11.9145. Time: 151.6076 us. Best GFLOPs: 11.9145
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #4: GFLOPs: 11.8736. Time: 152.1303 us. Best GFLOPs: 11.9145
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #5: GFLOPs: 430.3335. Time: 4.1975 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #6: GFLOPs: 238.1511. Time: 7.5848 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #7: GFLOPs: 11.8774. Time: 152.0815 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #8: GFLOPs: 11.8890. Time: 151.9333 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #9: GFLOPs: 396.5845. Time: 4.5547 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #10: GFLOPs: 4.2552. Time: 424.5046 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #11: GFLOPs: 11.8829. Time: 152.0113 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #12: GFLOPs: 8.6196. Time: 209.5603 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #13: GFLOPs: 4.2562. Time: 424.3995 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #14: GFLOPs: 11.9105. Time: 151.6592 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #15: GFLOPs: 8.6198. Time: 209.5560 us. Best GFLOPs: 430.3335
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #16: GFLOPs: 441.3908. Time: 4.0924 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #17: GFLOPs: 11.8857. Time: 151.9758 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #18: GFLOPs: 397.3164. Time: 4.5463 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #19: GFLOPs: 396.0424. Time: 4.5610 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #20: GFLOPs: 415.3516. Time: 4.3489 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #21: GFLOPs: 415.2586. Time: 4.3499 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #22: GFLOPs: 401.4739. Time: 4.4993 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #23: GFLOPs: 11.8832. Time: 152.0074 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #24: GFLOPs: 415.3007. Time: 4.3495 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #25: GFLOPs: 395.9730. Time: 4.5618 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #26: GFLOPs: 11.9199. Time: 151.5394 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #27: GFLOPs: 11.8839. Time: 151.9990 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #28: GFLOPs: 348.2446. Time: 5.1870 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #29: GFLOPs: 348.2460. Time: 5.1870 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #30: GFLOPs: 11.8837. Time: 152.0008 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #31: GFLOPs: 4.2563. Time: 424.3914 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #32: GFLOPs: 11.8951. Time: 151.8555 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #33: GFLOPs: 8.6199. Time: 209.5532 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #34: GFLOPs: 11.8942. Time: 151.8675 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #35: GFLOPs: 11.8854. Time: 151.9796 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #36: GFLOPs: 348.2947. Time: 5.1862 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #37: GFLOPs: 8.6194. Time: 209.5657 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #38: GFLOPs: 11.9105. Time: 151.6594 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #39: GFLOPs: 11.8677. Time: 152.2058 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #40: GFLOPs: 397.2730. Time: 4.5468 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #41: GFLOPs: 11.9121. Time: 151.6387 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #42: GFLOPs: 241.1580. Time: 7.4903 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #43: GFLOPs: 415.4077. Time: 4.3483 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #44: GFLOPs: 348.2802. Time: 5.1864 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #45: GFLOPs: 396.0084. Time: 4.5614 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #46: GFLOPs: 11.9126. Time: 151.6323 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #47: GFLOPs: 4.2562. Time: 424.4046 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #48: GFLOPs: 238.3034. Time: 7.5800 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #49: GFLOPs: 8.6193. Time: 209.5680 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #50: GFLOPs: 11.9207. Time: 151.5288 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #51: GFLOPs: 11.9230. Time: 151.4995 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #52: GFLOPs: 401.4416. Time: 4.4996 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #53: GFLOPs: 11.8804. Time: 152.0436 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #54: GFLOPs: 401.4346. Time: 4.4997 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #55: GFLOPs: 238.2710. Time: 7.5810 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #56: GFLOPs: 11.8306. Time: 152.6832 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #57: GFLOPs: 11.8851. Time: 151.9831 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #58: GFLOPs: 401.4509. Time: 4.4995 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #59: GFLOPs: 395.8887. Time: 4.5627 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #60: GFLOPs: 420.4920. Time: 4.2958 us. Best GFLOPs: 441.3908
2024-04-29 12:20:31 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d] Trial #61: GFLOPs: 441.1380. Time: 4.0947 us. Best GFLOPs: 441.3908
