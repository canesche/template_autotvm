2024-04-28 19:52:42 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_conv2d_add_nn_relu_1"
2024-04-28 19:52:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(114), T.int64(114)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:52:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:52:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(1568), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(408576)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(12768))
                                    v2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(12768) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(114), dj_0 + ax0_ax1_ax2_ax3_fused % T.int64(112))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(96)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), dj_0)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(392) * T.int64(8) + c_3 * T.int64(4) + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(392) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(392) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 56, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 16, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:52:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(1568), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(408576)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(12768))
                                    v2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(12768) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + ax0_ax1_ax2_ax3_fused % T.int64(112))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(96)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(392) * T.int64(8) + c_3 * T.int64(4) + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(392) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(392) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 56, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 16, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:52:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(1568), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(408576)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(12768))
                                    v2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(12768) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + ax0_ax1_ax2_ax3_fused % T.int64(112))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(96)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(392) * T.int64(8) + c_3 * T.int64(4) + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(392) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(392) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(392) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 56, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 16, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:57:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:57:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:57:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 508 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 1007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 1509 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2513 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 3016 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:30 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-28 19:57:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 19:57:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9987  0.9978  0.9967  0.9961  0.9952  0.9943  0.9939  0.9930  0.9926  0.9924  0.9894  0.9885  0.9879  0.9861  0.9827
[17 : 32]:	0.9816  0.9815  0.9809  0.9800  0.9797  0.9797  0.9791  0.9791  0.9782  0.9774  0.9770  0.9770  0.9768  0.9762  0.9760  0.9759
[33 : 48]:	0.9755  0.9746  0.9741  0.9729  0.9720  0.9711  0.9696  0.9690  0.9687  0.9683  0.9671  0.9656  0.9651  0.9644  0.9644  0.9627
[49 : 64]:	0.9625  0.9621  0.9615  0.9612  0.9612  0.9607  0.9591  0.9590  0.9588  0.9581  0.9572  0.9571  0.9569  0.9566  0.9564  0.9559
2024-04-28 19:57:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:57:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(224) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(4) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(224) // T.int64(28) * T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(504))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(4) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(504) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4032))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(448), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(24))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(224) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(4) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(224) // T.int64(28) * T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(224) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(4) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(224) // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 2, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 8, 2, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 448, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 448, 2], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b111)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b113)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b151)
b168 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(16) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(8) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(16) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(54)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(324))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(324) // T.int64(18))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(288))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(16) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(8) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(16) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(16) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(16) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 4, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 4])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 16, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 64, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #3: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(8) + c_3_init * T.int64(8) + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(56) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(96)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(336))
                                    v2 = T.axis.spatial(T.int64(114), di_0 + b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(336) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(48))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(8) + c_3 * T.int64(8) + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(56) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(56) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 8])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 4, 14, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #4: GFLOPs: 446.1294. Time: 17.9951 us. Best GFLOPs: 446.1294
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #5: GFLOPs: 58.1646. Time: 138.0247 us. Best GFLOPs: 446.1294
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #6: GFLOPs: 480.1485. Time: 16.7202 us. Best GFLOPs: 480.1485
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #7: GFLOPs: 144.5212. Time: 55.5501 us. Best GFLOPs: 480.1485
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #8: GFLOPs: 393.5994. Time: 20.3968 us. Best GFLOPs: 480.1485
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #9: GFLOPs: 421.3133. Time: 19.0551 us. Best GFLOPs: 480.1485
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #10: GFLOPs: 139.7673. Time: 57.4395 us. Best GFLOPs: 480.1485
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #11: GFLOPs: 984.3358. Time: 8.1559 us. Best GFLOPs: 984.3358
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #12: GFLOPs: 365.2055. Time: 21.9826 us. Best GFLOPs: 984.3358
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #13: GFLOPs: 1139.7748. Time: 7.0436 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #14: GFLOPs: 27.9030. Time: 287.7165 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #15: GFLOPs: 171.5408. Time: 46.8003 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #16: GFLOPs: 811.3274. Time: 9.8951 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #17: GFLOPs: 108.8817. Time: 73.7328 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #18: GFLOPs: 459.7452. Time: 17.4622 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #19: GFLOPs: 457.0128. Time: 17.5666 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #20: GFLOPs: 77.9751. Time: 102.9580 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #21: GFLOPs: 893.7350. Time: 8.9827 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #22: GFLOPs: 315.4525. Time: 25.4497 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #23: GFLOPs: 132.8831. Time: 60.4152 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #24: GFLOPs: 457.1693. Time: 17.5606 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #25: GFLOPs: 309.4230. Time: 25.9456 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #26: GFLOPs: 420.1930. Time: 19.1059 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #27: GFLOPs: 247.5245. Time: 32.4338 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #28: GFLOPs: 61.7934. Time: 129.9194 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #29: GFLOPs: 964.5524. Time: 8.3232 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #30: GFLOPs: 363.9862. Time: 22.0562 us. Best GFLOPs: 1139.7748
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #31: GFLOPs: 1285.4815. Time: 6.2453 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #32: GFLOPs: 305.1139. Time: 26.3120 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #33: GFLOPs: 357.6672. Time: 22.4459 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #34: GFLOPs: 1273.3086. Time: 6.3050 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #35: GFLOPs: 829.1101. Time: 9.6829 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #36: GFLOPs: 137.2221. Time: 58.5048 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #37: GFLOPs: 729.0036. Time: 11.0125 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #38: GFLOPs: 328.5972. Time: 24.4316 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #39: GFLOPs: 125.1916. Time: 64.1270 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #40: GFLOPs: 368.9955. Time: 21.7568 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #41: GFLOPs: 280.2382. Time: 28.6476 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #42: GFLOPs: 328.7772. Time: 24.4182 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #43: GFLOPs: 1103.7384. Time: 7.2736 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #44: GFLOPs: 90.4411. Time: 88.7668 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #45: GFLOPs: 363.7122. Time: 22.0728 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #46: GFLOPs: 364.2520. Time: 22.0401 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #47: GFLOPs: 470.4633. Time: 17.0644 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #48: GFLOPs: 534.7570. Time: 15.0127 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #49: GFLOPs: 377.6154. Time: 21.2601 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #50: GFLOPs: 421.1214. Time: 19.0638 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #51: GFLOPs: 346.4509. Time: 23.1726 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #52: GFLOPs: 467.8427. Time: 17.1600 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #53: GFLOPs: 47.7916. Time: 167.9825 us. Best GFLOPs: 1285.4815
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #54: GFLOPs: 1399.4961. Time: 5.7365 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #55: GFLOPs: 60.4533. Time: 132.7995 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #56: GFLOPs: 144.2857. Time: 55.6407 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #57: GFLOPs: 583.2342. Time: 13.7649 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #58: GFLOPs: 108.5171. Time: 73.9806 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #59: GFLOPs: 821.4799. Time: 9.7728 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #60: GFLOPs: 813.3182. Time: 9.8709 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #61: GFLOPs: 123.6633. Time: 64.9195 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #62: GFLOPs: 254.1822. Time: 31.5843 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #63: GFLOPs: 254.6448. Time: 31.5269 us. Best GFLOPs: 1399.4961
2024-04-28 21:19:16 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #64: GFLOPs: 458.1454. Time: 17.5232 us. Best GFLOPs: 1399.4961
2024-04-28 23:09:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:09:03 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-28 23:09:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 443 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 887 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 1330 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 1770 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2214 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2655 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:16 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-28 23:09:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-28 23:09:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9827  0.9736  0.9736  0.9590  0.9314  0.9299  0.9264  0.9264  0.9240  0.9240  0.9161  0.9149  0.9149  0.9149  0.9071  0.9071
[17 : 32]:	0.9061  0.9029  0.9029  0.8970  0.8958  0.8938  0.8938  0.8924  0.8924  0.8924  0.8912  0.8826  0.8824  0.8658  0.8658  0.8647
[33 : 48]:	0.8608  0.8561  0.8556  0.8538  0.8538  0.8517  0.8517  0.8517  0.8511  0.8511  0.8505  0.8496  0.8484  0.8422  0.8396  0.8386
[49 : 64]:	0.8370  0.8369  0.8364  0.8357  0.8350  0.8326  0.8317  0.8309  0.8285  0.8277  0.8237  0.8237  0.8197  0.8193  0.8192  0.8188
2024-04-28 23:09:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:09:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #65: GFLOPs: 1399.6861. Time: 5.7357 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #66: GFLOPs: 1244.5705. Time: 6.4505 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #67: GFLOPs: 1244.3133. Time: 6.4519 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #68: GFLOPs: 1389.7672. Time: 5.7766 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #69: GFLOPs: 1323.8057. Time: 6.0645 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #70: GFLOPs: 1345.0488. Time: 5.9687 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #71: GFLOPs: 1302.4252. Time: 6.1640 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #72: GFLOPs: 1299.6237. Time: 6.1773 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #73: GFLOPs: 1318.9647. Time: 6.0867 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #74: GFLOPs: 1318.9522. Time: 6.0868 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #75: GFLOPs: 1287.8992. Time: 6.2335 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #76: GFLOPs: 1203.3615. Time: 6.6714 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #77: GFLOPs: 1201.9799. Time: 6.6791 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #78: GFLOPs: 1201.1253. Time: 6.6839 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #79: GFLOPs: 1273.4253. Time: 6.3044 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #80: GFLOPs: 1276.2718. Time: 6.2903 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #81: GFLOPs: 1294.5500. Time: 6.2015 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #82: GFLOPs: 955.7258. Time: 8.4001 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #83: GFLOPs: 956.7200. Time: 8.3913 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #84: GFLOPs: 1252.4419. Time: 6.4100 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #85: GFLOPs: 1288.3199. Time: 6.2315 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #86: GFLOPs: 941.5758. Time: 8.5263 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #87: GFLOPs: 939.5798. Time: 8.5444 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #88: GFLOPs: 1286.4439. Time: 6.2406 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #89: GFLOPs: 1284.1224. Time: 6.2519 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #90: GFLOPs: 1284.4059. Time: 6.2505 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #91: GFLOPs: 1184.2753. Time: 6.7790 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #92: GFLOPs: 938.2596. Time: 8.5564 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #93: GFLOPs: 1288.3593. Time: 6.2313 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #94: GFLOPs: 1344.5704. Time: 5.9708 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #95: GFLOPs: 1344.6398. Time: 5.9705 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #96: GFLOPs: 1288.4026. Time: 6.2311 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #97: GFLOPs: 1079.5812. Time: 7.4364 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #98: GFLOPs: 946.9850. Time: 8.4776 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #99: GFLOPs: 1170.4938. Time: 6.8588 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #100: GFLOPs: 968.8937. Time: 8.2859 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #101: GFLOPs: 968.7909. Time: 8.2868 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #102: GFLOPs: 967.4560. Time: 8.2982 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #103: GFLOPs: 967.5036. Time: 8.2978 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #104: GFLOPs: 968.8015. Time: 8.2867 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #105: GFLOPs: 1106.1194. Time: 7.2580 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #106: GFLOPs: 1105.9964. Time: 7.2588 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #107: GFLOPs: 955.9992. Time: 8.3977 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #108: GFLOPs: 951.3436. Time: 8.4388 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #109: GFLOPs: 955.9736. Time: 8.3979 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #110: GFLOPs: 1109.6442. Time: 7.2349 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #111: GFLOPs: 1342.8607. Time: 5.9784 us. Best GFLOPs: 1399.6861
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #112: GFLOPs: 1400.3922. Time: 5.7328 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #113: GFLOPs: 912.7970. Time: 8.7951 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #114: GFLOPs: 954.1598. Time: 8.4139 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #115: GFLOPs: 929.4464. Time: 8.6376 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #116: GFLOPs: 904.4483. Time: 8.8763 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #117: GFLOPs: 959.0004. Time: 8.3714 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #118: GFLOPs: 1101.7427. Time: 7.2868 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #119: GFLOPs: 1339.4661. Time: 5.9936 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #120: GFLOPs: 1340.4544. Time: 5.9891 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #121: GFLOPs: 950.2259. Time: 8.4487 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #122: GFLOPs: 916.3449. Time: 8.7611 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #123: GFLOPs: 1094.5678. Time: 7.3345 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #124: GFLOPs: 1093.8317. Time: 7.3395 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #125: GFLOPs: 1012.3051. Time: 7.9306 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #126: GFLOPs: 740.7183. Time: 10.8383 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #127: GFLOPs: 30.3191. Time: 264.7885 us. Best GFLOPs: 1400.3922
2024-04-28 23:10:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #128: GFLOPs: 365.5151. Time: 21.9640 us. Best GFLOPs: 1400.3922
2024-04-29 01:21:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:21:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:21:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:21:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:21:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 1208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:21:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 1613 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2016 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2418 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 2824 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 3225 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:05 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-29 01:22:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 59 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4590ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4291bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x429a3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44b38c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33d0b98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4299b58)]: 56 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x41e2cc8)]: 0 failure(s)
2024-04-29 01:22:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0016  0.9941  0.9875  0.9875  0.9856  0.9834  0.9760  0.9749  0.9726  0.9690  0.9690  0.9670  0.9641  0.9619  0.9619  0.9523
[17 : 32]:	0.9514  0.9466  0.9459  0.9424  0.9414  0.9414  0.9357  0.9347  0.9278  0.9278  0.9278  0.9267  0.9258  0.9217  0.9204  0.9199
[33 : 48]:	0.9181  0.9121  0.9121  0.9117  0.9098  0.9082  0.9082  0.9076  0.9076  0.9076  0.9076  0.9076  0.9064  0.9063  0.9062  0.9062
[49 : 64]:	0.9061  0.9056  0.9045  0.9045  0.9044  0.9022  0.9011  0.9004  0.9003  0.8989  0.8989  0.8989  0.8936  0.8925  0.8918  0.8888
2024-04-29 01:22:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:22:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #129: GFLOPs: 1321.8581. Time: 6.0734 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #130: GFLOPs: 1324.2505. Time: 6.0624 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #131: GFLOPs: 1379.9295. Time: 5.8178 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #132: GFLOPs: 1380.0318. Time: 5.8174 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #133: GFLOPs: 1308.1159. Time: 6.1372 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #134: GFLOPs: 1379.5605. Time: 5.8194 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #135: GFLOPs: 1322.7576. Time: 6.0693 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #136: GFLOPs: 1321.6834. Time: 6.0742 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #137: GFLOPs: 1322.5380. Time: 6.0703 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #138: GFLOPs: 1307.6487. Time: 6.1394 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #139: GFLOPs: 1307.5935. Time: 6.1396 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #140: GFLOPs: 1064.6825. Time: 7.5404 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #141: GFLOPs: 1308.9407. Time: 6.1333 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #142: GFLOPs: 1380.0706. Time: 5.8172 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #143: GFLOPs: 1379.8311. Time: 5.8182 us. Best GFLOPs: 1400.3922
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #144: GFLOPs: 1442.2988. Time: 5.5662 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #145: GFLOPs: 1440.9581. Time: 5.5714 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #146: GFLOPs: 1324.2429. Time: 6.0625 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #147: GFLOPs: 1416.5234. Time: 5.6675 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #148: GFLOPs: 1302.7708. Time: 6.1624 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #149: GFLOPs: 1271.9741. Time: 6.3116 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #150: GFLOPs: 1269.7784. Time: 6.3225 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #151: GFLOPs: 1436.1193. Time: 5.5902 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #152: GFLOPs: 1225.2657. Time: 6.5522 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #153: GFLOPs: 1269.3898. Time: 6.3244 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #154: GFLOPs: 1271.6470. Time: 6.3132 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #155: GFLOPs: 1271.9153. Time: 6.3119 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #156: GFLOPs: 1320.3077. Time: 6.0805 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #157: GFLOPs: 1223.1938. Time: 6.5633 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #158: GFLOPs: 1204.4792. Time: 6.6653 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #159: GFLOPs: 1257.1679. Time: 6.3859 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #160: GFLOPs: 1421.4282. Time: 5.6480 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #161: GFLOPs: 1265.9802. Time: 6.3415 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #162: GFLOPs: 1263.1082. Time: 6.3559 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #163: GFLOPs: 1262.9475. Time: 6.3567 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #164: GFLOPs: 1273.7058. Time: 6.3030 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #165: GFLOPs: 1308.8536. Time: 6.1337 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #166: GFLOPs: 1302.3887. Time: 6.1642 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #167: GFLOPs: 1301.1664. Time: 6.1700 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #168: GFLOPs: 1274.3303. Time: 6.2999 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #169: GFLOPs: 1274.2394. Time: 6.3004 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #170: GFLOPs: 1273.7965. Time: 6.3025 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #171: GFLOPs: 1299.8427. Time: 6.1763 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #172: GFLOPs: 1299.2483. Time: 6.1791 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #173: GFLOPs: 1322.3654. Time: 6.0711 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #174: GFLOPs: 1269.2152. Time: 6.3253 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #175: GFLOPs: 1226.2449. Time: 6.5469 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #176: GFLOPs: 1222.1688. Time: 6.5688 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #177: GFLOPs: 1100.2485. Time: 7.2967 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #178: GFLOPs: 1139.1548. Time: 7.0475 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #179: GFLOPs: 1319.8656. Time: 6.0826 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #180: GFLOPs: 1320.4939. Time: 6.0797 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #181: GFLOPs: 1269.2411. Time: 6.3252 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #182: GFLOPs: 1071.7151. Time: 7.4909 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #183: GFLOPs: 1303.7026. Time: 6.1580 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #184: GFLOPs: 1254.6526. Time: 6.3987 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #185: GFLOPs: 1121.9882. Time: 7.1553 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #186: GFLOPs: 1181.0003. Time: 6.7978 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #187: GFLOPs: 1180.5884. Time: 6.8001 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #188: GFLOPs: 1313.0518. Time: 6.1141 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #189: GFLOPs: 1111.9258. Time: 7.2201 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #190: GFLOPs: 562.8176. Time: 14.2642 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #191: GFLOPs: 1273.9328. Time: 6.3019 us. Best GFLOPs: 1442.2988
2024-04-29 01:23:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #192: GFLOPs: 329.1314. Time: 24.3920 us. Best GFLOPs: 1442.2988
