2024-04-28 19:52:53 [INFO] [task_scheduler.cc:160] Initializing Task #35: "fused_nn_softmax"
2024-04-28 19:52:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-28 19:52:53 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-28 19:52:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(64) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(64) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-28 19:52:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(32)):
                    for k_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(32) + k_1)
                            T.where(k_0 * T.int64(32) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-28 19:52:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(4)):
                    for ax1_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(256) + ax1_1)
                            T.where(ax1_0 * T.int64(256) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(4)):
                    for i1_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(256) + i1_1)
                            T.where(i1_0 * T.int64(256) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-28 19:52:53 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(4)):
                    for ax1_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(256) + ax1_1)
                            T.where(ax1_0 * T.int64(256) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(4)):
                    for ax1_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(256) + ax1_1)
                            T.where(ax1_0 * T.int64(256) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(4)):
                    for i1_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(256) + i1_1)
                            T.where(i1_0 * T.int64(256) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-28 21:17:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:17:06 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:17:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-28 21:17:07 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:17:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-28 21:17:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-28 21:17:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-28 21:17:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-28 21:17:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9921  0.9921  0.9856  0.9845  0.9813  0.9769  0.9696  0.9647  0.9561  0.9447  0.9419  0.9385  0.9377  0.9365  0.9360
[17 : 32]:	0.9301  0.9262  0.9220  0.9206  0.9181  0.9166  0.9161  0.9059  0.9029  0.8999  0.8961  0.8960  0.8942  0.8882  0.8864  0.8792
[33 : 48]:	0.8763  0.8728  0.8619  0.8611  0.8607  0.8496  0.8393  0.8381  0.8345  0.8340  0.8337  0.8303  0.8269  0.8194  0.8191  0.8140
[49 : 64]:	0.8130  0.8081  0.8023  0.8001  0.7949  0.7947  0.7932  0.7900  0.7847  0.7468  0.7409  0.7381  0.7362  0.7323  0.7287  0.7263
2024-04-28 21:17:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:17:09 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:121] [Task #35: fused_nn_softmax] Trial #1: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                with T.block("T_softmax_maxelem_init"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(T_softmax_maxelem[v_i0])
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                for k in range(T.int64(1000)):
                    with T.block("T_softmax_maxelem_update"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k)
                        T.reads(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                with T.block("T_softmax_expsum_init"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(T_softmax_expsum[v_i0])
                    T_softmax_expsum[v_i0] = T.float32(0)
                for k in range(T.int64(1000)):
                    with T.block("T_softmax_expsum_update"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k)
                        T.reads(T_softmax_expsum[v_i0], p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
        for i0_i1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for i0_i1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_softmax_norm"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1)
                    T.where(i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1 < T.int64(1000))
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24, b25 = sch.get_child_blocks(b22)
l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30, l31 = sch.get_loops(block=b24)
sch.annotate(block_or_loop=l29, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l29, ann_key="pragma_unroll_explicit", ann_val=1)
l32, l33 = sch.get_loops(block=b25)
b34 = sch.get_block(name="T_softmax_maxelem", func_name="main")
l35, l36, l37 = sch.get_loops(block=b34)
b38 = sch.decompose_reduction(block=b34, loop=l37)
b39 = sch.get_block(name="T_softmax_expsum", func_name="main")
l40, l41, l42 = sch.get_loops(block=b39)
b43 = sch.decompose_reduction(block=b39, loop=l42)
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #2: GFLOPs: 0.2253. Time: 17.7552 us. Best GFLOPs: 0.2253
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #3: GFLOPs: 0.1094. Time: 36.5580 us. Best GFLOPs: 0.2253
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #4: GFLOPs: 0.2785. Time: 14.3604 us. Best GFLOPs: 0.2785
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #5: GFLOPs: 0.1070. Time: 37.3789 us. Best GFLOPs: 0.2785
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #6: GFLOPs: 0.0959. Time: 41.7140 us. Best GFLOPs: 0.2785
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #7: GFLOPs: 1.1228. Time: 3.5624 us. Best GFLOPs: 1.1228
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #8: GFLOPs: 0.1080. Time: 37.0528 us. Best GFLOPs: 1.1228
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #9: GFLOPs: 0.2581. Time: 15.4991 us. Best GFLOPs: 1.1228
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #10: GFLOPs: 0.0959. Time: 41.7242 us. Best GFLOPs: 1.1228
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #11: GFLOPs: 1.1231. Time: 3.5617 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #12: GFLOPs: 0.1080. Time: 37.0465 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #13: GFLOPs: 0.1081. Time: 36.9942 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #14: GFLOPs: 0.2547. Time: 15.7032 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #15: GFLOPs: 0.2377. Time: 16.8302 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #16: GFLOPs: 0.1316. Time: 30.3913 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #17: GFLOPs: 0.1094. Time: 36.5481 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #18: GFLOPs: 0.1087. Time: 36.7869 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #19: GFLOPs: 0.0866. Time: 46.1734 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #20: GFLOPs: 0.1535. Time: 26.0644 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #21: GFLOPs: 0.1096. Time: 36.5004 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #22: GFLOPs: 0.1060. Time: 37.7296 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #23: GFLOPs: 0.2516. Time: 15.8974 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #24: GFLOPs: 0.1465. Time: 27.3059 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #25: GFLOPs: 0.0869. Time: 46.0488 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #26: GFLOPs: 1.0592. Time: 3.7764 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #27: GFLOPs: 0.1367. Time: 29.2630 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #28: GFLOPs: 1.1230. Time: 3.5618 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #29: GFLOPs: 0.1199. Time: 33.3664 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #30: GFLOPs: 0.1877. Time: 21.3091 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #31: GFLOPs: 0.1349. Time: 29.6530 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #32: GFLOPs: 0.1566. Time: 25.5446 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #33: GFLOPs: 0.1088. Time: 36.7765 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #34: GFLOPs: 0.1083. Time: 36.9375 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #35: GFLOPs: 0.1553. Time: 25.7572 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #36: GFLOPs: 0.1084. Time: 36.9054 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #37: GFLOPs: 0.1068. Time: 37.4512 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #38: GFLOPs: 0.1927. Time: 20.7524 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #39: GFLOPs: 0.1096. Time: 36.4989 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #40: GFLOPs: 0.1206. Time: 33.1716 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #41: GFLOPs: 1.1229. Time: 3.5622 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #42: GFLOPs: 0.1051. Time: 38.0435 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #43: GFLOPs: 0.1091. Time: 36.6640 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #44: GFLOPs: 0.1092. Time: 36.6341 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #45: GFLOPs: 0.8811. Time: 4.5398 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #46: GFLOPs: 0.1084. Time: 36.8999 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #47: GFLOPs: 0.0866. Time: 46.1785 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #48: GFLOPs: 0.1101. Time: 36.3385 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #49: GFLOPs: 0.1088. Time: 36.7805 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #50: GFLOPs: 0.0869. Time: 46.0469 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #51: GFLOPs: 0.1539. Time: 25.9844 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #52: GFLOPs: 0.1079. Time: 37.0841 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #53: GFLOPs: 0.2600. Time: 15.3829 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #54: GFLOPs: 0.1070. Time: 37.3757 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #55: GFLOPs: 0.1092. Time: 36.6261 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #56: GFLOPs: 0.1509. Time: 26.5117 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #57: GFLOPs: 0.1088. Time: 36.7749 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #58: GFLOPs: 0.1575. Time: 25.3935 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #59: GFLOPs: 0.2515. Time: 15.9047 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #60: GFLOPs: 0.1094. Time: 36.5638 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #61: GFLOPs: 0.1096. Time: 36.5059 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #62: GFLOPs: 0.1350. Time: 29.6308 us. Best GFLOPs: 1.1231
2024-04-28 21:20:42 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #63: GFLOPs: 0.1096. Time: 36.4944 us. Best GFLOPs: 1.1231
2024-04-29 00:32:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:32:44 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 00:32:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-29 00:32:44 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 00:32:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-29 00:32:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-29 00:32:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-29 00:32:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4db46e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4209e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe402fd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4505e38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4277e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x42076f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe5e14f8)]: 0 failure(s)
2024-04-29 00:32:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9620  0.9436  0.9379  0.9105  0.8935  0.8824  0.8120  0.8107  0.8050  0.8029  0.7316  0.7165  0.6818  0.6631  0.5940  0.5304
[17 : 32]:	0.5198  0.5181  0.4421  0.3613  0.3581  0.3464  0.3457  0.3403  0.3335  0.3177  0.3058  0.3014  0.2939  0.2899  0.2845  0.2688
[33 : 48]:	0.2649  0.2632  0.2604  0.2520  0.2367  0.2345  0.2318  0.2305  0.2301  0.2293  0.2271  0.2212  0.2206  0.2145  0.2099  0.2063
[49 : 64]:	0.2058  0.2058  0.2047  0.1978  0.1956  0.1955  0.1950  0.1924  0.1883  0.1847  0.1846  0.1845  0.1823  0.1786  0.1782  0.1777
2024-04-29 00:32:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:32:52 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #64: GFLOPs: 1.1193. Time: 3.5735 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #65: GFLOPs: 1.1197. Time: 3.5725 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #66: GFLOPs: 1.0212. Time: 3.9168 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #67: GFLOPs: 1.0195. Time: 3.9233 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #68: GFLOPs: 1.1196. Time: 3.5727 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #69: GFLOPs: 1.0546. Time: 3.7930 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #70: GFLOPs: 1.0532. Time: 3.7981 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #71: GFLOPs: 1.0532. Time: 3.7981 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #72: GFLOPs: 1.0528. Time: 3.7992 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #73: GFLOPs: 0.8971. Time: 4.4587 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #74: GFLOPs: 0.9197. Time: 4.3491 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #75: GFLOPs: 0.8857. Time: 4.5161 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #76: GFLOPs: 0.8853. Time: 4.5182 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #77: GFLOPs: 0.7061. Time: 5.6653 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #78: GFLOPs: 0.4883. Time: 8.1912 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #79: GFLOPs: 0.6930. Time: 5.7717 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #80: GFLOPs: 0.6929. Time: 5.7726 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #81: GFLOPs: 0.6930. Time: 5.7719 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #82: GFLOPs: 0.4883. Time: 8.1914 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #83: GFLOPs: 0.2581. Time: 15.4994 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #84: GFLOPs: 0.2772. Time: 14.4277 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #85: GFLOPs: 0.2580. Time: 15.5032 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #86: GFLOPs: 0.2501. Time: 15.9930 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #87: GFLOPs: 0.2582. Time: 15.4896 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #88: GFLOPs: 0.2575. Time: 15.5312 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #89: GFLOPs: 0.2580. Time: 15.5059 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #90: GFLOPs: 0.2575. Time: 15.5317 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #91: GFLOPs: 0.2693. Time: 14.8519 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #92: GFLOPs: 0.2574. Time: 15.5406 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #93: GFLOPs: 0.2544. Time: 15.7246 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #94: GFLOPs: 0.2769. Time: 14.4471 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #95: GFLOPs: 0.4754. Time: 8.4138 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #96: GFLOPs: 0.2579. Time: 15.5086 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #97: GFLOPs: 0.2067. Time: 19.3502 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #98: GFLOPs: 0.1866. Time: 21.4335 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #99: GFLOPs: 0.2792. Time: 14.3249 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #100: GFLOPs: 0.4755. Time: 8.4119 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #101: GFLOPs: 0.1089. Time: 36.7149 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #102: GFLOPs: 0.2730. Time: 14.6527 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #103: GFLOPs: 0.1559. Time: 25.6494 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #104: GFLOPs: 0.1555. Time: 25.7163 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #105: GFLOPs: 0.1556. Time: 25.7097 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #106: GFLOPs: 0.1526. Time: 26.2128 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #107: GFLOPs: 0.2020. Time: 19.8048 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #108: GFLOPs: 0.1366. Time: 29.2763 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #109: GFLOPs: 0.1076. Time: 37.1685 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #110: GFLOPs: 0.1556. Time: 25.7115 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #111: GFLOPs: 0.1077. Time: 37.1573 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #112: GFLOPs: 0.1078. Time: 37.1066 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #113: GFLOPs: 0.2017. Time: 19.8291 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #114: GFLOPs: 0.1077. Time: 37.1448 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #115: GFLOPs: 0.1558. Time: 25.6799 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #116: GFLOPs: 0.1650. Time: 24.2446 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #117: GFLOPs: 0.1560. Time: 25.6469 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #118: GFLOPs: 0.1077. Time: 37.1535 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #119: GFLOPs: 0.1076. Time: 37.1640 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #120: GFLOPs: 0.1077. Time: 37.1507 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #121: GFLOPs: 0.1078. Time: 37.1191 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #122: GFLOPs: 0.0721. Time: 55.4535 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #123: GFLOPs: 0.1366. Time: 29.2769 us. Best GFLOPs: 1.1231
2024-04-29 00:34:31 [INFO] [task_scheduler.cc:131] [Task #35: fused_nn_softmax] Trial #124: GFLOPs: 0.1077. Time: 37.1573 us. Best GFLOPs: 1.1231
