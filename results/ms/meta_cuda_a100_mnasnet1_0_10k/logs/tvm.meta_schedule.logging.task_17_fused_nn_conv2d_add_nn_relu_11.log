2024-04-28 19:52:48 [INFO] [task_scheduler.cc:160] Initializing Task #17: "fused_nn_conv2d_add_nn_relu_11"
2024-04-28 19:52:48 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(18), T.int64(18)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(5), T.int64(5)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:52:48 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:52:48 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(38880)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(324))
                                    v2 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(324) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3000)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(15), T.int64(2), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + b_2_c_2_i_2_j_2_fused // T.int64(49) * T.int64(60) + c_3 * T.int64(15) + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(60), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + b_2_c_2_i_2_j_2_fused // T.int64(49) * T.int64(60) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 4, 15])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:52:48 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(38880)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(324))
                                    v2 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(324) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3000)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(15), T.int64(2), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + b_2_c_2_i_2_j_2_fused // T.int64(49) * T.int64(60) + c_3 * T.int64(15) + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_1 * T.int64(5) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(60), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + b_2_c_2_i_2_j_2_fused // T.int64(49) * T.int64(60) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 4, 15])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:52:48 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(38880)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(324))
                                    v2 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(324) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3000)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + ax0_ax1_ax2_ax3_fused // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(15), T.int64(2), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + b_2_c_2_i_2_j_2_fused // T.int64(49) * T.int64(60) + c_3 * T.int64(15) + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_1 * T.int64(5) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(60), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(120) + b_2_c_2_i_2_j_2_fused // T.int64(49) * T.int64(60) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 4, 15])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 20:36:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:36:49 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:36:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:36:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:36:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1492 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:36:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:36:57 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-28 20:37:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 180 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:37:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:37:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:37:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 156 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 20:37:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9982  0.9972  0.9968  0.9966  0.9958  0.9955  0.9954  0.9946  0.9927  0.9926  0.9916  0.9915  0.9902  0.9880  0.9878
[17 : 32]:	0.9873  0.9865  0.9862  0.9824  0.9823  0.9816  0.9808  0.9793  0.9789  0.9773  0.9771  0.9768  0.9766  0.9756  0.9755  0.9750
[33 : 48]:	0.9740  0.9736  0.9735  0.9733  0.9726  0.9725  0.9722  0.9716  0.9709  0.9705  0.9696  0.9692  0.9688  0.9672  0.9655  0.9655
[49 : 64]:	0.9653  0.9646  0.9634  0.9623  0.9623  0.9619  0.9608  0.9606  0.9599  0.9585  0.9584  0.9579  0.9579  0.9576  0.9574  0.9562
2024-04-28 20:37:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:37:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(4) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(198))
                                        v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(198) // T.int64(11))
                                        v3 = T.axis.spatial(T.int64(18), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(11))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3960))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1 < T.int64(500))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(4) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[24, 1, 5, 2, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 70, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 70], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(140), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(20) + b_1_c_1_i_1_j_1_fused * T.int64(10) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3_init * T.int64(7) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(140), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(20) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(324))
                                        v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(324) // T.int64(18))
                                        v3 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(140) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6480))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(140), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(20) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(280) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(25))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(280) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(25) // T.int64(5))
                                        v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(280) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(140) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(500))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(20) + b_1_c_1_i_1_j_1_fused * T.int64(10) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(20) + b_1_c_1_i_1_j_1_fused * T.int64(10) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[24, 2, 5, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 140, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 140, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(4) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(198))
                                        v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(198) // T.int64(11))
                                        v3 = T.axis.spatial(T.int64(18), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(11))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3960))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1 < T.int64(500))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(4) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[24, 1, 5, 2, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 70, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 70], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #4: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(18), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(140), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(40) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3_init * T.int64(7) + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(5), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(140), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(40) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(252))
                                        v2 = T.axis.spatial(T.int64(18), di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(252) // T.int64(18))
                                        v3 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(16) and T.int64(2) <= v3 and v3 < T.int64(16), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(140), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(40) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(5))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), di_0)
                                        v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(560) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(140) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(200))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(40) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3 * T.int64(7) + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(40) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 2, 10, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 140, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 140, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #5: GFLOPs: 27.5607. Time: 177.5052 us. Best GFLOPs: 27.5607
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #6: GFLOPs: 18.7931. Time: 260.3161 us. Best GFLOPs: 27.5607
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #7: GFLOPs: 130.5374. Time: 37.4771 us. Best GFLOPs: 130.5374
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #8: GFLOPs: 220.8399. Time: 22.1525 us. Best GFLOPs: 220.8399
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #9: GFLOPs: 74.8487. Time: 65.3607 us. Best GFLOPs: 220.8399
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #10: GFLOPs: 80.8314. Time: 60.5230 us. Best GFLOPs: 220.8399
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #11: GFLOPs: 131.1306. Time: 37.3075 us. Best GFLOPs: 220.8399
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #12: GFLOPs: 42.0786. Time: 116.2624 us. Best GFLOPs: 220.8399
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #13: GFLOPs: 270.1017. Time: 18.1123 us. Best GFLOPs: 270.1017
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #14: GFLOPs: 382.9168. Time: 12.7760 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #15: GFLOPs: 194.0252. Time: 25.2141 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #16: GFLOPs: 132.3879. Time: 36.9532 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #17: GFLOPs: 157.3114. Time: 31.0986 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #18: GFLOPs: 289.6941. Time: 16.8873 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #19: GFLOPs: 108.4201. Time: 45.1223 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #20: GFLOPs: 355.6501. Time: 13.7555 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #21: GFLOPs: 329.6740. Time: 14.8394 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #22: GFLOPs: 201.7356. Time: 24.2504 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #23: GFLOPs: 180.2628. Time: 27.1390 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #24: GFLOPs: 102.1308. Time: 47.9009 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #25: GFLOPs: 106.4634. Time: 45.9516 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #26: GFLOPs: 189.4492. Time: 25.8231 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #27: GFLOPs: 112.4102. Time: 43.5206 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #28: GFLOPs: 34.4984. Time: 141.8084 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #29: GFLOPs: 310.3803. Time: 15.7618 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #30: GFLOPs: 128.7741. Time: 37.9902 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #31: GFLOPs: 336.2102. Time: 14.5509 us. Best GFLOPs: 382.9168
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #32: GFLOPs: 902.5991. Time: 5.4201 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #33: GFLOPs: 70.6503. Time: 69.2447 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #34: GFLOPs: 427.5887. Time: 11.4413 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #35: GFLOPs: 71.4448. Time: 68.4747 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #36: GFLOPs: 117.5436. Time: 41.6200 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #37: GFLOPs: 315.6432. Time: 15.4990 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #38: GFLOPs: 105.4363. Time: 46.3992 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #39: GFLOPs: 420.8297. Time: 11.6250 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #40: GFLOPs: 55.1311. Time: 88.7369 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #41: GFLOPs: 120.0320. Time: 40.7571 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #42: GFLOPs: 36.7598. Time: 133.0844 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #43: GFLOPs: 40.0807. Time: 122.0578 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #44: GFLOPs: 494.6156. Time: 9.8908 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #45: GFLOPs: 151.9720. Time: 32.1912 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #46: GFLOPs: 30.2707. Time: 161.6137 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #47: GFLOPs: 13.2329. Time: 369.6971 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #48: GFLOPs: 390.3747. Time: 12.5320 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #49: GFLOPs: 290.3800. Time: 16.8474 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #50: GFLOPs: 419.3751. Time: 11.6654 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #51: GFLOPs: 50.9169. Time: 96.0813 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #52: GFLOPs: 382.8606. Time: 12.7779 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #53: GFLOPs: 444.7421. Time: 11.0000 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #54: GFLOPs: 50.7736. Time: 96.3525 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #55: GFLOPs: 290.7499. Time: 16.8260 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #56: GFLOPs: 187.4913. Time: 26.0927 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #57: GFLOPs: 383.5577. Time: 12.7547 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #58: GFLOPs: 70.8493. Time: 69.0502 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #59: GFLOPs: 92.7005. Time: 52.7738 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #60: GFLOPs: 253.6478. Time: 19.2872 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #61: GFLOPs: 28.0061. Time: 174.6818 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #62: GFLOPs: 300.0620. Time: 16.3038 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #63: GFLOPs: 121.9310. Time: 40.1224 us. Best GFLOPs: 902.5991
2024-04-28 21:19:53 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #64: GFLOPs: 114.0756. Time: 42.8852 us. Best GFLOPs: 902.5991
2024-04-28 22:14:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:14:49 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-28 22:14:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 439 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:14:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 879 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:14:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1323 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:14:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1763 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:14:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 2209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:14:59 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-28 22:15:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:15:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:15:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:15:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 22:15:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9932  0.9930  0.9922  0.9760  0.9757  0.9638  0.9575  0.9575  0.9479  0.9476  0.9476  0.9431  0.9268  0.9268  0.9236  0.9217
[17 : 32]:	0.9185  0.9185  0.9129  0.9121  0.9121  0.9047  0.9047  0.8916  0.8913  0.8913  0.8913  0.8795  0.8779  0.8751  0.8751  0.8727
[33 : 48]:	0.8555  0.8555  0.8435  0.8401  0.8394  0.8394  0.8325  0.8323  0.8318  0.8298  0.8292  0.8285  0.8238  0.8229  0.8229  0.8222
[49 : 64]:	0.8215  0.8200  0.8108  0.8099  0.8099  0.8091  0.8040  0.8031  0.8009  0.7994  0.7872  0.7845  0.7749  0.7735  0.7707  0.7695
2024-04-28 22:15:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:15:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #65: GFLOPs: 890.1331. Time: 5.4960 us. Best GFLOPs: 902.5991
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #66: GFLOPs: 890.5897. Time: 5.4932 us. Best GFLOPs: 902.5991
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #67: GFLOPs: 890.5947. Time: 5.4931 us. Best GFLOPs: 902.5991
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #68: GFLOPs: 890.7555. Time: 5.4921 us. Best GFLOPs: 902.5991
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #69: GFLOPs: 890.9950. Time: 5.4907 us. Best GFLOPs: 902.5991
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #70: GFLOPs: 929.9404. Time: 5.2607 us. Best GFLOPs: 929.9404
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #71: GFLOPs: 847.9929. Time: 5.7691 us. Best GFLOPs: 929.9404
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #72: GFLOPs: 848.2473. Time: 5.7674 us. Best GFLOPs: 929.9404
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #73: GFLOPs: 890.8478. Time: 5.4916 us. Best GFLOPs: 929.9404
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #74: GFLOPs: 889.8992. Time: 5.4974 us. Best GFLOPs: 929.9404
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #75: GFLOPs: 890.4219. Time: 5.4942 us. Best GFLOPs: 929.9404
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #76: GFLOPs: 966.7595. Time: 5.0604 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #77: GFLOPs: 934.9132. Time: 5.2327 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #78: GFLOPs: 933.9151. Time: 5.2383 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #79: GFLOPs: 845.6198. Time: 5.7853 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #80: GFLOPs: 552.2862. Time: 8.8580 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #81: GFLOPs: 894.9921. Time: 5.4661 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #82: GFLOPs: 895.5234. Time: 5.4629 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #83: GFLOPs: 934.3011. Time: 5.2362 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #84: GFLOPs: 937.2052. Time: 5.2199 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #85: GFLOPs: 936.6003. Time: 5.2233 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #86: GFLOPs: 843.0739. Time: 5.8028 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #87: GFLOPs: 844.4437. Time: 5.7934 us. Best GFLOPs: 966.7595
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #88: GFLOPs: 987.8947. Time: 4.9521 us. Best GFLOPs: 987.8947
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #89: GFLOPs: 988.0148. Time: 4.9515 us. Best GFLOPs: 988.0148
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #90: GFLOPs: 987.9845. Time: 4.9517 us. Best GFLOPs: 988.0148
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #91: GFLOPs: 988.0427. Time: 4.9514 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #92: GFLOPs: 929.9467. Time: 5.2607 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #93: GFLOPs: 886.5126. Time: 5.5184 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #94: GFLOPs: 890.8786. Time: 5.4914 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #95: GFLOPs: 890.8361. Time: 5.4917 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #96: GFLOPs: 928.8180. Time: 5.2671 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #97: GFLOPs: 893.4862. Time: 5.4754 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #98: GFLOPs: 895.3230. Time: 5.4641 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #99: GFLOPs: 814.7886. Time: 6.0042 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #100: GFLOPs: 883.4276. Time: 5.5377 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #101: GFLOPs: 577.1415. Time: 8.4765 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #102: GFLOPs: 696.5195. Time: 7.0237 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #103: GFLOPs: 881.8344. Time: 5.5477 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #104: GFLOPs: 883.8634. Time: 5.5350 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #105: GFLOPs: 883.7844. Time: 5.5355 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #106: GFLOPs: 890.9809. Time: 5.4908 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #107: GFLOPs: 883.6292. Time: 5.5364 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #108: GFLOPs: 590.2454. Time: 8.2883 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #109: GFLOPs: 966.5689. Time: 5.0614 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #110: GFLOPs: 929.3253. Time: 5.2642 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #111: GFLOPs: 929.3190. Time: 5.2642 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #112: GFLOPs: 881.8154. Time: 5.5478 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #113: GFLOPs: 567.7254. Time: 8.6171 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #114: GFLOPs: 883.3225. Time: 5.5384 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #115: GFLOPs: 551.0215. Time: 8.8783 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #116: GFLOPs: 883.1074. Time: 5.5397 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #117: GFLOPs: 883.0127. Time: 5.5403 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #118: GFLOPs: 893.4980. Time: 5.4753 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #119: GFLOPs: 895.0059. Time: 5.4661 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #120: GFLOPs: 493.4515. Time: 9.9142 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #121: GFLOPs: 587.6044. Time: 8.3256 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #122: GFLOPs: 310.1583. Time: 15.7731 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #123: GFLOPs: 854.8866. Time: 5.7226 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #124: GFLOPs: 303.5048. Time: 16.1189 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #125: GFLOPs: 746.9214. Time: 6.5498 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #126: GFLOPs: 111.3874. Time: 43.9202 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #127: GFLOPs: 187.3281. Time: 26.1155 us. Best GFLOPs: 988.0427
2024-04-28 22:17:22 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #128: GFLOPs: 60.3351. Time: 81.0831 us. Best GFLOPs: 988.0427
2024-04-28 23:27:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:27:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:27:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 2408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:30 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 23:27:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 54 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 41 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 43 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 42 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-28 23:27:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0017  0.9876  0.9818  0.9818  0.9788  0.9779  0.9775  0.9735  0.9694  0.9693  0.9681  0.9681  0.9637  0.9575  0.9561  0.9500
[17 : 32]:	0.9448  0.9448  0.9441  0.9434  0.9434  0.9429  0.9429  0.9427  0.9415  0.9408  0.9393  0.9387  0.9380  0.9368  0.9365  0.9362
[33 : 48]:	0.9356  0.9353  0.9351  0.9338  0.9338  0.9336  0.9336  0.9333  0.9330  0.9329  0.9327  0.9318  0.9317  0.9317  0.9316  0.9306
[49 : 64]:	0.9304  0.9304  0.9304  0.9303  0.9303  0.9303  0.9277  0.9271  0.9250  0.9239  0.9236  0.9224  0.9223  0.9201  0.9201  0.9199
2024-04-28 23:27:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:27:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #129: GFLOPs: 1022.4939. Time: 4.7845 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #130: GFLOPs: 1021.0967. Time: 4.7911 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #131: GFLOPs: 902.3047. Time: 5.4218 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #132: GFLOPs: 903.4231. Time: 5.4151 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #133: GFLOPs: 977.6276. Time: 5.0041 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #134: GFLOPs: 977.7500. Time: 5.0035 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #135: GFLOPs: 976.3840. Time: 5.0105 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #136: GFLOPs: 932.3410. Time: 5.2472 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #137: GFLOPs: 975.4714. Time: 5.0152 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #138: GFLOPs: 975.0424. Time: 5.0174 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #139: GFLOPs: 975.0235. Time: 5.0175 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #140: GFLOPs: 972.7460. Time: 5.0292 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #141: GFLOPs: 972.5236. Time: 5.0304 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #142: GFLOPs: 1002.0427. Time: 4.8822 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #143: GFLOPs: 931.3153. Time: 5.2530 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #144: GFLOPs: 972.2295. Time: 5.0319 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #145: GFLOPs: 942.4688. Time: 5.1908 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #146: GFLOPs: 942.4325. Time: 5.1910 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #147: GFLOPs: 932.4832. Time: 5.2464 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #148: GFLOPs: 932.4862. Time: 5.2464 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #149: GFLOPs: 933.1681. Time: 5.2425 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #150: GFLOPs: 932.5711. Time: 5.2459 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #151: GFLOPs: 932.6131. Time: 5.2456 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #152: GFLOPs: 930.5428. Time: 5.2573 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #153: GFLOPs: 893.5486. Time: 5.4750 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #154: GFLOPs: 940.2685. Time: 5.2029 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #155: GFLOPs: 930.9830. Time: 5.2548 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #156: GFLOPs: 930.5799. Time: 5.2571 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #157: GFLOPs: 890.6021. Time: 5.4931 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #158: GFLOPs: 893.9601. Time: 5.4725 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #159: GFLOPs: 864.4155. Time: 5.6595 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #160: GFLOPs: 891.9939. Time: 5.4845 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #161: GFLOPs: 892.3618. Time: 5.4823 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #162: GFLOPs: 930.6568. Time: 5.2567 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #163: GFLOPs: 968.8395. Time: 5.0495 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #164: GFLOPs: 968.9053. Time: 5.0492 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #165: GFLOPs: 968.8793. Time: 5.0493 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #166: GFLOPs: 933.8318. Time: 5.2388 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #167: GFLOPs: 934.7070. Time: 5.2339 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #168: GFLOPs: 930.2393. Time: 5.2590 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #169: GFLOPs: 939.6587. Time: 5.2063 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #170: GFLOPs: 896.3602. Time: 5.4578 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #171: GFLOPs: 1018.4521. Time: 4.8035 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #172: GFLOPs: 895.1196. Time: 5.4654 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #173: GFLOPs: 942.2756. Time: 5.1919 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #174: GFLOPs: 942.4181. Time: 5.1911 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #175: GFLOPs: 893.0219. Time: 5.4782 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #176: GFLOPs: 972.9776. Time: 5.0280 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #177: GFLOPs: 893.8141. Time: 5.4734 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #178: GFLOPs: 894.5019. Time: 5.4691 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #179: GFLOPs: 893.9594. Time: 5.4725 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #180: GFLOPs: 942.5996. Time: 5.1901 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #181: GFLOPs: 942.1996. Time: 5.1923 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #182: GFLOPs: 892.2967. Time: 5.4827 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #183: GFLOPs: 930.8119. Time: 5.2558 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #184: GFLOPs: 972.2582. Time: 5.0317 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #185: GFLOPs: 973.9633. Time: 5.0229 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #186: GFLOPs: 975.3372. Time: 5.0159 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #187: GFLOPs: 883.3062. Time: 5.5385 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #188: GFLOPs: 866.3343. Time: 5.6470 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #189: GFLOPs: 769.0429. Time: 6.3614 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #190: GFLOPs: 107.5885. Time: 45.4710 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #191: GFLOPs: 69.4860. Time: 70.4049 us. Best GFLOPs: 1022.4939
2024-04-28 23:29:15 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #192: GFLOPs: 300.9989. Time: 16.2531 us. Best GFLOPs: 1022.4939
2024-04-29 00:47:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:47:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:47:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1598 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:18 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 00:47:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 31 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 31 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 43 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 46 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 00:47:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9887  0.9887  0.9780  0.9780  0.9780  0.9767  0.9755  0.9755  0.9674  0.9596  0.9595  0.9572  0.9558  0.9523  0.9500  0.9486
[17 : 32]:	0.9472  0.9468  0.9464  0.9462  0.9459  0.9457  0.9456  0.9456  0.9456  0.9448  0.9448  0.9448  0.9446  0.9446  0.9446  0.9446
[33 : 48]:	0.9439  0.9419  0.9415  0.9414  0.9409  0.9367  0.9366  0.9362  0.9354  0.9353  0.9353  0.9353  0.9347  0.9341  0.9341  0.9331
[49 : 64]:	0.9320  0.9320  0.9315  0.9305  0.9302  0.9299  0.9295  0.9293  0.9287  0.9287  0.9287  0.9259  0.9256  0.9253  0.9228  0.9221
2024-04-29 00:47:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:47:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #193: GFLOPs: 994.2484. Time: 4.9205 us. Best GFLOPs: 1022.4939
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #194: GFLOPs: 994.2115. Time: 4.9206 us. Best GFLOPs: 1022.4939
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #195: GFLOPs: 1040.8974. Time: 4.6999 us. Best GFLOPs: 1040.8974
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #196: GFLOPs: 1041.0172. Time: 4.6994 us. Best GFLOPs: 1041.0172
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #197: GFLOPs: 1040.9991. Time: 4.6995 us. Best GFLOPs: 1041.0172
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #198: GFLOPs: 1038.5375. Time: 4.7106 us. Best GFLOPs: 1041.0172
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #199: GFLOPs: 1041.1188. Time: 4.6989 us. Best GFLOPs: 1041.1188
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #200: GFLOPs: 1041.1910. Time: 4.6986 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #201: GFLOPs: 952.6927. Time: 5.1351 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #202: GFLOPs: 995.5531. Time: 4.9140 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #203: GFLOPs: 994.1972. Time: 4.9207 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #204: GFLOPs: 1024.8618. Time: 4.7735 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #205: GFLOPs: 994.1233. Time: 4.9211 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #206: GFLOPs: 1027.2609. Time: 4.7623 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #207: GFLOPs: 952.7694. Time: 5.1347 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #208: GFLOPs: 952.5931. Time: 5.1356 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #209: GFLOPs: 1010.6090. Time: 4.8408 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #210: GFLOPs: 732.3404. Time: 6.6802 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #211: GFLOPs: 1018.0095. Time: 4.8056 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #212: GFLOPs: 1010.4738. Time: 4.8415 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #213: GFLOPs: 961.5743. Time: 5.0877 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #214: GFLOPs: 990.0641. Time: 4.9413 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #215: GFLOPs: 1014.8979. Time: 4.8203 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #216: GFLOPs: 1014.6930. Time: 4.8213 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #217: GFLOPs: 1014.1994. Time: 4.8237 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #218: GFLOPs: 950.3136. Time: 5.1479 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #219: GFLOPs: 952.8510. Time: 5.1342 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #220: GFLOPs: 997.3973. Time: 4.9049 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #221: GFLOPs: 989.5021. Time: 4.9441 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #222: GFLOPs: 990.7258. Time: 4.9380 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #223: GFLOPs: 989.3825. Time: 4.9447 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #224: GFLOPs: 959.6455. Time: 5.0979 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #225: GFLOPs: 951.4674. Time: 5.1417 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #226: GFLOPs: 982.7434. Time: 4.9781 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #227: GFLOPs: 961.8356. Time: 5.0863 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #228: GFLOPs: 1025.2682. Time: 4.7716 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #229: GFLOPs: 985.6282. Time: 4.9635 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #230: GFLOPs: 879.1583. Time: 5.5646 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #231: GFLOPs: 988.1261. Time: 4.9509 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #232: GFLOPs: 961.4485. Time: 5.0883 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #233: GFLOPs: 968.1989. Time: 5.0528 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #234: GFLOPs: 1039.2540. Time: 4.7074 us. Best GFLOPs: 1041.1910
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #235: GFLOPs: 1042.9107. Time: 4.6909 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #236: GFLOPs: 1042.8598. Time: 4.6911 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #237: GFLOPs: 960.2592. Time: 5.0946 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #238: GFLOPs: 958.1489. Time: 5.1058 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #239: GFLOPs: 957.4460. Time: 5.1096 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #240: GFLOPs: 996.4149. Time: 4.9098 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #241: GFLOPs: 879.5423. Time: 5.5622 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #242: GFLOPs: 879.5276. Time: 5.5623 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #243: GFLOPs: 958.5143. Time: 5.1039 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #244: GFLOPs: 958.2945. Time: 5.1051 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #245: GFLOPs: 936.8162. Time: 5.2221 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #246: GFLOPs: 962.9005. Time: 5.0806 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #247: GFLOPs: 993.9381. Time: 4.9220 us. Best GFLOPs: 1042.9107
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #248: GFLOPs: 1043.1558. Time: 4.6898 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #249: GFLOPs: 976.8575. Time: 5.0081 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #250: GFLOPs: 977.1577. Time: 5.0065 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #251: GFLOPs: 976.6300. Time: 5.0092 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #252: GFLOPs: 950.5111. Time: 5.1469 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #253: GFLOPs: 954.9849. Time: 5.1228 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #254: GFLOPs: 593.2270. Time: 8.2467 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #255: GFLOPs: 292.5468. Time: 16.7227 us. Best GFLOPs: 1043.1558
2024-04-29 00:49:10 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #256: GFLOPs: 344.3086. Time: 14.2086 us. Best GFLOPs: 1043.1558
2024-04-29 01:47:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:47:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:47:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:47:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 799 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:47:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:47:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 1602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:47:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 2001 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:47:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 2404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:47:54 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 01:47:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 38 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:48:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 60 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:48:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:48:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4d8ae68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4202958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4202c88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x45166a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47f75a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x429d078)]: 51 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4202c58)]: 0 failure(s)
2024-04-29 01:48:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0720  1.0711  1.0711  1.0711  1.0651  1.0646  1.0634  1.0634  1.0625  1.0616  1.0616  1.0368  1.0368  1.0244  0.9904  0.9893
[17 : 32]:	0.9883  0.9883  0.9880  0.9880  0.9880  0.9864  0.9859  0.9859  0.9839  0.9803  0.9768  0.9768  0.9768  0.9768  0.9738  0.9738
[33 : 48]:	0.9735  0.9733  0.9703  0.9672  0.9665  0.9665  0.9642  0.9626  0.9625  0.9625  0.9621  0.9617  0.9594  0.9594  0.9594  0.9594
[49 : 64]:	0.9589  0.9583  0.9583  0.9577  0.9577  0.9552  0.9528  0.9528  0.9509  0.9498  0.9496  0.9496  0.9496  0.9495  0.9450  0.9450
2024-04-29 01:48:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:48:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #257: GFLOPs: 1035.1672. Time: 4.7260 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #258: GFLOPs: 1039.8630. Time: 4.7046 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #259: GFLOPs: 1039.5835. Time: 4.7059 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #260: GFLOPs: 1039.4539. Time: 4.7065 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #261: GFLOPs: 1035.1202. Time: 4.7262 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #262: GFLOPs: 1039.9567. Time: 4.7042 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #263: GFLOPs: 1020.7793. Time: 4.7926 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #264: GFLOPs: 1020.8043. Time: 4.7925 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #265: GFLOPs: 1020.1850. Time: 4.7954 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #266: GFLOPs: 1021.7648. Time: 4.7880 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #267: GFLOPs: 1021.7724. Time: 4.7879 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #268: GFLOPs: 937.6113. Time: 5.2177 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #269: GFLOPs: 937.5465. Time: 5.2180 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #270: GFLOPs: 1035.5392. Time: 4.7243 us. Best GFLOPs: 1043.1558
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #271: GFLOPs: 1063.7605. Time: 4.5989 us. Best GFLOPs: 1063.7605
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #272: GFLOPs: 936.5173. Time: 5.2238 us. Best GFLOPs: 1063.7605
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #273: GFLOPs: 1064.0443. Time: 4.5977 us. Best GFLOPs: 1064.0443
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #274: GFLOPs: 1064.7321. Time: 4.5947 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #275: GFLOPs: 1035.5248. Time: 4.7243 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #276: GFLOPs: 1039.2398. Time: 4.7074 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #277: GFLOPs: 1038.8934. Time: 4.7090 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #278: GFLOPs: 1032.2039. Time: 4.7395 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #279: GFLOPs: 1017.7623. Time: 4.8068 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #280: GFLOPs: 1017.8661. Time: 4.8063 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #281: GFLOPs: 1029.9575. Time: 4.7499 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #282: GFLOPs: 937.7214. Time: 5.2171 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #283: GFLOPs: 1042.5327. Time: 4.6926 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #284: GFLOPs: 1042.8264. Time: 4.6913 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #285: GFLOPs: 1042.6848. Time: 4.6919 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #286: GFLOPs: 1042.8234. Time: 4.6913 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #287: GFLOPs: 1064.2977. Time: 4.5966 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #288: GFLOPs: 1064.2152. Time: 4.5970 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #289: GFLOPs: 1016.9009. Time: 4.8109 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #290: GFLOPs: 1012.7606. Time: 4.8305 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #291: GFLOPs: 1007.4854. Time: 4.8558 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #292: GFLOPs: 922.7295. Time: 5.3018 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #293: GFLOPs: 1021.7424. Time: 4.7881 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #294: GFLOPs: 1021.7438. Time: 4.7880 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #295: GFLOPs: 1016.5918. Time: 4.8123 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #296: GFLOPs: 1018.2718. Time: 4.8044 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #297: GFLOPs: 1003.7678. Time: 4.8738 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #298: GFLOPs: 1017.3012. Time: 4.8090 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #299: GFLOPs: 1016.6367. Time: 4.8121 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #300: GFLOPs: 986.9287. Time: 4.9570 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #301: GFLOPs: 1012.7725. Time: 4.8305 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #302: GFLOPs: 1010.1183. Time: 4.8432 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #303: GFLOPs: 944.3446. Time: 5.1805 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #304: GFLOPs: 939.1918. Time: 5.2089 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #305: GFLOPs: 985.5021. Time: 4.9641 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #306: GFLOPs: 1016.7609. Time: 4.8115 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #307: GFLOPs: 1015.3454. Time: 4.8182 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #308: GFLOPs: 943.3708. Time: 5.1858 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #309: GFLOPs: 935.9540. Time: 5.2269 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #310: GFLOPs: 1015.2983. Time: 4.8184 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #311: GFLOPs: 941.2441. Time: 5.1975 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #312: GFLOPs: 939.9135. Time: 5.2049 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #313: GFLOPs: 944.4605. Time: 5.1798 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #314: GFLOPs: 973.5917. Time: 5.0249 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #315: GFLOPs: 863.9966. Time: 5.6622 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #316: GFLOPs: 866.5702. Time: 5.6454 us. Best GFLOPs: 1064.7321
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #317: GFLOPs: 1098.4783. Time: 4.4536 us. Best GFLOPs: 1098.4783
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #318: GFLOPs: 28.3942. Time: 172.2944 us. Best GFLOPs: 1098.4783
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #319: GFLOPs: 200.6730. Time: 24.3788 us. Best GFLOPs: 1098.4783
2024-04-29 01:49:42 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_conv2d_add_nn_relu_11] Trial #320: GFLOPs: 233.6385. Time: 20.9390 us. Best GFLOPs: 1098.4783
