2024-04-28 19:52:44 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_conv2d_add_nn_relu_4"
2024-04-28 19:52:44 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(72), T.int64(58), T.int64(58)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(72), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:52:44 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:52:44 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(40368)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3364))
                                    v2 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(3364) // T.int64(58))
                                    v3 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(58))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(108)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(56), T.int64(14), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(6) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(56), i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused % T.int64(4) * T.int64(14) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(56), ax2)
                                v3 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 2, 1, 6, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 56, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 1, 14, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:52:44 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(40368)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3364))
                                    v2 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(3364) // T.int64(58))
                                    v3 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(58))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(108)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(56), T.int64(14), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(6) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(56), i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused % T.int64(4) * T.int64(14) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(56), ax2)
                                v3 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 2, 1, 6, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 56, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 1, 14, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:52:44 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(40368)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3364))
                                    v2 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(3364) // T.int64(58))
                                    v3 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(58))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(108)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(56), T.int64(14), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(6) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(56), i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused % T.int64(4) * T.int64(14) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(56), ax2)
                                v3 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 2, 1, 6, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 56, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 1, 14, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 20:08:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:08:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:08:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 497 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 995 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1493 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1993 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:34 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-28 20:08:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 20:08:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9995  0.9987  0.9985  0.9984  0.9967  0.9962  0.9945  0.9944  0.9942  0.9931  0.9930  0.9919  0.9911  0.9900
[17 : 32]:	0.9896  0.9885  0.9883  0.9873  0.9856  0.9853  0.9842  0.9841  0.9838  0.9834  0.9831  0.9825  0.9817  0.9813  0.9812  0.9800
[33 : 48]:	0.9795  0.9780  0.9766  0.9764  0.9753  0.9750  0.9749  0.9746  0.9746  0.9740  0.9738  0.9732  0.9731  0.9725  0.9713  0.9711
[49 : 64]:	0.9708  0.9706  0.9702  0.9697  0.9679  0.9668  0.9663  0.9663  0.9659  0.9640  0.9635  0.9621  0.9616  0.9611  0.9608  0.9605
2024-04-28 20:08:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:08:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #1: GFLOPs: 238.9351. Time: 18.8999 us. Best GFLOPs: 238.9351
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #2: GFLOPs: 69.8496. Time: 64.6509 us. Best GFLOPs: 238.9351
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #3: GFLOPs: 275.8511. Time: 16.3706 us. Best GFLOPs: 275.8511
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #4: GFLOPs: 606.7366. Time: 7.4428 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #5: GFLOPs: 312.7475. Time: 14.4393 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #6: GFLOPs: 334.4205. Time: 13.5035 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #7: GFLOPs: 509.7687. Time: 8.8586 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #8: GFLOPs: 359.6090. Time: 12.5576 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #9: GFLOPs: 237.7211. Time: 18.9964 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #10: GFLOPs: 38.2142. Time: 118.1719 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #11: GFLOPs: 80.6951. Time: 55.9618 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #12: GFLOPs: 445.6973. Time: 10.1321 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #13: GFLOPs: 530.9298. Time: 8.5055 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #14: GFLOPs: 208.8773. Time: 21.6196 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #15: GFLOPs: 169.4028. Time: 26.6574 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #16: GFLOPs: 123.2253. Time: 36.6470 us. Best GFLOPs: 606.7366
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #17: GFLOPs: 724.0204. Time: 6.2372 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #18: GFLOPs: 171.3403. Time: 26.3560 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #19: GFLOPs: 505.4520. Time: 8.9343 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #20: GFLOPs: 107.1919. Time: 42.1286 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #21: GFLOPs: 667.1219. Time: 6.7691 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #22: GFLOPs: 479.5183. Time: 9.4175 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #23: GFLOPs: 356.2987. Time: 12.6743 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #24: GFLOPs: 357.0675. Time: 12.6470 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #25: GFLOPs: 222.6108. Time: 20.2858 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #26: GFLOPs: 292.3591. Time: 15.4462 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #27: GFLOPs: 669.8965. Time: 6.7411 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #28: GFLOPs: 138.4555. Time: 32.6158 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #29: GFLOPs: 166.8084. Time: 27.0720 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #30: GFLOPs: 587.3521. Time: 7.6885 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #31: GFLOPs: 145.6622. Time: 31.0021 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #32: GFLOPs: 171.4887. Time: 26.3332 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #33: GFLOPs: 228.1080. Time: 19.7969 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #34: GFLOPs: 328.5014. Time: 13.7468 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #35: GFLOPs: 429.4961. Time: 10.5143 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #36: GFLOPs: 407.9271. Time: 11.0702 us. Best GFLOPs: 724.0204
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #37: GFLOPs: 971.7726. Time: 4.6470 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #38: GFLOPs: 59.6064. Time: 75.7610 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #39: GFLOPs: 565.0427. Time: 7.9920 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #40: GFLOPs: 46.7606. Time: 96.5737 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #41: GFLOPs: 165.0751. Time: 27.3563 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #42: GFLOPs: 109.0286. Time: 41.4188 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #43: GFLOPs: 292.1740. Time: 15.4560 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #44: GFLOPs: 333.6512. Time: 13.5346 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #45: GFLOPs: 452.7891. Time: 9.9734 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #46: GFLOPs: 451.5225. Time: 10.0014 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #47: GFLOPs: 131.8862. Time: 34.2404 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #48: GFLOPs: 162.6798. Time: 27.7591 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #49: GFLOPs: 108.6682. Time: 41.5562 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #50: GFLOPs: 573.0603. Time: 7.8802 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #51: GFLOPs: 274.1852. Time: 16.4700 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #52: GFLOPs: 642.7460. Time: 7.0259 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #53: GFLOPs: 659.7564. Time: 6.8447 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #54: GFLOPs: 56.8411. Time: 79.4467 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #55: GFLOPs: 142.5265. Time: 31.6842 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #56: GFLOPs: 46.2379. Time: 97.6653 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #57: GFLOPs: 199.8751. Time: 22.5933 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #58: GFLOPs: 474.6277. Time: 9.5145 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #59: GFLOPs: 214.7925. Time: 21.0242 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #60: GFLOPs: 110.6722. Time: 40.8038 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #61: GFLOPs: 540.2994. Time: 8.3580 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #62: GFLOPs: 142.6729. Time: 31.6517 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #63: GFLOPs: 861.9220. Time: 5.2393 us. Best GFLOPs: 971.7726
2024-04-28 21:19:31 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #64: GFLOPs: 69.6591. Time: 64.8277 us. Best GFLOPs: 971.7726
2024-04-28 22:28:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:28:29 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 22:28:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 443 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 881 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1317 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1750 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 2187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:40 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 22:28:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:28:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:29:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 22:29:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9723  0.9622  0.9620  0.9620  0.9620  0.9613  0.9450  0.9165  0.9162  0.9104  0.9104  0.9077  0.9077  0.8974  0.8967  0.8927
[17 : 32]:	0.8894  0.8894  0.8879  0.8869  0.8869  0.8855  0.8747  0.8713  0.8696  0.8696  0.8677  0.8656  0.8587  0.8582  0.8500  0.8499
[33 : 48]:	0.8455  0.8436  0.8432  0.8320  0.8286  0.8286  0.8243  0.8094  0.8087  0.8087  0.8047  0.8021  0.7987  0.7980  0.7977  0.7976
[49 : 64]:	0.7966  0.7942  0.7933  0.7933  0.7893  0.7887  0.7870  0.7866  0.7866  0.7865  0.7862  0.7862  0.7862  0.7859  0.7858  0.7855
2024-04-28 22:29:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:29:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #65: GFLOPs: 962.8480. Time: 4.6901 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #66: GFLOPs: 964.7567. Time: 4.6808 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #67: GFLOPs: 963.9167. Time: 4.6849 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #68: GFLOPs: 964.7144. Time: 4.6810 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #69: GFLOPs: 963.5820. Time: 4.6865 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #70: GFLOPs: 962.9556. Time: 4.6896 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #71: GFLOPs: 949.6374. Time: 4.7553 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #72: GFLOPs: 886.8890. Time: 5.0918 us. Best GFLOPs: 971.7726
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #73: GFLOPs: 973.4688. Time: 4.6389 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #74: GFLOPs: 845.9099. Time: 5.3384 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #75: GFLOPs: 845.5520. Time: 5.3407 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #76: GFLOPs: 847.5904. Time: 5.3279 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #77: GFLOPs: 846.9933. Time: 5.3316 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #78: GFLOPs: 839.6182. Time: 5.3784 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #79: GFLOPs: 880.0059. Time: 5.1316 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #80: GFLOPs: 639.7112. Time: 7.0592 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #81: GFLOPs: 869.0422. Time: 5.1963 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #82: GFLOPs: 875.7397. Time: 5.1566 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #83: GFLOPs: 876.3795. Time: 5.1528 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #84: GFLOPs: 639.6451. Time: 7.0599 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #85: GFLOPs: 639.6980. Time: 7.0593 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #86: GFLOPs: 868.6232. Time: 5.1988 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #87: GFLOPs: 921.0470. Time: 4.9029 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #88: GFLOPs: 916.6938. Time: 4.9262 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #89: GFLOPs: 846.7416. Time: 5.3332 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #90: GFLOPs: 848.9395. Time: 5.3194 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #91: GFLOPs: 923.7817. Time: 4.8884 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #92: GFLOPs: 848.1161. Time: 5.3246 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #93: GFLOPs: 847.8571. Time: 5.3262 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #94: GFLOPs: 964.4405. Time: 4.6823 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #95: GFLOPs: 642.6025. Time: 7.0274 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #96: GFLOPs: 627.3201. Time: 7.1986 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #97: GFLOPs: 583.3473. Time: 7.7413 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #98: GFLOPs: 652.4083. Time: 6.9218 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #99: GFLOPs: 635.6194. Time: 7.1046 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #100: GFLOPs: 642.6980. Time: 7.0264 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #101: GFLOPs: 578.0882. Time: 7.8117 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #102: GFLOPs: 578.4298. Time: 7.8071 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #103: GFLOPs: 576.3951. Time: 7.8346 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #104: GFLOPs: 926.1606. Time: 4.8759 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #105: GFLOPs: 583.3458. Time: 7.7413 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #106: GFLOPs: 584.2785. Time: 7.7289 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #107: GFLOPs: 920.8912. Time: 4.9038 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #108: GFLOPs: 810.7308. Time: 5.5701 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #109: GFLOPs: 706.7192. Time: 6.3899 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #110: GFLOPs: 948.4019. Time: 4.7615 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #111: GFLOPs: 918.4939. Time: 4.9166 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #112: GFLOPs: 768.3801. Time: 5.8771 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #113: GFLOPs: 484.2634. Time: 9.3252 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #114: GFLOPs: 607.4346. Time: 7.4343 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #115: GFLOPs: 441.0420. Time: 10.2390 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #116: GFLOPs: 439.1216. Time: 10.2838 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #117: GFLOPs: 362.8524. Time: 12.4454 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #118: GFLOPs: 769.9387. Time: 5.8652 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #119: GFLOPs: 761.1178. Time: 5.9332 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #120: GFLOPs: 842.9563. Time: 5.3571 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #121: GFLOPs: 844.4309. Time: 5.3478 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #122: GFLOPs: 645.8699. Time: 6.9919 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #123: GFLOPs: 731.0284. Time: 6.1774 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #124: GFLOPs: 730.8497. Time: 6.1789 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #125: GFLOPs: 730.9086. Time: 6.1784 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #126: GFLOPs: 58.6558. Time: 76.9888 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #127: GFLOPs: 498.0692. Time: 9.0667 us. Best GFLOPs: 973.4688
2024-04-28 22:30:37 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #128: GFLOPs: 97.4926. Time: 46.3198 us. Best GFLOPs: 973.4688
2024-04-28 23:42:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:42:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:42:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1207 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1607 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 2412 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 2811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:08 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-28 23:43:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-28 23:43:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0236  1.0230  1.0195  1.0195  1.0179  1.0175  1.0128  1.0128  0.9952  0.9915  0.9915  0.9915  0.9915  0.9874  0.9874  0.9874
[17 : 32]:	0.9854  0.9854  0.9721  0.9721  0.9698  0.9686  0.9686  0.9686  0.9672  0.9665  0.9662  0.9662  0.9662  0.9662  0.9655  0.9625
[33 : 48]:	0.9595  0.9594  0.9582  0.9544  0.9525  0.9524  0.9524  0.9516  0.9511  0.9511  0.9503  0.9473  0.9458  0.9457  0.9457  0.9438
[49 : 64]:	0.9428  0.9418  0.9401  0.9400  0.9393  0.9392  0.9387  0.9384  0.9384  0.9384  0.9347  0.9347  0.9341  0.9325  0.9320  0.9310
2024-04-28 23:43:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:43:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #129: GFLOPs: 939.5332. Time: 4.8065 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #130: GFLOPs: 935.9533. Time: 4.8249 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #131: GFLOPs: 951.3484. Time: 4.7468 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #132: GFLOPs: 951.5628. Time: 4.7457 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #133: GFLOPs: 951.6328. Time: 4.7454 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #134: GFLOPs: 963.2372. Time: 4.6882 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #135: GFLOPs: 939.9226. Time: 4.8045 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #136: GFLOPs: 944.9938. Time: 4.7787 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #137: GFLOPs: 965.7599. Time: 4.6759 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #138: GFLOPs: 963.0337. Time: 4.6892 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #139: GFLOPs: 951.9026. Time: 4.7440 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #140: GFLOPs: 962.2262. Time: 4.6931 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #141: GFLOPs: 951.6777. Time: 4.7451 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #142: GFLOPs: 965.7957. Time: 4.6758 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #143: GFLOPs: 963.1990. Time: 4.6884 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #144: GFLOPs: 963.3161. Time: 4.6878 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #145: GFLOPs: 963.1524. Time: 4.6886 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #146: GFLOPs: 963.1779. Time: 4.6885 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #147: GFLOPs: 966.4802. Time: 4.6725 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #148: GFLOPs: 966.0491. Time: 4.6745 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #149: GFLOPs: 965.7939. Time: 4.6758 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #150: GFLOPs: 964.6947. Time: 4.6811 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #151: GFLOPs: 966.2240. Time: 4.6737 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #152: GFLOPs: 966.0445. Time: 4.6746 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #153: GFLOPs: 964.2232. Time: 4.6834 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #154: GFLOPs: 965.9057. Time: 4.6752 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #155: GFLOPs: 963.7474. Time: 4.6857 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #156: GFLOPs: 965.5200. Time: 4.6771 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #157: GFLOPs: 965.7604. Time: 4.6759 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #158: GFLOPs: 963.6491. Time: 4.6862 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #159: GFLOPs: 963.4095. Time: 4.6874 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #160: GFLOPs: 958.3611. Time: 4.7120 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #161: GFLOPs: 920.3993. Time: 4.9064 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #162: GFLOPs: 799.5879. Time: 5.6477 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #163: GFLOPs: 920.9847. Time: 4.9033 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #164: GFLOPs: 920.6504. Time: 4.9051 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #165: GFLOPs: 922.4298. Time: 4.8956 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #166: GFLOPs: 961.2620. Time: 4.6978 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #167: GFLOPs: 961.8273. Time: 4.6951 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #168: GFLOPs: 878.8553. Time: 5.1383 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #169: GFLOPs: 943.5891. Time: 4.7858 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #170: GFLOPs: 943.7161. Time: 4.7852 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #171: GFLOPs: 808.9188. Time: 5.5826 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #172: GFLOPs: 885.1739. Time: 5.1016 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #173: GFLOPs: 925.9124. Time: 4.8772 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #174: GFLOPs: 832.5719. Time: 5.4240 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #175: GFLOPs: 832.7207. Time: 5.4230 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #176: GFLOPs: 964.6656. Time: 4.6812 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #177: GFLOPs: 918.9880. Time: 4.9139 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #178: GFLOPs: 964.9472. Time: 4.6799 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #179: GFLOPs: 918.8946. Time: 4.9144 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #180: GFLOPs: 922.9640. Time: 4.8928 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #181: GFLOPs: 779.6273. Time: 5.7923 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #182: GFLOPs: 879.8718. Time: 5.1324 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #183: GFLOPs: 952.6532. Time: 4.7403 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #184: GFLOPs: 919.0009. Time: 4.9139 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #185: GFLOPs: 919.5640. Time: 4.9108 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #186: GFLOPs: 919.4656. Time: 4.9114 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #187: GFLOPs: 943.7307. Time: 4.7851 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #188: GFLOPs: 942.3807. Time: 4.7919 us. Best GFLOPs: 973.4688
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #189: GFLOPs: 992.7751. Time: 4.5487 us. Best GFLOPs: 992.7751
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #190: GFLOPs: 127.4388. Time: 35.4354 us. Best GFLOPs: 992.7751
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #191: GFLOPs: 286.8640. Time: 15.7421 us. Best GFLOPs: 992.7751
2024-04-28 23:45:39 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #192: GFLOPs: 166.0234. Time: 27.2000 us. Best GFLOPs: 992.7751
2024-04-29 01:05:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:05:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:05:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:05:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 802 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:05:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1199 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:05:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 1604 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:05:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:05:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 2402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:05:52 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 01:05:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 191 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:06:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 174 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:06:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 173 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:06:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x48db7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x429f488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4293318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x49745a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4aea358)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4212438)]: 167 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4266218)]: 0 failure(s)
2024-04-29 01:06:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0248  0.9904  0.9865  0.9830  0.9826  0.9826  0.9821  0.9809  0.9806  0.9801  0.9788  0.9788  0.9785  0.9775  0.9768  0.9767
[17 : 32]:	0.9761  0.9755  0.9748  0.9748  0.9748  0.9741  0.9738  0.9738  0.9738  0.9735  0.9730  0.9728  0.9724  0.9724  0.9715  0.9715
[33 : 48]:	0.9710  0.9710  0.9699  0.9699  0.9698  0.9695  0.9686  0.9683  0.9679  0.9679  0.9679  0.9677  0.9677  0.9677  0.9675  0.9674
[49 : 64]:	0.9674  0.9671  0.9669  0.9669  0.9665  0.9665  0.9665  0.9665  0.9664  0.9657  0.9655  0.9654  0.9649  0.9648  0.9646  0.9646
2024-04-29 01:06:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:06:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:08:44 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #193: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(288), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(49) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(16) // T.int64(4) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(16) // T.int64(4) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(224) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(58), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), dj_0)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(12))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(49) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(16) // T.int64(4) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(49) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(16) // T.int64(4) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[18, 1, 4, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107 = sch.split(loop=l105, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b112)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b151)
b169 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-29 01:08:44 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #194: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(56) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(56) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) // T.int64(560))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) % T.int64(560) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(58), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(18))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(56) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(56) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(56) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(56) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 1, 3, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 56, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 336], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b79)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 336, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b109)
l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b110)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l126, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l126, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b112)
b149 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b149)
b166 = sch.decompose_reduction(block=b149, loop=l153)
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #195: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(280))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(280) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(58), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[36, 1, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 14, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b79)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b109)
l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b110)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l126, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l126, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b112)
b149 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b149)
b166 = sch.decompose_reduction(block=b149, loop=l153)
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #196: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(280))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(280) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(58), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[36, 1, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 14, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b79)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b109)
l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b110)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l126, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l126, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b112)
b149 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b149)
b166 = sch.decompose_reduction(block=b149, loop=l153)
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #197: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(280))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(280) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(58), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[36, 1, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 14, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b79)
l105, l106 = sch.split(loop=l104, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b109)
l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l124, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l124, ann_key="pragma_unroll_explicit", ann_val=1)
l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b111)
b147 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b147)
b164 = sch.decompose_reduction(block=b147, loop=l151)
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #198: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(56) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(56) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) // T.int64(560))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) % T.int64(560) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(58), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1008) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1008) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(18))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(56) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(56) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(56) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(56) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 1, 3, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 56, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 336], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b79)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 336, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b109)
l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b110)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l126, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l126, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b112)
b149 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b149)
b166 = sch.decompose_reduction(block=b149, loop=l153)
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #199: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(280))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(280) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(58), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[36, 1, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 14, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b79)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b109)
l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b110)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l126, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l126, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b112)
b149 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b149)
b166 = sch.decompose_reduction(block=b149, loop=l153)
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #200: GFLOPs: 942.8254. Time: 4.7897 us. Best GFLOPs: 992.7751
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #201: GFLOPs: 937.1342. Time: 4.8188 us. Best GFLOPs: 992.7751
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #202: GFLOPs: 894.1615. Time: 5.0504 us. Best GFLOPs: 992.7751
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #203: GFLOPs: 889.0730. Time: 5.0793 us. Best GFLOPs: 992.7751
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #204: GFLOPs: 893.0755. Time: 5.0565 us. Best GFLOPs: 992.7751
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #205: GFLOPs: 747.2217. Time: 6.0435 us. Best GFLOPs: 992.7751
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #206: GFLOPs: 994.0655. Time: 4.5428 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #207: GFLOPs: 937.6492. Time: 4.8161 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #208: GFLOPs: 935.5010. Time: 4.8272 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #209: GFLOPs: 984.6443. Time: 4.5863 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #210: GFLOPs: 891.2171. Time: 5.0670 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #211: GFLOPs: 888.5454. Time: 5.0823 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #212: GFLOPs: 938.4672. Time: 4.8119 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #213: GFLOPs: 938.5727. Time: 4.8114 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #214: GFLOPs: 888.9924. Time: 5.0797 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #215: GFLOPs: 895.6323. Time: 5.0421 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #216: GFLOPs: 924.4089. Time: 4.8851 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #217: GFLOPs: 893.9766. Time: 5.0514 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #218: GFLOPs: 947.7358. Time: 4.7649 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #219: GFLOPs: 988.8302. Time: 4.5669 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #220: GFLOPs: 936.1142. Time: 4.8240 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #221: GFLOPs: 940.6518. Time: 4.8008 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #222: GFLOPs: 938.4014. Time: 4.8123 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #223: GFLOPs: 963.7869. Time: 4.6855 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #224: GFLOPs: 962.1406. Time: 4.6935 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #225: GFLOPs: 937.5995. Time: 4.8164 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #226: GFLOPs: 941.2190. Time: 4.7979 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #227: GFLOPs: 936.9262. Time: 4.8198 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #228: GFLOPs: 938.5939. Time: 4.8113 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #229: GFLOPs: 937.9528. Time: 4.8146 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #230: GFLOPs: 937.6208. Time: 4.8163 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #231: GFLOPs: 948.8410. Time: 4.7593 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #232: GFLOPs: 772.4044. Time: 5.8465 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #233: GFLOPs: 927.5093. Time: 4.8688 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #234: GFLOPs: 898.3038. Time: 5.0271 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #235: GFLOPs: 899.1167. Time: 5.0225 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #236: GFLOPs: 938.3119. Time: 4.8127 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #237: GFLOPs: 895.5346. Time: 5.0426 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #238: GFLOPs: 924.2659. Time: 4.8859 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #239: GFLOPs: 938.6819. Time: 4.8108 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #240: GFLOPs: 937.1619. Time: 4.8186 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #241: GFLOPs: 937.9400. Time: 4.8146 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #242: GFLOPs: 937.3709. Time: 4.8176 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #243: GFLOPs: 939.3592. Time: 4.8074 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #244: GFLOPs: 939.3634. Time: 4.8073 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #245: GFLOPs: 942.6607. Time: 4.7905 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #246: GFLOPs: 939.8495. Time: 4.8049 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #247: GFLOPs: 942.8592. Time: 4.7895 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #248: GFLOPs: 895.6061. Time: 5.0422 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #249: GFLOPs: 896.2439. Time: 5.0386 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #250: GFLOPs: 937.7220. Time: 4.8158 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #251: GFLOPs: 937.3822. Time: 4.8175 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #252: GFLOPs: 937.4594. Time: 4.8171 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #253: GFLOPs: 892.1377. Time: 5.0618 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #254: GFLOPs: 392.7042. Time: 11.4993 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #255: GFLOPs: 203.0559. Time: 22.2394 us. Best GFLOPs: 994.0655
2024-04-29 01:08:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #256: GFLOPs: 110.7479. Time: 40.7759 us. Best GFLOPs: 994.0655
