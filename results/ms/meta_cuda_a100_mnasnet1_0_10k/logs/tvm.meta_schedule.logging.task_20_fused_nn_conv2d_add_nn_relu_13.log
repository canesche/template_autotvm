2024-04-28 19:52:49 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_conv2d_add_nn_relu_13"
2024-04-28 19:52:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(16), T.int64(16)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:52:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:52:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(40960)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1440)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + b_1_c_1_i_1_j_1_fused * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(5) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + b_1_c_1_i_1_j_1_fused * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(5) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 8, 4, 5, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:52:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(40960)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1440)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + b_1_c_1_i_1_j_1_fused * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(5) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + b_1_c_1_i_1_j_1_fused * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(5) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 8, 4, 5, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:52:49 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(40960)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1440)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + b_1_c_1_i_1_j_1_fused * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(5) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_0_c_0_i_0_j_0_fused * T.int64(160) + b_1_c_1_i_1_j_1_fused * T.int64(20) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(5) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 8, 4, 5, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 20:44:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:44:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:44:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 485 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:44:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 982 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:44:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 1480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:44:53 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-28 20:44:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 153 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:45:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:45:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:45:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-28 20:45:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9984  0.9977  0.9965  0.9963  0.9962  0.9960  0.9937  0.9934  0.9926  0.9893  0.9883  0.9882  0.9880  0.9867  0.9852
[17 : 32]:	0.9845  0.9833  0.9833  0.9823  0.9821  0.9821  0.9811  0.9810  0.9808  0.9799  0.9795  0.9794  0.9792  0.9767  0.9758  0.9743
[33 : 48]:	0.9739  0.9734  0.9729  0.9727  0.9722  0.9722  0.9717  0.9714  0.9710  0.9705  0.9679  0.9678  0.9658  0.9651  0.9650  0.9648
[49 : 64]:	0.9638  0.9636  0.9624  0.9572  0.9571  0.9571  0.9561  0.9558  0.9546  0.9543  0.9542  0.9541  0.9540  0.9539  0.9536  0.9523
2024-04-28 20:45:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:45:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #1: GFLOPs: 121.7653. Time: 15.4527 us. Best GFLOPs: 121.7653
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #2: GFLOPs: 12.0279. Time: 156.4367 us. Best GFLOPs: 121.7653
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #3: GFLOPs: 260.8629. Time: 7.2130 us. Best GFLOPs: 260.8629
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #4: GFLOPs: 84.0852. Time: 22.3773 us. Best GFLOPs: 260.8629
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #5: GFLOPs: 160.9308. Time: 11.6920 us. Best GFLOPs: 260.8629
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #6: GFLOPs: 178.1533. Time: 10.5617 us. Best GFLOPs: 260.8629
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #7: GFLOPs: 142.9311. Time: 13.1644 us. Best GFLOPs: 260.8629
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #8: GFLOPs: 311.2506. Time: 6.0453 us. Best GFLOPs: 311.2506
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #9: GFLOPs: 208.2773. Time: 9.0341 us. Best GFLOPs: 311.2506
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #10: GFLOPs: 289.7002. Time: 6.4950 us. Best GFLOPs: 311.2506
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #11: GFLOPs: 26.8366. Time: 70.1131 us. Best GFLOPs: 311.2506
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #12: GFLOPs: 351.7049. Time: 5.3499 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #13: GFLOPs: 201.1025. Time: 9.3564 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #14: GFLOPs: 143.1615. Time: 13.1432 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #15: GFLOPs: 24.7605. Time: 75.9919 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #16: GFLOPs: 245.4034. Time: 7.6674 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #17: GFLOPs: 194.2659. Time: 9.6857 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #18: GFLOPs: 104.4749. Time: 18.0101 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #19: GFLOPs: 160.4508. Time: 11.7270 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #20: GFLOPs: 180.8800. Time: 10.4025 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #21: GFLOPs: 301.4248. Time: 6.2424 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #22: GFLOPs: 159.8777. Time: 11.7690 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #23: GFLOPs: 76.6412. Time: 24.5508 us. Best GFLOPs: 351.7049
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #24: GFLOPs: 463.4442. Time: 4.0600 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #25: GFLOPs: 13.8134. Time: 136.2151 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #26: GFLOPs: 300.6901. Time: 6.2576 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #27: GFLOPs: 32.3472. Time: 58.1688 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #28: GFLOPs: 28.8086. Time: 65.3139 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #29: GFLOPs: 16.4477. Time: 114.3987 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #30: GFLOPs: 162.2303. Time: 11.5983 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #31: GFLOPs: 270.1600. Time: 6.9648 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #32: GFLOPs: 86.3326. Time: 21.7948 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #33: GFLOPs: 279.2218. Time: 6.7387 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #34: GFLOPs: 142.2649. Time: 13.2260 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #35: GFLOPs: 8.8293. Time: 213.1076 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #36: GFLOPs: 147.3427. Time: 12.7702 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #37: GFLOPs: 84.0546. Time: 22.3854 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #38: GFLOPs: 13.0264. Time: 144.4450 us. Best GFLOPs: 463.4442
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #39: GFLOPs: 480.7938. Time: 3.9135 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #40: GFLOPs: 161.0643. Time: 11.6823 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #41: GFLOPs: 38.0521. Time: 49.4480 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #42: GFLOPs: 143.6875. Time: 13.0951 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #43: GFLOPs: 39.2701. Time: 47.9143 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #44: GFLOPs: 32.3513. Time: 58.1615 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #45: GFLOPs: 279.1623. Time: 6.7402 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #46: GFLOPs: 374.6054. Time: 5.0229 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #47: GFLOPs: 118.6111. Time: 15.8636 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #48: GFLOPs: 99.6582. Time: 18.8805 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #49: GFLOPs: 24.7639. Time: 75.9815 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #50: GFLOPs: 208.3079. Time: 9.0328 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #51: GFLOPs: 207.7172. Time: 9.0585 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #52: GFLOPs: 202.7448. Time: 9.2806 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #53: GFLOPs: 74.2616. Time: 25.3375 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #54: GFLOPs: 299.7436. Time: 6.2774 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #55: GFLOPs: 140.5616. Time: 13.3863 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #56: GFLOPs: 74.4465. Time: 25.2745 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #57: GFLOPs: 67.7585. Time: 27.7692 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #58: GFLOPs: 202.8871. Time: 9.2741 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #59: GFLOPs: 270.1410. Time: 6.9653 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #60: GFLOPs: 89.5145. Time: 21.0201 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #61: GFLOPs: 243.6254. Time: 7.7233 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #62: GFLOPs: 98.0514. Time: 19.1899 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #63: GFLOPs: 38.5089. Time: 48.8614 us. Best GFLOPs: 480.7938
2024-04-28 21:20:00 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #64: GFLOPs: 39.5313. Time: 47.5978 us. Best GFLOPs: 480.7938
2024-04-29 00:16:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:16:06 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 00:16:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 435 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 869 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 1302 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 1739 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:14 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 00:16:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4202de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe41ace8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe41b228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c92798)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34407c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x41ff088)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x424d7d8)]: 0 failure(s)
2024-04-29 00:16:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0037  0.9865  0.9865  0.9794  0.9670  0.9659  0.9659  0.9518  0.9518  0.9433  0.9433  0.9433  0.9431  0.9427  0.9427  0.9423
[17 : 32]:	0.9396  0.9383  0.9365  0.9356  0.9175  0.9110  0.9083  0.9083  0.9083  0.8878  0.8878  0.8867  0.8857  0.8857  0.8778  0.8741
[33 : 48]:	0.8738  0.8719  0.8714  0.8714  0.8714  0.8678  0.8675  0.8675  0.8610  0.8542  0.8527  0.8522  0.8513  0.8470  0.8416  0.8405
[49 : 64]:	0.8405  0.8405  0.8403  0.8401  0.8401  0.8381  0.8326  0.8322  0.8307  0.8284  0.8254  0.8254  0.8246  0.8240  0.8231  0.8207
2024-04-29 00:16:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:16:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #65: GFLOPs: 353.7479. Time: 5.3190 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #66: GFLOPs: 470.3347. Time: 4.0006 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #67: GFLOPs: 470.5875. Time: 3.9984 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #68: GFLOPs: 471.3276. Time: 3.9921 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #69: GFLOPs: 339.8884. Time: 5.5359 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #70: GFLOPs: 340.2543. Time: 5.5300 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #71: GFLOPs: 340.2980. Time: 5.5293 us. Best GFLOPs: 480.7938
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #72: GFLOPs: 482.1295. Time: 3.9027 us. Best GFLOPs: 482.1295
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #73: GFLOPs: 482.2499. Time: 3.9017 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #74: GFLOPs: 471.3975. Time: 3.9915 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #75: GFLOPs: 471.3123. Time: 3.9923 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #76: GFLOPs: 471.3122. Time: 3.9923 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #77: GFLOPs: 471.1215. Time: 3.9939 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #78: GFLOPs: 470.2417. Time: 4.0013 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #79: GFLOPs: 470.9152. Time: 3.9956 us. Best GFLOPs: 482.2499
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #80: GFLOPs: 528.4105. Time: 3.5609 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #81: GFLOPs: 469.9873. Time: 4.0035 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #82: GFLOPs: 470.8773. Time: 3.9959 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #83: GFLOPs: 498.5402. Time: 3.7742 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #84: GFLOPs: 470.7214. Time: 3.9973 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #85: GFLOPs: 497.2283. Time: 3.7842 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #86: GFLOPs: 474.6295. Time: 3.9644 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #87: GFLOPs: 479.1965. Time: 3.9266 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #88: GFLOPs: 479.1630. Time: 3.9268 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #89: GFLOPs: 498.4941. Time: 3.7746 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #90: GFLOPs: 290.3627. Time: 6.4802 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #91: GFLOPs: 292.3325. Time: 6.4365 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #92: GFLOPs: 286.8664. Time: 6.5592 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #93: GFLOPs: 494.4457. Time: 3.8055 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #94: GFLOPs: 494.7164. Time: 3.8034 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #95: GFLOPs: 498.4024. Time: 3.7753 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #96: GFLOPs: 442.8915. Time: 4.2484 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #97: GFLOPs: 219.1743. Time: 8.5849 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #98: GFLOPs: 498.2219. Time: 3.7766 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #99: GFLOPs: 462.2210. Time: 4.0708 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #100: GFLOPs: 462.0494. Time: 4.0723 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #101: GFLOPs: 463.3961. Time: 4.0605 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #102: GFLOPs: 185.2128. Time: 10.1591 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #103: GFLOPs: 453.8265. Time: 4.1461 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #104: GFLOPs: 463.5482. Time: 4.0591 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #105: GFLOPs: 223.8896. Time: 8.4041 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #106: GFLOPs: 341.0326. Time: 5.5174 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #107: GFLOPs: 247.6660. Time: 7.5973 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #108: GFLOPs: 498.4431. Time: 3.7750 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #109: GFLOPs: 219.8655. Time: 8.5580 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #110: GFLOPs: 292.3701. Time: 6.4357 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #111: GFLOPs: 182.1150. Time: 10.3319 us. Best GFLOPs: 528.4105
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #112: GFLOPs: 540.2310. Time: 3.4830 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #113: GFLOPs: 538.6583. Time: 3.4931 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #114: GFLOPs: 539.1959. Time: 3.4896 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #115: GFLOPs: 255.3967. Time: 7.3674 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #116: GFLOPs: 461.7090. Time: 4.0753 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #117: GFLOPs: 460.6104. Time: 4.0850 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #118: GFLOPs: 481.0944. Time: 3.9111 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #119: GFLOPs: 256.2919. Time: 7.3416 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #120: GFLOPs: 424.5960. Time: 4.4315 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #121: GFLOPs: 290.3491. Time: 6.4805 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #122: GFLOPs: 228.6413. Time: 8.2295 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #123: GFLOPs: 479.3660. Time: 3.9252 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #124: GFLOPs: 479.1982. Time: 3.9266 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #125: GFLOPs: 318.6472. Time: 5.9050 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #126: GFLOPs: 145.0942. Time: 12.9681 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #127: GFLOPs: 162.7166. Time: 11.5637 us. Best GFLOPs: 540.2310
2024-04-29 00:18:03 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #128: GFLOPs: 174.8205. Time: 10.7630 us. Best GFLOPs: 540.2310
