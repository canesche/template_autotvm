2024-04-28 19:52:43 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_conv2d_add_nn_relu_3"
2024-04-28 19:52:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(48), T.int64(114), T.int64(114)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:52:43 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:52:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37620)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(37620) // T.int64(3135))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(56) + di_0 + ax0_ax1_ax2_ax3_fused % T.int64(3135) // T.int64(57))
                                    v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + ax0_ax1_ax2_ax3_fused % T.int64(57))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + i_3 * T.int64(7) + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused * T.int64(14) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 3, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 2, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:52:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37620)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(37620) // T.int64(3135))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(56) + di_0_dj_0_fused + ax0_ax1_ax2_ax3_fused % T.int64(3135) // T.int64(57))
                                    v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + ax0_ax1_ax2_ax3_fused % T.int64(57))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + i_3 * T.int64(7) + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused * T.int64(14) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 3, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 2, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:52:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37620)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(37620) // T.int64(3135))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(56) + di_0_dj_0_fused + ax0_ax1_ax2_ax3_fused % T.int64(3135) // T.int64(57))
                                    v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + ax0_ax1_ax2_ax3_fused % T.int64(57))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + i_3 * T.int64(7) + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused * T.int64(14) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(12) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(4) // T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 3, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 2, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 20:03:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:03:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:03:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 507 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 1017 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 1526 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2035 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2541 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 3051 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 3559 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4070 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4580 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 5091 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 5600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 6108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 6615 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 7123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:03:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 7633 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 8143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 8652 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:02 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 20:04:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 159 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 153 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 20:04:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9989  0.9977  0.9972  0.9970  0.9969  0.9967  0.9966  0.9953  0.9952  0.9944  0.9931  0.9920  0.9914  0.9913  0.9910
[17 : 32]:	0.9910  0.9906  0.9900  0.9892  0.9890  0.9884  0.9877  0.9865  0.9850  0.9848  0.9846  0.9843  0.9839  0.9816  0.9807  0.9801
[33 : 48]:	0.9796  0.9795  0.9792  0.9791  0.9790  0.9780  0.9780  0.9768  0.9763  0.9762  0.9754  0.9734  0.9733  0.9718  0.9716  0.9705
[49 : 64]:	0.9687  0.9686  0.9681  0.9680  0.9679  0.9665  0.9662  0.9655  0.9652  0.9651  0.9648  0.9646  0.9636  0.9636  0.9630  0.9593
2024-04-28 20:04:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:04:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #1: GFLOPs: 193.2350. Time: 15.5798 us. Best GFLOPs: 193.2350
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #2: GFLOPs: 91.6335. Time: 32.8544 us. Best GFLOPs: 193.2350
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #3: GFLOPs: 127.3592. Time: 23.6383 us. Best GFLOPs: 193.2350
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #4: GFLOPs: 275.9839. Time: 10.9085 us. Best GFLOPs: 275.9839
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #5: GFLOPs: 270.2228. Time: 11.1410 us. Best GFLOPs: 275.9839
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #6: GFLOPs: 31.5653. Time: 95.3755 us. Best GFLOPs: 275.9839
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #7: GFLOPs: 18.6728. Time: 161.2268 us. Best GFLOPs: 275.9839
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #8: GFLOPs: 267.7919. Time: 11.2422 us. Best GFLOPs: 275.9839
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #9: GFLOPs: 361.6127. Time: 8.3254 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #10: GFLOPs: 26.9132. Time: 111.8619 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #11: GFLOPs: 134.8109. Time: 22.3317 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #12: GFLOPs: 194.6987. Time: 15.4627 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #13: GFLOPs: 50.3308. Time: 59.8154 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #14: GFLOPs: 206.4616. Time: 14.5817 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #15: GFLOPs: 199.9981. Time: 15.0529 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #16: GFLOPs: 35.9210. Time: 83.8105 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #17: GFLOPs: 230.0116. Time: 13.0887 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #18: GFLOPs: 165.7804. Time: 18.1599 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #19: GFLOPs: 40.3471. Time: 74.6165 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #20: GFLOPs: 52.0053. Time: 57.8894 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #21: GFLOPs: 37.6076. Time: 80.0518 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #22: GFLOPs: 99.1125. Time: 30.3752 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #23: GFLOPs: 181.3512. Time: 16.6007 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #24: GFLOPs: 27.2311. Time: 110.5561 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #25: GFLOPs: 19.5339. Time: 154.1194 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #26: GFLOPs: 227.8081. Time: 13.2153 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #27: GFLOPs: 143.2032. Time: 21.0230 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #28: GFLOPs: 146.5826. Time: 20.5383 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #29: GFLOPs: 102.4370. Time: 29.3894 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #30: GFLOPs: 120.0947. Time: 25.0682 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #31: GFLOPs: 221.4821. Time: 13.5928 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #32: GFLOPs: 232.6739. Time: 12.9390 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #33: GFLOPs: 90.7337. Time: 33.1802 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #34: GFLOPs: 212.6374. Time: 14.1582 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #35: GFLOPs: 178.5605. Time: 16.8602 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #36: GFLOPs: 172.6699. Time: 17.4353 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #37: GFLOPs: 283.4868. Time: 10.6198 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #38: GFLOPs: 286.0023. Time: 10.5263 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #39: GFLOPs: 290.8805. Time: 10.3498 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #40: GFLOPs: 344.2302. Time: 8.7458 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #41: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(3) + c_3_init * T.int64(3) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(40)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(555))
                                        v2 = T.axis.spatial(T.int64(114), di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(555) // T.int64(5))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6660))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(3), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_1_c_1_i_1_j_1_fused + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 2, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #42: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + c_3_init * T.int64(3) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + j_3_init * T.int64(4) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1008) // T.int64(21))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + di_0_dj_0_fused // T.int64(3) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(21) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + di_0_dj_0_fused % T.int64(3) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1008))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2)
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(48))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + j_3 * T.int64(4) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b111)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b113)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b151)
b168 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #43: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(3) + c_3_init * T.int64(3) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + j_3_init * T.int64(4) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(42)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4662) // T.int64(777))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(777) // T.int64(111))
                                    v3 = T.axis.spatial(T.int64(114), dj_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(111))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4662))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2, v3 = T.axis.remap("SS", [di_0, dj_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + j_3 * T.int64(4) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #44: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(7) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(8) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_1_c_1_i_1_j_1_fused * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(57)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(12) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9492) // T.int64(791))
                                        v2 = T.axis.spatial(T.int64(114), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(791) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + dj_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(9492))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), dj_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(7) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(8) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_1_c_1_i_1_j_1_fused * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_1_c_1_i_1_j_1_fused * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 12, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 2, 1, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #45: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(3) + c_3_init * T.int64(3) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3024) // T.int64(63))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(63) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + di_0_dj_0_fused % T.int64(3) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3024))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(144))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b111)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b113)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b151)
b168 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #46: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(565))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(565) // T.int64(113))
                                        v3 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(113))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6780))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(108))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 6, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 14, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #47: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4788) // T.int64(399))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(8) + di_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(399) // T.int64(57))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(57))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_1_c_1_i_1_j_1_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 6, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 2, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 4, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #48: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(24) + c_3_init * T.int64(3) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(28) + b_2_c_2_i_2_j_2_fused // T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(31)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(285))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(285) // T.int64(5))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(216))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(24) + c_3 * T.int64(3) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(28) + b_2_c_2_i_2_j_2_fused // T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(24) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(28) * T.int64(28) + b_2_c_2_i_2_j_2_fused // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 1, 8, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #49: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(294), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(32) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(32) // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1800) // T.int64(225))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(16) + di_0_dj_0_fused // T.int64(3) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(225) // T.int64(15))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + di_0_dj_0_fused % T.int64(3) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(15))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1800))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(8))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(32) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(32) // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(32) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 2, 4, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 8, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 4, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b111)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b113)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b151)
b168 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #50: GFLOPs: 43.4885. Time: 69.2265 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #51: GFLOPs: 168.4972. Time: 17.8671 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #52: GFLOPs: 137.9836. Time: 21.8182 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #53: GFLOPs: 265.3429. Time: 11.3459 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #54: GFLOPs: 281.6140. Time: 10.6904 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #55: GFLOPs: 35.5173. Time: 84.7633 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #56: GFLOPs: 118.4751. Time: 25.4109 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #57: GFLOPs: 195.3625. Time: 15.4101 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #58: GFLOPs: 48.7787. Time: 61.7187 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #59: GFLOPs: 281.1807. Time: 10.7069 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #60: GFLOPs: 287.1588. Time: 10.4840 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #61: GFLOPs: 301.7704. Time: 9.9763 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #62: GFLOPs: 229.8616. Time: 13.0973 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #63: GFLOPs: 34.8177. Time: 86.4663 us. Best GFLOPs: 361.6127
2024-04-28 21:19:26 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #64: GFLOPs: 275.7514. Time: 10.9177 us. Best GFLOPs: 361.6127
2024-04-28 22:35:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:35:24 [INFO] [evolutionary_search.cc:715] Picked top 55 candidate(s) from database
2024-04-28 22:35:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 450 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 903 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 1357 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 1810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2263 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2720 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 3174 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 3627 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4079 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4534 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4988 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 5440 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 5891 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:45 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 22:35:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:35:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 139 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:36:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:36:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-28 22:36:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9545  0.9545  0.9510  0.9510  0.9510  0.9489  0.9480  0.9480  0.9480  0.9477  0.9444  0.9444  0.9420  0.9420  0.9351  0.9345
[17 : 32]:	0.9266  0.9266  0.9124  0.9088  0.9029  0.8904  0.8755  0.8747  0.8747  0.8711  0.8671  0.8650  0.8585  0.8585  0.8585  0.8570
[33 : 48]:	0.8549  0.8486  0.8445  0.8380  0.8344  0.8344  0.8336  0.8336  0.8335  0.8303  0.8263  0.8240  0.8180  0.8157  0.8146  0.8137
[49 : 64]:	0.8136  0.8133  0.8079  0.8079  0.8076  0.8067  0.8054  0.8046  0.8033  0.7973  0.7971  0.7956  0.7943  0.7931  0.7924  0.7916
2024-04-28 22:36:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:36:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #65: GFLOPs: 339.7478. Time: 8.8612 us. Best GFLOPs: 361.6127
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #66: GFLOPs: 348.5430. Time: 8.6376 us. Best GFLOPs: 361.6127
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #67: GFLOPs: 348.1751. Time: 8.6467 us. Best GFLOPs: 361.6127
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #68: GFLOPs: 340.3231. Time: 8.8462 us. Best GFLOPs: 361.6127
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #69: GFLOPs: 347.5333. Time: 8.6627 us. Best GFLOPs: 361.6127
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #70: GFLOPs: 375.3568. Time: 8.0205 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #71: GFLOPs: 345.3732. Time: 8.7168 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #72: GFLOPs: 345.2546. Time: 8.7198 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #73: GFLOPs: 347.8348. Time: 8.6551 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #74: GFLOPs: 333.3263. Time: 9.0319 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #75: GFLOPs: 348.5794. Time: 8.6367 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #76: GFLOPs: 348.3191. Time: 8.6431 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #77: GFLOPs: 360.7504. Time: 8.3453 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #78: GFLOPs: 359.6616. Time: 8.3705 us. Best GFLOPs: 375.3568
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #79: GFLOPs: 390.6008. Time: 7.7075 us. Best GFLOPs: 390.6008
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #80: GFLOPs: 348.1888. Time: 8.6463 us. Best GFLOPs: 390.6008
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #81: GFLOPs: 369.0416. Time: 8.1578 us. Best GFLOPs: 390.6008
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #82: GFLOPs: 377.4168. Time: 7.9768 us. Best GFLOPs: 390.6008
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #83: GFLOPs: 358.0086. Time: 8.4092 us. Best GFLOPs: 390.6008
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #84: GFLOPs: 400.2871. Time: 7.5210 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #85: GFLOPs: 345.8283. Time: 8.7054 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #86: GFLOPs: 358.7879. Time: 8.3909 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #87: GFLOPs: 355.3880. Time: 8.4712 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #88: GFLOPs: 267.4149. Time: 11.2580 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #89: GFLOPs: 267.4284. Time: 11.2574 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #90: GFLOPs: 378.1937. Time: 7.9604 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #91: GFLOPs: 134.8350. Time: 22.3277 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #92: GFLOPs: 396.9901. Time: 7.5835 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #93: GFLOPs: 396.6507. Time: 7.5900 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #94: GFLOPs: 396.7219. Time: 7.5886 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #95: GFLOPs: 397.5162. Time: 7.5734 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #96: GFLOPs: 359.0985. Time: 8.3837 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #97: GFLOPs: 397.8048. Time: 7.5679 us. Best GFLOPs: 400.2871
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #98: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(969))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(969) // T.int64(57))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(57))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(7752))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 2, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 4, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 224, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 22:37:38 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #99: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3_init * T.int64(14) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(33)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(513))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(513) // T.int64(9))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4104))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(72))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 4, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #100: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3_init * T.int64(14) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(33)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(513))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(513) // T.int64(9))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4104))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 4, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #101: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(4) + j_3_init * T.int64(4) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(62)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(493))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(493) // T.int64(17))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(17))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3944))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(4) + j_3 * T.int64(4) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #102: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3_init * T.int64(14) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(33)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(513))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(513) // T.int64(9))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4104))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 4, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #103: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3_init * T.int64(14) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(124)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3960) // T.int64(495))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(56) + di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(495) // T.int64(9))
                                    v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3960))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0)
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(24))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 4, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107 = sch.split(loop=l105, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b112)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b151)
b169 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #104: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3_init * T.int64(14) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(124)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3960) // T.int64(495))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(56) + di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(495) // T.int64(9))
                                    v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3960))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0)
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(24))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 4, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107 = sch.split(loop=l105, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b112)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b151)
b169 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #105: GFLOPs: 266.7573. Time: 11.2858 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #106: GFLOPs: 256.5882. Time: 11.7330 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #107: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(969))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(969) // T.int64(57))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(57))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(7752))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 2, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 4, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 224, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #108: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(4) + j_3_init * T.int64(4) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(62)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(493))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(493) // T.int64(17))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(17))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3944))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(4) + j_3 * T.int64(4) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #109: GFLOPs: 282.7953. Time: 10.6457 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #110: GFLOPs: 377.2361. Time: 7.9806 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #111: GFLOPs: 383.5305. Time: 7.8496 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #112: GFLOPs: 400.1600. Time: 7.5234 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #113: GFLOPs: 287.4131. Time: 10.4747 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #114: GFLOPs: 377.3368. Time: 7.9784 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #115: GFLOPs: 327.1627. Time: 9.2020 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #116: GFLOPs: 377.9018. Time: 7.9665 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #117: GFLOPs: 387.4566. Time: 7.7701 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #118: GFLOPs: 349.5928. Time: 8.6116 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #119: GFLOPs: 207.0736. Time: 14.5386 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #120: GFLOPs: 379.8511. Time: 7.9256 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #121: GFLOPs: 346.1793. Time: 8.6965 us. Best GFLOPs: 400.2871
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #122: GFLOPs: 401.0212. Time: 7.5072 us. Best GFLOPs: 401.0212
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #123: GFLOPs: 383.7019. Time: 7.8461 us. Best GFLOPs: 401.0212
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #124: GFLOPs: 255.3739. Time: 11.7888 us. Best GFLOPs: 401.0212
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #125: GFLOPs: 283.1168. Time: 10.6336 us. Best GFLOPs: 401.0212
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #126: GFLOPs: 260.4098. Time: 11.5609 us. Best GFLOPs: 401.0212
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #127: GFLOPs: 105.6937. Time: 28.4838 us. Best GFLOPs: 401.0212
2024-04-28 22:37:39 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #128: GFLOPs: 21.3080. Time: 141.2876 us. Best GFLOPs: 401.0212
2024-04-29 00:21:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:21:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:21:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 816 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 1225 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 1635 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2042 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2448 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 2853 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:21:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 3263 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 3666 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4073 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4481 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 4890 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 5297 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 5706 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 6113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 6519 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 6925 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 7333 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 7740 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:15 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 00:22:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45bdef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x427cc98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x42982c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x493d108)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30f79c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4268a28)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x427cb98)]: 0 failure(s)
2024-04-29 00:22:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9824  0.9791  0.9791  0.9785  0.9770  0.9770  0.9770  0.9753  0.9726  0.9722  0.9709  0.9670  0.9645  0.9635  0.9635  0.9635
[17 : 32]:	0.9635  0.9629  0.9628  0.9620  0.9620  0.9620  0.9615  0.9607  0.9604  0.9603  0.9603  0.9595  0.9592  0.9579  0.9550  0.9548
[33 : 48]:	0.9547  0.9543  0.9540  0.9539  0.9533  0.9524  0.9524  0.9518  0.9505  0.9499  0.9499  0.9495  0.9488  0.9476  0.9473  0.9471
[49 : 64]:	0.9470  0.9453  0.9446  0.9446  0.9442  0.9441  0.9441  0.9439  0.9437  0.9437  0.9429  0.9407  0.9403  0.9392  0.9365  0.9343
2024-04-29 00:22:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:22:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #129: GFLOPs: 397.4117. Time: 7.5754 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #130: GFLOPs: 397.6009. Time: 7.5718 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #131: GFLOPs: 385.7847. Time: 7.8037 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #132: GFLOPs: 398.6966. Time: 7.5510 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #133: GFLOPs: 394.5619. Time: 7.6301 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #134: GFLOPs: 398.1977. Time: 7.5605 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #135: GFLOPs: 384.2801. Time: 7.8343 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #136: GFLOPs: 392.2993. Time: 7.6741 us. Best GFLOPs: 401.0212
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #137: GFLOPs: 513.9553. Time: 5.8576 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #138: GFLOPs: 390.5467. Time: 7.7086 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #139: GFLOPs: 384.5016. Time: 7.8298 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #140: GFLOPs: 384.2872. Time: 7.8341 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #141: GFLOPs: 389.3637. Time: 7.7320 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #142: GFLOPs: 395.4186. Time: 7.6136 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #143: GFLOPs: 397.8018. Time: 7.5680 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #144: GFLOPs: 397.8362. Time: 7.5673 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #145: GFLOPs: 397.7768. Time: 7.5685 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #146: GFLOPs: 376.2574. Time: 8.0013 us. Best GFLOPs: 513.9553
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #147: GFLOPs: 523.8468. Time: 5.7470 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #148: GFLOPs: 395.9622. Time: 7.6032 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #149: GFLOPs: 384.3905. Time: 7.8320 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #150: GFLOPs: 396.9015. Time: 7.5852 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #151: GFLOPs: 399.6130. Time: 7.5337 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #152: GFLOPs: 504.7316. Time: 5.9647 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #153: GFLOPs: 377.2261. Time: 7.9808 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #154: GFLOPs: 399.8015. Time: 7.5301 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #155: GFLOPs: 396.9388. Time: 7.5844 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #156: GFLOPs: 384.0680. Time: 7.8386 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #157: GFLOPs: 374.5535. Time: 8.0377 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #158: GFLOPs: 376.4395. Time: 7.9975 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #159: GFLOPs: 484.0624. Time: 6.2194 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #160: GFLOPs: 396.9151. Time: 7.5849 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #161: GFLOPs: 390.3697. Time: 7.7121 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #162: GFLOPs: 376.7758. Time: 7.9903 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #163: GFLOPs: 384.8092. Time: 7.8235 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #164: GFLOPs: 483.0790. Time: 6.2320 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #165: GFLOPs: 366.9952. Time: 8.2033 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #166: GFLOPs: 380.6362. Time: 7.9093 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #167: GFLOPs: 376.3147. Time: 8.0001 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #168: GFLOPs: 366.6060. Time: 8.2120 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #169: GFLOPs: 432.0218. Time: 6.9685 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #170: GFLOPs: 380.5697. Time: 7.9107 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #171: GFLOPs: 385.0252. Time: 7.8191 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #172: GFLOPs: 383.4909. Time: 7.8504 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #173: GFLOPs: 398.0715. Time: 7.5629 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #174: GFLOPs: 398.4240. Time: 7.5562 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #175: GFLOPs: 391.2951. Time: 7.6938 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #176: GFLOPs: 376.0678. Time: 8.0054 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #177: GFLOPs: 396.5864. Time: 7.5912 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #178: GFLOPs: 330.6470. Time: 9.1051 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #179: GFLOPs: 376.9009. Time: 7.9877 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #180: GFLOPs: 404.1141. Time: 7.4498 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #181: GFLOPs: 384.9833. Time: 7.8200 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #182: GFLOPs: 366.4950. Time: 8.2145 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #183: GFLOPs: 368.4009. Time: 8.1720 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #184: GFLOPs: 424.6105. Time: 7.0902 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #185: GFLOPs: 366.6608. Time: 8.2107 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #186: GFLOPs: 366.7468. Time: 8.2088 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #187: GFLOPs: 377.5944. Time: 7.9730 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #188: GFLOPs: 376.7803. Time: 7.9902 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #189: GFLOPs: 416.9916. Time: 7.2197 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #190: GFLOPs: 64.9636. Time: 46.3423 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #191: GFLOPs: 125.8048. Time: 23.9304 us. Best GFLOPs: 523.8468
2024-04-29 00:24:18 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_conv2d_add_nn_relu_3] Trial #192: GFLOPs: 176.5162. Time: 17.0554 us. Best GFLOPs: 523.8468
