2024-04-28 19:52:45 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_nn_conv2d_add_nn_relu_6"
2024-04-28 19:52:45 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(72), T.int64(60), T.int64(60)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(58) and T.int64(2) <= v_i3 and v_i3 < T.int64(58), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(5), T.int64(5)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:52:45 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:52:45 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(18), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(233640)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(3245))
                                    v2 = T.axis.spatial(T.int64(60), ax0_ax1_ax2_ax3_fused % T.int64(3245) // T.int64(55))
                                    v3 = T.axis.spatial(T.int64(60), dj_0 + ax0_ax1_ax2_ax3_fused % T.int64(55))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(360)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(5))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), dj_0)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(4) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused * T.int64(14) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_0 + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), ax2)
                                v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 18, 1, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 28, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:52:45 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(18), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(5), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(233640)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(3245))
                                    v2 = T.axis.spatial(T.int64(60), ax0_ax1_ax2_ax3_fused % T.int64(3245) // T.int64(55))
                                    v3 = T.axis.spatial(T.int64(60), di_0_dj_0_fused + ax0_ax1_ax2_ax3_fused % T.int64(55))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(360)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(5))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(4) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused * T.int64(14) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), ax2)
                                v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 18, 1, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 28, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 19:52:45 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(18), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(5), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(233640)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(3245))
                                    v2 = T.axis.spatial(T.int64(60), ax0_ax1_ax2_ax3_fused % T.int64(3245) // T.int64(55))
                                    v3 = T.axis.spatial(T.int64(60), di_0_dj_0_fused + ax0_ax1_ax2_ax3_fused % T.int64(55))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(360)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(5))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(4) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused * T.int64(14) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), ax2)
                                v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused * T.int64(14) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 18, 1, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 28, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-28 20:16:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:16:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:16:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 506 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 1012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 1521 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2021 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2526 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 3035 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 3541 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4048 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4556 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:40 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 20:16:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 20:16:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9980  0.9976  0.9967  0.9961  0.9961  0.9957  0.9947  0.9944  0.9940  0.9938  0.9935  0.9931  0.9923  0.9914  0.9911
[17 : 32]:	0.9911  0.9911  0.9908  0.9906  0.9906  0.9906  0.9905  0.9903  0.9899  0.9897  0.9896  0.9886  0.9882  0.9846  0.9843  0.9838
[33 : 48]:	0.9831  0.9830  0.9830  0.9824  0.9813  0.9802  0.9798  0.9791  0.9754  0.9751  0.9723  0.9697  0.9694  0.9666  0.9664  0.9659
[49 : 64]:	0.9659  0.9651  0.9637  0.9637  0.9616  0.9606  0.9604  0.9577  0.9577  0.9570  0.9559  0.9551  0.9543  0.9530  0.9523  0.9515
2024-04-28 20:16:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:16:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #1: GFLOPs: 122.6894. Time: 23.9246 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #2: GFLOPs: 28.7569. Time: 102.0728 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #3: GFLOPs: 92.3800. Time: 31.7742 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #4: GFLOPs: 16.5969. Time: 176.8583 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #5: GFLOPs: 40.1084. Time: 73.1841 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #6: GFLOPs: 10.5322. Time: 278.6963 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #7: GFLOPs: 102.7871. Time: 28.5571 us. Best GFLOPs: 122.6894
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #8: GFLOPs: 122.6945. Time: 23.9236 us. Best GFLOPs: 122.6945
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #9: GFLOPs: 4.2633. Time: 688.5043 us. Best GFLOPs: 122.6945
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #10: GFLOPs: 108.0544. Time: 27.1650 us. Best GFLOPs: 122.6945
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #11: GFLOPs: 7.2457. Time: 405.1109 us. Best GFLOPs: 122.6945
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #12: GFLOPs: 224.5018. Time: 13.0747 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #13: GFLOPs: 174.7556. Time: 16.7966 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #14: GFLOPs: 121.0961. Time: 24.2394 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #15: GFLOPs: 68.0286. Time: 43.1480 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #16: GFLOPs: 80.2143. Time: 36.5932 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #17: GFLOPs: 68.0335. Time: 43.1449 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #18: GFLOPs: 163.7425. Time: 17.9263 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #19: GFLOPs: 38.5872. Time: 76.0692 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #20: GFLOPs: 63.0501. Time: 46.5549 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #21: GFLOPs: 33.9949. Time: 86.3452 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #22: GFLOPs: 29.3275. Time: 100.0867 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #23: GFLOPs: 104.7588. Time: 28.0196 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #24: GFLOPs: 5.4085. Time: 542.7235 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #25: GFLOPs: 11.7536. Time: 249.7360 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #26: GFLOPs: 137.6395. Time: 21.3260 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #27: GFLOPs: 187.3913. Time: 15.6640 us. Best GFLOPs: 224.5018
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #28: GFLOPs: 342.2137. Time: 8.5774 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #29: GFLOPs: 46.8213. Time: 62.6915 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #30: GFLOPs: 12.8208. Time: 228.9487 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #31: GFLOPs: 10.3346. Time: 284.0275 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #32: GFLOPs: 138.1085. Time: 21.2536 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #33: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(36) + b_1_c_1_i_1_j_1_fused * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(5), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(9)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(36) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(59))
                                        v2 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + di_0)
                                        v3 = T.axis.spatial(T.int64(60), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(59))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2124))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(36) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(5))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), di_0)
                                        v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(180))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(36) + b_1_c_1_i_1_j_1_fused * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(36) + b_1_c_1_i_1_j_1_fused * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 12, 3, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #34: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_1_c_1_i_1_j_1_fused * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(4) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(649))
                                        v2 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(649) // T.int64(59))
                                        v3 = T.axis.spatial(T.int64(60), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(59))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3894))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(25))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(25) // T.int64(5))
                                        v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(150))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_1_c_1_i_1_j_1_fused * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(4) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_1_c_1_i_1_j_1_fused * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 2, 3, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #35: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(4) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(93)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(649))
                                    v2 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(649) // T.int64(59))
                                    v3 = T.axis.spatial(T.int64(60), (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(59))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3894))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(25))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(25) // T.int64(5))
                                        v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(150))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(4) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(3) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 2, 3, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 42, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #36: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(36) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(5), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3528) // T.int64(49))
                                        v2 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + di_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3528))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(5))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), di_0)
                                        v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(360))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(36) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(36) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 18, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 72, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 72, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #37: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(9), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(7) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(25), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), ((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1944) // T.int64(27))
                                        v2 = T.axis.spatial(T.int64(60), T.Add(b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + di_0_dj_0_fused // T.int64(5), T.int64(0)))
                                        v3 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + di_0_dj_0_fused % T.int64(5) + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(27))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1944))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2)
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(5), di_0_dj_0_fused // T.int64(5))
                                        v3 = T.axis.spatial(T.int64(5), di_0_dj_0_fused % T.int64(5))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(7) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0_dj_0_fused // T.int64(5) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), di_0_dj_0_fused % T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_1_c_1_i_1_j_1_fused * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 9, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b111)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b113)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b151)
b168 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #38: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(60), T.int64(60)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(18) + b_1_c_1_i_1_j_1_fused * T.int64(9) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(3) + c_3_init * T.int64(3) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(5), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(89)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(18) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7434) // T.int64(413))
                                    v2 = T.axis.spatial(T.int64(60), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) % T.int64(413) // T.int64(59))
                                    v3 = T.axis.spatial(T.int64(60), (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) % T.int64(59))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7434))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(58) and T.int64(2) <= v3 and v3 < T.int64(58), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(18) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) // T.int64(5))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), di_0)
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(18) + b_1_c_1_i_1_j_1_fused * T.int64(9) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(18) + b_1_c_1_i_1_j_1_fused * T.int64(9) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 3, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 84], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107 = sch.split(loop=l105, factors=[None, 84], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b112)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b151)
b169 = sch.decompose_reduction(block=b151, loop=l155)
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #39: GFLOPs: 57.2856. Time: 51.2397 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #40: GFLOPs: 106.1458. Time: 27.6534 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #41: GFLOPs: 176.8830. Time: 16.5946 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #42: GFLOPs: 61.6422. Time: 47.6183 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #43: GFLOPs: 78.5650. Time: 37.3614 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #44: GFLOPs: 13.8605. Time: 211.7749 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #45: GFLOPs: 84.8934. Time: 34.5762 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #46: GFLOPs: 182.8685. Time: 16.0514 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #47: GFLOPs: 260.1160. Time: 11.2846 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #48: GFLOPs: 26.6746. Time: 110.0411 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #49: GFLOPs: 53.1671. Time: 55.2089 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #50: GFLOPs: 75.9936. Time: 38.6256 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #51: GFLOPs: 54.5474. Time: 53.8119 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #52: GFLOPs: 196.1031. Time: 14.9681 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #53: GFLOPs: 212.9355. Time: 13.7849 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #54: GFLOPs: 11.2292. Time: 261.3991 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #55: GFLOPs: 81.7474. Time: 35.9069 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #56: GFLOPs: 81.8900. Time: 35.8444 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #57: GFLOPs: 23.1098. Time: 127.0154 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #58: GFLOPs: 185.3817. Time: 15.8338 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #59: GFLOPs: 94.3065. Time: 31.1251 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #60: GFLOPs: 198.7349. Time: 14.7699 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #61: GFLOPs: 39.4553. Time: 74.3954 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #62: GFLOPs: 125.4875. Time: 23.3911 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #63: GFLOPs: 217.3036. Time: 13.5078 us. Best GFLOPs: 342.2137
2024-04-28 21:19:36 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #64: GFLOPs: 14.2243. Time: 206.3573 us. Best GFLOPs: 342.2137
2024-04-28 22:32:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:32:53 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-28 22:32:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 450 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:32:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 897 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:32:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 1345 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 1795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2246 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2695 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 3135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 3586 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4038 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:11 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 22:33:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-28 22:33:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9747  0.9726  0.9719  0.9719  0.9705  0.9698  0.9698  0.9692  0.9692  0.9689  0.9689  0.9671  0.9671  0.9663  0.9663  0.9658
[17 : 32]:	0.9551  0.9551  0.9461  0.9461  0.9452  0.9452  0.9300  0.9142  0.9142  0.9116  0.9113  0.9113  0.9087  0.9083  0.9064  0.9064
[33 : 48]:	0.8947  0.8877  0.8852  0.8839  0.8803  0.8743  0.8716  0.8561  0.8560  0.8528  0.8518  0.8504  0.8484  0.8411  0.8388  0.8367
[49 : 64]:	0.8367  0.8367  0.8367  0.8337  0.8284  0.8100  0.8085  0.8076  0.8038  0.8036  0.8035  0.8018  0.7977  0.7915  0.7908  0.7907
2024-04-28 22:33:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:33:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #65: GFLOPs: 417.1647. Time: 7.0363 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #66: GFLOPs: 414.4918. Time: 7.0817 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #67: GFLOPs: 349.2190. Time: 8.4053 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #68: GFLOPs: 349.1759. Time: 8.4064 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #69: GFLOPs: 412.9722. Time: 7.1077 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #70: GFLOPs: 340.7751. Time: 8.6136 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #71: GFLOPs: 340.8294. Time: 8.6122 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #72: GFLOPs: 237.3531. Time: 12.3668 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #73: GFLOPs: 237.3346. Time: 12.3678 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #74: GFLOPs: 349.6922. Time: 8.3939 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #75: GFLOPs: 349.7111. Time: 8.3935 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #76: GFLOPs: 231.8218. Time: 12.6619 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #77: GFLOPs: 231.8271. Time: 12.6616 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #78: GFLOPs: 237.8008. Time: 12.3435 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #79: GFLOPs: 237.6741. Time: 12.3501 us. Best GFLOPs: 417.1647
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #80: GFLOPs: 507.3725. Time: 5.7853 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #81: GFLOPs: 412.9538. Time: 7.1080 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #82: GFLOPs: 412.9460. Time: 7.1082 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #83: GFLOPs: 390.1075. Time: 7.5243 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #84: GFLOPs: 389.7019. Time: 7.5322 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #85: GFLOPs: 393.5081. Time: 7.4593 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #86: GFLOPs: 393.9104. Time: 7.4517 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #87: GFLOPs: 370.3662. Time: 7.9254 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #88: GFLOPs: 426.6096. Time: 6.8805 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #89: GFLOPs: 426.6057. Time: 6.8806 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #90: GFLOPs: 407.4950. Time: 7.2033 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #91: GFLOPs: 348.9392. Time: 8.4121 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #92: GFLOPs: 348.9234. Time: 8.4124 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #93: GFLOPs: 237.4571. Time: 12.3614 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #94: GFLOPs: 506.5354. Time: 5.7948 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #95: GFLOPs: 401.5616. Time: 7.3097 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #96: GFLOPs: 401.5322. Time: 7.3102 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #97: GFLOPs: 394.4675. Time: 7.4412 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #98: GFLOPs: 401.0481. Time: 7.3191 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #99: GFLOPs: 378.9534. Time: 7.7458 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #100: GFLOPs: 388.8449. Time: 7.5488 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #101: GFLOPs: 400.7575. Time: 7.3244 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #102: GFLOPs: 505.8203. Time: 5.8030 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #103: GFLOPs: 295.3881. Time: 9.9371 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #104: GFLOPs: 340.7897. Time: 8.6132 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #105: GFLOPs: 343.8271. Time: 8.5371 us. Best GFLOPs: 507.3725
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #106: GFLOPs: 508.1025. Time: 5.7770 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #107: GFLOPs: 440.8476. Time: 6.6583 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #108: GFLOPs: 332.6099. Time: 8.8250 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #109: GFLOPs: 358.9716. Time: 8.1770 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #110: GFLOPs: 310.4664. Time: 9.4545 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #111: GFLOPs: 413.1614. Time: 7.1045 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #112: GFLOPs: 244.9174. Time: 11.9848 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #113: GFLOPs: 399.4425. Time: 7.3485 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #114: GFLOPs: 399.4153. Time: 7.3490 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #115: GFLOPs: 399.4289. Time: 7.3487 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #116: GFLOPs: 270.5852. Time: 10.8480 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #117: GFLOPs: 368.1198. Time: 7.9738 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #118: GFLOPs: 221.1697. Time: 13.2717 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #119: GFLOPs: 368.1570. Time: 7.9729 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #120: GFLOPs: 225.3243. Time: 13.0270 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #121: GFLOPs: 103.1154. Time: 28.4661 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #122: GFLOPs: 103.1280. Time: 28.4626 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #123: GFLOPs: 339.8568. Time: 8.6369 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #124: GFLOPs: 167.6723. Time: 17.5061 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #125: GFLOPs: 296.2889. Time: 9.9069 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #126: GFLOPs: 140.4816. Time: 20.8945 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #127: GFLOPs: 118.2137. Time: 24.8304 us. Best GFLOPs: 508.1025
2024-04-28 22:35:23 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #128: GFLOPs: 332.4901. Time: 8.8282 us. Best GFLOPs: 508.1025
2024-04-29 01:16:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:16:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:17:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 813 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 1220 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 1625 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2029 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2437 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 2842 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 3245 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 3649 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4056 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4462 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 4864 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:19 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 01:17:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4178148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x41f9dd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4294ea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e31098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x49375d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4295e08)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4251b68)]: 0 failure(s)
2024-04-29 01:17:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0587  1.0541  1.0541  0.9978  0.9978  0.9797  0.9768  0.9696  0.9629  0.9627  0.9627  0.9627  0.9615  0.9613  0.9613  0.9597
[17 : 32]:	0.9409  0.9392  0.9392  0.9392  0.9382  0.9380  0.9380  0.9380  0.9373  0.9371  0.9366  0.9352  0.9352  0.9352  0.9272  0.9241
[33 : 48]:	0.9229  0.9184  0.9106  0.9048  0.9042  0.8987  0.8859  0.8838  0.8802  0.8780  0.8769  0.8767  0.8734  0.8734  0.8666  0.8666
[49 : 64]:	0.8665  0.8650  0.8625  0.8605  0.8605  0.8600  0.8595  0.8595  0.8579  0.8562  0.8538  0.8504  0.8497  0.8494  0.8477  0.8466
2024-04-29 01:17:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:17:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #129: GFLOPs: 492.3516. Time: 5.9618 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #130: GFLOPs: 496.2405. Time: 5.9151 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #131: GFLOPs: 496.2438. Time: 5.9150 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #132: GFLOPs: 501.3587. Time: 5.8547 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #133: GFLOPs: 501.3657. Time: 5.8546 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #134: GFLOPs: 496.5787. Time: 5.9110 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #135: GFLOPs: 506.1514. Time: 5.7992 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #136: GFLOPs: 486.5294. Time: 6.0331 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #137: GFLOPs: 496.5003. Time: 5.9120 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #138: GFLOPs: 485.6758. Time: 6.0437 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #139: GFLOPs: 485.6337. Time: 6.0443 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #140: GFLOPs: 485.5843. Time: 6.0449 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #141: GFLOPs: 418.7955. Time: 7.0089 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #142: GFLOPs: 497.0231. Time: 5.9058 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #143: GFLOPs: 497.0805. Time: 5.9051 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #144: GFLOPs: 485.6788. Time: 6.0437 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #145: GFLOPs: 486.4985. Time: 6.0335 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #146: GFLOPs: 497.3512. Time: 5.9019 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #147: GFLOPs: 497.2372. Time: 5.9032 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #148: GFLOPs: 497.2410. Time: 5.9032 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #149: GFLOPs: 496.9630. Time: 5.9065 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #150: GFLOPs: 496.6216. Time: 5.9105 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #151: GFLOPs: 496.6171. Time: 5.9106 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #152: GFLOPs: 496.6307. Time: 5.9104 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #153: GFLOPs: 497.5018. Time: 5.9001 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #154: GFLOPs: 477.9136. Time: 6.1419 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #155: GFLOPs: 497.1922. Time: 5.9037 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #156: GFLOPs: 475.4455. Time: 6.1738 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #157: GFLOPs: 475.4657. Time: 6.1735 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #158: GFLOPs: 475.5065. Time: 6.1730 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #159: GFLOPs: 485.8829. Time: 6.0412 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #160: GFLOPs: 496.5259. Time: 5.9117 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #161: GFLOPs: 501.2844. Time: 5.8556 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #162: GFLOPs: 501.2993. Time: 5.8554 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #163: GFLOPs: 503.5692. Time: 5.8290 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #164: GFLOPs: 505.8267. Time: 5.8030 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #165: GFLOPs: 500.1154. Time: 5.8692 us. Best GFLOPs: 508.1025
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #166: GFLOPs: 511.2579. Time: 5.7413 us. Best GFLOPs: 511.2579
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #167: GFLOPs: 401.4258. Time: 7.3122 us. Best GFLOPs: 511.2579
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #168: GFLOPs: 496.4032. Time: 5.9131 us. Best GFLOPs: 511.2579
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #169: GFLOPs: 511.7923. Time: 5.7353 us. Best GFLOPs: 511.7923
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #170: GFLOPs: 494.0520. Time: 5.9413 us. Best GFLOPs: 511.7923
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #171: GFLOPs: 491.0958. Time: 5.9770 us. Best GFLOPs: 511.7923
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #172: GFLOPs: 243.0696. Time: 12.0759 us. Best GFLOPs: 511.7923
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #173: GFLOPs: 610.1603. Time: 4.8107 us. Best GFLOPs: 610.1603
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #174: GFLOPs: 610.1933. Time: 4.8104 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #175: GFLOPs: 574.0647. Time: 5.1132 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #176: GFLOPs: 478.6949. Time: 6.1319 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #177: GFLOPs: 391.4512. Time: 7.4985 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #178: GFLOPs: 609.3363. Time: 4.8172 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #179: GFLOPs: 391.8241. Time: 7.4914 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #180: GFLOPs: 443.0090. Time: 6.6258 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #181: GFLOPs: 497.9844. Time: 5.8944 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #182: GFLOPs: 421.5350. Time: 6.9634 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #183: GFLOPs: 421.5666. Time: 6.9628 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #184: GFLOPs: 421.5489. Time: 6.9631 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #185: GFLOPs: 521.9190. Time: 5.6240 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #186: GFLOPs: 527.8843. Time: 5.5605 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #187: GFLOPs: 480.9455. Time: 6.1032 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #188: GFLOPs: 495.0079. Time: 5.9298 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #189: GFLOPs: 493.5910. Time: 5.9468 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #190: GFLOPs: 110.3895. Time: 26.5904 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #191: GFLOPs: 113.1331. Time: 25.9455 us. Best GFLOPs: 610.1933
2024-04-29 01:19:41 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_nn_relu_6] Trial #192: GFLOPs: 143.0272. Time: 20.5226 us. Best GFLOPs: 610.1933
