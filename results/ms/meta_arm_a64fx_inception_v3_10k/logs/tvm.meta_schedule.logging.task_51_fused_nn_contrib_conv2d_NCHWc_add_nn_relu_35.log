2024-04-29 07:44:06 [INFO] [task_scheduler.cc:160] Initializing Task #51: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35"
2024-04-29 07:44:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:44:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:44:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1), T.int64(25), T.int64(1), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:44:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1), T.int64(25), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:44:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(5), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(25), T.int64(1), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(25), T.int64(5), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:58:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:58:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:58:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 08:58:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:58:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 08:58:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 08:58:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 08:58:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 08:58:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9986  0.9977  0.9976  0.9956  0.9947  0.9943  0.9943  0.9941  0.9938  0.9927  0.9925  0.9925  0.9924  0.9923  0.9916
[17 : 32]:	0.9914  0.9909  0.9908  0.9894  0.9888  0.9885  0.9882  0.9881  0.9868  0.9866  0.9865  0.9858  0.9857  0.9845  0.9845  0.9843
[33 : 48]:	0.9835  0.9833  0.9825  0.9824  0.9824  0.9824  0.9822  0.9814  0.9809  0.9808  0.9804  0.9800  0.9799  0.9797  0.9796  0.9790
[49 : 64]:	0.9775  0.9769  0.9769  0.9768  0.9768  0.9763  0.9759  0.9752  0.9750  0.9742  0.9735  0.9723  0.9722  0.9716  0.9715  0.9712
2024-04-29 08:58:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:58:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #1: GFLOPs: 4.2216. Time: 3657.3475 us. Best GFLOPs: 4.2216
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #2: GFLOPs: 7.4702. Time: 2066.8853 us. Best GFLOPs: 7.4702
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #3: GFLOPs: 10.5524. Time: 1463.1733 us. Best GFLOPs: 10.5524
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #4: GFLOPs: 45.8720. Time: 336.5889 us. Best GFLOPs: 45.8720
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #5: GFLOPs: 161.9868. Time: 95.3164 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #6: GFLOPs: 74.3243. Time: 207.7382 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #7: GFLOPs: 17.7436. Time: 870.1718 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #8: GFLOPs: 7.1834. Time: 2149.3861 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #9: GFLOPs: 40.5432. Time: 380.8287 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #10: GFLOPs: 22.8781. Time: 674.8813 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #11: GFLOPs: 9.9878. Time: 1545.8887 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #12: GFLOPs: 118.1029. Time: 130.7335 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #13: GFLOPs: 52.4271. Time: 294.5044 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #14: GFLOPs: 6.3708. Time: 2423.5530 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #15: GFLOPs: 37.0969. Time: 416.2078 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #16: GFLOPs: 57.0740. Time: 270.5258 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #17: GFLOPs: 23.4904. Time: 657.2899 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #18: GFLOPs: 45.1975. Time: 341.6115 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #19: GFLOPs: 7.4488. Time: 2072.8236 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #20: GFLOPs: 65.3903. Time: 236.1208 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #21: GFLOPs: 57.4353. Time: 268.8243 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #22: GFLOPs: 11.7894. Time: 1309.6527 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #23: GFLOPs: 103.4700. Time: 149.2220 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #24: GFLOPs: 2.0612. Time: 7490.8130 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #25: GFLOPs: 28.4271. Time: 543.1442 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #26: GFLOPs: 35.5102. Time: 434.8041 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #27: GFLOPs: 27.9578. Time: 552.2610 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #28: GFLOPs: 69.0646. Time: 223.5587 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #29: GFLOPs: 82.8717. Time: 186.3120 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #30: GFLOPs: 2.7742. Time: 5565.5881 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #31: GFLOPs: 32.2776. Time: 478.3498 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #32: GFLOPs: 90.3198. Time: 170.9481 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #33: GFLOPs: 51.0104. Time: 302.6832 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #34: GFLOPs: 16.8254. Time: 917.6596 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #35: GFLOPs: 117.8148. Time: 131.0531 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #36: GFLOPs: 31.1602. Time: 495.5044 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #37: GFLOPs: 48.7370. Time: 316.8027 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #38: GFLOPs: 0.3202. Time: 48225.8643 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #39: GFLOPs: 66.3056. Time: 232.8611 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #40: GFLOPs: 62.1495. Time: 248.4334 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #41: GFLOPs: 14.0647. Time: 1097.7833 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #42: GFLOPs: 75.4096. Time: 204.7486 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #43: GFLOPs: 27.0554. Time: 570.6803 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #44: GFLOPs: 15.5433. Time: 993.3510 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #45: GFLOPs: 93.6652. Time: 164.8424 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #46: GFLOPs: 88.8982. Time: 173.6817 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #47: GFLOPs: 81.6424. Time: 189.1173 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #48: GFLOPs: 1.3598. Time: 11354.8166 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #49: GFLOPs: 24.7789. Time: 623.1115 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #50: GFLOPs: 22.5653. Time: 684.2362 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #51: GFLOPs: 44.6698. Time: 345.6471 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #52: GFLOPs: 74.5165. Time: 207.2025 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #53: GFLOPs: 45.3843. Time: 340.2055 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(1000), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(5), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(500) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(500) // T.int64(20) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(20) // T.int64(4) * T.int64(5) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(500) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(500) // T.int64(20) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(20) // T.int64(4) * T.int64(5) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(6) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(500) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(500) // T.int64(20) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(20) // T.int64(4) * T.int64(5) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 5, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l111)
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #55: GFLOPs: 73.3706. Time: 210.4384 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #56: GFLOPs: 10.5350. Time: 1465.5935 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #57: GFLOPs: 1.1120. Time: 13884.9762 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #58: GFLOPs: 26.7476. Time: 577.2472 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #59: GFLOPs: 58.8426. Time: 262.3950 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #60: GFLOPs: 22.5790. Time: 683.8204 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #61: GFLOPs: 71.3573. Time: 216.3759 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #62: GFLOPs: 106.1516. Time: 145.4523 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #63: GFLOPs: 20.8488. Time: 740.5704 us. Best GFLOPs: 161.9868
2024-04-29 09:19:04 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #64: GFLOPs: 44.7815. Time: 344.7850 us. Best GFLOPs: 161.9868
2024-04-29 12:07:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:07:26 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 12:07:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 12:07:28 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 12:07:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 12:07:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 12:07:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 12:07:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa333438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec8ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9717588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb0283e8)]: 0 failure(s)
2024-04-29 12:07:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9774  0.8942  0.8484  0.8284  0.8199  0.7933  0.7624  0.7613  0.7556  0.7518  0.7505  0.7505  0.7450  0.7403  0.7255  0.7232
[17 : 32]:	0.7156  0.7151  0.7135  0.7114  0.7097  0.7082  0.6990  0.6973  0.6951  0.6943  0.6868  0.6858  0.6821  0.6754  0.6692  0.6681
[33 : 48]:	0.6678  0.6668  0.6653  0.6603  0.6589  0.6571  0.6548  0.6502  0.6484  0.6484  0.6477  0.6450  0.6416  0.6407  0.6397  0.6397
[49 : 64]:	0.6387  0.6384  0.6377  0.6363  0.6353  0.6340  0.6334  0.6325  0.6316  0.6296  0.6293  0.6285  0.6268  0.6259  0.6239  0.6207
2024-04-29 12:07:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:07:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #65: GFLOPs: 204.4283. Time: 75.5277 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #66: GFLOPs: 162.6699. Time: 94.9161 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #67: GFLOPs: 143.3459. Time: 107.7115 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #68: GFLOPs: 157.9386. Time: 97.7595 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #69: GFLOPs: 159.0254. Time: 97.0914 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #70: GFLOPs: 163.0703. Time: 94.6831 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #71: GFLOPs: 175.3222. Time: 88.0664 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #72: GFLOPs: 163.0073. Time: 94.7197 us. Best GFLOPs: 204.4283
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #73: GFLOPs: 212.1145. Time: 72.7909 us. Best GFLOPs: 212.1145
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #74: GFLOPs: 206.9021. Time: 74.6247 us. Best GFLOPs: 212.1145
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #75: GFLOPs: 181.2605. Time: 85.1812 us. Best GFLOPs: 212.1145
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #76: GFLOPs: 181.6880. Time: 84.9809 us. Best GFLOPs: 212.1145
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #77: GFLOPs: 215.4215. Time: 71.6734 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #78: GFLOPs: 198.6704. Time: 77.7167 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #79: GFLOPs: 141.7597. Time: 108.9167 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #80: GFLOPs: 109.4027. Time: 141.1300 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #81: GFLOPs: 209.2598. Time: 73.7839 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #82: GFLOPs: 108.8687. Time: 141.8223 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #83: GFLOPs: 208.7127. Time: 73.9773 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #84: GFLOPs: 194.8007. Time: 79.2605 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #85: GFLOPs: 121.3753. Time: 127.2087 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #86: GFLOPs: 133.1383. Time: 115.9696 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #87: GFLOPs: 161.6138. Time: 95.5364 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #88: GFLOPs: 132.6973. Time: 116.3550 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #89: GFLOPs: 133.1907. Time: 115.9240 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #90: GFLOPs: 101.0484. Time: 152.7980 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #91: GFLOPs: 150.9714. Time: 102.2710 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #92: GFLOPs: 133.4031. Time: 115.7395 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #93: GFLOPs: 121.5666. Time: 127.0086 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #94: GFLOPs: 107.7793. Time: 143.2558 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #95: GFLOPs: 150.1446. Time: 102.8342 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #96: GFLOPs: 36.5565. Time: 422.3601 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #97: GFLOPs: 203.1004. Time: 76.0215 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #98: GFLOPs: 154.2505. Time: 100.0970 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #99: GFLOPs: 117.8708. Time: 130.9909 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #100: GFLOPs: 205.9440. Time: 74.9718 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #101: GFLOPs: 86.9940. Time: 177.4834 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #102: GFLOPs: 103.0302. Time: 149.8589 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #103: GFLOPs: 59.8881. Time: 257.8141 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #104: GFLOPs: 64.2687. Time: 240.2414 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #105: GFLOPs: 156.7984. Time: 98.4704 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #106: GFLOPs: 73.7426. Time: 209.3768 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #107: GFLOPs: 155.9814. Time: 98.9862 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #108: GFLOPs: 152.6057. Time: 101.1758 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #109: GFLOPs: 151.3986. Time: 101.9825 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #110: GFLOPs: 154.4160. Time: 99.9896 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #111: GFLOPs: 135.9666. Time: 113.5573 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #112: GFLOPs: 120.8314. Time: 127.7814 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #113: GFLOPs: 111.7584. Time: 138.1551 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #114: GFLOPs: 111.5352. Time: 138.4316 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #115: GFLOPs: 72.6364. Time: 212.5657 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #116: GFLOPs: 134.1276. Time: 115.1143 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #117: GFLOPs: 87.8956. Time: 175.6629 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #118: GFLOPs: 108.5045. Time: 142.2982 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #119: GFLOPs: 87.6830. Time: 176.0888 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #120: GFLOPs: 102.5189. Time: 150.6064 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #121: GFLOPs: 160.0373. Time: 96.4775 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #122: GFLOPs: 52.8400. Time: 292.2027 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #123: GFLOPs: 102.1033. Time: 151.2195 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #124: GFLOPs: 157.8444. Time: 97.8179 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #125: GFLOPs: 159.2507. Time: 96.9540 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #126: GFLOPs: 32.6326. Time: 473.1467 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #127: GFLOPs: 2.6975. Time: 5723.8367 us. Best GFLOPs: 215.4215
2024-04-29 12:09:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #128: GFLOPs: 59.3312. Time: 260.2341 us. Best GFLOPs: 215.4215
