2024-04-29 07:42:53 [INFO] [task_scheduler.cc:160] Initializing Task #30: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22"
2024-04-29 07:42:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(24), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4), T.int64(96), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:42:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:42:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(24), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(4), T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(3), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(12) + ow_1 * T.int64(3) + ow_2 * T.int64(3) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 3])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:42:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(24), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(3), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(12) + ow_1 * T.int64(3) + ow_2 * T.int64(3) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(3), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ow_1 * T.int64(3) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 3])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:42:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(24), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(4), T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(3), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(12) + ow_1 * T.int64(3) + ow_2 * T.int64(3) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(6), T.int64(12), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 3])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:28:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:28:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:29:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 08:29:01 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:29:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 08:29:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 08:29:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 08:29:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 08:29:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9973  0.9970  0.9957  0.9955  0.9950  0.9946  0.9943  0.9938  0.9937  0.9929  0.9928  0.9918  0.9914  0.9912  0.9909
[17 : 32]:	0.9906  0.9906  0.9903  0.9900  0.9897  0.9896  0.9896  0.9893  0.9891  0.9881  0.9879  0.9870  0.9857  0.9856  0.9855  0.9853
[33 : 48]:	0.9852  0.9844  0.9837  0.9835  0.9835  0.9830  0.9823  0.9817  0.9814  0.9810  0.9808  0.9805  0.9803  0.9802  0.9798  0.9790
[49 : 64]:	0.9788  0.9753  0.9750  0.9748  0.9747  0.9742  0.9732  0.9730  0.9729  0.9727  0.9715  0.9711  0.9696  0.9695  0.9684  0.9674
2024-04-29 08:29:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:29:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #1: GFLOPs: 16.8327. Time: 1420.7802 us. Best GFLOPs: 16.8327
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #2: GFLOPs: 132.7133. Time: 180.2044 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #3: GFLOPs: 2.8892. Time: 8277.6036 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #4: GFLOPs: 57.6176. Time: 415.0735 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #5: GFLOPs: 53.3573. Time: 448.2143 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #6: GFLOPs: 49.8154. Time: 480.0831 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #7: GFLOPs: 4.0238. Time: 5943.5741 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #8: GFLOPs: 2.2415. Time: 10669.6226 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #9: GFLOPs: 49.8354. Time: 479.8905 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #10: GFLOPs: 48.3199. Time: 494.9414 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #11: GFLOPs: 44.4847. Time: 537.6128 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #12: GFLOPs: 7.8541. Time: 3044.9678 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #13: GFLOPs: 80.5092. Time: 297.0531 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #14: GFLOPs: 40.0555. Time: 597.0602 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #15: GFLOPs: 36.5436. Time: 654.4388 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #16: GFLOPs: 16.2411. Time: 1472.5287 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #17: GFLOPs: 36.0829. Time: 662.7932 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #18: GFLOPs: 20.1015. Time: 1189.7380 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #19: GFLOPs: 4.1494. Time: 5763.6113 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #20: GFLOPs: 17.7701. Time: 1345.8323 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #21: GFLOPs: 8.5702. Time: 2790.5456 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #22: GFLOPs: 25.0812. Time: 953.5244 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #23: GFLOPs: 48.5213. Time: 492.8866 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #24: GFLOPs: 9.6224. Time: 2485.3982 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #25: GFLOPs: 12.4489. Time: 1921.0923 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #26: GFLOPs: 27.7133. Time: 862.9620 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #27: GFLOPs: 6.8047. Time: 3514.5383 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #28: GFLOPs: 91.9923. Time: 259.9731 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #29: GFLOPs: 95.1450. Time: 251.3586 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #30: GFLOPs: 88.5512. Time: 270.0757 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #31: GFLOPs: 43.6160. Time: 548.3194 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #32: GFLOPs: 18.6064. Time: 1285.3376 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #33: GFLOPs: 19.3830. Time: 1233.8405 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #34: GFLOPs: 41.4628. Time: 576.7941 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #35: GFLOPs: 82.1412. Time: 291.1514 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #36: GFLOPs: 113.5900. Time: 210.5425 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #37: GFLOPs: 95.8476. Time: 249.5161 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #38: GFLOPs: 6.0392. Time: 3960.0182 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #39: GFLOPs: 17.4890. Time: 1367.4587 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #40: GFLOPs: 99.5015. Time: 240.3533 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #41: GFLOPs: 33.7564. Time: 708.4736 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #42: GFLOPs: 7.9248. Time: 3017.8003 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #43: GFLOPs: 10.1578. Time: 2354.4037 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #44: GFLOPs: 12.2502. Time: 1952.2592 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #45: GFLOPs: 130.6513. Time: 183.0485 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #46: GFLOPs: 55.0633. Time: 434.3274 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #47: GFLOPs: 89.7361. Time: 266.5094 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #48: GFLOPs: 87.9026. Time: 272.0684 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #49: GFLOPs: 67.1704. Time: 356.0426 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #50: GFLOPs: 17.6387. Time: 1355.8583 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #51: GFLOPs: 98.8283. Time: 241.9906 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #52: GFLOPs: 22.7567. Time: 1050.9200 us. Best GFLOPs: 132.7133
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #53: GFLOPs: 166.1335. Time: 143.9536 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #54: GFLOPs: 61.1308. Time: 391.2187 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #55: GFLOPs: 9.6076. Time: 2489.2300 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #56: GFLOPs: 98.1054. Time: 243.7738 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #57: GFLOPs: 2.3171. Time: 10321.4822 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #58: GFLOPs: 88.2666. Time: 270.9463 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #59: GFLOPs: 74.5038. Time: 320.9973 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #60: GFLOPs: 13.0380. Time: 1834.2989 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #61: GFLOPs: 19.9965. Time: 1195.9829 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #62: GFLOPs: 81.5731. Time: 293.1791 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #63: GFLOPs: 47.2645. Time: 505.9932 us. Best GFLOPs: 166.1335
2024-04-29 09:17:15 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #64: GFLOPs: 31.1902. Time: 766.7645 us. Best GFLOPs: 166.1335
2024-04-29 12:50:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:50:34 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 12:50:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 12:50:36 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-29 12:50:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 12:50:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 12:50:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 12:50:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d213c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x96aa6a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa52a758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a2bce8)]: 0 failure(s)
2024-04-29 12:51:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9666  0.9121  0.8946  0.8946  0.8794  0.8654  0.7903  0.7903  0.7903  0.7903  0.7903  0.7903  0.7791  0.7785  0.7785  0.7785
[17 : 32]:	0.7785  0.7785  0.7785  0.7772  0.7625  0.7585  0.7585  0.7434  0.7416  0.7392  0.7392  0.7351  0.7340  0.7324  0.7324  0.7324
[33 : 48]:	0.7270  0.7203  0.7201  0.7172  0.7101  0.7101  0.7068  0.7052  0.7022  0.7022  0.7022  0.7010  0.7010  0.7010  0.7010  0.6959
[49 : 64]:	0.6948  0.6932  0.6919  0.6904  0.6889  0.6884  0.6884  0.6841  0.6824  0.6824  0.6794  0.6793  0.6761  0.6760  0.6741  0.6725
2024-04-29 12:51:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:51:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #65: GFLOPs: 85.1911. Time: 280.7278 us. Best GFLOPs: 166.1335
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #66: GFLOPs: 145.3321. Time: 164.5578 us. Best GFLOPs: 166.1335
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #67: GFLOPs: 146.1980. Time: 163.5831 us. Best GFLOPs: 166.1335
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #68: GFLOPs: 162.7617. Time: 146.9358 us. Best GFLOPs: 166.1335
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #69: GFLOPs: 154.2692. Time: 155.0246 us. Best GFLOPs: 166.1335
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #70: GFLOPs: 120.7171. Time: 198.1121 us. Best GFLOPs: 166.1335
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #71: GFLOPs: 169.5504. Time: 141.0526 us. Best GFLOPs: 169.5504
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #72: GFLOPs: 127.9592. Time: 186.8996 us. Best GFLOPs: 169.5504
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #73: GFLOPs: 127.0438. Time: 188.2462 us. Best GFLOPs: 169.5504
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #74: GFLOPs: 133.5045. Time: 179.1365 us. Best GFLOPs: 169.5504
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #75: GFLOPs: 171.2291. Time: 139.6697 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #76: GFLOPs: 125.7947. Time: 190.1154 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #77: GFLOPs: 133.2025. Time: 179.5426 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #78: GFLOPs: 152.0752. Time: 157.2611 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #79: GFLOPs: 151.9786. Time: 157.3611 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #80: GFLOPs: 151.4473. Time: 157.9132 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #81: GFLOPs: 152.1746. Time: 157.1584 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #82: GFLOPs: 170.1477. Time: 140.5574 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #83: GFLOPs: 169.9941. Time: 140.6844 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #84: GFLOPs: 141.6378. Time: 168.8498 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #85: GFLOPs: 142.2640. Time: 168.1066 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #86: GFLOPs: 131.9613. Time: 181.2313 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #87: GFLOPs: 134.2901. Time: 178.0885 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #88: GFLOPs: 105.9652. Time: 225.6922 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #89: GFLOPs: 121.5369. Time: 196.7758 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #90: GFLOPs: 150.0205. Time: 159.4150 us. Best GFLOPs: 171.2291
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #91: GFLOPs: 171.4421. Time: 139.4962 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #92: GFLOPs: 128.2555. Time: 186.4678 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #93: GFLOPs: 103.8143. Time: 230.3682 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #94: GFLOPs: 130.1911. Time: 183.6954 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #95: GFLOPs: 134.6079. Time: 177.6681 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #96: GFLOPs: 132.7086. Time: 180.2108 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #97: GFLOPs: 103.5028. Time: 231.0616 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #98: GFLOPs: 74.0648. Time: 322.8998 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #99: GFLOPs: 144.8904. Time: 165.0594 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #100: GFLOPs: 129.8973. Time: 184.1110 us. Best GFLOPs: 171.4421
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #101: GFLOPs: 183.9138. Time: 130.0366 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #102: GFLOPs: 71.7996. Time: 333.0873 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #103: GFLOPs: 138.9120. Time: 172.1630 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #104: GFLOPs: 177.4925. Time: 134.7410 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #105: GFLOPs: 129.3161. Time: 184.9385 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #106: GFLOPs: 133.9357. Time: 178.5597 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #107: GFLOPs: 126.3261. Time: 189.3157 us. Best GFLOPs: 183.9138
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #108: GFLOPs: 188.3010. Time: 127.0069 us. Best GFLOPs: 188.3010
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #109: GFLOPs: 183.5027. Time: 130.3279 us. Best GFLOPs: 188.3010
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #110: GFLOPs: 177.9254. Time: 134.4132 us. Best GFLOPs: 188.3010
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #111: GFLOPs: 189.4002. Time: 126.2698 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #112: GFLOPs: 183.3929. Time: 130.4059 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #113: GFLOPs: 47.0070. Time: 508.7651 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #114: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(24), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(144) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(144) // T.int64(48) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(48) // T.int64(8) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(144) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(144) // T.int64(48) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(48) // T.int64(8) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(144) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(144) // T.int64(48) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(48) // T.int64(8) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 4, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[6, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #115: GFLOPs: 131.1493. Time: 182.3534 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #116: GFLOPs: 143.8245. Time: 166.2826 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #117: GFLOPs: 144.0750. Time: 165.9936 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #118: GFLOPs: 95.4090. Time: 250.6632 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #119: GFLOPs: 122.8897. Time: 194.6097 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #120: GFLOPs: 97.4284. Time: 245.4676 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #121: GFLOPs: 122.6721. Time: 194.9548 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #122: GFLOPs: 124.1835. Time: 192.5822 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #123: GFLOPs: 136.4147. Time: 175.3148 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #124: GFLOPs: 111.9508. Time: 213.6252 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #125: GFLOPs: 177.0396. Time: 135.0857 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #126: GFLOPs: 32.6354. Time: 732.8103 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #127: GFLOPs: 22.5050. Time: 1062.6776 us. Best GFLOPs: 189.4002
2024-04-29 12:52:46 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #128: GFLOPs: 30.2149. Time: 791.5147 us. Best GFLOPs: 189.4002
