2024-04-29 07:44:38 [INFO] [task_scheduler.cc:160] Initializing Task #59: "fused_nn_global_avg_pool2d"
2024-04-29 07:44:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(5)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.040000000000000001)
2024-04-29 07:44:38 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:44:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(512)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax0_2, ax1_2, ax2_1, ax3_1, ax4_1, ax5_1, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(25)):
                        with T.block("adaptive_pool_sum_rf"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_2, ax1_2])
                            v_ax1 = T.axis.spatial(T.int64(512), ax1 + ax2_1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                            v_ax4 = T.axis.spatial(T.int64(4), ax5 + ax5_1)
                            vrv0_rv1_fused_1 = T.axis.reduce(T.int64(25), ax6)
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) // T.int64(5), v_ax3 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) % T.int64(5), v_ax4])
                            T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            with T.init():
                                adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) // T.int64(5), v_ax3 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) % T.int64(5), v_ax4]
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(512), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 25])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=7)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:44:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(25)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(25), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(512), ax1 + ax2_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(1), ax6)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) // T.int64(5), v_ax3 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) % T.int64(5), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) // T.int64(5), v_ax3 * T.int64(5) + (vrv0_rv1_fused_0 * T.int64(25) + vrv0_rv1_fused_1) % T.int64(5), v_ax4]
                for rv0_rv1_fused_1 in range(T.int64(25)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 25])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=4)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:44:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(5)):
                with T.block("adaptive_pool_sum"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1, v_ax4])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1, v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 09:11:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:11:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:11:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa9edea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4b5748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd001a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98488c8)]: 0 failure(s)
2024-04-29 09:11:11 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:11:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa9edea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4b5748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd001a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98488c8)]: 0 failure(s)
2024-04-29 09:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa9edea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4b5748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd001a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98488c8)]: 0 failure(s)
2024-04-29 09:11:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa9edea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4b5748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd001a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98488c8)]: 0 failure(s)
2024-04-29 09:11:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa9edea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4b5748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd001a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98488c8)]: 0 failure(s)
2024-04-29 09:11:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9858  0.9831  0.9757  0.9725  0.9647  0.9601  0.9539  0.9527  0.9506  0.9485  0.9474  0.9469  0.9468  0.9450  0.9424  0.9396
[17 : 32]:	0.9394  0.9367  0.9095  0.9085  0.8999  0.8910  0.8874  0.8856  0.8836  0.8822  0.8802  0.8690  0.8625  0.8572  0.8512  0.8432
[33 : 48]:	0.8412  0.8406  0.8397  0.8385  0.8383  0.8302  0.8269  0.8265  0.8208  0.8200  0.8173  0.8163  0.8069  0.8043  0.8042  0.8037
[49 : 64]:	0.8027  0.8018  0.8009  0.7894  0.7856  0.7824  0.7794  0.7772  0.7709  0.7679  0.7595  0.7587  0.7579  0.7554  0.7506  0.7446
2024-04-29 09:11:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:11:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 2.1277. Time: 25.0257 us. Best GFLOPs: 2.1277
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 2.1424. Time: 24.8547 us. Best GFLOPs: 2.1424
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 4.1249. Time: 12.9089 us. Best GFLOPs: 4.1249
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 1.4477. Time: 36.7823 us. Best GFLOPs: 4.1249
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 2.0883. Time: 25.4988 us. Best GFLOPs: 4.1249
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 2.0361. Time: 26.1522 us. Best GFLOPs: 4.1249
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 2.0482. Time: 25.9969 us. Best GFLOPs: 4.1249
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 3.7767. Time: 14.0990 us. Best GFLOPs: 4.1249
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 4.4988. Time: 11.8361 us. Best GFLOPs: 4.4988
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 2.5489. Time: 20.8905 us. Best GFLOPs: 4.4988
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 2.4400. Time: 21.8234 us. Best GFLOPs: 4.4988
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 4.6663. Time: 11.4112 us. Best GFLOPs: 4.6663
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 3.7752. Time: 14.1048 us. Best GFLOPs: 4.6663
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 2.2973. Time: 23.1789 us. Best GFLOPs: 4.6663
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 4.7515. Time: 11.2065 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 4.5912. Time: 11.5978 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 4.5982. Time: 11.5801 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 1.4779. Time: 36.0287 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 2.0432. Time: 26.0617 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 2.1564. Time: 24.6927 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 3.8877. Time: 13.6964 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 4.4381. Time: 11.9980 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 4.4307. Time: 12.0178 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 3.8730. Time: 13.7484 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 2.1235. Time: 25.0751 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 3.8019. Time: 14.0055 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 2.2905. Time: 23.2473 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 4.2734. Time: 12.4603 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 4.5945. Time: 11.5894 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 2.2281. Time: 23.8985 us. Best GFLOPs: 4.7515
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 4.8103. Time: 11.0695 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 3.9308. Time: 13.5464 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 2.4425. Time: 21.8002 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 1.9865. Time: 26.8043 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 2.2883. Time: 23.2699 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 4.6236. Time: 11.5167 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 4.1195. Time: 12.9257 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 3.5430. Time: 15.0292 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 1.7271. Time: 30.8314 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 1.9103. Time: 27.8747 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 2.2081. Time: 24.1144 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 3.7741. Time: 14.1087 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 2.0630. Time: 25.8113 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 1.5291. Time: 34.8233 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 1.9811. Time: 26.8783 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 1.0319. Time: 51.6019 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 3.7364. Time: 14.2511 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 4.2202. Time: 12.6175 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 4.0258. Time: 13.2268 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 2.1575. Time: 24.6805 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 4.2396. Time: 12.5596 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 2.1818. Time: 24.4054 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 2.1291. Time: 25.0091 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 4.6735. Time: 11.3935 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.4134. Time: 22.0634 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 4.5559. Time: 11.6877 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 1.5125. Time: 35.2052 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 1.4437. Time: 36.8836 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 4.5614. Time: 11.6736 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 4.0298. Time: 13.2134 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 1.1542. Time: 46.1345 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 3.7930. Time: 14.0386 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 2.0866. Time: 25.5188 us. Best GFLOPs: 4.8103
2024-04-29 09:19:56 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 2.1775. Time: 24.4542 us. Best GFLOPs: 4.8103
