2024-04-29 07:43:22 [INFO] [task_scheduler.cc:160] Initializing Task #40: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26"
2024-04-29 07:43:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4), T.int64(64), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:43:23 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:23 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(3), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(27), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(27), oh_0 * T.int64(5) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2 * T.int64(25) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 5, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 07:43:23 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(5), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(3), T.int64(27), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(27), oh_0 * T.int64(5) + oh_1 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2 * T.int64(25) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(8) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 5, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 07:43:23 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(3), T.int64(5), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1 in T.grid(T.int64(1), T.int64(8), T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(16), ic_1 // T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(27), oh_0 * T.int64(5) + oh_1 + kh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(27), kw_1 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ic_1 % T.int64(4) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2 * T.int64(25) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(5), T.int64(25), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 5, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=20)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 08:40:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:40:14 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:40:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 08:40:19 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:40:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 08:40:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 08:40:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 08:40:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 08:40:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9994  0.9993  0.9980  0.9978  0.9973  0.9972  0.9966  0.9961  0.9959  0.9943  0.9937  0.9929  0.9910  0.9906
[17 : 32]:	0.9905  0.9902  0.9900  0.9899  0.9893  0.9888  0.9884  0.9876  0.9870  0.9857  0.9851  0.9849  0.9848  0.9836  0.9833  0.9816
[33 : 48]:	0.9797  0.9796  0.9792  0.9792  0.9783  0.9779  0.9768  0.9763  0.9755  0.9742  0.9741  0.9737  0.9733  0.9733  0.9729  0.9728
[49 : 64]:	0.9723  0.9719  0.9712  0.9709  0.9699  0.9688  0.9682  0.9678  0.9669  0.9667  0.9656  0.9649  0.9637  0.9636  0.9634  0.9633
2024-04-29 08:40:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:40:43 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #1: GFLOPs: 33.6361. Time: 2058.5044 us. Best GFLOPs: 33.6361
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #2: GFLOPs: 19.5025. Time: 3550.3099 us. Best GFLOPs: 33.6361
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #3: GFLOPs: 7.4945. Time: 9238.7686 us. Best GFLOPs: 33.6361
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #4: GFLOPs: 36.1099. Time: 1917.4774 us. Best GFLOPs: 36.1099
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #5: GFLOPs: 38.0111. Time: 1821.5732 us. Best GFLOPs: 38.0111
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #6: GFLOPs: 4.7988. Time: 14428.6020 us. Best GFLOPs: 38.0111
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #7: GFLOPs: 139.7365. Time: 495.5042 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #8: GFLOPs: 53.8860. Time: 1284.9341 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #9: GFLOPs: 24.0110. Time: 2883.6795 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #10: GFLOPs: 118.0470. Time: 586.5462 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #11: GFLOPs: 86.8818. Time: 796.9444 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #12: GFLOPs: 109.5662. Time: 631.9467 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #13: GFLOPs: 14.5656. Time: 4753.6772 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #14: GFLOPs: 72.1170. Time: 960.1064 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #15: GFLOPs: 13.6118. Time: 5086.7596 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #16: GFLOPs: 61.0065. Time: 1134.9606 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #17: GFLOPs: 36.2841. Time: 1908.2761 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #18: GFLOPs: 20.1789. Time: 3431.3148 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #19: GFLOPs: 7.1154. Time: 9731.0084 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #20: GFLOPs: 54.2345. Time: 1276.6779 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #21: GFLOPs: 24.2175. Time: 2859.0840 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #22: GFLOPs: 101.5980. Time: 681.5094 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #23: GFLOPs: 3.6617. Time: 18909.4622 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #24: GFLOPs: 50.2426. Time: 1378.1143 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #25: GFLOPs: 35.7312. Time: 1937.8044 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #26: GFLOPs: 0.6527. Time: 106089.6100 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #27: GFLOPs: 57.9784. Time: 1194.2369 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #28: GFLOPs: 2.2694. Time: 30509.9168 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #29: GFLOPs: 2.3504. Time: 29458.6975 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #30: GFLOPs: 6.5576. Time: 10558.7359 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #31: GFLOPs: 86.6604. Time: 798.9810 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #32: GFLOPs: 52.5972. Time: 1316.4201 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #33: GFLOPs: 8.4631. Time: 8181.3701 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(25), T.int64(25), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0 in T.grid(T.int64(2), T.int64(3)):
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(25), T.int64(27)):
                            for ax4_fused in T.vectorized(T.int64(4)):
                                with T.block("data_pad"):
                                    v_i0 = T.axis.spatial(T.int64(1), ax0)
                                    v_i1 = T.axis.spatial(T.int64(16), ic_0 * T.int64(8) + ax1)
                                    v_i2 = T.axis.spatial(T.int64(27), kh_0 + ax2)
                                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                        for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(25), T.int64(25), T.int64(2), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            for oc_block_3_fused in T.vectorized(T.int64(2)):
                                with T.block("conv2d_NCHWc_update"):
                                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                    v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                                    v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 + oh_3)
                                    v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2 + ow_3)
                                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(25), T.int64(25)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b70)
l126 = sch.fuse(l125, preserve_unit_iters=True)
sch.vectorize(loop=l126)
b127 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b127)
b154 = sch.decompose_reduction(block=b127, loop=l138)
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #35: GFLOPs: 63.0223. Time: 1098.6579 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #36: GFLOPs: 45.7556. Time: 1513.2580 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #37: GFLOPs: 5.2670. Time: 13146.1201 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #38: GFLOPs: 96.2624. Time: 719.2840 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #39: GFLOPs: 29.7939. Time: 2323.9654 us. Best GFLOPs: 139.7365
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #40: GFLOPs: 159.6027. Time: 433.8272 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #41: GFLOPs: 40.6293. Time: 1704.1885 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #42: GFLOPs: 74.9591. Time: 923.7033 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #43: GFLOPs: 28.9728. Time: 2389.8298 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #44: GFLOPs: 3.9240. Time: 17645.2533 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #45: GFLOPs: 10.0496. Time: 6889.8017 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(10), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(27)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(27), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(5) * T.int64(5) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(5) * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init * T.int64(5) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(5) * T.int64(5) + ow_1 * T.int64(5) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(5) * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(5) * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(25)):
                    for ax3_ax4_fused in T.vectorized(T.int64(20)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(5) * T.int64(12) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(25), ax2)
                            v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(5) * T.int64(5) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 6, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l78, l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #47: GFLOPs: 38.2687. Time: 1809.3125 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #48: GFLOPs: 11.5502. Time: 5994.6907 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #49: GFLOPs: 15.9335. Time: 4345.5638 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(11664)):
            for i4_fused in T.vectorized(T.int64(4)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(16), i0_i1_i2_i3_fused // T.int64(729))
                    v_i2 = T.axis.spatial(T.int64(27), i0_i1_i2_i3_fused % T.int64(729) // T.int64(27))
                    v_i3 = T.axis.spatial(T.int64(27), i0_i1_i2_i3_fused % T.int64(27))
                    v_i4 = T.axis.spatial(T.int64(4), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(15), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(4), T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(5) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init * T.int64(25) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(5) * T.int64(5) + ow_1 * T.int64(5) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(5) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 * T.int64(25) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(5) * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(25)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(5) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(5) * T.int64(5) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #51: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(11664)):
            for i4_fused in T.vectorized(T.int64(4)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(16), i0_i1_i2_i3_fused // T.int64(729))
                    v_i2 = T.axis.spatial(T.int64(27), i0_i1_i2_i3_fused % T.int64(729) // T.int64(27))
                    v_i3 = T.axis.spatial(T.int64(27), i0_i1_i2_i3_fused % T.int64(27))
                    v_i4 = T.axis.spatial(T.int64(4), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(5), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(25)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), ow_2_init * T.int64(25) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(5), T.int64(25)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_2 * T.int64(25) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(938)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(2500))
                    v_ax2 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2500) // T.int64(100))
                    v_ax3 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(60000))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 6, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #52: GFLOPs: 3.3175. Time: 20871.3874 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #53: GFLOPs: 19.6428. Time: 3524.9553 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #54: GFLOPs: 4.6779. Time: 14801.5423 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #55: GFLOPs: 64.6587. Time: 1070.8543 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #56: GFLOPs: 57.8587. Time: 1196.7085 us. Best GFLOPs: 159.6027
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #57: GFLOPs: 184.2717. Time: 375.7495 us. Best GFLOPs: 184.2717
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(11664)):
            for i4_fused in T.vectorized(T.int64(4)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(16), i0_i1_i2_i3_fused // T.int64(729))
                    v_i2 = T.axis.spatial(T.int64(27), i0_i1_i2_i3_fused % T.int64(729) // T.int64(27))
                    v_i3 = T.axis.spatial(T.int64(27), i0_i1_i2_i3_fused % T.int64(27))
                    v_i4 = T.axis.spatial(T.int64(4), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(240), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(40) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(25), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(40) // T.int64(8) * T.int64(5) + ow_2_init * T.int64(5) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(40) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(40) // T.int64(8) * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(938)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(2500))
                    v_ax2 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2500) // T.int64(100))
                    v_ax3 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(60000))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #59: GFLOPs: 126.9299. Time: 545.4981 us. Best GFLOPs: 184.2717
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #60: GFLOPs: 129.2767. Time: 535.5954 us. Best GFLOPs: 184.2717
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #61: GFLOPs: 34.4216. Time: 2011.5282 us. Best GFLOPs: 184.2717
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #62: GFLOPs: 23.7712. Time: 2912.7695 us. Best GFLOPs: 184.2717
2024-04-29 09:17:59 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #63: GFLOPs: 25.6845. Time: 2695.7856 us. Best GFLOPs: 184.2717
2024-04-29 09:33:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:33:11 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 09:33:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 09:33:16 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 09:33:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 09:33:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 09:33:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 09:34:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 09:34:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9846  0.9835  0.9825  0.9698  0.9697  0.9690  0.9429  0.8511  0.8369  0.8235  0.8122  0.8027  0.7793  0.7721  0.7693  0.7693
[17 : 32]:	0.7693  0.7658  0.7607  0.7557  0.7530  0.7458  0.7458  0.7439  0.7409  0.7327  0.7322  0.7297  0.7216  0.7205  0.7156  0.7141
[33 : 48]:	0.7141  0.7141  0.7122  0.7035  0.6984  0.6971  0.6930  0.6924  0.6899  0.6897  0.6896  0.6884  0.6880  0.6856  0.6852  0.6852
[49 : 64]:	0.6851  0.6832  0.6814  0.6810  0.6800  0.6798  0.6783  0.6778  0.6758  0.6753  0.6738  0.6738  0.6732  0.6730  0.6669  0.6662
2024-04-29 09:34:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:34:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #64: GFLOPs: 179.2253. Time: 386.3294 us. Best GFLOPs: 184.2717
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #65: GFLOPs: 124.1986. Time: 557.4942 us. Best GFLOPs: 184.2717
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #66: GFLOPs: 190.4223. Time: 363.6129 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #67: GFLOPs: 129.8718. Time: 533.1413 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #68: GFLOPs: 90.9136. Time: 761.6023 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #69: GFLOPs: 141.2803. Time: 490.0895 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #70: GFLOPs: 85.8909. Time: 806.1393 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #71: GFLOPs: 160.0108. Time: 432.7208 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #72: GFLOPs: 74.0480. Time: 935.0697 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #73: GFLOPs: 85.8652. Time: 806.3801 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #74: GFLOPs: 189.8190. Time: 364.7686 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #75: GFLOPs: 145.3236. Time: 476.4539 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #76: GFLOPs: 70.7751. Time: 978.3098 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #77: GFLOPs: 160.1364. Time: 432.3814 us. Best GFLOPs: 190.4223
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #78: GFLOPs: 207.2838. Time: 334.0347 us. Best GFLOPs: 207.2838
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #79: GFLOPs: 183.2638. Time: 377.8161 us. Best GFLOPs: 207.2838
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #80: GFLOPs: 252.5110. Time: 274.2059 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #81: GFLOPs: 162.1889. Time: 426.9096 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #82: GFLOPs: 141.3696. Time: 489.7801 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #83: GFLOPs: 213.1350. Time: 324.8645 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #84: GFLOPs: 131.5700. Time: 526.2598 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #85: GFLOPs: 80.1854. Time: 863.4988 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #86: GFLOPs: 138.6310. Time: 499.4554 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #87: GFLOPs: 184.7769. Time: 374.7222 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #88: GFLOPs: 88.6272. Time: 781.2501 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #89: GFLOPs: 86.0810. Time: 804.3584 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #90: GFLOPs: 138.2346. Time: 500.8877 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #91: GFLOPs: 124.8957. Time: 554.3824 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #92: GFLOPs: 176.8342. Time: 391.5532 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #93: GFLOPs: 177.4706. Time: 390.1490 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #94: GFLOPs: 157.2326. Time: 440.3666 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #95: GFLOPs: 123.4220. Time: 561.0021 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #96: GFLOPs: 135.5460. Time: 510.8228 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #97: GFLOPs: 164.4287. Time: 421.0943 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #98: GFLOPs: 116.5019. Time: 594.3252 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #99: GFLOPs: 221.1639. Time: 313.0710 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #100: GFLOPs: 143.3434. Time: 483.0359 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #101: GFLOPs: 182.2955. Time: 379.8229 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #102: GFLOPs: 144.6977. Time: 478.5149 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #103: GFLOPs: 127.2442. Time: 544.1506 us. Best GFLOPs: 252.5110
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #104: GFLOPs: 440.5482. Time: 157.1678 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #105: GFLOPs: 151.9940. Time: 455.5443 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #106: GFLOPs: 236.6200. Time: 292.6211 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #107: GFLOPs: 119.9768. Time: 577.1116 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #108: GFLOPs: 268.7096. Time: 257.6759 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #109: GFLOPs: 180.8285. Time: 382.9042 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #110: GFLOPs: 233.2236. Time: 296.8824 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #111: GFLOPs: 98.6655. Time: 701.7652 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #112: GFLOPs: 149.7735. Time: 462.2981 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #113: GFLOPs: 109.4821. Time: 632.4322 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #114: GFLOPs: 131.5704. Time: 526.2582 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #115: GFLOPs: 113.1909. Time: 611.7099 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #116: GFLOPs: 127.3555. Time: 543.6749 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #117: GFLOPs: 125.8002. Time: 550.3968 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #118: GFLOPs: 137.6401. Time: 503.0509 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #119: GFLOPs: 214.1203. Time: 323.3697 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #120: GFLOPs: 154.2204. Time: 448.9678 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #121: GFLOPs: 132.9244. Time: 520.8976 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #122: GFLOPs: 112.9868. Time: 612.8148 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #123: GFLOPs: 112.8243. Time: 613.6977 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #124: GFLOPs: 102.2060. Time: 677.4550 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #125: GFLOPs: 0.7865. Time: 88036.9227 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #126: GFLOPs: 49.3123. Time: 1404.1133 us. Best GFLOPs: 440.5482
2024-04-29 09:35:25 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #127: GFLOPs: 66.1553. Time: 1046.6286 us. Best GFLOPs: 440.5482
2024-04-29 10:54:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:54:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:54:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 10:54:11 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 10:54:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 10:54:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 10:54:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 10:54:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 10:55:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9744  0.9744  0.9744  0.9744  0.9744  0.9744  0.9744  0.9396  0.9312  0.9206  0.9133  0.9062  0.8515  0.8364  0.8345  0.8272
[17 : 32]:	0.8272  0.6935  0.6935  0.6748  0.6748  0.6748  0.6748  0.6509  0.6419  0.6407  0.6047  0.5997  0.5893  0.5816  0.5816  0.5816
[33 : 48]:	0.5816  0.5710  0.5690  0.5658  0.5624  0.5623  0.5623  0.5623  0.5582  0.5558  0.5558  0.5558  0.5555  0.5532  0.5532  0.5512
[49 : 64]:	0.5495  0.5460  0.5460  0.5453  0.5406  0.5396  0.5396  0.5396  0.5396  0.5379  0.5378  0.5361  0.5359  0.5356  0.5356  0.5349
2024-04-29 10:55:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:55:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #128: GFLOPs: 347.1468. Time: 199.4545 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #129: GFLOPs: 352.0762. Time: 196.6620 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #130: GFLOPs: 433.3622. Time: 159.7740 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #131: GFLOPs: 340.7859. Time: 203.1774 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #132: GFLOPs: 342.9768. Time: 201.8796 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #133: GFLOPs: 427.4160. Time: 161.9967 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #134: GFLOPs: 417.4286. Time: 165.8727 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #135: GFLOPs: 425.6173. Time: 162.6814 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #136: GFLOPs: 179.8915. Time: 384.8986 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #137: GFLOPs: 171.5702. Time: 403.5666 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #138: GFLOPs: 153.7632. Time: 450.3028 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #139: GFLOPs: 410.8902. Time: 168.5122 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #140: GFLOPs: 327.5059. Time: 211.4160 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #141: GFLOPs: 250.3821. Time: 276.5374 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #142: GFLOPs: 326.4549. Time: 212.0967 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #143: GFLOPs: 171.7496. Time: 403.1451 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #144: GFLOPs: 171.6336. Time: 403.4176 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #145: GFLOPs: 399.6099. Time: 173.2690 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #146: GFLOPs: 396.9126. Time: 174.4465 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #147: GFLOPs: 135.2373. Time: 511.9891 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #148: GFLOPs: 142.5095. Time: 485.8623 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #149: GFLOPs: 309.2962. Time: 223.8631 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #150: GFLOPs: 233.2896. Time: 296.7985 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #151: GFLOPs: 235.1109. Time: 294.4993 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #152: GFLOPs: 153.3412. Time: 451.5421 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #153: GFLOPs: 104.9855. Time: 659.5194 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #154: GFLOPs: 117.7221. Time: 588.1648 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #155: GFLOPs: 142.5643. Time: 485.6756 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #156: GFLOPs: 124.4252. Time: 556.4788 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #157: GFLOPs: 131.0062. Time: 528.5247 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #158: GFLOPs: 164.1030. Time: 421.9302 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #159: GFLOPs: 163.0696. Time: 424.6039 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #160: GFLOPs: 127.9109. Time: 541.3142 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #161: GFLOPs: 84.9482. Time: 815.0852 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #162: GFLOPs: 143.2604. Time: 483.3155 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #163: GFLOPs: 367.8026. Time: 188.2531 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #164: GFLOPs: 93.2341. Time: 742.6471 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #165: GFLOPs: 157.5742. Time: 439.4120 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #166: GFLOPs: 172.0693. Time: 402.3960 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #167: GFLOPs: 143.2400. Time: 483.3845 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #168: GFLOPs: 134.6162. Time: 514.3510 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #169: GFLOPs: 440.4281. Time: 157.2107 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #170: GFLOPs: 165.5463. Time: 418.2515 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #171: GFLOPs: 168.1248. Time: 411.8369 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #172: GFLOPs: 160.9204. Time: 430.2749 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #173: GFLOPs: 188.5499. Time: 367.2238 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #174: GFLOPs: 133.4686. Time: 518.7736 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #175: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(125), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(16), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(27), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(5) + ax2)
                            v_i3 = T.axis.spatial(T.int64(27), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(5)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(5) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 24, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l85, l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #176: GFLOPs: 58.4971. Time: 1183.6479 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #177: GFLOPs: 108.1209. Time: 640.3944 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #178: GFLOPs: 76.6687. Time: 903.1070 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #179: GFLOPs: 78.9657. Time: 876.8369 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #180: GFLOPs: 139.7511. Time: 495.4524 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #181: GFLOPs: 189.4764. Time: 365.4281 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #182: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(16), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(1000), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(27), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(5) * T.int64(5) + ax2)
                        v_i3 = T.axis.spatial(T.int64(27), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(125) // T.int64(5) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(125) * T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(5) * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(125) // T.int64(5) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(125) * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(5) * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(125) // T.int64(5) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(3), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(125) * T.int64(3) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(5) * T.int64(5) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(125) // T.int64(5))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 3, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #183: GFLOPs: 167.6549. Time: 412.9912 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #184: GFLOPs: 191.1935. Time: 362.1461 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #185: GFLOPs: 212.4438. Time: 325.9215 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #186: GFLOPs: 136.4437. Time: 507.4621 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #187: GFLOPs: 348.8736. Time: 198.4673 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #188: GFLOPs: 187.8444. Time: 368.6029 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #189: GFLOPs: 33.7233. Time: 2053.1772 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #190: GFLOPs: 100.8927. Time: 686.2734 us. Best GFLOPs: 440.5482
2024-04-29 10:56:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #191: GFLOPs: 8.9506. Time: 7735.7988 us. Best GFLOPs: 440.5482
2024-04-29 11:51:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:51:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:51:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:51:20 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:51:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:51:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:51:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:52:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:52:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9186  0.9050  0.9050  0.8799  0.8711  0.8582  0.8324  0.8031  0.8031  0.8030  0.8015  0.8015  0.7986  0.7942  0.7942  0.7909
[17 : 32]:	0.7909  0.7903  0.7861  0.7839  0.7741  0.7699  0.7588  0.7571  0.7571  0.7564  0.7564  0.7564  0.7564  0.7554  0.7433  0.7433
[33 : 48]:	0.7377  0.7372  0.7372  0.7127  0.7112  0.7112  0.7112  0.7112  0.7112  0.7039  0.7037  0.7007  0.6963  0.6767  0.6767  0.6720
[49 : 64]:	0.6578  0.6417  0.6417  0.6386  0.6351  0.6250  0.6250  0.6250  0.6250  0.6250  0.6250  0.6222  0.6213  0.6213  0.6207  0.6188
2024-04-29 11:52:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:52:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #192: GFLOPs: 379.4876. Time: 182.4566 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #193: GFLOPs: 420.3032. Time: 164.7382 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #194: GFLOPs: 364.6898. Time: 189.8600 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #195: GFLOPs: 154.1828. Time: 449.0772 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #196: GFLOPs: 360.3994. Time: 192.1202 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #197: GFLOPs: 407.1320. Time: 170.0677 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #198: GFLOPs: 354.7503. Time: 195.1796 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #199: GFLOPs: 364.4674. Time: 189.9758 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #200: GFLOPs: 325.8460. Time: 212.4930 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #201: GFLOPs: 156.1393. Time: 443.4502 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #202: GFLOPs: 313.1464. Time: 221.1106 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #203: GFLOPs: 314.4368. Time: 220.2033 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #204: GFLOPs: 349.7362. Time: 197.9778 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #205: GFLOPs: 363.5948. Time: 190.4317 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #206: GFLOPs: 362.6072. Time: 190.9505 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #207: GFLOPs: 164.6655. Time: 420.4889 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #208: GFLOPs: 439.6105. Time: 157.5031 us. Best GFLOPs: 440.5482
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #209: GFLOPs: 457.8143. Time: 151.2404 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #210: GFLOPs: 378.5559. Time: 182.9056 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #211: GFLOPs: 335.3257. Time: 206.4858 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #212: GFLOPs: 187.9609. Time: 368.3744 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #213: GFLOPs: 344.4431. Time: 201.0202 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #214: GFLOPs: 171.5659. Time: 403.5766 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #215: GFLOPs: 378.0994. Time: 183.1264 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #216: GFLOPs: 143.4440. Time: 482.6972 us. Best GFLOPs: 457.8143
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #217: GFLOPs: 473.1914. Time: 146.3256 us. Best GFLOPs: 473.1914
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #218: GFLOPs: 499.5913. Time: 138.5933 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #219: GFLOPs: 425.5750. Time: 162.6975 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #220: GFLOPs: 497.7763. Time: 139.0986 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #221: GFLOPs: 42.6672. Time: 1622.7911 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #222: GFLOPs: 92.1998. Time: 750.9780 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #223: GFLOPs: 434.9704. Time: 159.1833 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #224: GFLOPs: 201.3939. Time: 343.8039 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #225: GFLOPs: 253.9702. Time: 272.6304 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #226: GFLOPs: 83.2244. Time: 831.9675 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #227: GFLOPs: 181.9872. Time: 380.4663 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #228: GFLOPs: 87.2352. Time: 793.7166 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #229: GFLOPs: 121.4502. Time: 570.1103 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #230: GFLOPs: 352.0617. Time: 196.6701 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #231: GFLOPs: 350.7016. Time: 197.4328 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #232: GFLOPs: 166.6199. Time: 415.5566 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #233: GFLOPs: 406.8192. Time: 170.1984 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #234: GFLOPs: 461.2325. Time: 150.1195 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #235: GFLOPs: 162.4322. Time: 426.2701 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #236: GFLOPs: 212.5445. Time: 325.7671 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #237: GFLOPs: 161.7911. Time: 427.9594 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #238: GFLOPs: 163.6716. Time: 423.0421 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #239: GFLOPs: 373.2055. Time: 185.5278 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #240: GFLOPs: 174.3371. Time: 397.1617 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #241: GFLOPs: 330.4990. Time: 209.5014 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #242: GFLOPs: 375.1966. Time: 184.5432 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #243: GFLOPs: 171.2625. Time: 404.2917 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #244: GFLOPs: 196.9112. Time: 351.6306 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #245: GFLOPs: 308.6317. Time: 224.3451 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #246: GFLOPs: 234.8531. Time: 294.8226 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #247: GFLOPs: 138.0613. Time: 501.5165 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #248: GFLOPs: 310.7895. Time: 222.7874 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #249: GFLOPs: 137.7106. Time: 502.7936 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #250: GFLOPs: 138.5952. Time: 499.5846 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #251: GFLOPs: 145.5924. Time: 475.5742 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #252: GFLOPs: 419.3290. Time: 165.1209 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #253: GFLOPs: 29.2740. Time: 2365.2354 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #254: GFLOPs: 39.0023. Time: 1775.2814 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #255: GFLOPs: 88.8327. Time: 779.4425 us. Best GFLOPs: 499.5913
2024-04-29 11:53:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:53:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:53:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:53:51 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:54:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:54:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:54:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:54:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbe2ce58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7da1c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec44f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf39de8)]: 0 failure(s)
2024-04-29 11:54:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9325  0.9325  0.9249  0.9249  0.8523  0.8523  0.7876  0.7876  0.7800  0.7790  0.7780  0.7776  0.7776  0.7627  0.7627  0.7627
[17 : 32]:	0.7627  0.7627  0.7515  0.7463  0.7463  0.7443  0.7443  0.7443  0.7404  0.7404  0.7219  0.7219  0.7164  0.7143  0.7124  0.7033
[33 : 48]:	0.7019  0.7016  0.6995  0.6957  0.6939  0.6892  0.6892  0.6876  0.6876  0.6876  0.6876  0.6823  0.6823  0.6809  0.6804  0.6804
[49 : 64]:	0.6779  0.6760  0.6760  0.6744  0.6744  0.6744  0.6744  0.6744  0.6743  0.6630  0.6624  0.6562  0.6562  0.6529  0.6529  0.6486
2024-04-29 11:54:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:54:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #256: GFLOPs: 250.8216. Time: 276.0528 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #257: GFLOPs: 277.6404. Time: 249.3874 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #258: GFLOPs: 263.8177. Time: 262.4539 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #259: GFLOPs: 317.7332. Time: 217.9187 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #260: GFLOPs: 460.4458. Time: 150.3760 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #261: GFLOPs: 460.7026. Time: 150.2922 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #262: GFLOPs: 408.9889. Time: 169.2956 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #263: GFLOPs: 412.0916. Time: 168.0209 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #264: GFLOPs: 405.2734. Time: 170.8476 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #265: GFLOPs: 345.6107. Time: 200.3410 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #266: GFLOPs: 452.4680. Time: 153.0274 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #267: GFLOPs: 172.6118. Time: 401.1312 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #268: GFLOPs: 403.6716. Time: 171.5256 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #269: GFLOPs: 194.5535. Time: 355.8919 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #270: GFLOPs: 389.2954. Time: 177.8598 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #271: GFLOPs: 388.1573. Time: 178.3813 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #272: GFLOPs: 382.4340. Time: 181.0509 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #273: GFLOPs: 214.2684. Time: 323.1461 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #274: GFLOPs: 214.7215. Time: 322.4642 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #275: GFLOPs: 245.2477. Time: 282.3268 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #276: GFLOPs: 226.3862. Time: 305.8490 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #277: GFLOPs: 192.2972. Time: 360.0676 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #278: GFLOPs: 476.2718. Time: 145.3792 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #279: GFLOPs: 470.1968. Time: 147.2575 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #280: GFLOPs: 391.3893. Time: 176.9083 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #281: GFLOPs: 396.7194. Time: 174.5314 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #282: GFLOPs: 425.1249. Time: 162.8698 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #283: GFLOPs: 423.2811. Time: 163.5792 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #284: GFLOPs: 150.3912. Time: 460.3992 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #285: GFLOPs: 414.5145. Time: 167.0388 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #286: GFLOPs: 385.2447. Time: 179.7299 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #287: GFLOPs: 371.2683. Time: 186.4958 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #288: GFLOPs: 407.1317. Time: 170.0678 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #289: GFLOPs: 460.9864. Time: 150.1997 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #290: GFLOPs: 355.7308. Time: 194.6416 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #291: GFLOPs: 372.9787. Time: 185.6406 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #292: GFLOPs: 300.4858. Time: 230.4268 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #293: GFLOPs: 415.0633. Time: 166.8179 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #294: GFLOPs: 134.0224. Time: 516.6301 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #295: GFLOPs: 327.3668. Time: 211.5059 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #296: GFLOPs: 362.7908. Time: 190.8538 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #297: GFLOPs: 319.9170. Time: 216.4311 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #298: GFLOPs: 368.6360. Time: 187.8276 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #299: GFLOPs: 301.3624. Time: 229.7566 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #300: GFLOPs: 299.0458. Time: 231.5365 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #301: GFLOPs: 404.6483. Time: 171.1116 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #302: GFLOPs: 227.8492. Time: 303.8851 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #303: GFLOPs: 334.4741. Time: 207.0115 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #304: GFLOPs: 326.5263. Time: 212.0503 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #305: GFLOPs: 360.3890. Time: 192.1257 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #306: GFLOPs: 194.2171. Time: 356.5083 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #307: GFLOPs: 154.5794. Time: 447.9252 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #308: GFLOPs: 420.6546. Time: 164.6006 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #309: GFLOPs: 162.6999. Time: 425.5687 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #310: GFLOPs: 167.5350. Time: 413.2868 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #311: GFLOPs: 160.6018. Time: 431.1284 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #312: GFLOPs: 182.4545. Time: 379.4918 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #313: GFLOPs: 246.6397. Time: 280.7334 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #314: GFLOPs: 406.8043. Time: 170.2047 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #315: GFLOPs: 359.7576. Time: 192.4629 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #316: GFLOPs: 352.2119. Time: 196.5862 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #317: GFLOPs: 36.3051. Time: 1907.1708 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #318: GFLOPs: 84.7290. Time: 817.1935 us. Best GFLOPs: 499.5913
2024-04-29 11:56:11 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #319: GFLOPs: 86.6266. Time: 799.2925 us. Best GFLOPs: 499.5913
