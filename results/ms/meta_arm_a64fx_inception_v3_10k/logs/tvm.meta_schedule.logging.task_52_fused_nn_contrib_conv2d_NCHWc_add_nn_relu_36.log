2024-04-29 07:44:10 [INFO] [task_scheduler.cc:160] Initializing Task #52: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36"
2024-04-29 07:44:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:44:10 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:44:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(5) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:44:10 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(5), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_1 * T.int64(5) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:44:10 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(25), T.int64(25), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:00:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:00:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:00:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 09:00:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:00:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 09:00:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 09:00:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 09:00:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 09:00:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9994  0.9990  0.9989  0.9987  0.9984  0.9977  0.9965  0.9963  0.9959  0.9959  0.9955  0.9950  0.9948  0.9948  0.9945
[17 : 32]:	0.9945  0.9944  0.9944  0.9941  0.9939  0.9937  0.9937  0.9934  0.9927  0.9925  0.9923  0.9922  0.9919  0.9910  0.9901  0.9900
[33 : 48]:	0.9897  0.9872  0.9866  0.9864  0.9861  0.9854  0.9853  0.9850  0.9849  0.9847  0.9841  0.9822  0.9805  0.9802  0.9801  0.9801
[49 : 64]:	0.9794  0.9792  0.9791  0.9789  0.9788  0.9788  0.9780  0.9773  0.9756  0.9748  0.9738  0.9738  0.9737  0.9725  0.9719  0.9710
2024-04-29 09:00:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:00:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #1: GFLOPs: 45.7860. Time: 449.0451 us. Best GFLOPs: 45.7860
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #2: GFLOPs: 141.1196. Time: 145.6921 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #3: GFLOPs: 26.2686. Time: 782.6839 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #4: GFLOPs: 5.3613. Time: 3834.9054 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #5: GFLOPs: 59.4134. Time: 346.0496 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #6: GFLOPs: 111.2917. Time: 184.7397 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #7: GFLOPs: 31.0248. Time: 662.6953 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #8: GFLOPs: 92.4968. Time: 222.2779 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #9: GFLOPs: 15.9597. Time: 1288.2445 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #10: GFLOPs: 62.9848. Time: 326.4279 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #11: GFLOPs: 30.6945. Time: 669.8273 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #12: GFLOPs: 76.2860. Time: 269.5122 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #13: GFLOPs: 24.8213. Time: 828.3219 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #14: GFLOPs: 25.7311. Time: 799.0345 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #15: GFLOPs: 88.1275. Time: 233.2983 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #16: GFLOPs: 1.1259. Time: 18261.6550 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #17: GFLOPs: 90.6838. Time: 226.7220 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #18: GFLOPs: 47.7893. Time: 430.2216 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #19: GFLOPs: 6.5148. Time: 3155.8882 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #20: GFLOPs: 99.2642. Time: 207.1241 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #21: GFLOPs: 8.0685. Time: 2548.1663 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #22: GFLOPs: 49.4888. Time: 415.4474 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #23: GFLOPs: 46.9518. Time: 437.8956 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #24: GFLOPs: 10.8893. Time: 1888.0913 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #25: GFLOPs: 20.0522. Time: 1025.3263 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #26: GFLOPs: 81.3534. Time: 252.7246 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:121] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init * T.int64(5) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(25), T.int64(25)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #28: GFLOPs: 6.4193. Time: 3202.8494 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #29: GFLOPs: 5.1880. Time: 3962.9738 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #30: GFLOPs: 129.1796. Time: 159.1582 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #31: GFLOPs: 48.1756. Time: 426.7721 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #32: GFLOPs: 18.4273. Time: 1115.7385 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #33: GFLOPs: 0.8610. Time: 23878.9104 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #34: GFLOPs: 26.2259. Time: 783.9564 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:121] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init * T.int64(5) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(25), T.int64(25)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #36: GFLOPs: 13.0980. Time: 1569.7009 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #37: GFLOPs: 5.5185. Time: 3725.6596 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #38: GFLOPs: 5.8837. Time: 3494.3831 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #39: GFLOPs: 2.0743. Time: 9911.6299 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #40: GFLOPs: 48.0951. Time: 427.4867 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #41: GFLOPs: 17.4981. Time: 1174.9865 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #42: GFLOPs: 26.4962. Time: 775.9603 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #43: GFLOPs: 41.6252. Time: 493.9320 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #44: GFLOPs: 63.7585. Time: 322.4668 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #45: GFLOPs: 1.0773. Time: 19084.3943 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #46: GFLOPs: 38.6750. Time: 531.6098 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #47: GFLOPs: 59.7642. Time: 344.0186 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #48: GFLOPs: 39.4971. Time: 520.5439 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #49: GFLOPs: 104.2081. Time: 197.2974 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #50: GFLOPs: 1.9587. Time: 10496.5824 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #51: GFLOPs: 7.6710. Time: 2680.2208 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #52: GFLOPs: 97.4912. Time: 210.8908 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #53: GFLOPs: 62.2881. Time: 330.0793 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #54: GFLOPs: 10.7157. Time: 1918.6871 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #55: GFLOPs: 30.2097. Time: 680.5767 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #56: GFLOPs: 40.4045. Time: 508.8538 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #57: GFLOPs: 48.4535. Time: 424.3240 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #58: GFLOPs: 44.4335. Time: 462.7141 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #59: GFLOPs: 57.0615. Time: 360.3129 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #60: GFLOPs: 33.1777. Time: 619.6927 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #61: GFLOPs: 1.5697. Time: 13097.7531 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #62: GFLOPs: 62.7148. Time: 327.8335 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #63: GFLOPs: 1.1106. Time: 18513.1070 us. Best GFLOPs: 141.1196
2024-04-29 09:19:10 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #64: GFLOPs: 2.0685. Time: 9939.4918 us. Best GFLOPs: 141.1196
2024-04-29 10:26:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:26:08 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 10:26:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 10:26:10 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 10:26:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 10:26:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 10:26:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 10:26:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6190d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xecbf148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9e7a58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd314528)]: 0 failure(s)
2024-04-29 10:26:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9435  0.9327  0.8456  0.8453  0.8384  0.8373  0.8050  0.7943  0.7913  0.7877  0.7839  0.7818  0.7787  0.7767  0.7747  0.7619
[17 : 32]:	0.7605  0.7605  0.7542  0.7498  0.7497  0.7470  0.7461  0.7460  0.7460  0.7426  0.7392  0.7390  0.7350  0.7288  0.7280  0.7256
[33 : 48]:	0.7200  0.7193  0.7187  0.7144  0.7142  0.7136  0.7109  0.7109  0.7104  0.7104  0.7094  0.7085  0.7080  0.7074  0.7073  0.7069
[49 : 64]:	0.7069  0.7041  0.7016  0.7009  0.7006  0.7005  0.6976  0.6970  0.6964  0.6964  0.6933  0.6928  0.6922  0.6921  0.6874  0.6872
2024-04-29 10:26:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:26:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #65: GFLOPs: 28.9372. Time: 710.5037 us. Best GFLOPs: 141.1196
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #66: GFLOPs: 129.1427. Time: 159.2037 us. Best GFLOPs: 141.1196
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #67: GFLOPs: 40.5421. Time: 507.1270 us. Best GFLOPs: 141.1196
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #68: GFLOPs: 156.5219. Time: 131.3554 us. Best GFLOPs: 156.5219
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #69: GFLOPs: 202.8589. Time: 101.3513 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #70: GFLOPs: 140.1100. Time: 146.7418 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #71: GFLOPs: 112.4021. Time: 182.9148 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #72: GFLOPs: 103.7130. Time: 198.2394 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #73: GFLOPs: 120.6417. Time: 170.4221 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #74: GFLOPs: 132.3486. Time: 155.3473 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #75: GFLOPs: 166.9869. Time: 123.1234 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #76: GFLOPs: 158.4382. Time: 129.7666 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #77: GFLOPs: 170.5649. Time: 120.5406 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #78: GFLOPs: 92.3844. Time: 222.5484 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #79: GFLOPs: 120.8445. Time: 170.1360 us. Best GFLOPs: 202.8589
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #80: GFLOPs: 267.0350. Time: 76.9937 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #81: GFLOPs: 215.0825. Time: 95.5912 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #82: GFLOPs: 157.7634. Time: 130.3218 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #83: GFLOPs: 147.3530. Time: 139.5289 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #84: GFLOPs: 160.0050. Time: 128.4960 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #85: GFLOPs: 174.3119. Time: 117.9495 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #86: GFLOPs: 122.2123. Time: 168.2318 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #87: GFLOPs: 177.1260. Time: 116.0756 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #88: GFLOPs: 188.7685. Time: 108.9165 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #89: GFLOPs: 162.8675. Time: 126.2376 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #90: GFLOPs: 89.9937. Time: 228.4605 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #91: GFLOPs: 87.0678. Time: 236.1379 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #92: GFLOPs: 133.3766. Time: 154.1499 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #93: GFLOPs: 126.4778. Time: 162.5582 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #94: GFLOPs: 95.0254. Time: 216.3633 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #95: GFLOPs: 103.1443. Time: 199.3323 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #96: GFLOPs: 78.3087. Time: 262.5506 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #97: GFLOPs: 110.1989. Time: 186.5717 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #98: GFLOPs: 159.8246. Time: 128.6410 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #99: GFLOPs: 145.1077. Time: 141.6878 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #100: GFLOPs: 71.3725. Time: 288.0661 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #101: GFLOPs: 128.0124. Time: 160.6095 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #102: GFLOPs: 122.8928. Time: 167.3002 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #103: GFLOPs: 128.2645. Time: 160.2937 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #104: GFLOPs: 125.8407. Time: 163.3812 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #105: GFLOPs: 101.1901. Time: 203.1819 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #106: GFLOPs: 265.4885. Time: 77.4422 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #107: GFLOPs: 88.7004. Time: 231.7914 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #108: GFLOPs: 101.8843. Time: 201.7976 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #109: GFLOPs: 58.3161. Time: 352.5615 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #110: GFLOPs: 191.9384. Time: 107.1177 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #111: GFLOPs: 102.0358. Time: 201.4980 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #112: GFLOPs: 118.4012. Time: 173.6469 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #113: GFLOPs: 121.3321. Time: 169.4523 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #114: GFLOPs: 200.5728. Time: 102.5064 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #115: GFLOPs: 114.9822. Time: 178.8103 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #116: GFLOPs: 153.0173. Time: 134.3639 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #117: GFLOPs: 125.8913. Time: 163.3155 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #118: GFLOPs: 110.9294. Time: 185.3431 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #119: GFLOPs: 186.5799. Time: 110.1941 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #120: GFLOPs: 145.4156. Time: 141.3879 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #121: GFLOPs: 140.4413. Time: 146.3957 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #122: GFLOPs: 140.0543. Time: 146.8002 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #123: GFLOPs: 94.6893. Time: 217.1312 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #124: GFLOPs: 76.4420. Time: 268.9621 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #125: GFLOPs: 79.4049. Time: 258.9262 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #126: GFLOPs: 15.3928. Time: 1335.6869 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #127: GFLOPs: 45.4893. Time: 451.9742 us. Best GFLOPs: 267.0350
2024-04-29 10:28:00 [INFO] [task_scheduler.cc:131] [Task #52: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #128: GFLOPs: 3.5463. Time: 5797.6438 us. Best GFLOPs: 267.0350
