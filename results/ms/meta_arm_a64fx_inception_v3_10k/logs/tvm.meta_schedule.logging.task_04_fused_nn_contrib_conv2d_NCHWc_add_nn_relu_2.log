2024-04-29 07:41:08 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2"
2024-04-29 07:41:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:41:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:41:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                    v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[96, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:41:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(96), oc_chunk_0 + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[96, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:41:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2048), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(96), oc_chunk_0 + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[96, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:49:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:49:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 07:49:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 07:49:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 07:49:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 07:49:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 07:49:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 07:49:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 07:49:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9995  0.9993  0.9992  0.9975  0.9969  0.9967  0.9966  0.9963  0.9962  0.9955  0.9941  0.9936  0.9935  0.9932  0.9928
[17 : 32]:	0.9924  0.9923  0.9918  0.9917  0.9909  0.9905  0.9902  0.9901  0.9897  0.9895  0.9893  0.9893  0.9890  0.9887  0.9884  0.9884
[33 : 48]:	0.9873  0.9873  0.9871  0.9867  0.9849  0.9849  0.9844  0.9840  0.9835  0.9833  0.9830  0.9817  0.9807  0.9805  0.9802  0.9801
[49 : 64]:	0.9800  0.9798  0.9796  0.9786  0.9785  0.9783  0.9780  0.9779  0.9779  0.9775  0.9772  0.9770  0.9765  0.9764  0.9762  0.9762
2024-04-29 07:49:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:49:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #1: GFLOPs: 148.9541. Time: 264.1136 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #2: GFLOPs: 6.1255. Time: 6422.5139 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #3: GFLOPs: 47.8784. Time: 821.6816 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #4: GFLOPs: 72.7407. Time: 540.8362 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #5: GFLOPs: 0.7435. Time: 52916.4927 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #6: GFLOPs: 20.4568. Time: 1923.1149 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #7: GFLOPs: 10.2630. Time: 3833.2471 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #8: GFLOPs: 80.5415. Time: 488.4537 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #9: GFLOPs: 15.1161. Time: 2602.5793 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #10: GFLOPs: 65.0984. Time: 604.3286 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #11: GFLOPs: 26.9552. Time: 1459.4877 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #12: GFLOPs: 2.6126. Time: 15058.3206 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #13: GFLOPs: 2.4010. Time: 16385.4877 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #14: GFLOPs: 0.2193. Time: 179416.7650 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #15: GFLOPs: 32.3049. Time: 1217.7951 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #16: GFLOPs: 9.7735. Time: 4025.2644 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #17: GFLOPs: 49.8168. Time: 789.7096 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #18: GFLOPs: 33.1728. Time: 1185.9340 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #19: GFLOPs: 50.5786. Time: 777.8150 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #20: GFLOPs: 1.7235. Time: 22825.9908 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #21: GFLOPs: 23.8265. Time: 1651.1366 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #22: GFLOPs: 50.3946. Time: 780.6549 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #23: GFLOPs: 77.6357. Time: 506.7357 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(5)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_2_init * T.int64(48) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(5), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(5), ow_2_init * T.int64(5) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2048), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(5)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_2 * T.int64(48) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_2 * T.int64(5) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(2048), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(150)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(20))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(20) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 48])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 5, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2048, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #25: GFLOPs: 32.3586. Time: 1215.7742 us. Best GFLOPs: 148.9541
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #26: GFLOPs: 152.8099. Time: 257.4493 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #27: GFLOPs: 50.5962. Time: 777.5439 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #28: GFLOPs: 18.8149. Time: 2090.9375 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #29: GFLOPs: 1.3896. Time: 28311.8907 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #30: GFLOPs: 79.9367. Time: 492.1494 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #31: GFLOPs: 2.3185. Time: 16968.1769 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #32: GFLOPs: 124.4268. Time: 316.1763 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #33: GFLOPs: 39.3895. Time: 998.7626 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #34: GFLOPs: 72.0725. Time: 545.8501 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #35: GFLOPs: 73.2520. Time: 537.0611 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(96), T.int64(512), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(5), T.int64(5), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(5)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_0 * T.int64(96) + oc_chunk_1 * T.int64(96) + oc_chunk_2_init * T.int64(48) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2_init * T.int64(5) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2048), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(5)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(96), oc_chunk_0 * T.int64(96) + oc_chunk_1 * T.int64(96) + oc_chunk_2 * T.int64(48) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(2048), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(150)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(20))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(20) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 48])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 5, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2048, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l93)
sch.annotate(block_or_loop=l67, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l67, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b102)
b129 = sch.decompose_reduction(block=b102, loop=l113)
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #37: GFLOPs: 6.0827. Time: 6467.6246 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #38: GFLOPs: 4.9840. Time: 7893.3709 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #39: GFLOPs: 22.0142. Time: 1787.0666 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #40: GFLOPs: 0.5505. Time: 71463.8410 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #41: GFLOPs: 105.9033. Time: 371.4786 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #42: GFLOPs: 22.9052. Time: 1717.5458 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #43: GFLOPs: 71.4252. Time: 550.7975 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #44: GFLOPs: 46.8359. Time: 839.9707 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #45: GFLOPs: 0.2628. Time: 149701.3787 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #46: GFLOPs: 11.0063. Time: 3574.3822 us. Best GFLOPs: 152.8099
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #47: GFLOPs: 208.9266. Time: 188.2996 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #48: GFLOPs: 2.4690. Time: 15933.5816 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #49: GFLOPs: 36.0399. Time: 1091.5910 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #50: GFLOPs: 10.2845. Time: 3825.2701 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #51: GFLOPs: 8.3513. Time: 4710.7601 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #52: GFLOPs: 31.3545. Time: 1254.7107 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #53: GFLOPs: 72.6901. Time: 541.2124 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #54: GFLOPs: 3.0604. Time: 12854.9241 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #55: GFLOPs: 33.0111. Time: 1191.7439 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #56: GFLOPs: 79.8346. Time: 492.7785 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #57: GFLOPs: 52.3648. Time: 751.2830 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #58: GFLOPs: 20.3216. Time: 1935.9086 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #59: GFLOPs: 4.4725. Time: 8796.2429 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #60: GFLOPs: 2.5517. Time: 15417.2339 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #61: GFLOPs: 5.0938. Time: 7723.3169 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #62: GFLOPs: 98.3481. Time: 400.0160 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #63: GFLOPs: 1.6163. Time: 24340.7242 us. Best GFLOPs: 208.9266
2024-04-29 09:15:41 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #64: GFLOPs: 1.6179. Time: 24315.6722 us. Best GFLOPs: 208.9266
2024-04-29 12:09:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:09:29 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 12:09:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 12:09:31 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 12:09:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 12:09:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 12:09:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 12:09:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc169748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x62b9158)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb081d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa78138)]: 0 failure(s)
2024-04-29 12:09:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9425  0.9370  0.9289  0.9289  0.9289  0.8994  0.8862  0.8664  0.8619  0.8540  0.8540  0.8504  0.8147  0.8103  0.7924  0.7912
[17 : 32]:	0.7823  0.7786  0.7651  0.7300  0.7254  0.7254  0.7248  0.6947  0.6947  0.6925  0.6920  0.6920  0.6881  0.6769  0.6738  0.6535
[33 : 48]:	0.6509  0.6439  0.6428  0.6410  0.6390  0.6310  0.6293  0.6267  0.6266  0.6257  0.6227  0.6183  0.6176  0.6143  0.6122  0.6110
[49 : 64]:	0.6095  0.6073  0.6073  0.6073  0.6062  0.6062  0.6016  0.5978  0.5969  0.5934  0.5921  0.5915  0.5901  0.5889  0.5885  0.5885
2024-04-29 12:09:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:09:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #65: GFLOPs: 199.2741. Time: 197.4205 us. Best GFLOPs: 208.9266
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #66: GFLOPs: 171.1155. Time: 229.9079 us. Best GFLOPs: 208.9266
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #67: GFLOPs: 207.0098. Time: 190.0432 us. Best GFLOPs: 208.9266
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #68: GFLOPs: 223.6912. Time: 175.8710 us. Best GFLOPs: 223.6912
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #69: GFLOPs: 225.8590. Time: 174.1830 us. Best GFLOPs: 225.8590
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #70: GFLOPs: 226.9198. Time: 173.3687 us. Best GFLOPs: 226.9198
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #71: GFLOPs: 155.3429. Time: 253.2514 us. Best GFLOPs: 226.9198
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #72: GFLOPs: 157.5381. Time: 249.7224 us. Best GFLOPs: 226.9198
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #73: GFLOPs: 158.8416. Time: 247.6731 us. Best GFLOPs: 226.9198
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #74: GFLOPs: 157.5916. Time: 249.6377 us. Best GFLOPs: 226.9198
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #75: GFLOPs: 156.9863. Time: 250.6002 us. Best GFLOPs: 226.9198
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #76: GFLOPs: 232.9405. Time: 168.8878 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #77: GFLOPs: 157.6107. Time: 249.6074 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #78: GFLOPs: 184.0684. Time: 213.7292 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #79: GFLOPs: 1.5088. Time: 26074.5327 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #80: GFLOPs: 157.6806. Time: 249.4967 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #81: GFLOPs: 184.4097. Time: 213.3336 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #82: GFLOPs: 152.9983. Time: 257.1322 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #83: GFLOPs: 122.9418. Time: 319.9953 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #84: GFLOPs: 155.1542. Time: 253.5594 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #85: GFLOPs: 157.3927. Time: 249.9531 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #86: GFLOPs: 156.0368. Time: 252.1251 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #87: GFLOPs: 110.3251. Time: 356.5897 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #88: GFLOPs: 11.4404. Time: 3438.7637 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #89: GFLOPs: 10.1575. Time: 3873.0716 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #90: GFLOPs: 110.6502. Time: 355.5419 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #91: GFLOPs: 77.0387. Time: 510.6630 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #92: GFLOPs: 109.2445. Time: 360.1169 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #93: GFLOPs: 11.4507. Time: 3435.6733 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #94: GFLOPs: 178.6623. Time: 220.1965 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #95: GFLOPs: 159.2387. Time: 247.0555 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #96: GFLOPs: 157.5935. Time: 249.6347 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #97: GFLOPs: 166.7841. Time: 235.8785 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #98: GFLOPs: 174.5377. Time: 225.4000 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #99: GFLOPs: 106.9298. Time: 367.9124 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #100: GFLOPs: 158.3671. Time: 248.4152 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #101: GFLOPs: 183.5221. Time: 214.3655 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #102: GFLOPs: 149.4855. Time: 263.1747 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #103: GFLOPs: 164.0252. Time: 239.8460 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #104: GFLOPs: 27.7702. Time: 1416.6552 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #105: GFLOPs: 157.5784. Time: 249.6587 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #106: GFLOPs: 63.3432. Time: 621.0739 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #107: GFLOPs: 209.9771. Time: 187.3576 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #108: GFLOPs: 80.7240. Time: 487.3494 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #109: GFLOPs: 72.5466. Time: 542.2833 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #110: GFLOPs: 146.9437. Time: 267.7270 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #111: GFLOPs: 198.3084. Time: 198.3819 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #112: GFLOPs: 218.0320. Time: 180.4359 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #113: GFLOPs: 205.2475. Time: 191.6749 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #114: GFLOPs: 217.2475. Time: 181.0875 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #115: GFLOPs: 217.3725. Time: 180.9833 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #116: GFLOPs: 216.1084. Time: 182.0420 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #117: GFLOPs: 165.6747. Time: 237.4581 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #118: GFLOPs: 163.6736. Time: 240.3614 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #119: GFLOPs: 150.3756. Time: 261.6168 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #120: GFLOPs: 162.1649. Time: 242.5975 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #121: GFLOPs: 127.4978. Time: 308.5605 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #122: GFLOPs: 61.4986. Time: 639.7020 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #123: GFLOPs: 216.4140. Time: 181.7849 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #124: GFLOPs: 124.6452. Time: 315.6223 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #125: GFLOPs: 135.9290. Time: 289.4217 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #126: GFLOPs: 2.0548. Time: 19145.8240 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #127: GFLOPs: 23.4713. Time: 1676.1255 us. Best GFLOPs: 232.9405
2024-04-29 12:11:33 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_2] Trial #128: GFLOPs: 17.4938. Time: 2248.8392 us. Best GFLOPs: 232.9405
