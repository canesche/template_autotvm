2024-04-29 07:44:30 [INFO] [task_scheduler.cc:160] Initializing Task #57: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41"
2024-04-29 07:44:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4), T.int64(1280), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:44:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:44:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(2), T.int64(1280), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                    v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1280), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 20, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1280, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:44:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1280), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1280), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(5), T.int64(5), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 20, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1280, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:44:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(2), T.int64(1280), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1280), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 20, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1280, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:08:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:08:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:08:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8cc1c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe91eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7d225e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe9ed68)]: 0 failure(s)
2024-04-29 09:08:04 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:08:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8cc1c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe91eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7d225e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe9ed68)]: 0 failure(s)
2024-04-29 09:08:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8cc1c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe91eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7d225e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe9ed68)]: 0 failure(s)
2024-04-29 09:08:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8cc1c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe91eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7d225e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe9ed68)]: 0 failure(s)
2024-04-29 09:08:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa8cc1c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xbe91eb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7d225e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe9ed68)]: 0 failure(s)
2024-04-29 09:08:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9994  0.9985  0.9978  0.9961  0.9961  0.9951  0.9945  0.9942  0.9942  0.9929  0.9927  0.9923  0.9922  0.9917  0.9907
[17 : 32]:	0.9906  0.9903  0.9899  0.9896  0.9891  0.9889  0.9887  0.9882  0.9874  0.9860  0.9860  0.9859  0.9847  0.9845  0.9844  0.9838
[33 : 48]:	0.9837  0.9836  0.9821  0.9809  0.9800  0.9788  0.9785  0.9782  0.9779  0.9776  0.9772  0.9771  0.9762  0.9759  0.9758  0.9754
[49 : 64]:	0.9751  0.9742  0.9736  0.9733  0.9732  0.9729  0.9729  0.9717  0.9716  0.9713  0.9712  0.9704  0.9701  0.9698  0.9689  0.9688
2024-04-29 09:08:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:08:17 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #1: GFLOPs: 42.9052. Time: 477.7039 us. Best GFLOPs: 42.9052
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #2: GFLOPs: 13.5159. Time: 1516.4322 us. Best GFLOPs: 42.9052
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #3: GFLOPs: 60.7172. Time: 337.5649 us. Best GFLOPs: 60.7172
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #4: GFLOPs: 43.3873. Time: 472.3968 us. Best GFLOPs: 60.7172
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #5: GFLOPs: 82.6371. Time: 248.0243 us. Best GFLOPs: 82.6371
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #6: GFLOPs: 153.8836. Time: 133.1916 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #7: GFLOPs: 18.7380. Time: 1093.8214 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #8: GFLOPs: 59.9653. Time: 341.7978 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #9: GFLOPs: 71.0258. Time: 288.5712 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #10: GFLOPs: 5.1683. Time: 3965.6812 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #11: GFLOPs: 64.5463. Time: 317.5397 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #12: GFLOPs: 8.7620. Time: 2339.1940 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #13: GFLOPs: 82.3103. Time: 249.0089 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #14: GFLOPs: 55.3340. Time: 370.4053 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #15: GFLOPs: 36.9634. Time: 554.4938 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #16: GFLOPs: 116.0441. Time: 176.6225 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #17: GFLOPs: 60.4433. Time: 339.0946 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #18: GFLOPs: 8.0366. Time: 2550.3193 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #19: GFLOPs: 4.4502. Time: 4605.6377 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #20: GFLOPs: 8.1190. Time: 2524.4492 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #21: GFLOPs: 23.3536. Time: 877.6386 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #22: GFLOPs: 81.1785. Time: 252.4806 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #23: GFLOPs: 36.1382. Time: 567.1560 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #24: GFLOPs: 8.9152. Time: 2298.9997 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #25: GFLOPs: 131.0623. Time: 156.3837 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #26: GFLOPs: 57.9689. Time: 353.5687 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #27: GFLOPs: 4.8282. Time: 4245.0992 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #28: GFLOPs: 13.2733. Time: 1544.1546 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #29: GFLOPs: 57.0959. Time: 358.9752 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #30: GFLOPs: 15.6431. Time: 1310.2257 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #31: GFLOPs: 0.6819. Time: 30058.5160 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #32: GFLOPs: 4.8922. Time: 4189.5470 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #33: GFLOPs: 18.7500. Time: 1093.1194 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #34: GFLOPs: 5.1106. Time: 4010.5043 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #35: GFLOPs: 2.2917. Time: 8943.4615 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #36: GFLOPs: 15.2716. Time: 1342.0950 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #37: GFLOPs: 20.3690. Time: 1006.2369 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #38: GFLOPs: 75.4405. Time: 271.6844 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #39: GFLOPs: 3.2446. Time: 6316.9213 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #40: GFLOPs: 19.9859. Time: 1025.5255 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #41: GFLOPs: 15.3505. Time: 1335.1975 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #42: GFLOPs: 10.6111. Time: 1931.5696 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(320), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(5), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(5), ow_0 * T.int64(5) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(1280), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(80), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(20)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(5), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 5, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 5, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[80, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #44: GFLOPs: 17.2877. Time: 1185.5862 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #45: GFLOPs: 14.8863. Time: 1376.8361 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #46: GFLOPs: 30.9880. Time: 661.4183 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #47: GFLOPs: 12.7883. Time: 1602.7087 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #48: GFLOPs: 127.5557. Time: 160.6828 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #49: GFLOPs: 56.7886. Time: 360.9173 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #50: GFLOPs: 34.0513. Time: 601.9157 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #51: GFLOPs: 95.6932. Time: 214.1845 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #52: GFLOPs: 71.4494. Time: 286.8605 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #53: GFLOPs: 59.3618. Time: 345.2724 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #54: GFLOPs: 34.0887. Time: 601.2553 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #55: GFLOPs: 30.6685. Time: 668.3084 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #56: GFLOPs: 143.2350. Time: 143.0935 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #57: GFLOPs: 4.8220. Time: 4250.5208 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #58: GFLOPs: 2.7350. Time: 7493.8594 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #59: GFLOPs: 28.0466. Time: 730.7827 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #60: GFLOPs: 6.6440. Time: 3084.8739 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #61: GFLOPs: 22.7336. Time: 901.5711 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #62: GFLOPs: 6.1673. Time: 3323.3509 us. Best GFLOPs: 153.8836
2024-04-29 09:19:42 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #63: GFLOPs: 54.7576. Time: 374.3039 us. Best GFLOPs: 153.8836
