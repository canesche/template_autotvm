2024-04-29 07:44:26 [INFO] [task_scheduler.cc:160] Initializing Task #56: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40"
2024-04-29 07:44:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4), T.int64(192), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:44:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:44:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4), T.int64(96), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(5), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 5, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:44:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(96), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(80), oc_chunk_1 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(5), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(5), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 5, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:44:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4), T.int64(96), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(80), oc_chunk_0 * T.int64(80) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(5), oh_0 * T.int64(5) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(5), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(80), T.int64(5), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(5), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 5, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:06:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:06:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:06:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 09:06:31 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:06:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 09:06:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 09:06:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 09:06:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 09:06:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9992  0.9989  0.9983  0.9974  0.9962  0.9961  0.9957  0.9952  0.9952  0.9950  0.9938  0.9925  0.9912  0.9905  0.9901
[17 : 32]:	0.9901  0.9901  0.9901  0.9896  0.9896  0.9896  0.9891  0.9889  0.9889  0.9888  0.9887  0.9882  0.9876  0.9875  0.9874  0.9867
[33 : 48]:	0.9853  0.9853  0.9839  0.9838  0.9838  0.9835  0.9825  0.9819  0.9813  0.9810  0.9810  0.9802  0.9802  0.9792  0.9790  0.9789
[49 : 64]:	0.9788  0.9786  0.9785  0.9782  0.9781  0.9775  0.9773  0.9773  0.9759  0.9751  0.9750  0.9748  0.9747  0.9742  0.9742  0.9737
2024-04-29 09:06:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:06:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #1: GFLOPs: 10.7774. Time: 2566.8539 us. Best GFLOPs: 10.7774
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #2: GFLOPs: 36.9745. Time: 748.1911 us. Best GFLOPs: 36.9745
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #3: GFLOPs: 72.2628. Time: 382.8251 us. Best GFLOPs: 72.2628
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #4: GFLOPs: 117.3927. Time: 235.6534 us. Best GFLOPs: 117.3927
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #5: GFLOPs: 37.1660. Time: 744.3365 us. Best GFLOPs: 117.3927
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(2000), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(125) * T.int64(5) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(25) // T.int64(5) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(125) // T.int64(25) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(5) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(24), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(125) * T.int64(5) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(25) // T.int64(5) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(125) // T.int64(25) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(5) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(125)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(20))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(20) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 5, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #7: GFLOPs: 156.7083. Time: 176.5318 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #8: GFLOPs: 28.8277. Time: 959.6340 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #9: GFLOPs: 17.1993. Time: 1608.4379 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #10: GFLOPs: 0.5368. Time: 51536.0127 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #11: GFLOPs: 108.0881. Time: 255.9393 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #12: GFLOPs: 89.0727. Time: 310.5779 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #13: GFLOPs: 7.9906. Time: 3462.0778 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #14: GFLOPs: 55.5955. Time: 497.5942 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #15: GFLOPs: 135.6093. Time: 203.9978 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #16: GFLOPs: 101.4088. Time: 272.7969 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #17: GFLOPs: 5.5910. Time: 4947.9797 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #18: GFLOPs: 144.2822. Time: 191.7354 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #19: GFLOPs: 12.6107. Time: 2193.6852 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #20: GFLOPs: 75.5815. Time: 366.0156 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #21: GFLOPs: 41.1812. Time: 671.7629 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #22: GFLOPs: 112.5274. Time: 245.8423 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #23: GFLOPs: 33.4690. Time: 826.5568 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #24: GFLOPs: 36.2207. Time: 763.7615 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #25: GFLOPs: 75.0942. Time: 368.3906 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #26: GFLOPs: 9.4388. Time: 2930.8669 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #27: GFLOPs: 3.2744. Time: 8448.4432 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #28: GFLOPs: 96.0038. Time: 288.1553 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(80), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(5), T.int64(5), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(2000), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(25) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(25) // T.int64(5) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(5) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(24), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(80), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(25) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(25) // T.int64(5) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(5), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(5) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(125)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(100))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(20))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(20) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 5, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #30: GFLOPs: 26.4807. Time: 1044.6868 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #31: GFLOPs: 73.9924. Time: 373.8765 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #32: GFLOPs: 27.2383. Time: 1015.6277 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #33: GFLOPs: 27.1207. Time: 1020.0337 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #34: GFLOPs: 23.6620. Time: 1169.1315 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #35: GFLOPs: 13.3006. Time: 2079.9035 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #36: GFLOPs: 3.3764. Time: 8193.2305 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #37: GFLOPs: 10.9294. Time: 2531.1503 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #38: GFLOPs: 1.5443. Time: 17913.0930 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #39: GFLOPs: 53.7230. Time: 514.9378 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #40: GFLOPs: 73.0934. Time: 378.4747 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #41: GFLOPs: 75.6830. Time: 365.5247 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #42: GFLOPs: 9.9501. Time: 2780.2733 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #43: GFLOPs: 22.6546. Time: 1221.1195 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #44: GFLOPs: 8.2419. Time: 3356.5236 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #45: GFLOPs: 77.2834. Time: 357.9553 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #46: GFLOPs: 7.6733. Time: 3605.2489 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #47: GFLOPs: 32.2239. Time: 858.4931 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #48: GFLOPs: 5.6094. Time: 4931.7106 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #49: GFLOPs: 74.4641. Time: 371.5081 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #50: GFLOPs: 54.1766. Time: 510.6260 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #51: GFLOPs: 131.0936. Time: 211.0248 us. Best GFLOPs: 156.7083
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #52: GFLOPs: 164.8992. Time: 167.7631 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #53: GFLOPs: 15.6911. Time: 1763.0414 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #54: GFLOPs: 20.6321. Time: 1340.8251 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #55: GFLOPs: 84.5986. Time: 327.0030 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #56: GFLOPs: 88.3327. Time: 313.1798 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #57: GFLOPs: 33.3585. Time: 829.2932 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #58: GFLOPs: 5.0513. Time: 5476.5944 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #59: GFLOPs: 21.4025. Time: 1292.5570 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #60: GFLOPs: 17.2705. Time: 1601.8028 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #61: GFLOPs: 38.1750. Time: 724.6620 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #62: GFLOPs: 71.7727. Time: 385.4390 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #63: GFLOPs: 21.4768. Time: 1288.0848 us. Best GFLOPs: 164.8992
2024-04-29 09:19:35 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #64: GFLOPs: 59.1979. Time: 467.3137 us. Best GFLOPs: 164.8992
2024-04-29 12:20:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:20:13 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 12:20:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 12:20:15 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 12:20:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 12:20:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 12:20:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 12:20:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62829d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa471d08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf874408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5ce2508)]: 0 failure(s)
2024-04-29 12:20:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9982  0.9982  0.9982  0.9857  0.9857  0.9857  0.9857  0.9857  0.9857  0.9857  0.9621  0.9540  0.9540  0.9540  0.9444  0.9444
[17 : 32]:	0.9444  0.9444  0.9444  0.9370  0.9370  0.9356  0.9262  0.9214  0.9182  0.9029  0.8955  0.8955  0.8935  0.8850  0.8846  0.8843
[33 : 48]:	0.8797  0.8797  0.8735  0.8735  0.8735  0.8714  0.8714  0.8714  0.8714  0.8714  0.8714  0.8714  0.8667  0.8648  0.8648  0.8648
[49 : 64]:	0.8642  0.8632  0.8618  0.8556  0.8556  0.8490  0.8464  0.8385  0.8374  0.8371  0.8371  0.8371  0.8371  0.8317  0.8301  0.8233
2024-04-29 12:20:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:20:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #65: GFLOPs: 95.9973. Time: 288.1748 us. Best GFLOPs: 164.8992
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #66: GFLOPs: 69.6958. Time: 396.9248 us. Best GFLOPs: 164.8992
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #67: GFLOPs: 160.4313. Time: 172.4352 us. Best GFLOPs: 164.8992
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #68: GFLOPs: 165.9957. Time: 166.6549 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #69: GFLOPs: 88.5737. Time: 312.3275 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #70: GFLOPs: 93.5963. Time: 295.5674 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #71: GFLOPs: 90.5876. Time: 305.3841 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #72: GFLOPs: 84.0793. Time: 329.0229 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #73: GFLOPs: 164.6681. Time: 167.9985 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #74: GFLOPs: 133.4099. Time: 207.3609 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #75: GFLOPs: 98.7763. Time: 280.0671 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #76: GFLOPs: 92.1542. Time: 300.1925 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #77: GFLOPs: 80.2923. Time: 344.5413 us. Best GFLOPs: 165.9957
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #78: GFLOPs: 171.0852. Time: 161.6973 us. Best GFLOPs: 171.0852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #79: GFLOPs: 157.0280. Time: 176.1724 us. Best GFLOPs: 171.0852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #80: GFLOPs: 143.8520. Time: 192.3087 us. Best GFLOPs: 171.0852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #81: GFLOPs: 182.2852. Time: 151.7622 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #82: GFLOPs: 169.1311. Time: 163.5654 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #83: GFLOPs: 182.2830. Time: 151.7641 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #84: GFLOPs: 69.3516. Time: 398.8947 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #85: GFLOPs: 75.7011. Time: 365.4370 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #86: GFLOPs: 125.1334. Time: 221.0761 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #87: GFLOPs: 138.6539. Time: 199.5183 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #88: GFLOPs: 135.9613. Time: 203.4697 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #89: GFLOPs: 91.2937. Time: 303.0219 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #90: GFLOPs: 62.3573. Time: 443.6371 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #91: GFLOPs: 80.4066. Time: 344.0515 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #92: GFLOPs: 177.9981. Time: 155.4174 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #93: GFLOPs: 154.7887. Time: 178.7210 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #94: GFLOPs: 133.4311. Time: 207.3280 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #95: GFLOPs: 117.2804. Time: 235.8792 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #96: GFLOPs: 48.1214. Time: 574.8793 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #97: GFLOPs: 82.8671. Time: 333.8358 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #98: GFLOPs: 127.9311. Time: 216.2414 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #99: GFLOPs: 180.7914. Time: 153.0161 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #100: GFLOPs: 170.0495. Time: 162.6820 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #101: GFLOPs: 170.2632. Time: 162.4779 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #102: GFLOPs: 155.5011. Time: 177.9023 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #103: GFLOPs: 76.5257. Time: 361.4994 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #104: GFLOPs: 150.6156. Time: 183.6728 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #105: GFLOPs: 147.5897. Time: 187.4386 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #106: GFLOPs: 112.7906. Time: 245.2686 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #107: GFLOPs: 144.9688. Time: 190.8272 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #108: GFLOPs: 163.2121. Time: 169.4972 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #109: GFLOPs: 60.0304. Time: 460.8335 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #110: GFLOPs: 98.4488. Time: 280.9990 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #111: GFLOPs: 86.9754. Time: 318.0668 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #112: GFLOPs: 84.2045. Time: 328.5337 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #113: GFLOPs: 74.2550. Time: 372.5540 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #114: GFLOPs: 144.0352. Time: 192.0642 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #115: GFLOPs: 147.0646. Time: 188.1079 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #116: GFLOPs: 88.3797. Time: 313.0130 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #117: GFLOPs: 42.8025. Time: 646.3179 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #118: GFLOPs: 144.8846. Time: 190.9382 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #119: GFLOPs: 87.9658. Time: 314.4860 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #120: GFLOPs: 71.3765. Time: 387.5787 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #121: GFLOPs: 57.4614. Time: 481.4361 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #122: GFLOPs: 84.2691. Time: 328.2815 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #123: GFLOPs: 104.5892. Time: 264.5014 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #124: GFLOPs: 108.2049. Time: 255.6630 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #125: GFLOPs: 81.8183. Time: 338.1152 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #126: GFLOPs: 40.9871. Time: 674.9446 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #127: GFLOPs: 8.7378. Time: 3166.0211 us. Best GFLOPs: 182.2852
2024-04-29 12:22:30 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #128: GFLOPs: 66.3544. Time: 416.9127 us. Best GFLOPs: 182.2852
