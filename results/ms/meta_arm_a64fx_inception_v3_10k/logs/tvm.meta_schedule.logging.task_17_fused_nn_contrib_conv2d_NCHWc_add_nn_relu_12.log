2024-04-29 07:41:59 [INFO] [task_scheduler.cc:160] Initializing Task #17: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12"
2024-04-29 07:41:59 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4), T.int64(160), T.int64(7), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:41:59 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:41:59 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0 in T.grid(T.int64(1), T.int64(5), T.int64(6), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(20)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(40), ic_0 * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), oh_0 * T.int64(2) + oh_1 + ax2)
                        v_i3 = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 2, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[6, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 2, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[20, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 07:41:59 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(5), T.int64(6), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(20), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(3), v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(3) <= v_oh + v_kh and v_oh + v_kh < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(3), v_ow + v_kw, v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(2) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 2, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[6, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 2, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[20, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 07:41:59 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(5), T.int64(6), T.int64(3), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(20)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(40), ic_0 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), oh_0 * T.int64(2) + oh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(4), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 2, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[6, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 2, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[20, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 08:09:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:09:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:09:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 08:09:07 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:09:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 08:09:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 08:09:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 08:09:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 08:09:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9978  0.9977  0.9969  0.9966  0.9965  0.9960  0.9952  0.9952  0.9951  0.9944  0.9939  0.9937  0.9934  0.9929  0.9925  0.9921
[17 : 32]:	0.9920  0.9917  0.9915  0.9914  0.9912  0.9909  0.9908  0.9905  0.9904  0.9901  0.9896  0.9891  0.9884  0.9884  0.9865  0.9861
[33 : 48]:	0.9861  0.9849  0.9846  0.9840  0.9834  0.9828  0.9827  0.9824  0.9806  0.9794  0.9787  0.9781  0.9779  0.9777  0.9776  0.9771
[49 : 64]:	0.9765  0.9761  0.9760  0.9748  0.9748  0.9742  0.9737  0.9729  0.9729  0.9727  0.9726  0.9725  0.9718  0.9710  0.9709  0.9709
2024-04-29 08:09:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:09:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #1: GFLOPs: 19.5290. Time: 2645.0710 us. Best GFLOPs: 19.5290
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #2: GFLOPs: 58.0676. Time: 889.5785 us. Best GFLOPs: 58.0676
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #3: GFLOPs: 3.2816. Time: 15741.2034 us. Best GFLOPs: 58.0676
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #4: GFLOPs: 57.2044. Time: 903.0011 us. Best GFLOPs: 58.0676
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #5: GFLOPs: 3.0501. Time: 16935.9543 us. Best GFLOPs: 58.0676
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #6: GFLOPs: 55.0342. Time: 938.6105 us. Best GFLOPs: 58.0676
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(20), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(12)):
                for ax3_ax4_fused in T.vectorized(T.int64(48)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(6) + ax2)
                        v_i3 = T.axis.spatial(T.int64(12), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(6), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(6) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(10), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(6) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(6)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(6) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(12), ow_0 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[10, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 3, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[6, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[10, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b115)
b140 = sch.decompose_reduction(block=b115, loop=l124)
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #8: GFLOPs: 77.9236. Time: 662.9018 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #9: GFLOPs: 20.2231. Time: 2554.2932 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #10: GFLOPs: 73.3461. Time: 704.2728 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #11: GFLOPs: 42.6681. Time: 1210.6399 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #12: GFLOPs: 15.3483. Time: 3365.5552 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #13: GFLOPs: 13.1204. Time: 3937.0580 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #14: GFLOPs: 17.9052. Time: 2884.9584 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #15: GFLOPs: 43.8935. Time: 1176.8399 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #16: GFLOPs: 64.7026. Time: 798.3560 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #17: GFLOPs: 1.7679. Time: 29218.2203 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(96), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(3) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(48) * T.int64(6) + ax2)
                        v_i3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(48) // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(20) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(48) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(3) + oh_2_init * T.int64(3) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(48) // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(20) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(48) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(3) + oh_2 * T.int64(3) + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(48) // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(360)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(40), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(576))
                    v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(576) // T.int64(48))
                    v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(48) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 20, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 3])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 4, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[10, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(96), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(24) * T.int64(3) + ax2)
                        v_i3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(24) // T.int64(4) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(20), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) * T.int64(20) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(24) * T.int64(3) + oh_1 * T.int64(3) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(24) // T.int64(4) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(20), T.int64(3), T.int64(1), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) * T.int64(20) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(24) * T.int64(3) + oh_1 * T.int64(3) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(24) // T.int64(4) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(40) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(360)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(40), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(576))
                    v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(576) // T.int64(48))
                    v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(48) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 20, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 3, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[6, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 40])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b67)
l82 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l80, l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b113)
b134 = sch.decompose_reduction(block=b113, loop=l118)
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #20: GFLOPs: 17.1507. Time: 3011.8649 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #21: GFLOPs: 4.9614. Time: 10411.4328 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #22: GFLOPs: 27.8478. Time: 1854.9309 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #23: GFLOPs: 68.6150. Time: 752.8331 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #24: GFLOPs: 25.0683. Time: 2060.6009 us. Best GFLOPs: 77.9236
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #25: GFLOPs: 108.1906. Time: 477.4506 us. Best GFLOPs: 108.1906
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #26: GFLOPs: 109.4650. Time: 471.8921 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #27: GFLOPs: 41.4702. Time: 1245.6085 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #28: GFLOPs: 14.4836. Time: 3566.5013 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #29: GFLOPs: 6.4195. Time: 8046.6614 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #30: GFLOPs: 1.1078. Time: 46627.6813 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #31: GFLOPs: 90.9340. Time: 568.0569 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #32: GFLOPs: 56.8056. Time: 909.3417 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #33: GFLOPs: 1.5501. Time: 33323.6370 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #34: GFLOPs: 30.4643. Time: 1695.6136 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #35: GFLOPs: 54.6944. Time: 944.4425 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #36: GFLOPs: 9.5405. Time: 5414.3403 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #37: GFLOPs: 89.2417. Time: 578.8289 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #38: GFLOPs: 58.5506. Time: 882.2398 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #39: GFLOPs: 77.1168. Time: 669.8368 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #40: GFLOPs: 84.0872. Time: 614.3111 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #41: GFLOPs: 36.4802. Time: 1415.9930 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #42: GFLOPs: 62.0288. Time: 832.7690 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #43: GFLOPs: 85.4373. Time: 604.6032 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #44: GFLOPs: 3.4024. Time: 15182.0086 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #45: GFLOPs: 96.7244. Time: 534.0502 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #46: GFLOPs: 17.9140. Time: 2883.5398 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #47: GFLOPs: 14.7515. Time: 3501.7247 us. Best GFLOPs: 109.4650
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #48: GFLOPs: 143.2322. Time: 360.6429 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #49: GFLOPs: 125.2738. Time: 412.3422 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #50: GFLOPs: 41.2420. Time: 1252.5016 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #51: GFLOPs: 11.3311. Time: 4558.7706 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #52: GFLOPs: 14.3437. Time: 3601.2755 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #53: GFLOPs: 11.9608. Time: 4318.7545 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #54: GFLOPs: 22.2891. Time: 2317.5344 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #55: GFLOPs: 25.6905. Time: 2010.6933 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #56: GFLOPs: 135.1543. Time: 382.1979 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #57: GFLOPs: 5.6082. Time: 9210.7195 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(18)):
                for ax3_ax4_fused in T.vectorized(T.int64(48)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(12), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(10), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_fused_fused * T.int64(10) + oc_chunk_1 * T.int64(10) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(12) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(3) + ow_1 * T.int64(3) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(3), T.int64(1), T.int64(20), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_fused_fused * T.int64(10) + oc_chunk_1 * T.int64(10) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(12) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(3) + ow_1 * T.int64(3) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(20) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(360)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(40), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(576))
                    v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(576) // T.int64(48))
                    v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(48) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 10, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 3, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 20])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78 = sch.fuse(l75, l76, preserve_unit_iters=True)
sch.vectorize(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b113)
b139 = sch.decompose_reduction(block=b113, loop=l123)
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #59: GFLOPs: 142.7513. Time: 361.8578 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(5), T.int64(6), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(3) * T.int64(6) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(3) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(160), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(3) * T.int64(6) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(3) * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(3), v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(3) <= v_oh + v_kh and v_oh + v_kh < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(3), v_ow + v_kw, v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(6)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(3) * T.int64(6) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(3) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 6, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[160, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l101, l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b104)
b127 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #61: GFLOPs: 23.8665. Time: 2164.3612 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #62: GFLOPs: 45.3553. Time: 1138.9125 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #63: GFLOPs: 2.3689. Time: 21805.5064 us. Best GFLOPs: 143.2322
2024-04-29 09:16:21 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #64: GFLOPs: 19.0232. Time: 2715.4015 us. Best GFLOPs: 143.2322
2024-04-29 09:35:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:35:25 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 09:35:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 09:35:29 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 09:35:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 09:35:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 09:35:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 09:36:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 09:36:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0402  0.9696  0.9674  0.9547  0.9534  0.9531  0.9474  0.9345  0.9190  0.9081  0.9012  0.8985  0.8984  0.8924  0.8896  0.8873
[17 : 32]:	0.8841  0.8805  0.8764  0.8689  0.8689  0.8676  0.8663  0.8636  0.8615  0.8565  0.8549  0.8544  0.8544  0.8520  0.8520  0.8520
[33 : 48]:	0.8503  0.8450  0.8446  0.8444  0.8444  0.8433  0.8433  0.8411  0.8398  0.8339  0.8336  0.8299  0.8291  0.8236  0.8215  0.8195
[49 : 64]:	0.8175  0.8139  0.8132  0.8132  0.8132  0.8132  0.8123  0.8122  0.8122  0.8122  0.8122  0.8121  0.8121  0.8092  0.8092  0.8087
2024-04-29 09:36:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:36:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #65: GFLOPs: 102.8423. Time: 502.2807 us. Best GFLOPs: 143.2322
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #66: GFLOPs: 193.6920. Time: 266.6898 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #67: GFLOPs: 148.1517. Time: 348.6674 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #68: GFLOPs: 166.1707. Time: 310.8591 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #69: GFLOPs: 133.8603. Time: 385.8926 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #70: GFLOPs: 106.8900. Time: 483.2601 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #71: GFLOPs: 136.3001. Time: 378.9848 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #72: GFLOPs: 85.6140. Time: 603.3554 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #73: GFLOPs: 180.3318. Time: 286.4480 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #74: GFLOPs: 190.0124. Time: 271.8543 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #75: GFLOPs: 141.3189. Time: 365.5255 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #76: GFLOPs: 135.2977. Time: 381.7927 us. Best GFLOPs: 193.6920
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #77: GFLOPs: 263.6283. Time: 195.9413 us. Best GFLOPs: 263.6283
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #78: GFLOPs: 129.2417. Time: 399.6828 us. Best GFLOPs: 263.6283
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #79: GFLOPs: 127.4849. Time: 405.1904 us. Best GFLOPs: 263.6283
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #80: GFLOPs: 123.7100. Time: 417.5545 us. Best GFLOPs: 263.6283
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #81: GFLOPs: 141.6193. Time: 364.7503 us. Best GFLOPs: 263.6283
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #82: GFLOPs: 176.8743. Time: 292.0474 us. Best GFLOPs: 263.6283
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #83: GFLOPs: 355.7630. Time: 145.1969 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #84: GFLOPs: 148.0402. Time: 348.9300 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #85: GFLOPs: 149.9142. Time: 344.5683 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #86: GFLOPs: 210.3349. Time: 245.5877 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #87: GFLOPs: 125.8658. Time: 410.4029 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #88: GFLOPs: 73.9311. Time: 698.7004 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #89: GFLOPs: 168.3596. Time: 306.8176 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #90: GFLOPs: 88.7620. Time: 581.9574 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #91: GFLOPs: 129.1745. Time: 399.8906 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #92: GFLOPs: 152.0361. Time: 339.7593 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #93: GFLOPs: 118.1750. Time: 437.1116 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #94: GFLOPs: 127.8199. Time: 404.1285 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #95: GFLOPs: 141.8675. Time: 364.1122 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #96: GFLOPs: 129.2748. Time: 399.5805 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #97: GFLOPs: 127.4765. Time: 405.2172 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #98: GFLOPs: 93.0874. Time: 554.9157 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #99: GFLOPs: 167.2454. Time: 308.8616 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #100: GFLOPs: 124.4787. Time: 414.9762 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #101: GFLOPs: 112.0903. Time: 460.8398 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #102: GFLOPs: 146.1303. Time: 353.4906 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #103: GFLOPs: 159.5968. Time: 323.6636 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #104: GFLOPs: 146.6549. Time: 352.2261 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #105: GFLOPs: 204.4477. Time: 252.6597 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #106: GFLOPs: 157.9410. Time: 327.0567 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #107: GFLOPs: 114.4936. Time: 451.1666 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #108: GFLOPs: 147.0077. Time: 351.3807 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #109: GFLOPs: 157.6796. Time: 327.5989 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #110: GFLOPs: 109.4713. Time: 471.8650 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #111: GFLOPs: 160.3575. Time: 322.1283 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #112: GFLOPs: 348.3942. Time: 148.2679 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #113: GFLOPs: 112.5113. Time: 459.1154 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #114: GFLOPs: 187.4365. Time: 275.5903 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #115: GFLOPs: 82.9580. Time: 622.6728 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #116: GFLOPs: 82.6054. Time: 625.3302 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #117: GFLOPs: 74.7938. Time: 690.6411 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #118: GFLOPs: 104.5246. Time: 494.1962 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #119: GFLOPs: 207.1784. Time: 249.3295 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #120: GFLOPs: 50.1498. Time: 1030.0279 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #121: GFLOPs: 89.9035. Time: 574.5679 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #122: GFLOPs: 86.9039. Time: 594.4000 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #123: GFLOPs: 106.4116. Time: 485.4327 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #124: GFLOPs: 128.3705. Time: 402.3952 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #125: GFLOPs: 146.8186. Time: 351.8333 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #126: GFLOPs: 3.8909. Time: 13276.0030 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #127: GFLOPs: 54.3543. Time: 950.3515 us. Best GFLOPs: 355.7630
2024-04-29 09:37:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #128: GFLOPs: 61.5596. Time: 839.1161 us. Best GFLOPs: 355.7630
2024-04-29 11:03:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:03:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:03:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 11:03:48 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:03:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 11:04:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 11:04:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 11:04:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb250448)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9637878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd1df298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4a75a68)]: 0 failure(s)
2024-04-29 11:04:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0089  0.9708  0.9275  0.9224  0.8683  0.8647  0.8135  0.7891  0.7857  0.7612  0.7584  0.7455  0.7405  0.7388  0.7375  0.7363
[17 : 32]:	0.7333  0.7292  0.7265  0.7179  0.7068  0.7068  0.7026  0.6982  0.6930  0.6903  0.6903  0.6781  0.6747  0.6659  0.6634  0.6625
[33 : 48]:	0.6609  0.6609  0.6533  0.6515  0.6491  0.6491  0.6487  0.6477  0.6476  0.6467  0.6461  0.6461  0.6383  0.6383  0.6365  0.6341
[49 : 64]:	0.6306  0.6305  0.6282  0.6205  0.6200  0.6185  0.6176  0.6160  0.6151  0.6128  0.6124  0.6115  0.6114  0.6114  0.6114  0.6095
2024-04-29 11:04:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:04:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #129: GFLOPs: 103.9365. Time: 496.9925 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #130: GFLOPs: 182.4676. Time: 283.0950 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #131: GFLOPs: 207.5619. Time: 248.8688 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #132: GFLOPs: 343.3348. Time: 150.4528 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #133: GFLOPs: 228.6350. Time: 225.9308 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #134: GFLOPs: 159.8910. Time: 323.0680 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #135: GFLOPs: 182.0288. Time: 283.7775 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #136: GFLOPs: 145.9840. Time: 353.8448 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #137: GFLOPs: 149.4688. Time: 345.5950 us. Best GFLOPs: 355.7630
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #138: GFLOPs: 430.5648. Time: 119.9719 us. Best GFLOPs: 430.5648
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #139: GFLOPs: 227.5957. Time: 226.9625 us. Best GFLOPs: 430.5648
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #140: GFLOPs: 170.2024. Time: 303.4956 us. Best GFLOPs: 430.5648
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #141: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(40), T.int64(7), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(18), T.int64(12), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(240), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(40), T.int64(12)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(6) + ax2)
                        v_i3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(48) // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3, v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(6) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(48) // T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(6) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(48) // T.int64(4) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(6)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(6) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(48) // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 2, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 3, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[12, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[20, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b116)
b136 = sch.decompose_reduction(block=b116, loop=l120)
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #142: GFLOPs: 247.2439. Time: 208.9260 us. Best GFLOPs: 430.5648
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #143: GFLOPs: 218.6344. Time: 236.2651 us. Best GFLOPs: 430.5648
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #144: GFLOPs: 172.3689. Time: 299.6809 us. Best GFLOPs: 430.5648
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #145: GFLOPs: 550.7901. Time: 93.7847 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #146: GFLOPs: 192.8935. Time: 267.7937 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #147: GFLOPs: 104.8204. Time: 492.8019 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #148: GFLOPs: 192.4865. Time: 268.3600 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #149: GFLOPs: 512.4282. Time: 100.8057 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #150: GFLOPs: 510.2874. Time: 101.2286 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #151: GFLOPs: 178.7973. Time: 288.9064 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #152: GFLOPs: 301.4437. Time: 171.3610 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #153: GFLOPs: 139.4482. Time: 370.4292 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #154: GFLOPs: 398.8660. Time: 129.5063 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #155: GFLOPs: 224.1845. Time: 230.4159 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #156: GFLOPs: 214.0234. Time: 241.3553 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #157: GFLOPs: 231.2427. Time: 223.3830 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #158: GFLOPs: 236.8828. Time: 218.0643 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #159: GFLOPs: 156.7780. Time: 329.4829 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #160: GFLOPs: 178.4446. Time: 289.4774 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #161: GFLOPs: 188.7993. Time: 273.6011 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #162: GFLOPs: 98.2936. Time: 525.5244 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #163: GFLOPs: 154.4581. Time: 334.4316 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #164: GFLOPs: 47.5669. Time: 1085.9576 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #165: GFLOPs: 194.7639. Time: 265.2220 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #166: GFLOPs: 213.2898. Time: 242.1854 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #167: GFLOPs: 262.2608. Time: 196.9630 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #168: GFLOPs: 148.2638. Time: 348.4038 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #169: GFLOPs: 261.1454. Time: 197.8043 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #170: GFLOPs: 208.6043. Time: 247.6252 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #171: GFLOPs: 183.9724. Time: 280.7795 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #172: GFLOPs: 173.0664. Time: 298.4732 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #173: GFLOPs: 464.7621. Time: 111.1443 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #174: GFLOPs: 241.8204. Time: 213.6118 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #175: GFLOPs: 258.4376. Time: 199.8768 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #176: GFLOPs: 258.0149. Time: 200.2042 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #177: GFLOPs: 294.6699. Time: 175.3001 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #178: GFLOPs: 215.3168. Time: 239.9055 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #179: GFLOPs: 246.0939. Time: 209.9023 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #180: GFLOPs: 176.2769. Time: 293.0372 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #181: GFLOPs: 65.5234. Time: 788.3544 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #182: GFLOPs: 126.9956. Time: 406.7517 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #183: GFLOPs: 175.5133. Time: 294.3121 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #184: GFLOPs: 297.4789. Time: 173.6448 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #185: GFLOPs: 165.0244. Time: 313.0184 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #186: GFLOPs: 307.6665. Time: 167.8951 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #187: GFLOPs: 173.1397. Time: 298.3468 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #188: GFLOPs: 171.1024. Time: 301.8992 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #189: GFLOPs: 138.3539. Time: 373.3590 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #190: GFLOPs: 132.8699. Time: 388.7689 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #191: GFLOPs: 63.5692. Time: 812.5904 us. Best GFLOPs: 550.7901
2024-04-29 11:06:07 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #192: GFLOPs: 4.5694. Time: 11304.6340 us. Best GFLOPs: 550.7901
