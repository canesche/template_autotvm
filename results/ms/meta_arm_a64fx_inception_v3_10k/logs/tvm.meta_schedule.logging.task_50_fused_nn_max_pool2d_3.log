2024-04-29 07:44:04 [INFO] [task_scheduler.cc:160] Initializing Task #50: "fused_nn_max_pool2d_3"
2024-04-29 07:44:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(52), T.int64(52), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 07:44:04 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:44:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(52), T.int64(52), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:44:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(52), T.int64(52), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:44:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(52), T.int64(52), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 08:57:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:57:08 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:57:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe625fa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x972bc18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa7d8118)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf4a938)]: 0 failure(s)
2024-04-29 08:57:08 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:57:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe625fa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x972bc18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa7d8118)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf4a938)]: 0 failure(s)
2024-04-29 08:57:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe625fa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x972bc18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa7d8118)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf4a938)]: 0 failure(s)
2024-04-29 08:57:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe625fa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x972bc18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa7d8118)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf4a938)]: 0 failure(s)
2024-04-29 08:57:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe625fa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x972bc18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa7d8118)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaf4a938)]: 0 failure(s)
2024-04-29 08:57:14 [INFO] [evolutionary_search.cc:649] Scores of the best 50 candidates:
[1 : 16]:	0.9898  0.9555  0.9450  0.9358  0.9253  0.8755  0.8602  0.8544  0.8285  0.8204  0.8025  0.7862  0.7228  0.7082  0.6819  0.6714
[17 : 32]:	0.6700  0.6631  0.6489  0.6279  0.6094  0.5960  0.5768  0.5752  0.5614  0.5317  0.4878  0.4781  0.4716  0.4525  0.4242  0.4053
[33 : 48]:	0.3346  0.3345  0.3180  0.3177  0.2893  0.2796  0.2559  0.2280  0.1907  0.1855  0.1804  0.1794  0.1471  0.1066  0.0773  0.0559
[49 : 50]:	0.0363  0.0010
2024-04-29 08:57:15 [INFO] [evolutionary_search.cc:727] Got 50 candidate(s) with evolutionary search
2024-04-29 08:57:15 [INFO] [evolutionary_search.cc:730] Sending 50 candidates(s) for measurement
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #1: GFLOPs: 9.9392. Time: 108.6604 us. Best GFLOPs: 9.9392
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #2: GFLOPs: 24.5140. Time: 44.0565 us. Best GFLOPs: 24.5140
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #3: GFLOPs: 14.8577. Time: 72.6895 us. Best GFLOPs: 24.5140
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #4: GFLOPs: 26.6581. Time: 40.5131 us. Best GFLOPs: 26.6581
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #5: GFLOPs: 8.6099. Time: 125.4375 us. Best GFLOPs: 26.6581
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #6: GFLOPs: 18.6385. Time: 57.9446 us. Best GFLOPs: 26.6581
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #7: GFLOPs: 15.7470. Time: 68.5843 us. Best GFLOPs: 26.6581
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #8: GFLOPs: 13.8930. Time: 77.7371 us. Best GFLOPs: 26.6581
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #9: GFLOPs: 17.5388. Time: 61.5776 us. Best GFLOPs: 26.6581
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #10: GFLOPs: 30.8134. Time: 35.0497 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #11: GFLOPs: 20.0453. Time: 53.8779 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #12: GFLOPs: 19.7570. Time: 54.6641 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #13: GFLOPs: 14.4613. Time: 74.6820 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #14: GFLOPs: 11.9731. Time: 90.2020 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #15: GFLOPs: 16.9101. Time: 63.8671 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #16: GFLOPs: 14.6179. Time: 73.8823 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #17: GFLOPs: 19.8792. Time: 54.3281 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #18: GFLOPs: 9.4720. Time: 114.0198 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #19: GFLOPs: 14.1365. Time: 76.3982 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #20: GFLOPs: 11.6969. Time: 92.3321 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #21: GFLOPs: 14.0006. Time: 77.1397 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #22: GFLOPs: 18.6461. Time: 57.9210 us. Best GFLOPs: 30.8134
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #23: GFLOPs: 57.4658. Time: 18.7938 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #24: GFLOPs: 7.4850. Time: 144.2878 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #25: GFLOPs: 8.6990. Time: 124.1524 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_max_pool2d_3] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(52), T.int64(52), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3)))
        for ax0_ax1_fused in T.parallel(T.int64(48), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(25), T.int64(25), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(48), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(25), T.int64(25), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #27: GFLOPs: 24.3929. Time: 44.2752 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_max_pool2d_3] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(52), T.int64(52), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1200), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(25), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_fused // T.int64(25))
                        v_ax2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_fused % T.int64(25))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_fused // T.int64(25))
                            v_ax2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_fused % T.int64(25))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1200), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(25), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_fused // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_fused % T.int64(25))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_fused // T.int64(25))
                        v_ax2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_fused % T.int64(25))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #29: GFLOPs: 9.3782. Time: 115.1611 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #30: GFLOPs: 20.3515. Time: 53.0674 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #31: GFLOPs: 8.3546. Time: 129.2699 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #32: GFLOPs: 20.8319. Time: 51.8437 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #33: GFLOPs: 14.1254. Time: 76.4580 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #34: GFLOPs: 13.0004. Time: 83.0742 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #35: GFLOPs: 42.0867. Time: 25.6613 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #36: GFLOPs: 24.4405. Time: 44.1889 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #37: GFLOPs: 18.3765. Time: 58.7706 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #38: GFLOPs: 9.5593. Time: 112.9789 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #39: GFLOPs: 17.0818. Time: 63.2251 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #40: GFLOPs: 19.4140. Time: 55.6301 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #41: GFLOPs: 19.6484. Time: 54.9664 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #42: GFLOPs: 19.3754. Time: 55.7408 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #43: GFLOPs: 16.5594. Time: 65.2196 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #44: GFLOPs: 27.4224. Time: 39.3838 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #45: GFLOPs: 20.4023. Time: 52.9351 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #46: GFLOPs: 14.2937. Time: 75.5579 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #47: GFLOPs: 20.2179. Time: 53.4180 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #48: GFLOPs: 9.4926. Time: 113.7724 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #49: GFLOPs: 21.1078. Time: 51.1659 us. Best GFLOPs: 57.4658
2024-04-29 09:18:58 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_max_pool2d_3] Trial #50: GFLOPs: 18.6602. Time: 57.8773 us. Best GFLOPs: 57.4658
