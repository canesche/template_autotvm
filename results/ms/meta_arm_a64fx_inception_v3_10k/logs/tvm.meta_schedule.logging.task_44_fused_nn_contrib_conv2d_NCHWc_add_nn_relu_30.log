2024-04-29 07:43:42 [INFO] [task_scheduler.cc:160] Initializing Task #44: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30"
2024-04-29 07:43:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4), T.int64(3), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:43:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(111), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(37), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(111), oh_0 * T.int64(111) + oh_1 * T.int64(37) + oh_2 * T.int64(37) + oh_3)
                    v_ow = T.axis.spatial(T.int64(111), ow_0 * T.int64(111) + ow_1 * T.int64(111) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 1, 37])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 111, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:43:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(111), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(37), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(111), oh_0 * T.int64(111) + oh_1 * T.int64(37) + oh_2 * T.int64(37) + oh_3)
                        v_ow = T.axis.spatial(T.int64(111), ow_0 * T.int64(111) + ow_1 * T.int64(111) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(37), T.int64(111), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(111), oh_1 * T.int64(37) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(111), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 1, 37])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 111, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:43:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(111), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(37), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(111), oh_0 * T.int64(111) + oh_1 * T.int64(37) + oh_2 * T.int64(37) + oh_3)
                        v_ow = T.axis.spatial(T.int64(111), ow_0 * T.int64(111) + ow_1 * T.int64(111) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(111), T.int64(111), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 1, 37])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 111, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:46:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:46:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:46:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 08:46:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:46:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 08:46:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 08:46:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 08:47:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 08:47:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9986  0.9985  0.9984  0.9978  0.9977  0.9975  0.9966  0.9964  0.9958  0.9958  0.9957  0.9949  0.9947  0.9943  0.9943
[17 : 32]:	0.9930  0.9927  0.9925  0.9921  0.9920  0.9919  0.9911  0.9909  0.9908  0.9901  0.9898  0.9896  0.9895  0.9895  0.9890  0.9884
[33 : 48]:	0.9880  0.9878  0.9859  0.9851  0.9849  0.9844  0.9838  0.9833  0.9833  0.9827  0.9821  0.9819  0.9805  0.9795  0.9784  0.9784
[49 : 64]:	0.9781  0.9779  0.9776  0.9773  0.9753  0.9752  0.9748  0.9746  0.9743  0.9739  0.9732  0.9729  0.9729  0.9729  0.9721  0.9717
2024-04-29 08:47:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:47:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #1: GFLOPs: 11.7760. Time: 1874.9336 us. Best GFLOPs: 11.7760
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #2: GFLOPs: 15.8096. Time: 1396.5685 us. Best GFLOPs: 15.8096
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #3: GFLOPs: 7.0004. Time: 3153.9836 us. Best GFLOPs: 15.8096
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #4: GFLOPs: 163.6043. Time: 134.9551 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #5: GFLOPs: 59.2599. Time: 372.5828 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #6: GFLOPs: 78.4349. Time: 281.4976 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #7: GFLOPs: 10.1202. Time: 2181.6959 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #8: GFLOPs: 60.3833. Time: 365.6513 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #9: GFLOPs: 6.3511. Time: 3476.4467 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #10: GFLOPs: 72.2782. Time: 305.4758 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #11: GFLOPs: 121.2776. Time: 182.0554 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #12: GFLOPs: 41.6541. Time: 530.0616 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #13: GFLOPs: 70.3590. Time: 313.8084 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #14: GFLOPs: 45.3542. Time: 486.8179 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #15: GFLOPs: 27.1954. Time: 811.8740 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #16: GFLOPs: 50.4356. Time: 437.7710 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #17: GFLOPs: 20.9599. Time: 1053.4016 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #18: GFLOPs: 3.2927. Time: 6705.5749 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #19: GFLOPs: 43.4563. Time: 508.0789 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #20: GFLOPs: 84.2848. Time: 261.9598 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #21: GFLOPs: 53.6077. Time: 411.8670 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #22: GFLOPs: 41.6411. Time: 530.2264 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #23: GFLOPs: 6.0313. Time: 3660.7959 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #24: GFLOPs: 56.2888. Time: 392.2491 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #25: GFLOPs: 36.5169. Time: 604.6298 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #26: GFLOPs: 4.7725. Time: 4626.3538 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #27: GFLOPs: 63.5459. Time: 347.4533 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #28: GFLOPs: 43.4346. Time: 508.3331 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #29: GFLOPs: 33.4882. Time: 659.3143 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #30: GFLOPs: 74.8036. Time: 295.1627 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #31: GFLOPs: 4.1172. Time: 5362.7263 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #32: GFLOPs: 9.3777. Time: 2354.4474 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #33: GFLOPs: 3.4704. Time: 6362.2212 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #34: GFLOPs: 2.5487. Time: 8663.0078 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #35: GFLOPs: 65.8063. Time: 335.5184 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #36: GFLOPs: 57.6860. Time: 382.7486 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #37: GFLOPs: 57.1243. Time: 386.5124 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(148), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(37), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(37) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(37) * T.int64(3) + oh_1 * T.int64(3) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(111), ow_1 * T.int64(111) + ow_2_init * T.int64(37) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(37), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(37) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(37) * T.int64(3) + oh_1 * T.int64(3) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(111), ow_1 * T.int64(111) + ow_2 * T.int64(37) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(111)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(37) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(37) * T.int64(3) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[37, 1, 3, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 3, 37])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #39: GFLOPs: 3.2041. Time: 6890.9863 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #40: GFLOPs: 37.1385. Time: 594.5106 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #41: GFLOPs: 46.2282. Time: 477.6143 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #42: GFLOPs: 13.9925. Time: 1577.9352 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #43: GFLOPs: 34.6064. Time: 638.0099 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #44: GFLOPs: 20.9109. Time: 1055.8742 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(111), T.int64(111), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1776), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(37), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(444) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(6) // T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(444) // T.int64(12) * T.int64(3) + oh_2_init * T.int64(3) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(3) * T.int64(37) + ow_2_init * T.int64(37) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(12) // T.int64(6) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(37), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(444) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(6) // T.int64(3) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(444) // T.int64(12) * T.int64(3) + oh_2 * T.int64(3) + oh_3)
                        v_ow = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(3) * T.int64(37) + ow_2 * T.int64(37) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(12) // T.int64(6) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(37)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(444) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(6) // T.int64(3) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(444) // T.int64(12) * T.int64(3) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(111), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(3) * T.int64(37) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(12) // T.int64(6) * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[37, 1, 1, 3])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 3, 1, 37])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #46: GFLOPs: 23.5967. Time: 935.6929 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #47: GFLOPs: 1.8254. Time: 12095.4966 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #48: GFLOPs: 13.7469. Time: 1606.1274 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #49: GFLOPs: 32.3930. Time: 681.6044 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #50: GFLOPs: 5.0476. Time: 4374.1925 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #51: GFLOPs: 34.4100. Time: 641.6524 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #52: GFLOPs: 2.0552. Time: 10743.3527 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #53: GFLOPs: 82.1954. Time: 268.6187 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #54: GFLOPs: 40.0076. Time: 551.8753 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #55: GFLOPs: 48.2781. Time: 457.3347 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #56: GFLOPs: 57.9585. Time: 380.9493 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #57: GFLOPs: 68.6207. Time: 321.7574 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #58: GFLOPs: 37.0852. Time: 595.3653 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #59: GFLOPs: 52.5438. Time: 420.2060 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #60: GFLOPs: 9.3735. Time: 2355.4879 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #61: GFLOPs: 44.1961. Time: 499.5747 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #62: GFLOPs: 81.4251. Time: 271.1600 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #63: GFLOPs: 69.1366. Time: 319.3565 us. Best GFLOPs: 163.6043
2024-04-29 09:18:23 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #64: GFLOPs: 72.1441. Time: 306.0433 us. Best GFLOPs: 163.6043
2024-04-29 13:03:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:03:40 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 13:03:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 13:03:42 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 13:03:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 13:03:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 13:03:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 13:04:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaa5128)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd1fef38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3670df8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x93c0428)]: 0 failure(s)
2024-04-29 13:04:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9983  0.9983  0.9983  0.9983  0.9800  0.9757  0.9747  0.9747  0.9747  0.9747  0.9747  0.9747  0.9747  0.9747  0.9747
[17 : 32]:	0.9687  0.9687  0.9687  0.9539  0.9528  0.9515  0.9390  0.9376  0.9363  0.9332  0.9325  0.9244  0.8716  0.8716  0.8716  0.8716
[33 : 48]:	0.8608  0.8608  0.8608  0.8608  0.8464  0.8429  0.8429  0.8358  0.8315  0.8192  0.8192  0.8192  0.8181  0.8181  0.8181  0.8181
[49 : 64]:	0.8181  0.8181  0.8142  0.8142  0.8142  0.8106  0.8106  0.8106  0.8106  0.8106  0.8106  0.8069  0.8069  0.8068  0.8068  0.8068
2024-04-29 13:04:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:04:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #65: GFLOPs: 93.6086. Time: 235.8675 us. Best GFLOPs: 163.6043
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #66: GFLOPs: 198.0531. Time: 111.4814 us. Best GFLOPs: 198.0531
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #67: GFLOPs: 213.5475. Time: 103.3926 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #68: GFLOPs: 189.8293. Time: 116.3110 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #69: GFLOPs: 211.7913. Time: 104.2499 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #70: GFLOPs: 168.5022. Time: 131.0323 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #71: GFLOPs: 133.0422. Time: 165.9565 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #72: GFLOPs: 211.2052. Time: 104.5392 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #73: GFLOPs: 142.4806. Time: 154.9631 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #74: GFLOPs: 155.8073. Time: 141.7086 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #75: GFLOPs: 148.3689. Time: 148.8131 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #76: GFLOPs: 184.2703. Time: 119.8198 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #77: GFLOPs: 141.2259. Time: 156.3399 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #78: GFLOPs: 169.5940. Time: 130.1887 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #79: GFLOPs: 157.0797. Time: 140.5607 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #80: GFLOPs: 181.2178. Time: 121.8381 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #81: GFLOPs: 139.2804. Time: 158.5236 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #82: GFLOPs: 124.4780. Time: 177.3745 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #83: GFLOPs: 177.8718. Time: 124.1300 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #84: GFLOPs: 112.0272. Time: 197.0881 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #85: GFLOPs: 136.3685. Time: 161.9086 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #86: GFLOPs: 63.8491. Time: 345.8032 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #87: GFLOPs: 69.7750. Time: 316.4346 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #88: GFLOPs: 79.2350. Time: 278.6549 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #89: GFLOPs: 51.6229. Time: 427.7021 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #90: GFLOPs: 180.2394. Time: 122.4995 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #91: GFLOPs: 147.9090. Time: 149.2758 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #92: GFLOPs: 87.8240. Time: 251.4031 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #93: GFLOPs: 78.9798. Time: 279.5553 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #94: GFLOPs: 92.2676. Time: 239.2957 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #95: GFLOPs: 62.0311. Time: 355.9384 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #96: GFLOPs: 77.7263. Time: 284.0637 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #97: GFLOPs: 92.6723. Time: 238.2507 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #98: GFLOPs: 114.8960. Time: 192.1671 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #99: GFLOPs: 111.9831. Time: 197.1658 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #100: GFLOPs: 109.7432. Time: 201.1899 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #101: GFLOPs: 75.7673. Time: 291.4084 us. Best GFLOPs: 213.5475
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #102: GFLOPs: 239.2266. Time: 92.2942 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #103: GFLOPs: 194.1984. Time: 113.6942 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #104: GFLOPs: 68.9696. Time: 320.1301 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #105: GFLOPs: 111.0857. Time: 198.7585 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #106: GFLOPs: 155.3701. Time: 142.1073 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #107: GFLOPs: 58.9257. Time: 374.6961 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #108: GFLOPs: 66.5672. Time: 331.6835 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #109: GFLOPs: 88.0841. Time: 250.6609 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #110: GFLOPs: 93.1436. Time: 237.0450 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #111: GFLOPs: 74.9804. Time: 294.4668 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #112: GFLOPs: 85.1659. Time: 259.2496 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #113: GFLOPs: 65.8595. Time: 335.2476 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #114: GFLOPs: 90.8097. Time: 243.1373 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #115: GFLOPs: 139.0313. Time: 158.8076 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #116: GFLOPs: 121.2959. Time: 182.0279 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #117: GFLOPs: 120.7040. Time: 182.9205 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #118: GFLOPs: 131.3142. Time: 168.1405 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #119: GFLOPs: 67.4725. Time: 327.2332 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #120: GFLOPs: 137.9931. Time: 160.0024 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #121: GFLOPs: 117.4872. Time: 187.9288 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #122: GFLOPs: 69.3070. Time: 318.5713 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #123: GFLOPs: 104.2546. Time: 211.7818 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #124: GFLOPs: 138.1881. Time: 159.7767 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #125: GFLOPs: 96.2521. Time: 229.3895 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #126: GFLOPs: 62.4182. Time: 353.7307 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #127: GFLOPs: 7.9737. Time: 2768.9902 us. Best GFLOPs: 239.2266
2024-04-29 13:05:39 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #128: GFLOPs: 2.3302. Time: 9475.4228 us. Best GFLOPs: 239.2266
