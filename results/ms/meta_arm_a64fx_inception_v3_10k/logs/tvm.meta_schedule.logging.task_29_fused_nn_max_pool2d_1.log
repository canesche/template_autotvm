2024-04-29 07:42:52 [INFO] [task_scheduler.cc:160] Initializing Task #29: "fused_nn_max_pool2d_1"
2024-04-29 07:42:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 07:42:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:42:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:42:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:42:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(72), T.int64(12), T.int64(12), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 08:27:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:27:39 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:27:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf91538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b6e58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63c8698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xec3a628)]: 0 failure(s)
2024-04-29 08:27:39 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:27:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf91538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b6e58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63c8698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xec3a628)]: 0 failure(s)
2024-04-29 08:27:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf91538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b6e58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63c8698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xec3a628)]: 0 failure(s)
2024-04-29 08:27:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf91538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b6e58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63c8698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xec3a628)]: 0 failure(s)
2024-04-29 08:27:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf91538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b6e58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63c8698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xec3a628)]: 0 failure(s)
2024-04-29 08:27:45 [INFO] [evolutionary_search.cc:649] Scores of the best 50 candidates:
[1 : 16]:	0.9972  0.9283  0.9116  0.8920  0.8753  0.8585  0.8204  0.7203  0.7006  0.6946  0.6700  0.6612  0.6481  0.6273  0.6099  0.5672
[17 : 32]:	0.5580  0.5537  0.5500  0.5381  0.5277  0.5197  0.5071  0.4875  0.4802  0.4787  0.4725  0.4456  0.4329  0.3878  0.3788  0.3689
[33 : 48]:	0.3080  0.3032  0.2952  0.2852  0.2561  0.2409  0.2298  0.2203  0.1986  0.1845  0.1381  0.1042  0.0951  0.0819  0.0250  0.0222
[49 : 50]:	0.0133  0.0129
2024-04-29 08:27:45 [INFO] [evolutionary_search.cc:727] Got 50 candidate(s) with evolutionary search
2024-04-29 08:27:45 [INFO] [evolutionary_search.cc:730] Sending 50 candidates(s) for measurement
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 5.4097. Time: 68.9961 us. Best GFLOPs: 5.4097
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 18.4807. Time: 20.1967 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 11.9158. Time: 31.3238 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 9.2783. Time: 40.2279 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 10.6967. Time: 34.8937 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 5.7091. Time: 65.3782 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 8.0075. Time: 46.6120 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 7.8501. Time: 47.5469 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 8.8588. Time: 42.1329 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 10.2145. Time: 36.5411 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 11.1924. Time: 33.3482 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 6.3576. Time: 58.7086 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 13.7818. Time: 27.0826 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 14.1727. Time: 26.3356 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 4.5719. Time: 81.6400 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 10.7802. Time: 34.6236 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 11.4401. Time: 32.6262 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 10.1874. Time: 36.6384 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 8.8243. Time: 42.2979 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 5.5433. Time: 67.3327 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 11.0243. Time: 33.8567 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 11.3441. Time: 32.9024 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 4.8102. Time: 77.5951 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 9.1720. Time: 40.6942 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 13.4177. Time: 27.8177 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 11.8789. Time: 31.4211 us. Best GFLOPs: 18.4807
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 27.7330. Time: 13.4586 us. Best GFLOPs: 27.7330
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 11.4628. Time: 32.5617 us. Best GFLOPs: 27.7330
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 14.0224. Time: 26.6180 us. Best GFLOPs: 27.7330
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 9.1023. Time: 41.0057 us. Best GFLOPs: 27.7330
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 8.1846. Time: 45.6037 us. Best GFLOPs: 27.7330
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 8.1165. Time: 45.9862 us. Best GFLOPs: 27.7330
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 28.8198. Time: 12.9511 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 11.0381. Time: 33.8144 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 15.3124. Time: 24.3755 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 10.3460. Time: 36.0766 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 11.5395. Time: 32.3454 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 11.0488. Time: 33.7818 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 8.0204. Time: 46.5373 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 14.1656. Time: 26.3489 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 6.8663. Time: 54.3594 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 11.1630. Time: 33.4361 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 10.5731. Time: 35.3015 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 5.3970. Time: 69.1584 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 8.0069. Time: 46.6156 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 9.0288. Time: 41.3395 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 6.3155. Time: 59.1000 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 17.4020. Time: 21.4486 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 8.8850. Time: 42.0088 us. Best GFLOPs: 28.8198
2024-04-29 09:17:10 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 24.7000. Time: 15.1112 us. Best GFLOPs: 28.8198
