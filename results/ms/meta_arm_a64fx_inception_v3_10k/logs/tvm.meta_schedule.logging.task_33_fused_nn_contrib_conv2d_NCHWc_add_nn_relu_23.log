2024-04-29 07:43:02 [INFO] [task_scheduler.cc:160] Initializing Task #33: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23"
2024-04-29 07:43:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:43:02 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(25), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(18) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 12, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:43:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(25), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 12, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:43:02 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(25), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + oh_1 * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(5), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(25), oh_0 * T.int64(5) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 12, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:32:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:32:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:32:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa21e318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf8f5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa0e6ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9888bc8)]: 0 failure(s)
2024-04-29 08:32:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:32:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa21e318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf8f5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa0e6ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9888bc8)]: 0 failure(s)
2024-04-29 08:32:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa21e318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf8f5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa0e6ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9888bc8)]: 0 failure(s)
2024-04-29 08:32:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa21e318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf8f5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa0e6ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9888bc8)]: 0 failure(s)
2024-04-29 08:32:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa21e318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf8f5358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa0e6ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9888bc8)]: 0 failure(s)
2024-04-29 08:32:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9994  0.9991  0.9989  0.9981  0.9972  0.9971  0.9970  0.9963  0.9949  0.9941  0.9939  0.9938  0.9932  0.9914  0.9912
[17 : 32]:	0.9909  0.9906  0.9903  0.9903  0.9893  0.9883  0.9882  0.9880  0.9869  0.9863  0.9861  0.9852  0.9849  0.9849  0.9843  0.9841
[33 : 48]:	0.9839  0.9829  0.9828  0.9826  0.9814  0.9812  0.9811  0.9810  0.9807  0.9792  0.9786  0.9782  0.9781  0.9776  0.9776  0.9772
[49 : 64]:	0.9769  0.9767  0.9761  0.9761  0.9761  0.9759  0.9747  0.9736  0.9734  0.9733  0.9730  0.9728  0.9727  0.9726  0.9724  0.9722
2024-04-29 08:32:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:32:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #1: GFLOPs: 13.0554. Time: 1328.1861 us. Best GFLOPs: 13.0554
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #2: GFLOPs: 62.8641. Time: 275.8332 us. Best GFLOPs: 62.8641
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #3: GFLOPs: 92.5102. Time: 187.4387 us. Best GFLOPs: 92.5102
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #4: GFLOPs: 53.5597. Time: 323.7510 us. Best GFLOPs: 92.5102
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #5: GFLOPs: 42.5286. Time: 407.7253 us. Best GFLOPs: 92.5102
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #6: GFLOPs: 3.3724. Time: 5141.7691 us. Best GFLOPs: 92.5102
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #7: GFLOPs: 72.0869. Time: 240.5429 us. Best GFLOPs: 92.5102
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #8: GFLOPs: 64.7650. Time: 267.7372 us. Best GFLOPs: 92.5102
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #9: GFLOPs: 105.8154. Time: 163.8703 us. Best GFLOPs: 105.8154
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #10: GFLOPs: 132.0495. Time: 131.3144 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #11: GFLOPs: 41.0414. Time: 422.4999 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #12: GFLOPs: 61.0424. Time: 284.0648 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #13: GFLOPs: 59.4106. Time: 291.8673 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #14: GFLOPs: 60.2152. Time: 287.9674 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #15: GFLOPs: 88.2097. Time: 196.5770 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #16: GFLOPs: 58.1895. Time: 297.9918 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #17: GFLOPs: 82.2644. Time: 210.7837 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #18: GFLOPs: 77.5508. Time: 223.5954 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #19: GFLOPs: 9.6332. Time: 1800.0266 us. Best GFLOPs: 132.0495
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #20: GFLOPs: 138.6987. Time: 125.0192 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #21: GFLOPs: 116.2678. Time: 149.1385 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #22: GFLOPs: 38.5816. Time: 449.4367 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #23: GFLOPs: 25.0351. Time: 692.6280 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #24: GFLOPs: 13.3783. Time: 1296.1310 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #25: GFLOPs: 103.9538. Time: 166.8049 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #26: GFLOPs: 38.8269. Time: 446.5974 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #27: GFLOPs: 52.9677. Time: 327.3692 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #28: GFLOPs: 60.9472. Time: 284.5084 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #29: GFLOPs: 5.5980. Time: 3097.5522 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #30: GFLOPs: 74.6143. Time: 232.3951 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #31: GFLOPs: 57.3937. Time: 302.1237 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #32: GFLOPs: 5.5176. Time: 3142.6538 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #33: GFLOPs: 11.1975. Time: 1548.5651 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #34: GFLOPs: 89.8209. Time: 193.0509 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #35: GFLOPs: 16.5025. Time: 1050.7486 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #36: GFLOPs: 71.2057. Time: 243.5198 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #37: GFLOPs: 23.2181. Time: 746.8307 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #38: GFLOPs: 41.2817. Time: 420.0410 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #39: GFLOPs: 4.0671. Time: 4263.4413 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #40: GFLOPs: 42.3043. Time: 409.8872 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #41: GFLOPs: 53.5665. Time: 323.7101 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #42: GFLOPs: 32.3968. Time: 535.2375 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #43: GFLOPs: 49.9258. Time: 347.3152 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #44: GFLOPs: 7.6430. Time: 2268.7353 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #45: GFLOPs: 12.0945. Time: 1433.7133 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #46: GFLOPs: 82.8477. Time: 209.2997 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #47: GFLOPs: 9.5824. Time: 1809.5603 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #48: GFLOPs: 17.2658. Time: 1004.2963 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #49: GFLOPs: 76.9798. Time: 225.2538 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #50: GFLOPs: 86.0804. Time: 201.4396 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #51: GFLOPs: 117.0016. Time: 148.2031 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #52: GFLOPs: 28.4977. Time: 608.4699 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #53: GFLOPs: 46.5359. Time: 372.6154 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #54: GFLOPs: 1.3307. Time: 13030.7767 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #55: GFLOPs: 3.0477. Time: 5689.6007 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #56: GFLOPs: 11.0916. Time: 1563.3387 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #57: GFLOPs: 12.3345. Time: 1405.8182 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #58: GFLOPs: 26.8609. Time: 645.5486 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #59: GFLOPs: 61.0923. Time: 283.8327 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #60: GFLOPs: 49.6512. Time: 349.2362 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #61: GFLOPs: 18.5327. Time: 935.6445 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #62: GFLOPs: 35.5461. Time: 487.8173 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #63: GFLOPs: 30.2793. Time: 572.6684 us. Best GFLOPs: 138.6987
2024-04-29 09:17:27 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #64: GFLOPs: 64.3983. Time: 269.2617 us. Best GFLOPs: 138.6987
