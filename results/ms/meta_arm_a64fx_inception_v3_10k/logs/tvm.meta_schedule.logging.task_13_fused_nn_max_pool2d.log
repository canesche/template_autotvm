2024-04-29 07:41:43 [INFO] [task_scheduler.cc:160] Initializing Task #13: "fused_nn_max_pool2d"
2024-04-29 07:41:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 07:41:43 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:41:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:41:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:41:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 08:02:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:02:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:02:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a01ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcde9c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd002888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe990c8)]: 0 failure(s)
2024-04-29 08:02:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:02:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a01ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcde9c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd002888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe990c8)]: 0 failure(s)
2024-04-29 08:02:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a01ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcde9c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd002888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe990c8)]: 0 failure(s)
2024-04-29 08:02:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a01ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcde9c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd002888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe990c8)]: 0 failure(s)
2024-04-29 08:02:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a01ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcde9c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd002888)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbe990c8)]: 0 failure(s)
2024-04-29 08:02:56 [INFO] [evolutionary_search.cc:649] Scores of the best 48 candidates:
[1 : 16]:	0.9830  0.9649  0.9509  0.9422  0.9317  0.8685  0.8481  0.8363  0.8309  0.8150  0.8022  0.7954  0.7629  0.7601  0.7350  0.7325
[17 : 32]:	0.7250  0.6754  0.6669  0.6355  0.6351  0.6014  0.5953  0.5747  0.5674  0.5536  0.4849  0.4838  0.4811  0.4235  0.4088  0.3765
[33 : 48]:	0.3128  0.2837  0.2585  0.2444  0.2172  0.1912  0.1764  0.1742  0.1622  0.1132  0.1126  0.0713  0.0642  0.0512  0.0426  0.0277
2024-04-29 08:02:57 [INFO] [evolutionary_search.cc:727] Got 48 candidate(s) with evolutionary search
2024-04-29 08:02:57 [INFO] [evolutionary_search.cc:730] Sending 48 candidates(s) for measurement
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #1: GFLOPs: 1.8277. Time: 94.5448 us. Best GFLOPs: 1.8277
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_max_pool2d] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5), T.int64(4), T.int64(3)))
        for ax0_ax1_fused in T.parallel(T.int64(192), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(5), T.int64(5), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(192), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(5), T.int64(5), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #3: GFLOPs: 4.1713. Time: 41.4262 us. Best GFLOPs: 4.1713
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #4: GFLOPs: 7.2394. Time: 23.8692 us. Best GFLOPs: 7.2394
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #5: GFLOPs: 6.6506. Time: 25.9825 us. Best GFLOPs: 7.2394
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #6: GFLOPs: 5.6102. Time: 30.8008 us. Best GFLOPs: 7.2394
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #7: GFLOPs: 7.2926. Time: 23.6954 us. Best GFLOPs: 7.2926
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #8: GFLOPs: 6.1307. Time: 28.1860 us. Best GFLOPs: 7.2926
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #9: GFLOPs: 6.1806. Time: 27.9585 us. Best GFLOPs: 7.2926
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #10: GFLOPs: 4.6554. Time: 37.1184 us. Best GFLOPs: 7.2926
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #11: GFLOPs: 6.5969. Time: 26.1942 us. Best GFLOPs: 7.2926
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #12: GFLOPs: 6.8688. Time: 25.1572 us. Best GFLOPs: 7.2926
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #13: GFLOPs: 7.8285. Time: 22.0731 us. Best GFLOPs: 7.8285
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #14: GFLOPs: 4.3783. Time: 39.4674 us. Best GFLOPs: 7.8285
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #15: GFLOPs: 6.2614. Time: 27.5977 us. Best GFLOPs: 7.8285
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #16: GFLOPs: 6.4321. Time: 26.8654 us. Best GFLOPs: 7.8285
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #17: GFLOPs: 5.8272. Time: 29.6538 us. Best GFLOPs: 7.8285
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #18: GFLOPs: 7.9618. Time: 21.7038 us. Best GFLOPs: 7.9618
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #19: GFLOPs: 6.1831. Time: 27.9474 us. Best GFLOPs: 7.9618
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #20: GFLOPs: 14.2256. Time: 12.1471 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #21: GFLOPs: 5.7978. Time: 29.8043 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #22: GFLOPs: 8.0684. Time: 21.4168 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #23: GFLOPs: 6.7531. Time: 25.5881 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #24: GFLOPs: 6.4387. Time: 26.8379 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #25: GFLOPs: 5.8514. Time: 29.5316 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #26: GFLOPs: 4.6608. Time: 37.0752 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #27: GFLOPs: 6.4668. Time: 26.7209 us. Best GFLOPs: 14.2256
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #28: GFLOPs: 15.5104. Time: 11.1409 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #29: GFLOPs: 7.1782. Time: 24.0728 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #30: GFLOPs: 11.4173. Time: 15.1349 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #31: GFLOPs: 6.8181. Time: 25.3444 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #32: GFLOPs: 6.7237. Time: 25.7000 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #33: GFLOPs: 11.4331. Time: 15.1140 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #34: GFLOPs: 6.4000. Time: 27.0001 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #35: GFLOPs: 7.6248. Time: 22.6630 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #36: GFLOPs: 5.6985. Time: 30.3237 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #37: GFLOPs: 11.8176. Time: 14.6222 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #38: GFLOPs: 4.5870. Time: 37.6713 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #39: GFLOPs: 5.0457. Time: 34.2473 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #40: GFLOPs: 4.7311. Time: 36.5245 us. Best GFLOPs: 15.5104
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #41: GFLOPs: 15.8232. Time: 10.9207 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #42: GFLOPs: 6.7391. Time: 25.6413 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #43: GFLOPs: 5.6017. Time: 30.8477 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #44: GFLOPs: 5.9231. Time: 29.1738 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #45: GFLOPs: 6.4179. Time: 26.9247 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #46: GFLOPs: 6.2865. Time: 27.4873 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #47: GFLOPs: 13.5236. Time: 12.7776 us. Best GFLOPs: 15.8232
2024-04-29 09:16:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_max_pool2d] Trial #48: GFLOPs: 4.2510. Time: 40.6493 us. Best GFLOPs: 15.8232
