2024-04-29 07:43:37 [INFO] [task_scheduler.cc:160] Initializing Task #43: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29"
2024-04-29 07:43:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4), T.int64(48), T.int64(5), T.int64(5)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:43:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(25), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(29), T.int64(5), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(29), ow_0 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(2), T.int64(24), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(24) + ic_1)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 24])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 07:43:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(25), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0 in T.grid(T.int64(2), T.int64(1), T.int64(5)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(29), T.int64(1), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(12), ic_0 * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(29), ax2)
                            v_i3 = T.axis.spatial(T.int64(29), ow_0 + kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(2), T.int64(24), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 24])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 07:43:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(25), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(29), T.int64(5), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(29), ow_0 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(2), T.int64(24), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 * T.int64(5) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(24) + ic_1)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[25, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 24])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 08:45:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:45:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:45:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 11 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 08:45:07 [INFO] [evolutionary_search.cc:723] Sampled 501 candidate(s)
2024-04-29 08:45:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 08:45:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 08:45:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 5 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 08:45:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 08:45:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9981  0.9979  0.9979  0.9976  0.9967  0.9966  0.9961  0.9956  0.9955  0.9954  0.9949  0.9948  0.9943  0.9932  0.9926
[17 : 32]:	0.9920  0.9907  0.9905  0.9902  0.9900  0.9895  0.9894  0.9891  0.9890  0.9885  0.9876  0.9868  0.9860  0.9859  0.9857  0.9851
[33 : 48]:	0.9815  0.9813  0.9810  0.9808  0.9802  0.9801  0.9796  0.9793  0.9782  0.9782  0.9777  0.9774  0.9773  0.9763  0.9762  0.9751
[49 : 64]:	0.9743  0.9737  0.9737  0.9730  0.9726  0.9724  0.9722  0.9721  0.9721  0.9719  0.9717  0.9717  0.9711  0.9698  0.9698  0.9696
2024-04-29 08:45:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:45:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #1: GFLOPs: 13.5598. Time: 7085.6535 us. Best GFLOPs: 13.5598
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #2: GFLOPs: 112.2981. Time: 855.5801 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #3: GFLOPs: 25.6176. Time: 3750.5490 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #4: GFLOPs: 91.6094. Time: 1048.8012 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #5: GFLOPs: 36.7616. Time: 2613.5976 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #6: GFLOPs: 56.4807. Time: 1701.1113 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #7: GFLOPs: 51.3532. Time: 1870.9641 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #8: GFLOPs: 11.0251. Time: 8714.6649 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #9: GFLOPs: 9.3301. Time: 10297.8507 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #10: GFLOPs: 12.2801. Time: 7824.0455 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #11: GFLOPs: 45.8553. Time: 2095.2880 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #12: GFLOPs: 72.4963. Time: 1325.3091 us. Best GFLOPs: 112.2981
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #13: GFLOPs: 114.1848. Time: 841.4429 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #14: GFLOPs: 46.2887. Time: 2075.6691 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #15: GFLOPs: 9.1622. Time: 10486.5339 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(5), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(8)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(9), T.int64(29)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(5), T.int64(25), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + oh_1 * T.int64(5) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), ow_1 * T.int64(25) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(5), T.int64(25), T.int64(2), T.int64(48), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + oh_1 * T.int64(5) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), ow_1 * T.int64(25) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(5), T.int64(25)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 48])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b68)
l83 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b115)
b138 = sch.decompose_reduction(block=b115, loop=l122)
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #17: GFLOPs: 3.4662. Time: 27719.3150 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #18: GFLOPs: 0.2964. Time: 324156.6183 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #19: GFLOPs: 20.4303. Time: 4702.8294 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #20: GFLOPs: 5.2070. Time: 18452.0215 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #21: GFLOPs: 2.2857. Time: 42035.1750 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #22: GFLOPs: 3.2017. Time: 30008.9860 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(200), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(25), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(100) // T.int64(25) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(25) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(25), ow_2_init * T.int64(25) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(100) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(24), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(25), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(100) // T.int64(25) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(25) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), ow_2 * T.int64(25) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(100) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(24) + ic_1)
                    v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                    v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(27) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(27), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(625)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(2500))
                    v_ax2 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2500) // T.int64(100))
                    v_ax3 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 24])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b68)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #24: GFLOPs: 10.4041. Time: 9234.8649 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #25: GFLOPs: 14.4861. Time: 6632.5476 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #26: GFLOPs: 34.3287. Time: 2798.8262 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(10092)):
            for i4_fused in T.vectorized(T.int64(4)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(12), i0_i1_i2_i3_fused // T.int64(841))
                    v_i2 = T.axis.spatial(T.int64(29), i0_i1_i2_i3_fused % T.int64(841) // T.int64(29))
                    v_i3 = T.axis.spatial(T.int64(29), i0_i1_i2_i3_fused % T.int64(29))
                    v_i4 = T.axis.spatial(T.int64(4), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(5), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(5), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(5) + ow_1 * T.int64(5) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(25), T.int64(5), T.int64(4), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(48), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(25)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(5) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[48, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 5])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #28: GFLOPs: 70.8683. Time: 1355.7538 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #29: GFLOPs: 67.2040. Time: 1429.6773 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #30: GFLOPs: 76.6261. Time: 1253.8803 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #31: GFLOPs: 3.0654. Time: 31343.7057 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #32: GFLOPs: 28.8447. Time: 3330.9419 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #33: GFLOPs: 0.6928. Time: 138687.3010 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #34: GFLOPs: 17.2845. Time: 5558.7406 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #35: GFLOPs: 37.5835. Time: 2556.4381 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #36: GFLOPs: 95.6772. Time: 1004.2104 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #37: GFLOPs: 107.6666. Time: 892.3843 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(16), T.int64(25), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2_init * T.int64(25) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(5) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0 in T.grid(T.int64(48), T.int64(1), T.int64(5)):
                        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(29), T.int64(5), T.int64(1)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(12), ic_0 // T.int64(4) + ax1)
                                v_i2 = T.axis.spatial(T.int64(29), ax2)
                                v_i3 = T.axis.spatial(T.int64(29), ow_1 * T.int64(5) + kw_0 + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(4) + ax4)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                        for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(16), T.int64(25), T.int64(1)):
                            for oc_block_3_fused in T.vectorized(T.int64(2)):
                                with T.block("conv2d_NCHWc_update"):
                                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                                    v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 * T.int64(25) + oh_3)
                                    v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(5) + ow_2 + ow_3)
                                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                    v_ic = T.axis.reduce(T.int64(48), ic_0 + ic_1)
                                    v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                                    v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 5, 5, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[48, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b68)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b70)
l126 = sch.fuse(l125, preserve_unit_iters=True)
sch.vectorize(loop=l126)
b127 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b127)
b154 = sch.decompose_reduction(block=b127, loop=l138)
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #39: GFLOPs: 9.9680. Time: 9638.8865 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #40: GFLOPs: 11.7800. Time: 8156.1964 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #41: GFLOPs: 5.5904. Time: 17186.6812 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #42: GFLOPs: 102.9037. Time: 933.6884 us. Best GFLOPs: 114.1848
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #43: GFLOPs: 130.4257. Time: 736.6649 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #44: GFLOPs: 104.4453. Time: 919.9074 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #45: GFLOPs: 6.5664. Time: 14632.1651 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #46: GFLOPs: 60.7529. Time: 1581.4871 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #47: GFLOPs: 2.4880. Time: 38617.7950 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #48: GFLOPs: 1.3041. Time: 73673.2623 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #49: GFLOPs: 12.4814. Time: 7697.8617 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #50: GFLOPs: 13.0324. Time: 7372.4212 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #51: GFLOPs: 19.3527. Time: 4964.6899 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #52: GFLOPs: 36.0935. Time: 2661.9717 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #53: GFLOPs: 16.8356. Time: 5706.9626 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #54: GFLOPs: 1.7297. Time: 55548.2600 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(5), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(5), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0 in T.grid(T.int64(1), T.int64(5)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(25)):
                        for ax3_ax4_fused in T.vectorized(T.int64(20)):
                            with T.block("data_pad"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(29), kh_0 + ax2)
                                v_i3 = T.axis.spatial(T.int64(29), ow_1 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(48) + ic_1)
                                v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(25)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(5) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[5, 5, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 48])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 5])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l86, l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l112)
l113 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l113)
sch.annotate(block_or_loop=l112, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l112, ann_key="pragma_unroll_explicit", ann_val=1)
l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b70)
l120 = sch.fuse(l118, l119, preserve_unit_iters=True)
sch.vectorize(loop=l120)
b121 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b121)
b144 = sch.decompose_reduction(block=b121, loop=l128)
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #56: GFLOPs: 119.9677. Time: 800.8819 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #57: GFLOPs: 19.0195. Time: 5051.6658 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #58: GFLOPs: 77.8461. Time: 1234.2299 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #59: GFLOPs: 25.8339. Time: 3719.1493 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #60: GFLOPs: 77.1157. Time: 1245.9193 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #61: GFLOPs: 128.8851. Time: 745.4702 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #62: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(25)):
                    for ow_3_oc_block_3_fused_init in T.vectorized(T.int64(20)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2_init * T.int64(25) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2_init * T.int64(5) + ow_3_oc_block_3_fused_init // T.int64(4))
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + ow_3_oc_block_3_fused_init % T.int64(4))
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3 in T.grid(T.int64(24), T.int64(5), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(25)):
                    for ow_3_oc_block_3_fused in T.vectorized(T.int64(20)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 * T.int64(25) + oh_2 * T.int64(25) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(25) + ow_1 * T.int64(25) + ow_2 * T.int64(5) + ow_3_oc_block_3_fused // T.int64(4))
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + ow_3_oc_block_3_fused % T.int64(4))
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(27) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(27), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(25), T.int64(25)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 5, 5])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[24, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 5])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l70, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l70, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b113)
b139 = sch.decompose_reduction(block=b113, loop=l124)
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #63: GFLOPs: 7.9468. Time: 12090.4251 us. Best GFLOPs: 130.4257
2024-04-29 09:18:17 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #64: GFLOPs: 10.9769. Time: 8752.9200 us. Best GFLOPs: 130.4257
2024-04-29 09:26:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:26:36 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 09:26:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 12 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 09:26:41 [INFO] [evolutionary_search.cc:723] Sampled 442 candidate(s)
2024-04-29 09:26:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 09:27:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 09:27:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 09:27:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 09:27:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0059  0.9843  0.9770  0.9658  0.9514  0.9497  0.9302  0.9302  0.9208  0.9172  0.9116  0.9096  0.8963  0.8943  0.8797  0.8786
[17 : 32]:	0.8720  0.8718  0.8718  0.8709  0.8707  0.8707  0.8700  0.8693  0.8687  0.8687  0.8631  0.8624  0.8597  0.8587  0.8527  0.8460
[33 : 48]:	0.8451  0.8451  0.8451  0.8435  0.8429  0.8412  0.8412  0.8412  0.8343  0.8321  0.8284  0.8162  0.8161  0.8161  0.8133  0.8117
[49 : 64]:	0.8117  0.8117  0.8091  0.8080  0.8055  0.8013  0.7985  0.7983  0.7965  0.7935  0.7925  0.7849  0.7845  0.7831  0.7829  0.7829
2024-04-29 09:27:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:27:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #65: GFLOPs: 55.5354. Time: 1730.0665 us. Best GFLOPs: 130.4257
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #66: GFLOPs: 54.7538. Time: 1754.7653 us. Best GFLOPs: 130.4257
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #67: GFLOPs: 6.9343. Time: 13855.7226 us. Best GFLOPs: 130.4257
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #68: GFLOPs: 86.5911. Time: 1109.5825 us. Best GFLOPs: 130.4257
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #69: GFLOPs: 53.4693. Time: 1796.9175 us. Best GFLOPs: 130.4257
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #70: GFLOPs: 305.8324. Time: 314.1590 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #71: GFLOPs: 222.1587. Time: 432.4836 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #72: GFLOPs: 170.5805. Time: 563.2531 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #73: GFLOPs: 101.4095. Time: 947.4460 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #74: GFLOPs: 120.8542. Time: 795.0078 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #75: GFLOPs: 79.6458. Time: 1206.3413 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #76: GFLOPs: 122.8092. Time: 782.3517 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #77: GFLOPs: 68.3671. Time: 1405.3543 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #78: GFLOPs: 185.5781. Time: 517.7336 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #79: GFLOPs: 65.7317. Time: 1461.7003 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #80: GFLOPs: 58.3842. Time: 1645.6498 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #81: GFLOPs: 69.0679. Time: 1391.0950 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #82: GFLOPs: 55.6205. Time: 1727.4220 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #83: GFLOPs: 55.6348. Time: 1726.9759 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #84: GFLOPs: 55.7160. Time: 1724.4593 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #85: GFLOPs: 103.0853. Time: 932.0435 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #86: GFLOPs: 188.9675. Time: 508.4471 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #87: GFLOPs: 96.2706. Time: 998.0204 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #88: GFLOPs: 152.4333. Time: 630.3087 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #89: GFLOPs: 74.1824. Time: 1295.1866 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #90: GFLOPs: 77.6697. Time: 1237.0334 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #91: GFLOPs: 93.3535. Time: 1029.2059 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #92: GFLOPs: 129.1666. Time: 743.8455 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #93: GFLOPs: 214.2045. Time: 448.5434 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #94: GFLOPs: 71.4378. Time: 1344.9460 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #95: GFLOPs: 185.3317. Time: 518.4218 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #96: GFLOPs: 114.7508. Time: 837.2924 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #97: GFLOPs: 69.4413. Time: 1383.6155 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #98: GFLOPs: 76.7742. Time: 1251.4617 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #99: GFLOPs: 76.9630. Time: 1248.3916 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #100: GFLOPs: 141.6588. Time: 678.2496 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #101: GFLOPs: 76.5187. Time: 1255.6411 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #102: GFLOPs: 88.9417. Time: 1080.2579 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #103: GFLOPs: 111.8986. Time: 858.6346 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #104: GFLOPs: 83.8958. Time: 1145.2308 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #105: GFLOPs: 208.1911. Time: 461.4990 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #106: GFLOPs: 159.4696. Time: 602.4972 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #107: GFLOPs: 137.7630. Time: 697.4297 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #108: GFLOPs: 61.7008. Time: 1557.1926 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #109: GFLOPs: 102.0235. Time: 941.7434 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #110: GFLOPs: 46.4688. Time: 2067.6222 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #111: GFLOPs: 100.6119. Time: 954.9567 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #112: GFLOPs: 100.6240. Time: 954.8419 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #113: GFLOPs: 74.8738. Time: 1283.2258 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #114: GFLOPs: 66.2518. Time: 1450.2240 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #115: GFLOPs: 110.3779. Time: 870.4637 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #116: GFLOPs: 54.7204. Time: 1755.8345 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #117: GFLOPs: 165.4568. Time: 580.6953 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #118: GFLOPs: 117.9753. Time: 814.4077 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #119: GFLOPs: 151.7040. Time: 633.3387 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #120: GFLOPs: 56.1957. Time: 1709.7406 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #121: GFLOPs: 50.4875. Time: 1903.0437 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #122: GFLOPs: 187.1832. Time: 513.2939 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #123: GFLOPs: 71.6139. Time: 1341.6398 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #124: GFLOPs: 164.1391. Time: 585.3573 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #125: GFLOPs: 123.5930. Time: 777.3901 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #126: GFLOPs: 13.1391. Time: 7312.5500 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #127: GFLOPs: 85.1654. Time: 1128.1582 us. Best GFLOPs: 305.8324
2024-04-29 09:28:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #128: GFLOPs: 5.9922. Time: 16034.2233 us. Best GFLOPs: 305.8324
2024-04-29 10:21:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:21:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:21:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 12 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:21:34 [INFO] [evolutionary_search.cc:723] Sampled 398 candidate(s)
2024-04-29 10:21:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:21:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:22:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:22:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:22:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9516  0.9453  0.9453  0.9453  0.9338  0.7506  0.7179  0.7007  0.7006  0.7006  0.6915  0.6851  0.6658  0.6517  0.6517  0.6512
[17 : 32]:	0.6440  0.6433  0.6357  0.6309  0.6287  0.6254  0.6254  0.6139  0.6127  0.6127  0.6125  0.6116  0.6116  0.6069  0.6069  0.6069
[33 : 48]:	0.6069  0.6037  0.6037  0.6033  0.6027  0.6023  0.6023  0.6021  0.5991  0.5991  0.5967  0.5904  0.5897  0.5896  0.5895  0.5895
[49 : 64]:	0.5875  0.5862  0.5818  0.5784  0.5781  0.5761  0.5761  0.5749  0.5749  0.5749  0.5720  0.5720  0.5713  0.5713  0.5711  0.5674
2024-04-29 10:22:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:22:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #129: GFLOPs: 118.7004. Time: 809.4325 us. Best GFLOPs: 305.8324
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #130: GFLOPs: 97.1260. Time: 989.2303 us. Best GFLOPs: 305.8324
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #131: GFLOPs: 321.8601. Time: 298.5147 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #132: GFLOPs: 181.2224. Time: 530.1773 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #133: GFLOPs: 167.0460. Time: 575.1708 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #134: GFLOPs: 193.7094. Time: 496.0008 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #135: GFLOPs: 218.6132. Time: 439.4977 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #136: GFLOPs: 216.9601. Time: 442.8464 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #137: GFLOPs: 192.3181. Time: 499.5890 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #138: GFLOPs: 224.5140. Time: 427.9467 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #139: GFLOPs: 188.1071. Time: 510.7729 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #140: GFLOPs: 172.1111. Time: 558.2442 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #141: GFLOPs: 168.5806. Time: 569.9351 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #142: GFLOPs: 160.7839. Time: 597.5724 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #143: GFLOPs: 184.5920. Time: 520.4992 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #144: GFLOPs: 175.1054. Time: 548.6982 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #145: GFLOPs: 172.3238. Time: 557.5551 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #146: GFLOPs: 173.2520. Time: 554.5679 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #147: GFLOPs: 136.8277. Time: 702.1969 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #148: GFLOPs: 82.1495. Time: 1169.5745 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #149: GFLOPs: 177.1516. Time: 542.3604 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #150: GFLOPs: 76.5914. Time: 1254.4487 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #151: GFLOPs: 77.2863. Time: 1243.1693 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #152: GFLOPs: 121.9264. Time: 788.0163 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #153: GFLOPs: 167.7558. Time: 572.7372 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #154: GFLOPs: 146.3772. Time: 656.3864 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #155: GFLOPs: 177.5608. Time: 541.1105 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #156: GFLOPs: 188.1016. Time: 510.7878 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #157: GFLOPs: 223.5322. Time: 429.8263 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #158: GFLOPs: 186.0739. Time: 516.3540 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #159: GFLOPs: 230.6811. Time: 416.5057 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #160: GFLOPs: 187.1401. Time: 513.4120 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #161: GFLOPs: 185.6957. Time: 517.4055 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #162: GFLOPs: 226.0245. Time: 425.0867 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #163: GFLOPs: 222.1789. Time: 432.4443 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #164: GFLOPs: 160.9405. Time: 596.9909 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #165: GFLOPs: 102.3436. Time: 938.7987 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #166: GFLOPs: 204.9129. Time: 468.8822 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #167: GFLOPs: 181.4771. Time: 529.4330 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #168: GFLOPs: 75.3471. Time: 1275.1646 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #169: GFLOPs: 177.2657. Time: 542.0113 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #170: GFLOPs: 187.8145. Time: 511.5687 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #171: GFLOPs: 90.7073. Time: 1059.2310 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #172: GFLOPs: 107.3054. Time: 895.3887 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #173: GFLOPs: 244.8540. Time: 392.3972 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #174: GFLOPs: 73.7527. Time: 1302.7315 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #175: GFLOPs: 188.0910. Time: 510.8167 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #176: GFLOPs: 232.0288. Time: 414.0866 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #177: GFLOPs: 128.7032. Time: 746.5236 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #178: GFLOPs: 149.9979. Time: 640.5422 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #179: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(500), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + ax2)
                        v_i3 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(125) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(125) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(125) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 48])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #180: GFLOPs: 58.1613. Time: 1651.9575 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #181: GFLOPs: 134.4947. Time: 714.3775 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #182: GFLOPs: 113.4315. Time: 847.0309 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #183: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(100), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) // T.int64(5) * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(5) * T.int64(5) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(9)):
                    for ax3_ax4_fused in T.vectorized(T.int64(36)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(12), ic_0 * T.int64(6) // T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) // T.int64(5) * T.int64(5) + ax2)
                            v_i3 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(5) * T.int64(5) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(6), T.int64(5), T.int64(5), T.int64(1), T.int64(4), T.int64(5), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) // T.int64(5) * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(5) * T.int64(5) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(6) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(5)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(25) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(25) // T.int64(5) * T.int64(5) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(5) * T.int64(5) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 5, 5, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 6])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 5])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l85, l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #184: GFLOPs: 92.5210. Time: 1038.4668 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #185: GFLOPs: 127.8662. Time: 751.4105 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #186: GFLOPs: 129.5920. Time: 741.4040 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #187: GFLOPs: 58.4829. Time: 1642.8724 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #188: GFLOPs: 88.6430. Time: 1083.8981 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #189: GFLOPs: 117.3315. Time: 818.8761 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #190: GFLOPs: 1.8874. Time: 50905.6053 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #191: GFLOPs: 5.6518. Time: 16999.8945 us. Best GFLOPs: 321.8601
2024-04-29 10:23:54 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #192: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(25), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0 in T.grid(T.int64(3), T.int64(5)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(25)):
                        for ax3_ax4_fused in T.vectorized(T.int64(20)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(12), ic_0 * T.int64(4) + ax1)
                                v_i2 = T.axis.spatial(T.int64(29), kh_0 + ax2)
                                v_i3 = T.axis.spatial(T.int64(29), ow_1 + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(25), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(25), ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(16) + ic_1)
                                v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(25), T.int64(25)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 25, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[5, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l86, l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l112)
l113 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l113)
sch.annotate(block_or_loop=l112, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l112, ann_key="pragma_unroll_explicit", ann_val=1)
l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b70)
l120 = sch.fuse(l119, preserve_unit_iters=True)
sch.vectorize(loop=l120)
b121 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b121)
b144 = sch.decompose_reduction(block=b121, loop=l128)
2024-04-29 10:58:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:58:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:58:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 8 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:58:48 [INFO] [evolutionary_search.cc:723] Sampled 402 candidate(s)
2024-04-29 10:59:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:59:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:59:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:59:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 10:59:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7921  0.7921  0.7921  0.7773  0.7773  0.7694  0.7070  0.6979  0.6918  0.6918  0.6865  0.6842  0.6784  0.6665  0.6502  0.6494
[17 : 32]:	0.6490  0.6466  0.6449  0.6425  0.6425  0.6425  0.6425  0.6418  0.6363  0.6363  0.6362  0.6353  0.6353  0.6351  0.6343  0.6323
[33 : 48]:	0.6310  0.6308  0.6294  0.6289  0.6289  0.6287  0.6285  0.6267  0.6267  0.6267  0.6267  0.6267  0.6265  0.6229  0.6216  0.6212
[49 : 64]:	0.6212  0.6211  0.6208  0.6207  0.6199  0.6191  0.6187  0.6177  0.6148  0.6148  0.6138  0.6124  0.6121  0.6116  0.6116  0.6101
2024-04-29 10:59:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:59:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #193: GFLOPs: 181.7163. Time: 528.7362 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #194: GFLOPs: 319.8221. Time: 300.4170 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #195: GFLOPs: 192.8802. Time: 498.1329 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #196: GFLOPs: 115.6058. Time: 831.1000 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #197: GFLOPs: 153.0220. Time: 627.8836 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #198: GFLOPs: 180.0208. Time: 533.7162 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #199: GFLOPs: 59.8174. Time: 1606.2221 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #200: GFLOPs: 78.1359. Time: 1229.6525 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #201: GFLOPs: 78.3409. Time: 1226.4345 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #202: GFLOPs: 78.1386. Time: 1229.6103 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #203: GFLOPs: 78.0276. Time: 1231.3584 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #204: GFLOPs: 304.1357. Time: 315.9116 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #205: GFLOPs: 264.3835. Time: 363.4115 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #206: GFLOPs: 124.2043. Time: 773.5640 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #207: GFLOPs: 89.4843. Time: 1073.7076 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #208: GFLOPs: 80.5528. Time: 1192.7581 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #209: GFLOPs: 66.9749. Time: 1434.5673 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #210: GFLOPs: 133.1801. Time: 721.4292 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #211: GFLOPs: 85.6862. Time: 1121.3008 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #212: GFLOPs: 179.9973. Time: 533.7858 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #213: GFLOPs: 208.4336. Time: 460.9622 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #214: GFLOPs: 216.7719. Time: 443.2310 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #215: GFLOPs: 200.4008. Time: 479.4392 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #216: GFLOPs: 104.2119. Time: 921.9675 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #217: GFLOPs: 187.4867. Time: 512.4630 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #218: GFLOPs: 187.0365. Time: 513.6965 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #219: GFLOPs: 226.3898. Time: 424.4008 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #220: GFLOPs: 148.6101. Time: 646.5241 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #221: GFLOPs: 148.9604. Time: 645.0034 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #222: GFLOPs: 148.6839. Time: 646.2032 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #223: GFLOPs: 202.9104. Time: 473.5094 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #224: GFLOPs: 153.4912. Time: 625.9642 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #225: GFLOPs: 158.6161. Time: 605.7392 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #226: GFLOPs: 77.1084. Time: 1246.0375 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #227: GFLOPs: 187.1793. Time: 513.3047 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #228: GFLOPs: 223.3843. Time: 430.1108 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #229: GFLOPs: 146.6801. Time: 655.0309 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #230: GFLOPs: 223.0912. Time: 430.6759 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #231: GFLOPs: 120.3796. Time: 798.1420 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #232: GFLOPs: 218.6248. Time: 439.4744 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #233: GFLOPs: 171.0493. Time: 561.7094 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #234: GFLOPs: 176.3864. Time: 544.7132 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #235: GFLOPs: 222.8195. Time: 431.2011 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #236: GFLOPs: 174.8118. Time: 549.6196 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #237: GFLOPs: 236.0504. Time: 407.0317 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #238: GFLOPs: 192.3059. Time: 499.6206 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #239: GFLOPs: 175.1063. Time: 548.6954 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #240: GFLOPs: 188.5323. Time: 509.6209 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #241: GFLOPs: 187.2535. Time: 513.1013 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #242: GFLOPs: 200.5475. Time: 479.0886 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #243: GFLOPs: 66.5932. Time: 1442.7904 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #244: GFLOPs: 164.4480. Time: 584.2577 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #245: GFLOPs: 187.8105. Time: 511.5796 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #246: GFLOPs: 183.8185. Time: 522.6896 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #247: GFLOPs: 168.7060. Time: 569.5113 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #248: GFLOPs: 164.0931. Time: 585.5214 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #249: GFLOPs: 117.1565. Time: 820.0996 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #250: GFLOPs: 154.9023. Time: 620.2617 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #251: GFLOPs: 211.1932. Time: 454.9389 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #252: GFLOPs: 214.7451. Time: 447.4141 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #253: GFLOPs: 216.4154. Time: 443.9610 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #254: GFLOPs: 62.0036. Time: 1549.5862 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #255: GFLOPs: 6.2718. Time: 15319.4733 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #256: GFLOPs: 31.3691. Time: 3062.8893 us. Best GFLOPs: 321.8601
2024-04-29 11:01:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:01:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:01:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 15 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 11:01:11 [INFO] [evolutionary_search.cc:723] Sampled 395 candidate(s)
2024-04-29 11:01:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 11:01:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 11:01:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 11:01:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 11:02:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8056  0.8012  0.7404  0.7383  0.6936  0.6936  0.6885  0.6813  0.6813  0.6764  0.6764  0.6764  0.6764  0.6764  0.6764  0.6744
[17 : 32]:	0.6669  0.6669  0.6642  0.6637  0.6624  0.6624  0.6611  0.6558  0.6555  0.6536  0.6528  0.6528  0.6528  0.6495  0.6477  0.6472
[33 : 48]:	0.6448  0.6443  0.6443  0.6404  0.6402  0.6402  0.6386  0.6386  0.6378  0.6378  0.6378  0.6377  0.6366  0.6366  0.6363  0.6358
[49 : 64]:	0.6343  0.6260  0.6236  0.6236  0.6223  0.6213  0.6208  0.6208  0.6181  0.6162  0.6150  0.6150  0.6136  0.6132  0.6130  0.6130
2024-04-29 11:02:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:02:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #257: GFLOPs: 57.0950. Time: 1682.8106 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #258: GFLOPs: 263.7621. Time: 364.2676 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #259: GFLOPs: 68.8567. Time: 1395.3622 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #260: GFLOPs: 70.4393. Time: 1364.0121 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #261: GFLOPs: 170.0438. Time: 565.0308 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #262: GFLOPs: 166.4222. Time: 577.3267 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #263: GFLOPs: 188.9219. Time: 508.5698 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #264: GFLOPs: 223.5113. Time: 429.8664 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #265: GFLOPs: 163.1393. Time: 588.9446 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #266: GFLOPs: 195.4082. Time: 491.6887 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #267: GFLOPs: 238.6696. Time: 402.5649 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #268: GFLOPs: 238.9323. Time: 402.1223 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #269: GFLOPs: 237.4219. Time: 404.6804 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #270: GFLOPs: 188.9742. Time: 508.4291 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #271: GFLOPs: 190.6563. Time: 503.9436 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #272: GFLOPs: 214.5693. Time: 447.7807 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #273: GFLOPs: 127.9222. Time: 751.0816 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #274: GFLOPs: 168.9385. Time: 568.7278 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #275: GFLOPs: 214.8888. Time: 447.1150 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #276: GFLOPs: 321.6128. Time: 298.7443 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #277: GFLOPs: 160.2222. Time: 599.6672 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #278: GFLOPs: 193.9463. Time: 495.3948 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #279: GFLOPs: 55.4595. Time: 1732.4361 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #280: GFLOPs: 111.2394. Time: 863.7230 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #281: GFLOPs: 75.7626. Time: 1268.1711 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #282: GFLOPs: 141.8575. Time: 677.2996 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #283: GFLOPs: 104.4647. Time: 919.7363 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #284: GFLOPs: 178.0896. Time: 539.5037 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #285: GFLOPs: 165.9636. Time: 578.9220 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #286: GFLOPs: 182.0008. Time: 527.9098 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #287: GFLOPs: 116.7325. Time: 823.0783 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #288: GFLOPs: 251.9081. Time: 381.4090 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #289: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(125), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(25) * T.int64(5) + ax2)
                        v_i3 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(25) * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(25) * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(25) * T.int64(5) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[12, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 5])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #290: GFLOPs: 178.9664. Time: 536.8607 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #291: GFLOPs: 200.1768. Time: 479.9757 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #292: GFLOPs: 140.2409. Time: 685.1068 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #293: GFLOPs: 170.4553. Time: 563.6667 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #294: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(12), T.int64(5), T.int64(5), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(29), T.int64(29), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(500), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(20)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + ax2)
                        v_i3 = T.axis.spatial(T.int64(29), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(27) and T.int64(2) <= v_i3 and v_i3 < T.int64(27), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(125) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + oh_2_init * T.int64(5) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(5), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(125) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + oh_2 * T.int64(5) + oh_3)
                            v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(48), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(5)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(125) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(125) // T.int64(25) * T.int64(5) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(25))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[12, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 5])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #295: GFLOPs: 221.4083. Time: 433.9494 us. Best GFLOPs: 321.8601
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #296: GFLOPs: 441.1537. Time: 217.7926 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #297: GFLOPs: 215.8517. Time: 445.1203 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #298: GFLOPs: 215.5690. Time: 445.7042 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #299: GFLOPs: 229.3426. Time: 418.9365 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #300: GFLOPs: 223.4286. Time: 430.0256 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #301: GFLOPs: 245.7601. Time: 390.9503 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #302: GFLOPs: 200.0261. Time: 480.3372 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #303: GFLOPs: 220.7165. Time: 435.3095 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #304: GFLOPs: 234.3570. Time: 409.9727 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #305: GFLOPs: 203.3615. Time: 472.4592 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #306: GFLOPs: 86.5068. Time: 1110.6640 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #307: GFLOPs: 191.3111. Time: 502.2185 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #308: GFLOPs: 192.4281. Time: 499.3034 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #309: GFLOPs: 105.8248. Time: 907.9156 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #310: GFLOPs: 99.4352. Time: 966.2572 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #311: GFLOPs: 89.2437. Time: 1076.6023 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #312: GFLOPs: 126.4912. Time: 759.5785 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #313: GFLOPs: 147.9464. Time: 649.4244 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #314: GFLOPs: 226.6624. Time: 423.8903 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #315: GFLOPs: 165.4601. Time: 580.6836 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #316: GFLOPs: 150.2706. Time: 639.3800 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #317: GFLOPs: 145.1334. Time: 662.0118 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #318: GFLOPs: 3.7260. Time: 25786.1220 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #319: GFLOPs: 45.7214. Time: 2101.4226 us. Best GFLOPs: 441.1537
2024-04-29 11:03:43 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #320: GFLOPs: 0.7598. Time: 126454.0087 us. Best GFLOPs: 441.1537
2024-04-29 12:27:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:27:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 12:27:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 15 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 12:27:06 [INFO] [evolutionary_search.cc:723] Sampled 395 candidate(s)
2024-04-29 12:27:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 12:27:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 12:27:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 12:27:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4a957b8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb156a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x934b708)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bb318)]: 0 failure(s)
2024-04-29 12:28:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7543  0.7543  0.7543  0.7543  0.7543  0.7543  0.7543  0.7543  0.7343  0.7343  0.7090  0.6690  0.6690  0.6530  0.6391  0.6060
[17 : 32]:	0.6038  0.6038  0.5961  0.5961  0.5921  0.5913  0.5905  0.5773  0.5590  0.5573  0.5573  0.5573  0.5573  0.5573  0.5514  0.5385
[33 : 48]:	0.5316  0.5288  0.5288  0.5288  0.5276  0.5276  0.5251  0.5245  0.5240  0.5225  0.5225  0.5195  0.5184  0.5184  0.5172  0.5172
[49 : 64]:	0.5172  0.5130  0.5111  0.5110  0.5088  0.5085  0.5085  0.5085  0.5054  0.5054  0.5048  0.5001  0.4999  0.4997  0.4997  0.4986
2024-04-29 12:28:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:28:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #321: GFLOPs: 239.7286. Time: 400.7865 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #322: GFLOPs: 308.3783. Time: 311.5654 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #323: GFLOPs: 240.3774. Time: 399.7048 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #324: GFLOPs: 310.9771. Time: 308.9616 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #325: GFLOPs: 244.8131. Time: 392.4626 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #326: GFLOPs: 214.7457. Time: 447.4129 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #327: GFLOPs: 214.5557. Time: 447.8092 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #328: GFLOPs: 239.5462. Time: 401.0917 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #329: GFLOPs: 226.5172. Time: 424.1620 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #330: GFLOPs: 236.8186. Time: 405.7113 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #331: GFLOPs: 212.6846. Time: 451.7487 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #332: GFLOPs: 385.4850. Time: 249.2445 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #333: GFLOPs: 74.5290. Time: 1289.1618 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #334: GFLOPs: 77.7450. Time: 1235.8346 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #335: GFLOPs: 321.2943. Time: 299.0405 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #336: GFLOPs: 171.9099. Time: 558.8976 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #337: GFLOPs: 127.3860. Time: 754.2432 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #338: GFLOPs: 138.4009. Time: 694.2149 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #339: GFLOPs: 80.3633. Time: 1195.5699 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #340: GFLOPs: 100.6957. Time: 954.1619 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #341: GFLOPs: 154.7759. Time: 620.7683 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #342: GFLOPs: 308.2145. Time: 311.7309 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #343: GFLOPs: 228.7609. Time: 420.0018 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #344: GFLOPs: 180.5741. Time: 532.0807 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #345: GFLOPs: 170.6207. Time: 563.1205 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #346: GFLOPs: 109.4014. Time: 878.2336 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #347: GFLOPs: 275.6999. Time: 348.4948 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #348: GFLOPs: 274.9465. Time: 349.4498 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #349: GFLOPs: 275.0939. Time: 349.2626 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #350: GFLOPs: 128.8677. Time: 745.5706 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #351: GFLOPs: 64.2458. Time: 1495.5060 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #352: GFLOPs: 91.0590. Time: 1055.1398 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #353: GFLOPs: 78.3239. Time: 1226.7008 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #354: GFLOPs: 80.2767. Time: 1196.8600 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #355: GFLOPs: 92.3014. Time: 1040.9371 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #356: GFLOPs: 329.6482. Time: 291.4622 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #357: GFLOPs: 81.5828. Time: 1177.6991 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #358: GFLOPs: 66.7785. Time: 1438.7866 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #359: GFLOPs: 158.3177. Time: 606.8810 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #360: GFLOPs: 183.5583. Time: 523.4304 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #361: GFLOPs: 222.4619. Time: 431.8942 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #362: GFLOPs: 193.0988. Time: 497.5692 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #363: GFLOPs: 142.3447. Time: 674.9810 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #364: GFLOPs: 96.9949. Time: 990.5670 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #365: GFLOPs: 237.5889. Time: 404.3960 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #366: GFLOPs: 245.8742. Time: 390.7689 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #367: GFLOPs: 99.1292. Time: 969.2397 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #368: GFLOPs: 222.4068. Time: 432.0012 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #369: GFLOPs: 221.2087. Time: 434.3410 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #370: GFLOPs: 49.5718. Time: 1938.1998 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #371: GFLOPs: 206.5180. Time: 465.2379 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #372: GFLOPs: 158.2180. Time: 607.2632 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #373: GFLOPs: 175.3268. Time: 548.0051 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #374: GFLOPs: 169.8778. Time: 565.5829 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #375: GFLOPs: 162.3685. Time: 591.7405 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #376: GFLOPs: 177.2804. Time: 541.9662 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #377: GFLOPs: 180.8429. Time: 531.2898 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #378: GFLOPs: 384.1868. Time: 250.0867 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #379: GFLOPs: 193.9008. Time: 495.5111 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #380: GFLOPs: 197.0413. Time: 487.6135 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #381: GFLOPs: 186.4030. Time: 515.4424 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #382: GFLOPs: 93.1819. Time: 1031.1020 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #383: GFLOPs: 67.1419. Time: 1430.9990 us. Best GFLOPs: 441.1537
2024-04-29 12:29:33 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #384: GFLOPs: 33.1637. Time: 2897.1438 us. Best GFLOPs: 441.1537
