2024-04-29 07:42:25 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_avg_pool2d_2"
2024-04-29 07:42:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-29 07:42:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:42:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(192)):
                for ax0_1 in range(T.int64(3)):
                    for ax0_2, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(12), T.int64(4), T.int64(3)):
                        with T.block("pool_sum_rf"):
                            vrv0_rv1_fused_0 = T.axis.spatial(T.int64(3), ax0_1 + ax0_2)
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_1)
                            v_ax1 = T.axis.spatial(T.int64(192), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            with T.init():
                                pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                    for ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(12), T.int64(4)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(192), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(12), T.int64(12), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:42:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(192)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(12), T.int64(12), T.int64(4), T.int64(3)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(192), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                for ax2 in range(T.int64(12)):
                    for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(4)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(192), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(12), ax2 + ax3)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax4, ax5])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                    for ax3, ax4 in T.grid(T.int64(12), T.int64(4)):
                        with T.block("pool_avg"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                            T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:42:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(192), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3 + ax3_1)
                        v_ax4, v_rv0, v_rv1 = T.axis.remap("SRR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 08:17:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:17:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:17:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x47f3118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc46de88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9804ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x981d3c8)]: 0 failure(s)
2024-04-29 08:17:37 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:17:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x47f3118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc46de88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9804ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x981d3c8)]: 0 failure(s)
2024-04-29 08:17:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x47f3118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc46de88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9804ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x981d3c8)]: 0 failure(s)
2024-04-29 08:17:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x47f3118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc46de88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9804ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x981d3c8)]: 0 failure(s)
2024-04-29 08:17:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x47f3118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc46de88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9804ca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x981d3c8)]: 0 failure(s)
2024-04-29 08:17:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9966  0.9937  0.9909  0.9884  0.9827  0.9776  0.9729  0.9729  0.9670  0.9643  0.9600  0.9561  0.9556  0.9541  0.9517
[17 : 32]:	0.9507  0.9462  0.9446  0.9385  0.9343  0.9326  0.9321  0.9320  0.9266  0.9224  0.9211  0.9192  0.9187  0.9125  0.9109  0.9097
[33 : 48]:	0.9093  0.9085  0.9077  0.9077  0.9072  0.9045  0.9032  0.9025  0.9024  0.9011  0.9011  0.9010  0.8973  0.8959  0.8952  0.8915
[49 : 64]:	0.8910  0.8883  0.8864  0.8833  0.8814  0.8810  0.8809  0.8802  0.8798  0.8783  0.8777  0.8757  0.8653  0.8640  0.8638  0.8620
2024-04-29 08:17:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:17:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #1: GFLOPs: 141.9920. Time: 18.6927 us. Best GFLOPs: 141.9920
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #2: GFLOPs: 44.5772. Time: 59.5419 us. Best GFLOPs: 141.9920
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #3: GFLOPs: 41.2808. Time: 64.2964 us. Best GFLOPs: 141.9920
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #4: GFLOPs: 170.5235. Time: 15.5651 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #5: GFLOPs: 71.1982. Time: 37.2792 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #6: GFLOPs: 38.2779. Time: 69.3405 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #7: GFLOPs: 29.5265. Time: 89.8925 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #8: GFLOPs: 99.2420. Time: 26.7448 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #9: GFLOPs: 75.9016. Time: 34.9691 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #10: GFLOPs: 108.1208. Time: 24.5485 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #11: GFLOPs: 82.4997. Time: 32.1723 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #12: GFLOPs: 51.1284. Time: 51.9126 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #13: GFLOPs: 47.0198. Time: 56.4487 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #14: GFLOPs: 48.2062. Time: 55.0595 us. Best GFLOPs: 170.5235
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #15: GFLOPs: 187.4783. Time: 14.1574 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #16: GFLOPs: 112.1315. Time: 23.6705 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #17: GFLOPs: 41.1873. Time: 64.4423 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #18: GFLOPs: 82.1996. Time: 32.2898 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #19: GFLOPs: 88.6564. Time: 29.9381 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #20: GFLOPs: 56.0077. Time: 47.3901 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #21: GFLOPs: 33.5807. Time: 79.0397 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #22: GFLOPs: 33.1159. Time: 80.1491 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #23: GFLOPs: 39.9858. Time: 66.3788 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #24: GFLOPs: 39.7970. Time: 66.6937 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #25: GFLOPs: 160.7116. Time: 16.5153 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #26: GFLOPs: 28.6469. Time: 92.6524 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #27: GFLOPs: 67.6698. Time: 39.2230 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #28: GFLOPs: 54.8094. Time: 48.4261 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #29: GFLOPs: 74.1945. Time: 35.7737 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #30: GFLOPs: 55.5631. Time: 47.7692 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #31: GFLOPs: 38.9631. Time: 68.1212 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #32: GFLOPs: 183.2984. Time: 14.4803 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #33: GFLOPs: 25.9584. Time: 102.2484 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #34: GFLOPs: 36.0268. Time: 73.6731 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #35: GFLOPs: 38.0628. Time: 69.7323 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #36: GFLOPs: 36.1554. Time: 73.4111 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #37: GFLOPs: 96.2991. Time: 27.5621 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #38: GFLOPs: 37.6258. Time: 70.5423 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #39: GFLOPs: 40.9998. Time: 64.7371 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #40: GFLOPs: 85.2378. Time: 31.1389 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #41: GFLOPs: 47.4723. Time: 55.9107 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #42: GFLOPs: 47.0224. Time: 56.4456 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #43: GFLOPs: 40.4075. Time: 65.6860 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #44: GFLOPs: 120.8546. Time: 21.9620 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #45: GFLOPs: 118.2395. Time: 22.4477 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #46: GFLOPs: 77.2970. Time: 34.3378 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #47: GFLOPs: 157.7156. Time: 16.8291 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #48: GFLOPs: 38.1919. Time: 69.4966 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #49: GFLOPs: 42.8110. Time: 61.9983 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #50: GFLOPs: 56.2828. Time: 47.1584 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #51: GFLOPs: 38.5413. Time: 68.8666 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #52: GFLOPs: 66.9373. Time: 39.6522 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #53: GFLOPs: 101.0244. Time: 26.2729 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4), T.int64(3)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(2304), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(12), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_sum_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_fused // T.int64(12))
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_fused % T.int64(12))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_sum_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_fused // T.int64(12))
                            v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_fused % T.int64(12))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
        for ax0_ax1_fused in T.parallel(T.int64(192), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(12)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(48)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(12), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(12), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(12)):
                for ax4_ax5_fused in T.vectorized(T.int64(48)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(12), ax3)
                        v_ax3 = T.axis.spatial(T.int64(12), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax2 in range(T.int64(12)):
                for ax3_ax4_fused in T.vectorized(T.int64(48)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(12), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30 = sch.get_loops(block=b21)
l31 = sch.fuse(l24, l25, l26, preserve_unit_iters=True)
sch.parallel(loop=l31)
l32 = sch.fuse(l30, preserve_unit_iters=True)
sch.vectorize(loop=l32)
sch.annotate(block_or_loop=l31, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l31, ann_key="pragma_unroll_explicit", ann_val=1)
l33, l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l33, l34, preserve_unit_iters=True)
sch.parallel(loop=l41)
l42 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l42)
sch.annotate(block_or_loop=l41, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l41, ann_key="pragma_unroll_explicit", ann_val=1)
l43, l44, l45, l46 = sch.get_loops(block=b23)
l47 = sch.fuse(l45, l46, preserve_unit_iters=True)
sch.vectorize(loop=l47)
b48 = sch.get_block(name="pool_sum_rf", func_name="main")
l49, l50, l51, l52, l53 = sch.get_loops(block=b48)
b54 = sch.decompose_reduction(block=b48, loop=l52)
b55 = sch.get_block(name="pool_sum", func_name="main")
l56, l57, l58, l59, l60, l61 = sch.get_loops(block=b55)
b62 = sch.decompose_reduction(block=b55, loop=l57)
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #55: GFLOPs: 82.2573. Time: 32.2672 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #56: GFLOPs: 119.8092. Time: 22.1536 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #57: GFLOPs: 35.0992. Time: 75.6203 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #58: GFLOPs: 35.2364. Time: 75.3257 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #59: GFLOPs: 116.0366. Time: 22.8739 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(2304), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(12), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_sum_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_fused // T.int64(12))
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_fused % T.int64(12))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_sum_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_fused // T.int64(12))
                            v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_fused % T.int64(12))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
        for ax0_ax1_fused in T.parallel(T.int64(192), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(12)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(48)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(12), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(12), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(9), T.int64(1), T.int64(1), T.int64(12)):
                for ax4_ax5_fused in T.vectorized(T.int64(48)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(12), ax3)
                        v_ax3 = T.axis.spatial(T.int64(12), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax2 in range(T.int64(12)):
                for ax3_ax4_fused in T.vectorized(T.int64(48)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(12), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30 = sch.get_loops(block=b21)
l31 = sch.fuse(l24, l25, l26, preserve_unit_iters=True)
sch.parallel(loop=l31)
l32 = sch.fuse(l30, preserve_unit_iters=True)
sch.vectorize(loop=l32)
sch.annotate(block_or_loop=l31, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l31, ann_key="pragma_unroll_explicit", ann_val=1)
l33, l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l33, l34, preserve_unit_iters=True)
sch.parallel(loop=l41)
l42 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l42)
sch.annotate(block_or_loop=l41, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l41, ann_key="pragma_unroll_explicit", ann_val=1)
l43, l44, l45, l46 = sch.get_loops(block=b23)
l47 = sch.fuse(l45, l46, preserve_unit_iters=True)
sch.vectorize(loop=l47)
b48 = sch.get_block(name="pool_sum_rf", func_name="main")
l49, l50, l51, l52, l53 = sch.get_loops(block=b48)
b54 = sch.decompose_reduction(block=b48, loop=l52)
b55 = sch.get_block(name="pool_sum", func_name="main")
l56, l57, l58, l59, l60, l61 = sch.get_loops(block=b55)
b62 = sch.decompose_reduction(block=b55, loop=l57)
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #61: GFLOPs: 21.0716. Time: 125.9616 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #62: GFLOPs: 81.0847. Time: 32.7338 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #63: GFLOPs: 29.6319. Time: 89.5727 us. Best GFLOPs: 187.4783
2024-04-29 09:16:43 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #64: GFLOPs: 51.4994. Time: 51.5386 us. Best GFLOPs: 187.4783
