2024-04-29 07:41:14 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_avg_pool2d_1"
2024-04-29 07:41:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-29 07:41:14 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:41:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4), T.int64(1), T.int64(9)):
                with T.block("pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(320), T.int64(5), T.int64(5)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(5), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(5), ax3 + ax4)
                        v_ax4 = T.axis.spatial(T.int64(4), ax5)
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:41:14 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(320), T.int64(5)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(4), T.int64(1)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(5), ax2 + ax3)
                        v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5 in T.grid(T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(5), ax2 + ax3)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax3, ax4 in T.grid(T.int64(5), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:41:14 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(320), T.int64(5)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(5), ax2 + ax2_1)
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
                for ax3, ax4 in T.grid(T.int64(5), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 07:51:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:51:12 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 07:51:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x46d14c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b0ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb99d978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa802148)]: 0 failure(s)
2024-04-29 07:51:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 07:51:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x46d14c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b0ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb99d978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa802148)]: 0 failure(s)
2024-04-29 07:51:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x46d14c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b0ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb99d978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa802148)]: 0 failure(s)
2024-04-29 07:51:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x46d14c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b0ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb99d978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa802148)]: 0 failure(s)
2024-04-29 07:51:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x46d14c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33b0ea8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb99d978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa802148)]: 0 failure(s)
2024-04-29 07:51:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9961  0.9949  0.9921  0.9915  0.9883  0.9876  0.9853  0.9848  0.9842  0.9794  0.9737  0.9720  0.9712  0.9684  0.9638
[17 : 32]:	0.9634  0.9625  0.9590  0.9562  0.9520  0.9512  0.9502  0.9500  0.9416  0.9384  0.9380  0.9351  0.9343  0.9336  0.9270  0.9250
[33 : 48]:	0.9228  0.9217  0.9199  0.9175  0.9152  0.9142  0.9127  0.9060  0.9057  0.9029  0.9006  0.8987  0.8972  0.8971  0.8969  0.8954
[49 : 64]:	0.8931  0.8928  0.8928  0.8840  0.8834  0.8818  0.8795  0.8789  0.8689  0.8688  0.8661  0.8625  0.8623  0.8620  0.8614  0.8590
2024-04-29 07:51:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:51:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #1: GFLOPs: 8.3732. Time: 91.7212 us. Best GFLOPs: 8.3732
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #2: GFLOPs: 12.5941. Time: 60.9810 us. Best GFLOPs: 12.5941
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #3: GFLOPs: 11.2820. Time: 68.0728 us. Best GFLOPs: 12.5941
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #4: GFLOPs: 11.3106. Time: 67.9011 us. Best GFLOPs: 12.5941
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #5: GFLOPs: 55.9797. Time: 13.7192 us. Best GFLOPs: 55.9797
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #6: GFLOPs: 14.8860. Time: 51.5922 us. Best GFLOPs: 55.9797
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #7: GFLOPs: 59.0987. Time: 12.9952 us. Best GFLOPs: 59.0987
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #8: GFLOPs: 25.9617. Time: 29.5820 us. Best GFLOPs: 59.0987
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #9: GFLOPs: 15.5794. Time: 49.2958 us. Best GFLOPs: 59.0987
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #10: GFLOPs: 43.3142. Time: 17.7309 us. Best GFLOPs: 59.0987
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #11: GFLOPs: 67.3469. Time: 11.4036 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #12: GFLOPs: 19.9705. Time: 38.4567 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #13: GFLOPs: 21.7161. Time: 35.3655 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #14: GFLOPs: 42.1758. Time: 18.2095 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #15: GFLOPs: 40.0008. Time: 19.1996 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #16: GFLOPs: 13.9594. Time: 55.0166 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #17: GFLOPs: 61.8909. Time: 12.4089 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #18: GFLOPs: 37.1539. Time: 20.6708 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #19: GFLOPs: 18.0237. Time: 42.6106 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #20: GFLOPs: 34.9104. Time: 21.9992 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #21: GFLOPs: 24.8528. Time: 30.9019 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #22: GFLOPs: 61.4483. Time: 12.4983 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #23: GFLOPs: 47.7099. Time: 16.0973 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #24: GFLOPs: 56.3870. Time: 13.6202 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #25: GFLOPs: 22.7584. Time: 33.7457 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #26: GFLOPs: 19.0502. Time: 40.3145 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #27: GFLOPs: 41.2091. Time: 18.6367 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #28: GFLOPs: 22.8317. Time: 33.6375 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #29: GFLOPs: 19.7487. Time: 38.8887 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #30: GFLOPs: 16.8766. Time: 45.5068 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #31: GFLOPs: 24.8956. Time: 30.8488 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #32: GFLOPs: 31.5529. Time: 24.3401 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #33: GFLOPs: 16.4971. Time: 46.5537 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #34: GFLOPs: 21.7615. Time: 35.2917 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #35: GFLOPs: 24.8872. Time: 30.8592 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #36: GFLOPs: 38.7637. Time: 19.8124 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #37: GFLOPs: 60.1488. Time: 12.7683 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #38: GFLOPs: 57.0939. Time: 13.4515 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #39: GFLOPs: 40.3446. Time: 19.0360 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #40: GFLOPs: 57.2515. Time: 13.4145 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #41: GFLOPs: 26.8994. Time: 28.5508 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #42: GFLOPs: 26.9578. Time: 28.4890 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #43: GFLOPs: 40.9918. Time: 18.7355 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #44: GFLOPs: 17.0467. Time: 45.0527 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #45: GFLOPs: 24.8478. Time: 30.9082 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #46: GFLOPs: 15.3108. Time: 50.1605 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #47: GFLOPs: 22.1635. Time: 34.6516 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #48: GFLOPs: 34.2228. Time: 22.4412 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #49: GFLOPs: 54.7521. Time: 14.0269 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #50: GFLOPs: 21.5105. Time: 35.7035 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #51: GFLOPs: 59.4067. Time: 12.9278 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #52: GFLOPs: 45.3766. Time: 16.9250 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #53: GFLOPs: 48.4971. Time: 15.8360 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #54: GFLOPs: 24.1450. Time: 31.8078 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #55: GFLOPs: 45.4563. Time: 16.8953 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #56: GFLOPs: 45.8623. Time: 16.7458 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #57: GFLOPs: 22.5828. Time: 34.0082 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #58: GFLOPs: 14.7218. Time: 52.1675 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #59: GFLOPs: 25.7428. Time: 29.8336 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #60: GFLOPs: 6.2097. Time: 123.6773 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #61: GFLOPs: 25.0341. Time: 30.6782 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #62: GFLOPs: 66.3655. Time: 11.5723 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #63: GFLOPs: 44.4817. Time: 17.2655 us. Best GFLOPs: 67.3469
2024-04-29 09:15:45 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_avg_pool2d_1] Trial #64: GFLOPs: 20.9312. Time: 36.6917 us. Best GFLOPs: 67.3469
