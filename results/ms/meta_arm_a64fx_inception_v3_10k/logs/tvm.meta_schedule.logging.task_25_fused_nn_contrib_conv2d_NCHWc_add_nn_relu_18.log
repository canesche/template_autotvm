2024-04-29 07:42:33 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18"
2024-04-29 07:42:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4), T.int64(128), T.int64(1), T.int64(7)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:42:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:42:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(6)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(6), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(6) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(12) + ow_1 * T.int64(12) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 6, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 3, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 07:42:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0 in range(T.int64(32)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(18), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 + ax1)
                            v_i2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(6), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(6) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(12) + ow_1 * T.int64(12) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(12), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 6, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 3, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 07:42:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(6), T.int64(18), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(6), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + oh_1 * T.int64(6) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(12), ow_0 * T.int64(12) + ow_1 * T.int64(12) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(12), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), oh_0 * T.int64(6) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 4, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 6, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 3, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 08:21:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:21:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:21:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 08:21:06 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:21:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 08:21:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 08:21:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 08:21:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 08:21:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9994  0.9990  0.9988  0.9988  0.9987  0.9982  0.9980  0.9974  0.9957  0.9954  0.9947  0.9946  0.9939  0.9929  0.9923
[17 : 32]:	0.9920  0.9916  0.9915  0.9913  0.9911  0.9905  0.9901  0.9900  0.9897  0.9896  0.9895  0.9891  0.9891  0.9881  0.9879  0.9877
[33 : 48]:	0.9876  0.9869  0.9865  0.9864  0.9858  0.9850  0.9845  0.9841  0.9831  0.9828  0.9817  0.9804  0.9797  0.9793  0.9789  0.9786
[49 : 64]:	0.9785  0.9776  0.9773  0.9771  0.9770  0.9769  0.9761  0.9760  0.9759  0.9759  0.9755  0.9755  0.9753  0.9753  0.9751  0.9750
2024-04-29 08:21:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:21:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #1: GFLOPs: 15.6251. Time: 3174.4041 us. Best GFLOPs: 15.6251
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #2: GFLOPs: 14.5736. Time: 3403.4570 us. Best GFLOPs: 15.6251
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #3: GFLOPs: 97.1051. Time: 510.7922 us. Best GFLOPs: 97.1051
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #4: GFLOPs: 27.6859. Time: 1791.5450 us. Best GFLOPs: 97.1051
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #5: GFLOPs: 18.7603. Time: 2643.9039 us. Best GFLOPs: 97.1051
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(108), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(36) // T.int64(12) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(12) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(36) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(36) // T.int64(12) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(12) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(36) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw - T.int64(3), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(3) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw - T.int64(3), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(432)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(576))
                    v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(576) // T.int64(48))
                    v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(48) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 2, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #7: GFLOPs: 55.8989. Time: 887.3259 us. Best GFLOPs: 97.1051
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #8: GFLOPs: 60.7410. Time: 816.5907 us. Best GFLOPs: 97.1051
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #9: GFLOPs: 145.8566. Time: 340.0635 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #10: GFLOPs: 119.5511. Time: 414.8895 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #11: GFLOPs: 74.1999. Time: 668.4710 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #12: GFLOPs: 105.9785. Time: 468.0241 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #13: GFLOPs: 51.7112. Time: 959.1839 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #14: GFLOPs: 55.8854. Time: 887.5396 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #15: GFLOPs: 10.9772. Time: 4518.5189 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #16: GFLOPs: 75.4475. Time: 657.4177 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #17: GFLOPs: 29.5319. Time: 1679.5557 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #18: GFLOPs: 123.2399. Time: 402.4713 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #19: GFLOPs: 37.7720. Time: 1313.1540 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #20: GFLOPs: 73.2456. Time: 677.1804 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(144), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(40)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(18) // T.int64(3) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(3) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(18) * T.int64(6) + oc_chunk_1 * T.int64(3) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(18) // T.int64(3) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(3) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(18) * T.int64(6) + oc_chunk_1 * T.int64(3) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(18) // T.int64(3) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(3) * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(432)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(576))
                    v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(576) // T.int64(48))
                    v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(48) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 2, 1, 3])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[6, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[3, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b67)
l79 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b113)
b137 = sch.decompose_reduction(block=b113, loop=l121)
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #22: GFLOPs: 47.7072. Time: 1039.6864 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #23: GFLOPs: 9.4305. Time: 5259.5783 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #24: GFLOPs: 54.8860. Time: 903.7009 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #25: GFLOPs: 15.5379. Time: 3192.2201 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #26: GFLOPs: 35.1690. Time: 1410.3484 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #27: GFLOPs: 16.3920. Time: 3025.8916 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #28: GFLOPs: 14.5298. Time: 3413.7147 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #29: GFLOPs: 5.6398. Time: 8794.6947 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #30: GFLOPs: 20.6900. Time: 2397.3188 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #31: GFLOPs: 22.2249. Time: 2231.7491 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #32: GFLOPs: 68.0959. Time: 728.3920 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #33: GFLOPs: 62.2876. Time: 796.3146 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #34: GFLOPs: 86.4911. Time: 573.4750 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #35: GFLOPs: 79.6700. Time: 622.5743 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #36: GFLOPs: 24.7695. Time: 2002.4866 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #37: GFLOPs: 82.3942. Time: 601.9906 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #38: GFLOPs: 133.9574. Time: 370.2708 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #39: GFLOPs: 6.5008. Time: 7629.9536 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #40: GFLOPs: 9.8177. Time: 5052.1475 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #41: GFLOPs: 2.9973. Time: 16548.5949 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #42: GFLOPs: 13.6501. Time: 3633.7069 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #43: GFLOPs: 4.3573. Time: 11383.3169 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #44: GFLOPs: 9.9981. Time: 4961.0126 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #45: GFLOPs: 37.2907. Time: 1330.1037 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #46: GFLOPs: 2.1242. Time: 23350.0698 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #47: GFLOPs: 32.6208. Time: 1520.5156 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #48: GFLOPs: 14.1264. Time: 3511.1939 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #49: GFLOPs: 80.2697. Time: 617.9234 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #50: GFLOPs: 2.6612. Time: 18638.4561 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #51: GFLOPs: 68.2395. Time: 726.8588 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #52: GFLOPs: 111.4646. Time: 444.9888 us. Best GFLOPs: 145.8566
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #53: GFLOPs: 156.9287. Time: 316.0704 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #54: GFLOPs: 2.5850. Time: 19187.8928 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #55: GFLOPs: 9.6265. Time: 5152.5101 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #56: GFLOPs: 20.7478. Time: 2390.6405 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #57: GFLOPs: 14.0285. Time: 3535.6880 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #58: GFLOPs: 40.8176. Time: 1215.1758 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #59: GFLOPs: 27.8357. Time: 1781.9011 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #60: GFLOPs: 24.1738. Time: 2051.8317 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #61: GFLOPs: 34.9464. Time: 1419.3292 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #62: GFLOPs: 44.0541. Time: 1125.8998 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #63: GFLOPs: 3.8144. Time: 13003.5868 us. Best GFLOPs: 156.9287
2024-04-29 09:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #64: GFLOPs: 71.8901. Time: 689.9493 us. Best GFLOPs: 156.9287
2024-04-29 10:51:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:51:54 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 10:51:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 10:51:58 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 10:52:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 10:52:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 10:52:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 10:52:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf993458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec39c28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcdeae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd20fa78)]: 0 failure(s)
2024-04-29 10:52:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9536  0.9127  0.8589  0.8322  0.8290  0.8252  0.8252  0.8104  0.7938  0.7933  0.7811  0.7795  0.7744  0.7744  0.7733  0.7537
[17 : 32]:	0.7434  0.7206  0.7134  0.7072  0.7007  0.7004  0.7003  0.6989  0.6900  0.6866  0.6785  0.6720  0.6641  0.6556  0.6542  0.6502
[33 : 48]:	0.6493  0.6483  0.6467  0.6445  0.6410  0.6364  0.6363  0.6358  0.6356  0.6331  0.6317  0.6308  0.6308  0.6308  0.6286  0.6279
[49 : 64]:	0.6277  0.6249  0.6191  0.6174  0.6152  0.6132  0.6131  0.6117  0.6109  0.6102  0.6073  0.6066  0.6049  0.6045  0.6042  0.6033
2024-04-29 10:52:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:52:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(192), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(1)):
                for ax3_ax4_fused in T.vectorized(T.int64(48)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(6) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(3), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(2) * T.int64(6) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(6) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(2) * T.int64(6) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(6) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(2) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(6) + ow_1 * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 3, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[6, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 3, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b115)
b135 = sch.decompose_reduction(block=b115, loop=l119)
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #66: GFLOPs: 74.4243. Time: 666.4562 us. Best GFLOPs: 156.9287
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #67: GFLOPs: 124.9880. Time: 396.8421 us. Best GFLOPs: 156.9287
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #68: GFLOPs: 220.0521. Time: 225.4035 us. Best GFLOPs: 220.0521
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #69: GFLOPs: 225.9311. Time: 219.5382 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #70: GFLOPs: 224.4527. Time: 220.9842 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #71: GFLOPs: 224.0798. Time: 221.3520 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #72: GFLOPs: 131.4134. Time: 377.4388 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #73: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(12), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(32), T.int64(1), T.int64(7), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(12), T.int64(18), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(12), T.int64(12), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(96), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(3) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(6) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(32)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(3)):
                    for ax3_ax4_fused in T.vectorized(T.int64(48)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 + ax1)
                            v_i2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(3) + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(6) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(2), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(3) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(6) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(3), T.int64(6)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(3) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(6) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 3, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 3, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l85, l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #74: GFLOPs: 151.7317. Time: 326.8962 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #75: GFLOPs: 143.2260. Time: 346.3093 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #76: GFLOPs: 120.4628. Time: 411.7497 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #77: GFLOPs: 221.3087. Time: 224.1236 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #78: GFLOPs: 220.4486. Time: 224.9981 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #79: GFLOPs: 164.3171. Time: 301.8585 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #80: GFLOPs: 143.3273. Time: 346.0647 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #81: GFLOPs: 203.3856. Time: 243.8742 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #82: GFLOPs: 131.2913. Time: 377.7899 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #83: GFLOPs: 153.6759. Time: 322.7605 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #84: GFLOPs: 185.8428. Time: 266.8950 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #85: GFLOPs: 38.4434. Time: 1290.2222 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #86: GFLOPs: 155.8206. Time: 318.3180 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #87: GFLOPs: 166.7480. Time: 297.4579 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #88: GFLOPs: 179.2351. Time: 276.7344 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #89: GFLOPs: 204.5907. Time: 242.4378 us. Best GFLOPs: 225.9311
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #90: GFLOPs: 231.6224. Time: 214.1439 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #91: GFLOPs: 104.4937. Time: 474.6745 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #92: GFLOPs: 182.2824. Time: 272.1081 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #93: GFLOPs: 128.0168. Time: 387.4533 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #94: GFLOPs: 190.0950. Time: 260.9249 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #95: GFLOPs: 217.2444. Time: 228.3167 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #96: GFLOPs: 175.6554. Time: 282.3740 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #97: GFLOPs: 39.9431. Time: 1241.7790 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #98: GFLOPs: 34.4375. Time: 1440.3038 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #99: GFLOPs: 114.6384. Time: 432.6693 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #100: GFLOPs: 71.9490. Time: 689.3845 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #101: GFLOPs: 162.5540. Time: 305.1326 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #102: GFLOPs: 143.1903. Time: 346.3957 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #103: GFLOPs: 180.7863. Time: 274.3599 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #104: GFLOPs: 108.3802. Time: 457.6531 us. Best GFLOPs: 231.6224
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #105: GFLOPs: 243.3433. Time: 203.8294 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #106: GFLOPs: 124.4022. Time: 398.7110 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #107: GFLOPs: 101.6904. Time: 487.7598 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #108: GFLOPs: 190.2914. Time: 260.6555 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #109: GFLOPs: 181.8303. Time: 272.7846 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #110: GFLOPs: 190.4581. Time: 260.4274 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #111: GFLOPs: 159.1288. Time: 311.7004 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #112: GFLOPs: 53.5590. Time: 926.0902 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #113: GFLOPs: 148.2725. Time: 334.5226 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #114: GFLOPs: 183.0889. Time: 270.9094 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #115: GFLOPs: 147.8860. Time: 335.3969 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #116: GFLOPs: 135.3936. Time: 366.3432 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #117: GFLOPs: 74.9673. Time: 661.6285 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #118: GFLOPs: 106.7176. Time: 464.7830 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #119: GFLOPs: 110.0896. Time: 450.5469 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #120: GFLOPs: 189.4415. Time: 261.8250 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #121: GFLOPs: 101.3934. Time: 489.1887 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #122: GFLOPs: 107.0291. Time: 463.4301 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #123: GFLOPs: 98.5684. Time: 503.2093 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #124: GFLOPs: 127.2710. Time: 389.7237 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #125: GFLOPs: 221.5304. Time: 223.8994 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #126: GFLOPs: 3.6052. Time: 13758.2229 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #127: GFLOPs: 15.0292. Time: 3300.2666 us. Best GFLOPs: 243.3433
2024-04-29 10:54:06 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #128: GFLOPs: 2.4572. Time: 20185.7908 us. Best GFLOPs: 243.3433
