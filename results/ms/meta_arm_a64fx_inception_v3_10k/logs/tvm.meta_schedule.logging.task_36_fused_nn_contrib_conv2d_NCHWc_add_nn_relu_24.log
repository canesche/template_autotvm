2024-04-29 07:43:10 [INFO] [task_scheduler.cc:160] Initializing Task #36: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24"
2024-04-29 07:43:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:43:10 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:43:10 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(5), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), oc_chunk_1 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(25), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:43:10 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(25), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_0 * T.int64(25) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ow_1 * T.int64(5) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(25), T.int64(5), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(25), ow_0 * T.int64(5) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 25, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 5, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:35:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:35:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:35:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe609308)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa730898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc102e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4f4788)]: 0 failure(s)
2024-04-29 08:35:18 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:35:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe609308)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa730898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc102e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4f4788)]: 0 failure(s)
2024-04-29 08:35:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe609308)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa730898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc102e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4f4788)]: 0 failure(s)
2024-04-29 08:35:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe609308)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa730898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc102e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4f4788)]: 0 failure(s)
2024-04-29 08:35:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe609308)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa730898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc102e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4f4788)]: 0 failure(s)
2024-04-29 08:35:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9993  0.9984  0.9980  0.9979  0.9963  0.9961  0.9958  0.9958  0.9957  0.9954  0.9954  0.9949  0.9948  0.9940
[17 : 32]:	0.9936  0.9917  0.9917  0.9909  0.9909  0.9908  0.9906  0.9901  0.9901  0.9900  0.9898  0.9892  0.9887  0.9879  0.9870  0.9868
[33 : 48]:	0.9865  0.9856  0.9849  0.9849  0.9847  0.9841  0.9840  0.9833  0.9832  0.9829  0.9828  0.9822  0.9819  0.9810  0.9807  0.9804
[49 : 64]:	0.9796  0.9795  0.9793  0.9792  0.9789  0.9780  0.9777  0.9764  0.9757  0.9751  0.9751  0.9745  0.9743  0.9737  0.9735  0.9734
2024-04-29 08:35:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:35:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #1: GFLOPs: 37.1698. Time: 414.8531 us. Best GFLOPs: 37.1698
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #2: GFLOPs: 2.1294. Time: 7241.6346 us. Best GFLOPs: 37.1698
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #3: GFLOPs: 30.0612. Time: 512.9540 us. Best GFLOPs: 37.1698
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #4: GFLOPs: 5.8946. Time: 2615.9523 us. Best GFLOPs: 37.1698
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #5: GFLOPs: 16.9022. Time: 912.3095 us. Best GFLOPs: 37.1698
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #6: GFLOPs: 108.3137. Time: 142.3643 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #7: GFLOPs: 4.2193. Time: 3654.6241 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #8: GFLOPs: 59.7447. Time: 258.0981 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #9: GFLOPs: 35.0730. Time: 439.6542 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #10: GFLOPs: 59.4785. Time: 259.2533 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #11: GFLOPs: 56.6226. Time: 272.3295 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #12: GFLOPs: 15.0106. Time: 1027.2749 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #13: GFLOPs: 73.6733. Time: 209.3026 us. Best GFLOPs: 108.3137
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #14: GFLOPs: 128.3936. Time: 120.0995 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #15: GFLOPs: 32.8427. Time: 469.5102 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #16: GFLOPs: 44.4264. Time: 347.0912 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #17: GFLOPs: 44.7917. Time: 344.2603 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #18: GFLOPs: 11.0609. Time: 1394.1052 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #19: GFLOPs: 13.6524. Time: 1129.4706 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #20: GFLOPs: 22.7638. Time: 677.3916 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #21: GFLOPs: 19.1887. Time: 803.5961 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #22: GFLOPs: 51.4075. Time: 299.9563 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #23: GFLOPs: 31.4150. Time: 490.8478 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #24: GFLOPs: 49.9545. Time: 308.6807 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #25: GFLOPs: 0.7279. Time: 21183.9956 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #26: GFLOPs: 71.4087. Time: 215.9401 us. Best GFLOPs: 128.3936
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #27: GFLOPs: 158.8851. Time: 97.0513 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #28: GFLOPs: 148.7064. Time: 103.6942 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #29: GFLOPs: 69.0312. Time: 223.3772 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #30: GFLOPs: 96.6874. Time: 159.4831 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #31: GFLOPs: 41.2928. Time: 373.4308 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #32: GFLOPs: 1.8176. Time: 8483.6653 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #33: GFLOPs: 70.0796. Time: 220.0355 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #34: GFLOPs: 66.8570. Time: 230.6415 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #35: GFLOPs: 54.9318. Time: 280.7119 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #36: GFLOPs: 46.4332. Time: 332.0902 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(20), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(25), T.int64(5), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(3) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(25), oh_2_init * T.int64(25) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(5) + ow_2_init * T.int64(5) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(25), T.int64(5), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(3) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(25), oh_2 * T.int64(25) + oh_3)
                    v_ow = T.axis.spatial(T.int64(25), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(469)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(2500))
                    v_ax2 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2500) // T.int64(100))
                    v_ax3 = T.axis.spatial(T.int64(25), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(100) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(30000))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[5, 1, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #38: GFLOPs: 13.6694. Time: 1128.0705 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #39: GFLOPs: 105.1892. Time: 146.5930 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #40: GFLOPs: 68.0588. Time: 226.5689 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #41: GFLOPs: 88.1643. Time: 174.9008 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #42: GFLOPs: 7.3965. Time: 2084.7605 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #43: GFLOPs: 19.1459. Time: 805.3955 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #44: GFLOPs: 11.4477. Time: 1346.9963 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #45: GFLOPs: 26.5981. Time: 579.7405 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #46: GFLOPs: 57.3101. Time: 269.0625 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #47: GFLOPs: 19.9510. Time: 772.8935 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #48: GFLOPs: 0.5758. Time: 26779.1583 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #49: GFLOPs: 1.0672. Time: 14448.9704 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(25), T.int64(25), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(5), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(25), T.int64(5), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2_init * T.int64(25) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(25), ow_1 * T.int64(5) + ow_2_init * T.int64(5) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(25), T.int64(5), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(25), oh_1 * T.int64(25) + oh_2 * T.int64(25) + oh_3)
                        v_ow = T.axis.spatial(T.int64(25), ow_1 * T.int64(5) + ow_2 * T.int64(5) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(25), T.int64(25)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(6) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 25])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 5, 1, 5])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #51: GFLOPs: 141.6917. Time: 108.8278 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #52: GFLOPs: 19.5764. Time: 787.6816 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #53: GFLOPs: 16.5791. Time: 930.0873 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #54: GFLOPs: 16.9499. Time: 909.7372 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #55: GFLOPs: 20.4070. Time: 755.6232 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #56: GFLOPs: 96.1221. Time: 160.4209 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #57: GFLOPs: 9.4926. Time: 1624.4268 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #58: GFLOPs: 24.5075. Time: 629.1959 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #59: GFLOPs: 143.5441. Time: 107.4234 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #60: GFLOPs: 156.5736. Time: 98.4840 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #61: GFLOPs: 44.7533. Time: 344.5555 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #62: GFLOPs: 114.2873. Time: 134.9231 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #63: GFLOPs: 51.8183. Time: 297.5785 us. Best GFLOPs: 158.8851
2024-04-29 09:17:40 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #64: GFLOPs: 49.8931. Time: 309.0608 us. Best GFLOPs: 158.8851
