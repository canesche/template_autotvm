2024-04-29 07:43:16 [INFO] [task_scheduler.cc:160] Initializing Task #38: "fused_nn_avg_pool2d_5"
2024-04-29 07:43:16 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-29 07:43:16 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:16 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(25)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(4), T.int64(3)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2 + ax3)
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2 + ax3)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax3, ax4 in T.grid(T.int64(25), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:43:16 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(25), T.int64(25), T.int64(4), T.int64(3)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(25), T.int64(25), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(25), T.int64(25), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:43:16 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(25)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2 + ax2_1)
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
                for ax3, ax4 in T.grid(T.int64(25), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 08:36:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:36:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:36:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaa8f028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98bf7e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd876168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcf8dde8)]: 0 failure(s)
2024-04-29 08:36:56 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:37:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaa8f028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98bf7e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd876168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcf8dde8)]: 0 failure(s)
2024-04-29 08:37:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaa8f028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98bf7e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd876168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcf8dde8)]: 0 failure(s)
2024-04-29 08:37:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaa8f028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98bf7e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd876168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcf8dde8)]: 0 failure(s)
2024-04-29 08:37:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaa8f028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98bf7e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd876168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcf8dde8)]: 0 failure(s)
2024-04-29 08:37:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9979  0.9976  0.9969  0.9960  0.9920  0.9903  0.9902  0.9880  0.9854  0.9826  0.9802  0.9789  0.9681  0.9617  0.9615
[17 : 32]:	0.9549  0.9523  0.9501  0.9478  0.9421  0.9408  0.9374  0.9370  0.9344  0.9326  0.9322  0.9293  0.9267  0.9260  0.9253  0.9162
[33 : 48]:	0.9141  0.9094  0.9071  0.9063  0.9032  0.9015  0.9015  0.9007  0.8984  0.8952  0.8916  0.8913  0.8908  0.8881  0.8879  0.8874
[49 : 64]:	0.8861  0.8844  0.8835  0.8832  0.8781  0.8764  0.8759  0.8757  0.8751  0.8740  0.8740  0.8737  0.8727  0.8725  0.8679  0.8675
2024-04-29 08:37:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:37:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #1: GFLOPs: 14.8833. Time: 193.5050 us. Best GFLOPs: 14.8833
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #2: GFLOPs: 115.2492. Time: 24.9893 us. Best GFLOPs: 115.2492
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #3: GFLOPs: 119.9173. Time: 24.0166 us. Best GFLOPs: 119.9173
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #4: GFLOPs: 70.2412. Time: 41.0016 us. Best GFLOPs: 119.9173
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #5: GFLOPs: 30.2421. Time: 95.2313 us. Best GFLOPs: 119.9173
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #6: GFLOPs: 63.3021. Time: 45.4961 us. Best GFLOPs: 119.9173
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #7: GFLOPs: 68.3586. Time: 42.1307 us. Best GFLOPs: 119.9173
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #8: GFLOPs: 147.6562. Time: 19.5048 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #9: GFLOPs: 55.4297. Time: 51.9577 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #10: GFLOPs: 61.8689. Time: 46.5500 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #11: GFLOPs: 53.1643. Time: 54.1716 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #12: GFLOPs: 64.0635. Time: 44.9554 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #13: GFLOPs: 59.6373. Time: 48.2919 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #14: GFLOPs: 21.3440. Time: 134.9324 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #15: GFLOPs: 113.4113. Time: 25.3943 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #16: GFLOPs: 19.3933. Time: 148.5048 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #17: GFLOPs: 32.6179. Time: 88.2951 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #18: GFLOPs: 145.6510. Time: 19.7733 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #19: GFLOPs: 104.7950. Time: 27.4822 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #20: GFLOPs: 65.1447. Time: 44.2093 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #21: GFLOPs: 142.4976. Time: 20.2109 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #22: GFLOPs: 144.8570. Time: 19.8817 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #23: GFLOPs: 23.2741. Time: 123.7425 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #24: GFLOPs: 49.5740. Time: 58.0950 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #25: GFLOPs: 70.5392. Time: 40.8284 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #26: GFLOPs: 99.8050. Time: 28.8563 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #27: GFLOPs: 126.7708. Time: 22.7182 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #28: GFLOPs: 63.3985. Time: 45.4269 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #29: GFLOPs: 98.2161. Time: 29.3231 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #30: GFLOPs: 96.7550. Time: 29.7659 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #31: GFLOPs: 103.0791. Time: 27.9397 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #32: GFLOPs: 32.6882. Time: 88.1053 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #33: GFLOPs: 15.6908. Time: 183.5470 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #34: GFLOPs: 113.4650. Time: 25.3823 us. Best GFLOPs: 147.6562
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #35: GFLOPs: 167.8983. Time: 17.1532 us. Best GFLOPs: 167.8983
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #36: GFLOPs: 46.7521. Time: 61.6015 us. Best GFLOPs: 167.8983
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #37: GFLOPs: 33.5658. Time: 85.8016 us. Best GFLOPs: 167.8983
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #38: GFLOPs: 26.4225. Time: 108.9979 us. Best GFLOPs: 167.8983
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #39: GFLOPs: 180.5153. Time: 15.9543 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #40: GFLOPs: 19.4581. Time: 148.0102 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #41: GFLOPs: 49.1516. Time: 58.5942 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #42: GFLOPs: 33.3717. Time: 86.3006 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #43: GFLOPs: 30.5612. Time: 94.2370 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #44: GFLOPs: 86.9976. Time: 33.1044 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #45: GFLOPs: 62.9294. Time: 45.7656 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #46: GFLOPs: 43.0121. Time: 66.9579 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #47: GFLOPs: 54.0620. Time: 53.2722 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #48: GFLOPs: 48.6865. Time: 59.1539 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #49: GFLOPs: 65.2358. Time: 44.1475 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #50: GFLOPs: 35.4137. Time: 81.3245 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #51: GFLOPs: 51.8917. Time: 55.5002 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #52: GFLOPs: 144.5632. Time: 19.9221 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #53: GFLOPs: 104.2974. Time: 27.6133 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #54: GFLOPs: 81.9955. Time: 35.1239 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #55: GFLOPs: 82.6437. Time: 34.8484 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #56: GFLOPs: 72.1051. Time: 39.9417 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #57: GFLOPs: 83.4624. Time: 34.5065 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #58: GFLOPs: 71.4098. Time: 40.3306 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #59: GFLOPs: 84.2035. Time: 34.2028 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #60: GFLOPs: 84.7837. Time: 33.9688 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #61: GFLOPs: 19.1068. Time: 150.7316 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #62: GFLOPs: 60.0548. Time: 47.9562 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #63: GFLOPs: 26.5842. Time: 108.3349 us. Best GFLOPs: 180.5153
2024-04-29 09:17:49 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_avg_pool2d_5] Trial #64: GFLOPs: 138.8944. Time: 20.7352 us. Best GFLOPs: 180.5153
