2024-04-29 07:43:55 [INFO] [task_scheduler.cc:160] Initializing Task #47: "fused_nn_max_pool2d_2"
2024-04-29 07:43:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(109), T.int64(109), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 07:43:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:43:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(109), T.int64(109), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:43:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(109), T.int64(109), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 07:43:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(109), T.int64(109), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 08:51:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:51:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:51:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x987e408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33bd958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaa72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe63d3f8)]: 0 failure(s)
2024-04-29 08:51:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:51:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x987e408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33bd958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaa72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe63d3f8)]: 0 failure(s)
2024-04-29 08:52:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x987e408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33bd958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaa72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe63d3f8)]: 0 failure(s)
2024-04-29 08:52:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x987e408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33bd958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaa72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe63d3f8)]: 0 failure(s)
2024-04-29 08:52:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x987e408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x33bd958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaa72ef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe63d3f8)]: 0 failure(s)
2024-04-29 08:52:04 [INFO] [evolutionary_search.cc:649] Scores of the best 50 candidates:
[1 : 16]:	0.9894  0.9887  0.9725  0.9675  0.9572  0.9196  0.9069  0.9013  0.8941  0.8940  0.8892  0.8822  0.8818  0.8395  0.8222  0.8086
[17 : 32]:	0.7853  0.7778  0.7710  0.7362  0.7240  0.7011  0.6398  0.6177  0.6007  0.5923  0.5864  0.5745  0.5650  0.5450  0.5409  0.4682
[33 : 48]:	0.4542  0.4457  0.4197  0.4111  0.4090  0.3928  0.3383  0.3131  0.2689  0.2359  0.2162  0.2156  0.1016  0.0696  0.0588  0.0565
[49 : 50]:	0.0312  0.0019
2024-04-29 08:52:04 [INFO] [evolutionary_search.cc:727] Got 50 candidate(s) with evolutionary search
2024-04-29 08:52:04 [INFO] [evolutionary_search.cc:730] Sending 50 candidates(s) for measurement
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 1.9244. Time: 872.8121 us. Best GFLOPs: 1.9244
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 9.2600. Time: 181.3848 us. Best GFLOPs: 9.2600
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 24.2237. Time: 69.3378 us. Best GFLOPs: 24.2237
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 3.4575. Time: 485.7928 us. Best GFLOPs: 24.2237
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 30.3920. Time: 55.2651 us. Best GFLOPs: 30.3920
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 3.8468. Time: 436.6291 us. Best GFLOPs: 30.3920
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 16.2865. Time: 103.1294 us. Best GFLOPs: 30.3920
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 5.2801. Time: 318.1003 us. Best GFLOPs: 30.3920
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 6.5562. Time: 256.1884 us. Best GFLOPs: 30.3920
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 41.4609. Time: 40.5108 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 7.8759. Time: 213.2596 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 11.1782. Time: 150.2586 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 6.3506. Time: 264.4818 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 27.4294. Time: 61.2340 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 7.0933. Time: 236.7899 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 18.6184. Time: 90.2128 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 7.9218. Time: 212.0248 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 10.6176. Time: 158.1920 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 12.6717. Time: 132.5486 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 7.7695. Time: 216.1796 us. Best GFLOPs: 41.4609
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 75.5607. Time: 22.2287 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 16.0200. Time: 104.8452 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 23.1578. Time: 72.5291 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 10.8119. Time: 155.3491 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_max_pool2d_2] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(109), T.int64(109), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(9)))
        for ax0_ax1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(54), T.int64(54), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(54), T.int64(54), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 25.3278. Time: 66.3152 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 24.9271. Time: 67.3811 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 10.4291. Time: 161.0503 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 3.8400. Time: 437.3952 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 8.2912. Time: 202.5782 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 22.8441. Time: 73.5252 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 15.8380. Time: 106.0497 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 6.4962. Time: 258.5524 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 21.4928. Time: 78.1477 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 16.0943. Time: 104.3610 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 11.4648. Time: 146.5023 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 10.2807. Time: 163.3749 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 25.1699. Time: 66.7312 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 10.4744. Time: 160.3545 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_max_pool2d_2] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(109), T.int64(109), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(54), T.int64(54), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(54), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(54))
                        v_ax2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_fused % T.int64(54))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(54))
                            v_ax2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_fused % T.int64(54))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(54), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(54))
                    v_ax2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_fused % T.int64(54))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(54))
                        v_ax2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_fused % T.int64(54))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 15.5849. Time: 107.7723 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 15.5681. Time: 107.8882 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 10.6868. Time: 157.1676 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 23.7074. Time: 70.8476 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 19.3442. Time: 86.8279 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 19.3135. Time: 86.9660 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 9.9773. Time: 168.3431 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 9.9741. Time: 168.3975 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 16.1673. Time: 103.8894 us. Best GFLOPs: 75.5607
2024-04-29 09:18:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 10.5487. Time: 159.2249 us. Best GFLOPs: 75.5607
