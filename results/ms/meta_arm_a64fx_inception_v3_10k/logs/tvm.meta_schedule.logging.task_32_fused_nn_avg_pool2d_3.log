2024-04-29 07:42:59 [INFO] [task_scheduler.cc:160] Initializing Task #32: "fused_nn_avg_pool2d_3"
2024-04-29 07:42:59 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-29 07:42:59 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:42:59 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(72), T.int64(25)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(4), T.int64(3)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(72), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2 + ax3)
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(25), T.int64(4), T.int64(3)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)):
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:42:59 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(72)):
                for ax0_1 in range(T.int64(3)):
                    for ax0_2, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(25), T.int64(25), T.int64(4), T.int64(3)):
                        with T.block("pool_sum_rf"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), ax0_1 + ax0_2)
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_1)
                            v_ax1 = T.axis.spatial(T.int64(72), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            with T.init():
                                pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4]
                    for ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(25), T.int64(25), T.int64(4)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(72), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(25), T.int64(25), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:42:59 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(72), T.int64(25), T.int64(25), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(3)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(72), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(25), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(25), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        v_rv0, v_rv1 = T.axis.remap("RR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(26) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(26) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 08:30:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:30:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:30:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd1f1428)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd209f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x635bd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x352f1a8)]: 0 failure(s)
2024-04-29 08:30:41 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:30:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd1f1428)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd209f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x635bd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x352f1a8)]: 0 failure(s)
2024-04-29 08:30:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd1f1428)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd209f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x635bd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x352f1a8)]: 0 failure(s)
2024-04-29 08:30:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd1f1428)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd209f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x635bd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x352f1a8)]: 0 failure(s)
2024-04-29 08:30:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd1f1428)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd209f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x635bd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x352f1a8)]: 0 failure(s)
2024-04-29 08:30:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9960  0.9959  0.9944  0.9929  0.9907  0.9907  0.9894  0.9860  0.9860  0.9823  0.9808  0.9777  0.9737  0.9727  0.9716  0.9684
[17 : 32]:	0.9676  0.9661  0.9635  0.9617  0.9607  0.9591  0.9586  0.9527  0.9471  0.9402  0.9391  0.9299  0.9288  0.9274  0.9264  0.9244
[33 : 48]:	0.9236  0.9212  0.9199  0.9151  0.9151  0.9134  0.9086  0.9083  0.9078  0.9057  0.9016  0.9010  0.8989  0.8937  0.8922  0.8915
[49 : 64]:	0.8893  0.8874  0.8873  0.8872  0.8862  0.8851  0.8798  0.8792  0.8766  0.8737  0.8718  0.8716  0.8715  0.8714  0.8693  0.8685
2024-04-29 08:30:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:30:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #1: GFLOPs: 27.2593. Time: 158.4778 us. Best GFLOPs: 27.2593
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #2: GFLOPs: 51.9633. Time: 83.1355 us. Best GFLOPs: 51.9633
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #3: GFLOPs: 18.6615. Time: 231.4930 us. Best GFLOPs: 51.9633
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #4: GFLOPs: 19.8136. Time: 218.0322 us. Best GFLOPs: 51.9633
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #5: GFLOPs: 24.3909. Time: 177.1156 us. Best GFLOPs: 51.9633
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #6: GFLOPs: 21.4875. Time: 201.0467 us. Best GFLOPs: 51.9633
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #7: GFLOPs: 108.6060. Time: 39.7768 us. Best GFLOPs: 108.6060
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #8: GFLOPs: 63.3958. Time: 68.1433 us. Best GFLOPs: 108.6060
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #9: GFLOPs: 70.6813. Time: 61.1195 us. Best GFLOPs: 108.6060
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #10: GFLOPs: 57.5649. Time: 75.0457 us. Best GFLOPs: 108.6060
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #11: GFLOPs: 35.2849. Time: 122.4321 us. Best GFLOPs: 108.6060
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #12: GFLOPs: 197.2442. Time: 21.9018 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #13: GFLOPs: 153.9790. Time: 28.0558 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #14: GFLOPs: 188.4613. Time: 22.9225 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #15: GFLOPs: 97.3939. Time: 44.3560 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #16: GFLOPs: 78.6512. Time: 54.9260 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #17: GFLOPs: 39.9143. Time: 108.2320 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #18: GFLOPs: 90.1378. Time: 47.9266 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #19: GFLOPs: 85.3402. Time: 50.6209 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #20: GFLOPs: 149.0038. Time: 28.9925 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #21: GFLOPs: 83.8209. Time: 51.5384 us. Best GFLOPs: 197.2442
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #22: GFLOPs: 199.9232. Time: 21.6083 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #23: GFLOPs: 103.9314. Time: 41.5659 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #24: GFLOPs: 112.4132. Time: 38.4296 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #25: GFLOPs: 56.7139. Time: 76.1719 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #26: GFLOPs: 78.3760. Time: 55.1189 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #27: GFLOPs: 33.0370. Time: 130.7625 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #28: GFLOPs: 105.9005. Time: 40.7930 us. Best GFLOPs: 199.9232
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #29: GFLOPs: 230.0228. Time: 18.7807 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #30: GFLOPs: 46.6957. Time: 92.5139 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #31: GFLOPs: 25.2932. Time: 170.7967 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #32: GFLOPs: 70.1065. Time: 61.6205 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #33: GFLOPs: 25.8536. Time: 167.0948 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #34: GFLOPs: 58.4702. Time: 73.8838 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #35: GFLOPs: 119.2408. Time: 36.2292 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #36: GFLOPs: 164.2208. Time: 26.3060 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #37: GFLOPs: 192.1555. Time: 22.4818 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #38: GFLOPs: 127.8369. Time: 33.7931 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #39: GFLOPs: 186.9737. Time: 23.1048 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #40: GFLOPs: 94.5405. Time: 45.6947 us. Best GFLOPs: 230.0228
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #41: GFLOPs: 245.2336. Time: 17.6159 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #42: GFLOPs: 59.9917. Time: 72.0100 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #43: GFLOPs: 87.1078. Time: 49.5937 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #44: GFLOPs: 63.9470. Time: 67.5559 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #45: GFLOPs: 148.7527. Time: 29.0415 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #46: GFLOPs: 27.0743. Time: 159.5609 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #47: GFLOPs: 132.8144. Time: 32.5266 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #48: GFLOPs: 62.0508. Time: 69.6203 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #49: GFLOPs: 39.8510. Time: 108.4037 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #50: GFLOPs: 22.0420. Time: 195.9899 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #51: GFLOPs: 36.5725. Time: 118.1214 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #52: GFLOPs: 96.2238. Time: 44.8954 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #53: GFLOPs: 140.0932. Time: 30.8366 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #54: GFLOPs: 32.5822. Time: 132.5876 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #55: GFLOPs: 113.6458. Time: 38.0129 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #56: GFLOPs: 72.3156. Time: 59.7381 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #57: GFLOPs: 85.8147. Time: 50.3411 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #58: GFLOPs: 210.9697. Time: 20.4769 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #59: GFLOPs: 51.9385. Time: 83.1752 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #60: GFLOPs: 80.3565. Time: 53.7604 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #61: GFLOPs: 148.7421. Time: 29.0436 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #62: GFLOPs: 81.1586. Time: 53.2291 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #63: GFLOPs: 72.4736. Time: 59.6079 us. Best GFLOPs: 245.2336
2024-04-29 09:17:23 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_avg_pool2d_3] Trial #64: GFLOPs: 59.8264. Time: 72.2090 us. Best GFLOPs: 245.2336
