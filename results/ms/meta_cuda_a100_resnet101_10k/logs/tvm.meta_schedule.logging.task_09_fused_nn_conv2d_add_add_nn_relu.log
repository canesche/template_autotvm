2024-04-29 05:30:16 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_nn_conv2d_add_add_nn_relu"
2024-04-29 05:30:16 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 05:30:16 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 05:30:16 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(32) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[8, 1, 8, 1, 4])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 4, 1])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[2, 32, 1])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 05:30:16 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[8, 1, 8, 1, 4])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 4, 1])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[2, 32, 1])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
2024-04-29 05:30:16 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[8, 1, 8, 1, 4])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 4, 1])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[2, 32, 1])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
2024-04-29 05:44:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:44:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 05:44:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 473 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 05:44:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 948 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 05:44:55 [INFO] [evolutionary_search.cc:723] Sampled 76 candidate(s)
2024-04-29 05:44:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 05:45:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 05:45:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 05:45:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 05:45:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9992  0.9990  0.9989  0.9988  0.9981  0.9980  0.9978  0.9963  0.9954  0.9932  0.9932  0.9922  0.9921  0.9913  0.9905
[17 : 32]:	0.9895  0.9892  0.9886  0.9882  0.9881  0.9880  0.9879  0.9878  0.9872  0.9856  0.9842  0.9828  0.9822  0.9820  0.9815  0.9814
[33 : 48]:	0.9810  0.9809  0.9797  0.9789  0.9766  0.9762  0.9761  0.9750  0.9743  0.9742  0.9722  0.9720  0.9704  0.9704  0.9700  0.9693
[49 : 64]:	0.9691  0.9690  0.9689  0.9686  0.9683  0.9681  0.9678  0.9672  0.9661  0.9650  0.9639  0.9630  0.9618  0.9613  0.9605  0.9599
2024-04-29 05:45:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:45:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #1: GFLOPs: 312.8485. Time: 336.1656 us. Best GFLOPs: 312.8485
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #2: GFLOPs: 2206.0252. Time: 47.6735 us. Best GFLOPs: 2206.0252
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #3: GFLOPs: 1038.4531. Time: 101.2746 us. Best GFLOPs: 2206.0252
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #4: GFLOPs: 2855.6441. Time: 36.8284 us. Best GFLOPs: 2855.6441
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #5: GFLOPs: 45.0341. Time: 2335.3153 us. Best GFLOPs: 2855.6441
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #6: GFLOPs: 28.1412. Time: 3737.1829 us. Best GFLOPs: 2855.6441
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #7: GFLOPs: 4789.5372. Time: 21.9580 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #8: GFLOPs: 2850.6827. Time: 36.8925 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #9: GFLOPs: 76.8621. Time: 1368.2810 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #10: GFLOPs: 2260.6002. Time: 46.5226 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #11: GFLOPs: 396.1569. Time: 265.4728 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #12: GFLOPs: 135.7241. Time: 774.8726 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #13: GFLOPs: 230.5774. Time: 456.1110 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #14: GFLOPs: 189.9904. Time: 553.5484 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #15: GFLOPs: 387.4341. Time: 271.4498 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #16: GFLOPs: 963.9859. Time: 109.0980 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #17: GFLOPs: 1913.9307. Time: 54.9492 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #18: GFLOPs: 2233.6056. Time: 47.0848 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #19: GFLOPs: 55.5587. Time: 1892.9317 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #20: GFLOPs: 25.2712. Time: 4161.6180 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #21: GFLOPs: 2850.7012. Time: 36.8923 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #22: GFLOPs: 3887.1164. Time: 27.0558 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #23: GFLOPs: 1338.3855. Time: 78.5789 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #24: GFLOPs: 1746.1165. Time: 60.2302 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #25: GFLOPs: 464.8691. Time: 226.2333 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #26: GFLOPs: 2649.7888. Time: 39.6895 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #27: GFLOPs: 1393.0965. Time: 75.4929 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #28: GFLOPs: 458.3305. Time: 229.4608 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #29: GFLOPs: 348.8725. Time: 301.4537 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #30: GFLOPs: 177.1084. Time: 593.8109 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #31: GFLOPs: 272.5417. Time: 385.8818 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #32: GFLOPs: 389.6529. Time: 269.9040 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #33: GFLOPs: 2078.0806. Time: 50.6087 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #34: GFLOPs: 1918.3758. Time: 54.8218 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #35: GFLOPs: 7.7796. Time: 13518.4640 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #36: GFLOPs: 376.2582. Time: 279.5126 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #37: GFLOPs: 16.5411. Time: 6358.0160 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #38: GFLOPs: 458.5088. Time: 229.3716 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #39: GFLOPs: 2888.4125. Time: 36.4106 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #40: GFLOPs: 15.2659. Time: 6889.1306 us. Best GFLOPs: 4789.5372
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #41: GFLOPs: 4950.8582. Time: 21.2426 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #42: GFLOPs: 171.6792. Time: 612.5895 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #43: GFLOPs: 3340.0664. Time: 31.4871 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #44: GFLOPs: 155.9681. Time: 674.2976 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #45: GFLOPs: 126.1599. Time: 833.6160 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #46: GFLOPs: 692.1161. Time: 151.9527 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #47: GFLOPs: 657.0543. Time: 160.0612 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #48: GFLOPs: 2846.8001. Time: 36.9428 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #49: GFLOPs: 202.2130. Time: 520.0896 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #50: GFLOPs: 1916.2382. Time: 54.8830 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #51: GFLOPs: 76.0948. Time: 1382.0774 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #52: GFLOPs: 41.7751. Time: 2517.5039 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #53: GFLOPs: 738.6163. Time: 142.3864 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #54: GFLOPs: 2248.6536. Time: 46.7697 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #55: GFLOPs: 80.3516. Time: 1308.8582 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #56: GFLOPs: 577.7503. Time: 182.0317 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #57: GFLOPs: 100.6768. Time: 1044.6187 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #58: GFLOPs: 251.1005. Time: 418.8320 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #59: GFLOPs: 1092.5888. Time: 96.2566 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #60: GFLOPs: 37.0520. Time: 2838.4143 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #61: GFLOPs: 2416.8084. Time: 43.5156 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #62: GFLOPs: 334.1105. Time: 314.7728 us. Best GFLOPs: 4950.8582
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(112) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 16, 8, 2, 1])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 2, 1, 1, 1])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[1, 2, 4, 1, 7])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[16, 4, 1])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
sch.enter_postproc()
sch.unannotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch")
l103, l104, l105, l106, l107 = sch.get_loops(block=b75)
l108, l109 = sch.split(loop=l107, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b88)
l115, l116 = sch.split(loop=l114, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b119)
l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l134, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l134, ann_key="pragma_unroll_explicit", ann_val=1)
l152, l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b121)
b159 = sch.get_block(name="conv2d_nchw", func_name="main")
l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b159)
b178 = sch.decompose_reduction(block=b159, loop=l163)
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #64: GFLOPs: 188.6693. Time: 557.4245 us. Best GFLOPs: 4950.8582
2024-04-29 07:20:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:20:42 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 07:20:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 410 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 07:20:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 833 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 07:20:47 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-04-29 07:20:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 07:20:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 07:21:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 07:21:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 07:21:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1550  1.7869  1.7621  1.6723  1.6492  1.6435  1.5919  1.5770  1.5770  1.5759  1.5725  1.5572  1.5500  1.5494  1.5376  1.5253
[17 : 32]:	1.4984  1.4931  1.4833  1.4782  1.4769  1.4606  1.4569  1.4535  1.4337  1.4303  1.4275  1.4273  1.4193  1.4051  1.3915  1.3829
[33 : 48]:	1.3759  1.3755  1.3680  1.3659  1.3569  1.3561  1.3451  1.3340  1.3312  1.3304  1.3273  1.3184  1.3184  1.3181  1.3181  1.3167
[49 : 64]:	1.3130  1.3113  1.3083  1.3018  1.3010  1.3009  1.2997  1.2984  1.2959  1.2887  1.2860  1.2828  1.2788  1.2788  1.2753  1.2728
2024-04-29 07:21:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:21:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #65: GFLOPs: 3206.2974. Time: 32.8007 us. Best GFLOPs: 4950.8582
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #66: GFLOPs: 4249.9759. Time: 24.7458 us. Best GFLOPs: 4950.8582
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #67: GFLOPs: 1520.7761. Time: 69.1548 us. Best GFLOPs: 4950.8582
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #68: GFLOPs: 2170.5520. Time: 48.4526 us. Best GFLOPs: 4950.8582
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #69: GFLOPs: 1941.3336. Time: 54.1735 us. Best GFLOPs: 4950.8582
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #70: GFLOPs: 7007.1816. Time: 15.0087 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #71: GFLOPs: 4174.0431. Time: 25.1959 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #72: GFLOPs: 1786.7108. Time: 58.8617 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #73: GFLOPs: 1787.8596. Time: 58.8239 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #74: GFLOPs: 1785.7659. Time: 58.8929 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #75: GFLOPs: 1834.4424. Time: 57.3302 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #76: GFLOPs: 3117.2013. Time: 33.7382 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #77: GFLOPs: 3092.7304. Time: 34.0052 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #78: GFLOPs: 2753.3619. Time: 38.1965 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #79: GFLOPs: 2779.8131. Time: 37.8331 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #80: GFLOPs: 3746.3795. Time: 28.0721 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #81: GFLOPs: 3069.9100. Time: 34.2580 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #82: GFLOPs: 4262.8388. Time: 24.6711 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #83: GFLOPs: 815.5898. Time: 128.9483 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #84: GFLOPs: 2111.3150. Time: 49.8120 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #85: GFLOPs: 1808.1383. Time: 58.1642 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #86: GFLOPs: 5496.2462. Time: 19.1347 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #87: GFLOPs: 3093.0147. Time: 34.0021 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #88: GFLOPs: 4350.5178. Time: 24.1739 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #89: GFLOPs: 5585.3264. Time: 18.8295 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #90: GFLOPs: 3938.8592. Time: 26.7003 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #91: GFLOPs: 3954.6550. Time: 26.5937 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #92: GFLOPs: 5145.6279. Time: 20.4385 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #93: GFLOPs: 2167.8377. Time: 48.5133 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #94: GFLOPs: 1798.1576. Time: 58.4870 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #95: GFLOPs: 2809.2524. Time: 37.4366 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #96: GFLOPs: 4250.6696. Time: 24.7417 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #97: GFLOPs: 4828.6251. Time: 21.7803 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #98: GFLOPs: 1133.8517. Time: 92.7537 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #99: GFLOPs: 509.5521. Time: 206.3948 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #100: GFLOPs: 512.4294. Time: 205.2359 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #101: GFLOPs: 3117.9340. Time: 33.7303 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #102: GFLOPs: 2672.9091. Time: 39.3462 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #103: GFLOPs: 1706.3718. Time: 61.6330 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #104: GFLOPs: 3740.5615. Time: 28.1158 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #105: GFLOPs: 4872.7035. Time: 21.5833 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #106: GFLOPs: 3513.5144. Time: 29.9327 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #107: GFLOPs: 4196.1705. Time: 25.0631 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #108: GFLOPs: 1726.7859. Time: 60.9044 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #109: GFLOPs: 1441.7954. Time: 72.9430 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #110: GFLOPs: 1462.5380. Time: 71.9085 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #111: GFLOPs: 1761.2819. Time: 59.7116 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #112: GFLOPs: 1689.0850. Time: 62.2638 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #113: GFLOPs: 4456.3214. Time: 23.5999 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #114: GFLOPs: 4974.9123. Time: 21.1398 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #115: GFLOPs: 5466.0985. Time: 19.2402 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #116: GFLOPs: 4360.8673. Time: 24.1165 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #117: GFLOPs: 4518.7081. Time: 23.2741 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #118: GFLOPs: 5541.0144. Time: 18.9801 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #119: GFLOPs: 3239.4701. Time: 32.4648 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #120: GFLOPs: 5761.2337. Time: 18.2546 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #121: GFLOPs: 5703.1490. Time: 18.4405 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #122: GFLOPs: 2220.9392. Time: 47.3533 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #123: GFLOPs: 5571.0194. Time: 18.8779 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #124: GFLOPs: 1546.5416. Time: 68.0026 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #125: GFLOPs: 2199.4597. Time: 47.8158 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #126: GFLOPs: 329.1424. Time: 319.5240 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #127: GFLOPs: 3302.9734. Time: 31.8407 us. Best GFLOPs: 7007.1816
2024-04-29 07:22:14 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #128: GFLOPs: 716.0316. Time: 146.8775 us. Best GFLOPs: 7007.1816
2024-04-29 09:38:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:38:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 09:38:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 383 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 09:38:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 762 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 09:38:19 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 09:38:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 09:38:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 09:38:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 09:38:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x179f6ee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf416478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xcaa1598)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd2d0f78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1627b4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1c308f58)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcaa1a08)]: 0 failure(s)
2024-04-29 09:38:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2378  2.1308  2.1203  2.0351  2.0234  2.0139  1.9916  1.9380  1.9144  1.9013  1.8698  1.8414  1.8336  1.8280  1.8223  1.8204
[17 : 32]:	1.7850  1.7730  1.7696  1.7686  1.7645  1.6894  1.6863  1.6763  1.6763  1.6557  1.6449  1.6370  1.6255  1.6254  1.6254  1.6163
[33 : 48]:	1.6062  1.5969  1.5862  1.5844  1.5790  1.5708  1.5621  1.5582  1.5549  1.5505  1.5471  1.5196  1.5164  1.5137  1.5137  1.5078
[49 : 64]:	1.5058  1.5046  1.5011  1.4957  1.4912  1.4888  1.4680  1.4652  1.4633  1.4546  1.4499  1.4458  1.4371  1.4342  1.4235  1.4156
2024-04-29 09:38:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:38:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #129: GFLOPs: 6132.6987. Time: 17.1489 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #130: GFLOPs: 834.3446. Time: 126.0497 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #131: GFLOPs: 6224.7801. Time: 16.8952 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #132: GFLOPs: 1176.7431. Time: 89.3729 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #133: GFLOPs: 1176.8036. Time: 89.3683 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #134: GFLOPs: 1051.2530. Time: 100.0415 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #135: GFLOPs: 1255.4873. Time: 83.7674 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #136: GFLOPs: 266.6682. Time: 394.3811 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #137: GFLOPs: 5734.0328. Time: 18.3412 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #138: GFLOPs: 5848.6836. Time: 17.9816 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #139: GFLOPs: 860.2335. Time: 122.2562 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #140: GFLOPs: 6392.9468. Time: 16.4508 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #141: GFLOPs: 678.9005. Time: 154.9106 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #142: GFLOPs: 4611.2627. Time: 22.8070 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #143: GFLOPs: 148.2081. Time: 709.6030 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #144: GFLOPs: 6532.9530. Time: 16.0982 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #145: GFLOPs: 6186.9631. Time: 16.9985 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #146: GFLOPs: 851.5510. Time: 123.5028 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #147: GFLOPs: 855.7681. Time: 122.8942 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #148: GFLOPs: 855.4506. Time: 122.9398 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #149: GFLOPs: 6202.4382. Time: 16.9561 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #150: GFLOPs: 6476.9393. Time: 16.2374 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #151: GFLOPs: 1657.2300. Time: 63.4607 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #152: GFLOPs: 6470.9906. Time: 16.2524 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #153: GFLOPs: 6471.7420. Time: 16.2505 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #154: GFLOPs: 112.6147. Time: 933.8821 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #155: GFLOPs: 4775.8311. Time: 22.0211 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #156: GFLOPs: 6562.4963. Time: 16.0257 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #157: GFLOPs: 6124.9279. Time: 17.1706 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #158: GFLOPs: 6473.1384. Time: 16.2470 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #159: GFLOPs: 2110.7997. Time: 49.8242 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #160: GFLOPs: 3332.8094. Time: 31.5556 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #161: GFLOPs: 2995.9870. Time: 35.1033 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #162: GFLOPs: 1108.3689. Time: 94.8862 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #163: GFLOPs: 6090.6699. Time: 17.2672 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #164: GFLOPs: 858.8841. Time: 122.4483 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #165: GFLOPs: 6556.4599. Time: 16.0405 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #166: GFLOPs: 2660.7565. Time: 39.5259 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #167: GFLOPs: 5472.9282. Time: 19.2162 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #168: GFLOPs: 5786.1607. Time: 18.1759 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #169: GFLOPs: 673.3050. Time: 156.1980 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #170: GFLOPs: 5617.7884. Time: 18.7207 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #171: GFLOPs: 103.7922. Time: 1013.2635 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #172: GFLOPs: 4099.7350. Time: 25.6526 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #173: GFLOPs: 4031.6146. Time: 26.0860 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #174: GFLOPs: 4071.6031. Time: 25.8298 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #175: GFLOPs: 4071.4440. Time: 25.8309 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #176: GFLOPs: 4774.1429. Time: 22.0289 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #177: GFLOPs: 2960.1836. Time: 35.5278 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #178: GFLOPs: 2953.0082. Time: 35.6142 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #179: GFLOPs: 652.7881. Time: 161.1073 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #180: GFLOPs: 5691.9283. Time: 18.4768 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #181: GFLOPs: 2604.5599. Time: 40.3788 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #182: GFLOPs: 2591.0534. Time: 40.5892 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #183: GFLOPs: 4023.6910. Time: 26.1374 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #184: GFLOPs: 2602.0742. Time: 40.4173 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #185: GFLOPs: 6334.6256. Time: 16.6022 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #186: GFLOPs: 4287.3245. Time: 24.5302 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #187: GFLOPs: 536.6597. Time: 195.9694 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #188: GFLOPs: 1173.7978. Time: 89.5971 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #189: GFLOPs: 150.0079. Time: 701.0891 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #190: GFLOPs: 86.8882. Time: 1210.3927 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #191: GFLOPs: 20.9703. Time: 5015.1424 us. Best GFLOPs: 7007.1816
2024-04-29 09:40:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #192: GFLOPs: 104.5131. Time: 1006.2746 us. Best GFLOPs: 7007.1816
