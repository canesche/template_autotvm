2024-04-29 05:30:23 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_global_avg_pool2d"
2024-04-29 05:30:23 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 05:30:23 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 05:30:23 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 05:30:23 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(128)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 06:12:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:12:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:12:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xca04e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcb60038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xca43b58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d74578)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e5e008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1ce96028)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb5ff38)]: 0 failure(s)
2024-04-29 06:12:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 06:12:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xca04e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcb60038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xca43b58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d74578)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e5e008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1ce96028)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb5ff38)]: 0 failure(s)
2024-04-29 06:12:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xca04e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcb60038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xca43b58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d74578)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e5e008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1ce96028)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb5ff38)]: 0 failure(s)
2024-04-29 06:12:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xca04e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcb60038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xca43b58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d74578)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e5e008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1ce96028)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb5ff38)]: 0 failure(s)
2024-04-29 06:12:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xca04e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcb60038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xca43b58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d74578)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e5e008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1ce96028)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcb5ff38)]: 0 failure(s)
2024-04-29 06:12:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9968  0.9965  0.9915  0.9813  0.9774  0.9717  0.9681  0.9675  0.9341  0.9326  0.9215  0.9205  0.9204  0.9199  0.9169
[17 : 32]:	0.9088  0.9011  0.8989  0.8969  0.8915  0.8765  0.8746  0.8707  0.8651  0.8627  0.8618  0.8574  0.8553  0.8535  0.8424  0.8419
[33 : 48]:	0.8418  0.8274  0.8267  0.8266  0.8217  0.8165  0.8156  0.8103  0.8100  0.8084  0.8083  0.8051  0.8042  0.8025  0.7834  0.7745
[49 : 64]:	0.7721  0.7646  0.7558  0.7518  0.7506  0.7461  0.7376  0.7324  0.7278  0.7165  0.7130  0.7098  0.7087  0.7074  0.6989  0.6983
2024-04-29 06:12:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:12:52 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 17.2418. Time: 5.9391 us. Best GFLOPs: 17.2418
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 22.5340. Time: 4.5442 us. Best GFLOPs: 22.5340
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 14.8961. Time: 6.8743 us. Best GFLOPs: 22.5340
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 14.7409. Time: 6.9466 us. Best GFLOPs: 22.5340
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 12.1910. Time: 8.3996 us. Best GFLOPs: 22.5340
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 22.5895. Time: 4.5331 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 12.0351. Time: 8.5085 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 12.1576. Time: 8.4227 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 12.1279. Time: 8.4433 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 12.0618. Time: 8.4896 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 9.0220. Time: 11.3501 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 17.8115. Time: 5.7491 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 5.8102. Time: 17.6242 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 5.8251. Time: 17.5791 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 19.8434. Time: 5.1604 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 5.8500. Time: 17.5044 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 5.8509. Time: 17.5016 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 8.9727. Time: 11.4124 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 5.8455. Time: 17.5176 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 12.1911. Time: 8.3996 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 14.7446. Time: 6.9449 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 14.8501. Time: 6.8956 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 14.8437. Time: 6.8985 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 14.8714. Time: 6.8857 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 14.7605. Time: 6.9374 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 9.0946. Time: 11.2594 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 14.8538. Time: 6.8939 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 17.1975. Time: 5.9543 us. Best GFLOPs: 22.5895
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 22.9505. Time: 4.4618 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 5.8494. Time: 17.5060 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 19.8450. Time: 5.1600 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 15.0139. Time: 6.8203 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 5.8075. Time: 17.6323 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 17.5715. Time: 5.8276 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 12.0459. Time: 8.5008 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 12.1647. Time: 8.4178 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 13.8023. Time: 7.4191 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 5.8267. Time: 17.5742 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 16.6009. Time: 6.1683 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 22.5132. Time: 4.5484 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 22.8477. Time: 4.4819 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 16.6039. Time: 6.1672 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 16.6171. Time: 6.1623 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 14.8579. Time: 6.8920 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 16.8329. Time: 6.0833 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 22.5916. Time: 4.5327 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 16.6181. Time: 6.1620 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 9.0815. Time: 11.2757 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 16.6130. Time: 6.1639 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 22.6880. Time: 4.5134 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 17.5449. Time: 5.8364 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 14.9015. Time: 6.8718 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 17.7090. Time: 5.7824 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 5.8080. Time: 17.6309 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 22.5161. Time: 4.5479 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 22.8414. Time: 4.4831 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 17.6267. Time: 5.8094 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 9.1117. Time: 11.2383 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 22.7857. Time: 4.4940 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 22.3860. Time: 4.5743 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 16.6006. Time: 6.1685 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 16.6082. Time: 6.1656 us. Best GFLOPs: 22.9505
2024-04-29 06:16:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 16.5936. Time: 6.1710 us. Best GFLOPs: 22.9505
