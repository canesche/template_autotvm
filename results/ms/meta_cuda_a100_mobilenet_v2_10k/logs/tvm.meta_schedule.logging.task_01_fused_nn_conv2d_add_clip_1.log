2024-04-29 22:55:50 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_conv2d_add_clip_1"
2024-04-29 22:55:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(114), T.int64(114)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3])
                compute[v_i0, v_i1, v_i2, v_i3] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3], T.float32(6)), T.float32(0))
2024-04-29 22:55:51 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 22:55:51 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36480)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(1140))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(1140) // T.int64(114))
                                    v3 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(114))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(4) + c_3 * T.int64(4) + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + j_3 * T.int64(4) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(16)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 4, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-29 22:55:51 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36480)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(1140))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(1140) // T.int64(114))
                                    v3 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(114))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(4) + c_3 * T.int64(4) + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + j_3 * T.int64(4) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(16)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 4, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-29 22:55:51 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36480)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(1140))
                                    v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(1140) // T.int64(114))
                                    v3 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(114))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(4) + c_3 * T.int64(4) + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + j_3 * T.int64(4) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(16)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused * T.int64(8) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 4, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-29 22:58:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:58:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 22:58:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:58:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 995 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:58:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1501 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:58:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:58:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2510 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:58:55 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 22:59:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:59:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:59:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:59:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-29 22:59:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9977  0.9974  0.9971  0.9967  0.9964  0.9963  0.9962  0.9942  0.9934  0.9932  0.9931  0.9925  0.9924  0.9915  0.9903  0.9884
[17 : 32]:	0.9884  0.9882  0.9882  0.9878  0.9877  0.9875  0.9870  0.9869  0.9868  0.9865  0.9864  0.9864  0.9862  0.9859  0.9857  0.9856
[33 : 48]:	0.9848  0.9848  0.9838  0.9833  0.9831  0.9822  0.9821  0.9821  0.9801  0.9801  0.9783  0.9771  0.9769  0.9767  0.9755  0.9740
[49 : 64]:	0.9713  0.9708  0.9704  0.9704  0.9703  0.9684  0.9683  0.9680  0.9671  0.9666  0.9659  0.9646  0.9643  0.9633  0.9632  0.9622
2024-04-29 22:59:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:59:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_clip_1] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(16) + b_1_c_1_i_1_j_1_fused * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(42)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(504))
                                        v2 = T.axis.spatial(T.int64(114), di_0 + b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(504) // T.int64(18))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(48))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(16) + b_1_c_1_i_1_j_1_fused * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(16) + b_1_c_1_i_1_j_1_fused * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(7) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 1, 28, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 8, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 64, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_clip_1] Trial #2: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(56) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(114), di_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(24))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(56) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(56) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + b_1_c_1_i_1_j_1_fused + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 56, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[56, 2, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 224, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 224, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #3: GFLOPs: 284.8651. Time: 29.5914 us. Best GFLOPs: 284.8651
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #4: GFLOPs: 285.3791. Time: 29.5381 us. Best GFLOPs: 285.3791
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #5: GFLOPs: 705.1873. Time: 11.9537 us. Best GFLOPs: 705.1873
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #6: GFLOPs: 779.6471. Time: 10.8120 us. Best GFLOPs: 779.6471
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #7: GFLOPs: 483.7748. Time: 17.4246 us. Best GFLOPs: 779.6471
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #8: GFLOPs: 104.8788. Time: 80.3744 us. Best GFLOPs: 779.6471
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #9: GFLOPs: 574.4383. Time: 14.6745 us. Best GFLOPs: 779.6471
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #10: GFLOPs: 209.3009. Time: 40.2749 us. Best GFLOPs: 779.6471
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #11: GFLOPs: 303.1937. Time: 27.8026 us. Best GFLOPs: 779.6471
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #12: GFLOPs: 1136.7059. Time: 7.4158 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #13: GFLOPs: 63.0653. Time: 133.6641 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #14: GFLOPs: 597.7574. Time: 14.1020 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #15: GFLOPs: 517.9328. Time: 16.2754 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #16: GFLOPs: 386.6671. Time: 21.8006 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #17: GFLOPs: 370.1650. Time: 22.7725 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #18: GFLOPs: 81.1667. Time: 103.8549 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #19: GFLOPs: 398.2327. Time: 21.1674 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #20: GFLOPs: 480.9708. Time: 17.5262 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #21: GFLOPs: 625.0236. Time: 13.4868 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #22: GFLOPs: 636.4859. Time: 13.2439 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #23: GFLOPs: 389.1489. Time: 21.6615 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #24: GFLOPs: 675.9612. Time: 12.4705 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #25: GFLOPs: 455.9322. Time: 18.4886 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #26: GFLOPs: 324.4615. Time: 25.9802 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #27: GFLOPs: 319.6003. Time: 26.3753 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #28: GFLOPs: 29.7923. Time: 282.9442 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #29: GFLOPs: 329.4061. Time: 25.5902 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #30: GFLOPs: 721.0131. Time: 11.6913 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #31: GFLOPs: 75.4740. Time: 111.6884 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #32: GFLOPs: 457.0196. Time: 18.4447 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #33: GFLOPs: 151.0968. Time: 55.7892 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #34: GFLOPs: 197.8381. Time: 42.6084 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #35: GFLOPs: 836.5871. Time: 10.0761 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #36: GFLOPs: 461.9034. Time: 18.2496 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #37: GFLOPs: 282.0546. Time: 29.8863 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #38: GFLOPs: 257.1178. Time: 32.7849 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #39: GFLOPs: 472.9718. Time: 17.8226 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #40: GFLOPs: 205.3783. Time: 41.0441 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #41: GFLOPs: 749.9388. Time: 11.2403 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #42: GFLOPs: 823.6472. Time: 10.2344 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #43: GFLOPs: 359.7314. Time: 23.4329 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #44: GFLOPs: 443.1601. Time: 19.0215 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #45: GFLOPs: 666.3593. Time: 12.6502 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #46: GFLOPs: 364.5309. Time: 23.1244 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #47: GFLOPs: 795.1347. Time: 10.6014 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #48: GFLOPs: 456.0779. Time: 18.4827 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #49: GFLOPs: 406.7104. Time: 20.7262 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #50: GFLOPs: 26.1173. Time: 322.7582 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #51: GFLOPs: 152.5321. Time: 55.2642 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #52: GFLOPs: 357.7925. Time: 23.5599 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #53: GFLOPs: 455.1647. Time: 18.5198 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #54: GFLOPs: 402.5505. Time: 20.9404 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #55: GFLOPs: 657.7302. Time: 12.8161 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #56: GFLOPs: 398.3067. Time: 21.1635 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #57: GFLOPs: 95.2673. Time: 88.4834 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #58: GFLOPs: 675.0071. Time: 12.4881 us. Best GFLOPs: 1136.7059
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #59: GFLOPs: 1145.7789. Time: 7.3571 us. Best GFLOPs: 1145.7789
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #60: GFLOPs: 629.7727. Time: 13.3851 us. Best GFLOPs: 1145.7789
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #61: GFLOPs: 623.9880. Time: 13.5092 us. Best GFLOPs: 1145.7789
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #62: GFLOPs: 249.7965. Time: 33.7457 us. Best GFLOPs: 1145.7789
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #63: GFLOPs: 392.7969. Time: 21.4604 us. Best GFLOPs: 1145.7789
2024-04-29 23:50:33 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #64: GFLOPs: 310.6343. Time: 27.1366 us. Best GFLOPs: 1145.7789
2024-04-30 00:47:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:47:10 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-30 00:47:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 446 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 886 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1333 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1771 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2212 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2658 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 3098 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:31 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 00:47:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:47:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:48:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:48:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 00:48:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0296  0.9812  0.9805  0.9780  0.9779  0.9776  0.9769  0.9754  0.9693  0.9688  0.9625  0.9606  0.9606  0.9595  0.9587  0.9561
[17 : 32]:	0.9493  0.9471  0.9470  0.9420  0.9343  0.9246  0.9240  0.9120  0.9115  0.9103  0.9103  0.9048  0.9022  0.9022  0.8999  0.8978
[33 : 48]:	0.8909  0.8903  0.8898  0.8780  0.8720  0.8705  0.8572  0.8513  0.8464  0.8419  0.8410  0.8394  0.8393  0.8349  0.8308  0.8280
[49 : 64]:	0.8175  0.8111  0.8004  0.7978  0.7954  0.7946  0.7914  0.7909  0.7906  0.7838  0.7826  0.7801  0.7798  0.7783  0.7759  0.7743
2024-04-30 00:48:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:48:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #65: GFLOPs: 830.3694. Time: 10.1516 us. Best GFLOPs: 1145.7789
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #66: GFLOPs: 1142.4042. Time: 7.3788 us. Best GFLOPs: 1145.7789
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #67: GFLOPs: 1151.0756. Time: 7.3232 us. Best GFLOPs: 1151.0756
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #68: GFLOPs: 1203.5652. Time: 7.0038 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #69: GFLOPs: 1085.7231. Time: 7.7640 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #70: GFLOPs: 1141.6167. Time: 7.3839 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #71: GFLOPs: 1085.6085. Time: 7.7648 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #72: GFLOPs: 1150.9916. Time: 7.3237 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #73: GFLOPs: 528.9691. Time: 15.9358 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #74: GFLOPs: 667.9185. Time: 12.6207 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #75: GFLOPs: 1183.4365. Time: 7.1230 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #76: GFLOPs: 1164.6574. Time: 7.2378 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #77: GFLOPs: 1156.1493. Time: 7.2911 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #78: GFLOPs: 1172.1003. Time: 7.1918 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #79: GFLOPs: 1102.7084. Time: 7.6444 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #80: GFLOPs: 1130.1651. Time: 7.4587 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #81: GFLOPs: 1118.9532. Time: 7.5334 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #82: GFLOPs: 669.0631. Time: 12.5991 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #83: GFLOPs: 782.7927. Time: 10.7686 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #84: GFLOPs: 1156.8923. Time: 7.2864 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #85: GFLOPs: 1146.9743. Time: 7.3494 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #86: GFLOPs: 918.8081. Time: 9.1745 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #87: GFLOPs: 1163.6996. Time: 7.2438 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #88: GFLOPs: 626.5381. Time: 13.4542 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #89: GFLOPs: 666.1377. Time: 12.6544 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #90: GFLOPs: 1146.2111. Time: 7.3543 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #91: GFLOPs: 1146.5952. Time: 7.3518 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #92: GFLOPs: 516.4685. Time: 16.3216 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #93: GFLOPs: 1165.9771. Time: 7.2296 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #94: GFLOPs: 588.7590. Time: 14.3175 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #95: GFLOPs: 578.4690. Time: 14.5722 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #96: GFLOPs: 961.9143. Time: 8.7633 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #97: GFLOPs: 577.3431. Time: 14.6006 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #98: GFLOPs: 625.2561. Time: 13.4818 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #99: GFLOPs: 667.2373. Time: 12.6335 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #100: GFLOPs: 800.7513. Time: 10.5271 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #101: GFLOPs: 579.0197. Time: 14.5583 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #102: GFLOPs: 867.7472. Time: 9.7143 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #103: GFLOPs: 795.2725. Time: 10.5996 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #104: GFLOPs: 1067.2688. Time: 7.8983 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #105: GFLOPs: 837.7931. Time: 10.0616 us. Best GFLOPs: 1203.5652
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #106: GFLOPs: 1277.5562. Time: 6.5982 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #107: GFLOPs: 1271.0442. Time: 6.6320 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #108: GFLOPs: 1276.9847. Time: 6.6012 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #109: GFLOPs: 831.6660. Time: 10.1358 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #110: GFLOPs: 577.5161. Time: 14.5962 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #111: GFLOPs: 956.7137. Time: 8.8110 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #112: GFLOPs: 989.7083. Time: 8.5172 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #113: GFLOPs: 823.5131. Time: 10.2361 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #114: GFLOPs: 665.4350. Time: 12.6678 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #115: GFLOPs: 970.6923. Time: 8.6841 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #116: GFLOPs: 526.4167. Time: 16.0131 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #117: GFLOPs: 871.2001. Time: 9.6758 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #118: GFLOPs: 667.7201. Time: 12.6244 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #119: GFLOPs: 1151.3398. Time: 7.3215 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #120: GFLOPs: 781.7384. Time: 10.7831 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #121: GFLOPs: 1105.4430. Time: 7.6255 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #122: GFLOPs: 650.0115. Time: 12.9683 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #123: GFLOPs: 1228.0846. Time: 6.8640 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #124: GFLOPs: 964.7462. Time: 8.7376 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #125: GFLOPs: 1215.8371. Time: 6.9331 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #126: GFLOPs: 862.8824. Time: 9.7691 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #127: GFLOPs: 1047.4920. Time: 8.0474 us. Best GFLOPs: 1277.5562
2024-04-30 00:49:35 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #128: GFLOPs: 662.1289. Time: 12.7310 us. Best GFLOPs: 1277.5562
2024-04-30 01:55:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:55:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:55:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1608 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2016 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2418 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:55:51 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-30 01:55:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:56:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:56:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:56:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 01:56:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0347  1.0347  1.0282  1.0184  1.0184  1.0063  1.0016  1.0016  0.9998  0.9970  0.9970  0.9899  0.9899  0.9899  0.9872  0.9872
[17 : 32]:	0.9852  0.9587  0.9567  0.9543  0.9543  0.9543  0.9537  0.9524  0.9522  0.9516  0.9497  0.9490  0.9455  0.9433  0.9433  0.9420
[33 : 48]:	0.9413  0.9369  0.9365  0.9324  0.9304  0.9300  0.9296  0.9283  0.9268  0.9210  0.9206  0.9202  0.9174  0.9173  0.9173  0.9150
[49 : 64]:	0.9141  0.9114  0.9109  0.9094  0.9087  0.9077  0.9074  0.9073  0.9069  0.9061  0.9057  0.9055  0.9055  0.9055  0.9043  0.9043
2024-04-30 01:56:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:56:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #129: GFLOPs: 1283.9805. Time: 6.5652 us. Best GFLOPs: 1283.9805
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #130: GFLOPs: 1284.2584. Time: 6.5638 us. Best GFLOPs: 1284.2584
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #131: GFLOPs: 1311.9975. Time: 6.4250 us. Best GFLOPs: 1311.9975
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #132: GFLOPs: 1311.8118. Time: 6.4259 us. Best GFLOPs: 1311.9975
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #133: GFLOPs: 1311.9762. Time: 6.4251 us. Best GFLOPs: 1311.9975
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #134: GFLOPs: 1265.8379. Time: 6.6593 us. Best GFLOPs: 1311.9975
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #135: GFLOPs: 1437.3161. Time: 5.8648 us. Best GFLOPs: 1437.3161
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #136: GFLOPs: 1437.4026. Time: 5.8644 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #137: GFLOPs: 1273.0884. Time: 6.6214 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #138: GFLOPs: 1265.8851. Time: 6.6590 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #139: GFLOPs: 1265.6868. Time: 6.6601 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #140: GFLOPs: 1273.4732. Time: 6.6194 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #141: GFLOPs: 1273.5439. Time: 6.6190 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #142: GFLOPs: 1273.2189. Time: 6.6207 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #143: GFLOPs: 1275.0083. Time: 6.6114 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #144: GFLOPs: 1299.4882. Time: 6.4868 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #145: GFLOPs: 1299.6003. Time: 6.4863 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #146: GFLOPs: 1267.0669. Time: 6.6528 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #147: GFLOPs: 1266.8114. Time: 6.6542 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #148: GFLOPs: 1194.4933. Time: 7.0570 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #149: GFLOPs: 1194.4933. Time: 7.0570 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #150: GFLOPs: 1194.1194. Time: 7.0592 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #151: GFLOPs: 1377.0973. Time: 6.1213 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #152: GFLOPs: 1203.4891. Time: 7.0043 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #153: GFLOPs: 1279.0238. Time: 6.5906 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #154: GFLOPs: 1182.4397. Time: 7.1290 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #155: GFLOPs: 1278.9445. Time: 6.5910 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #156: GFLOPs: 1266.7476. Time: 6.6545 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #157: GFLOPs: 1211.1672. Time: 6.9599 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #158: GFLOPs: 1377.1809. Time: 6.1209 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #159: GFLOPs: 1377.2877. Time: 6.1204 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #160: GFLOPs: 1271.7015. Time: 6.6286 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #161: GFLOPs: 1212.6167. Time: 6.9516 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #162: GFLOPs: 1166.4737. Time: 7.2265 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #163: GFLOPs: 1163.5942. Time: 7.2444 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #164: GFLOPs: 1217.8749. Time: 6.9215 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #165: GFLOPs: 1217.8572. Time: 6.9216 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #166: GFLOPs: 1314.0661. Time: 6.4149 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #167: GFLOPs: 1172.7662. Time: 7.1878 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #168: GFLOPs: 1217.8749. Time: 6.9215 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #169: GFLOPs: 1172.9629. Time: 7.1866 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #170: GFLOPs: 1379.1584. Time: 6.1121 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #171: GFLOPs: 1171.9737. Time: 7.1926 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #172: GFLOPs: 1213.8275. Time: 6.9446 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #173: GFLOPs: 1167.6167. Time: 7.2195 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #174: GFLOPs: 1179.9170. Time: 7.1442 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #175: GFLOPs: 1172.2461. Time: 7.1910 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #176: GFLOPs: 1216.0198. Time: 6.9321 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #177: GFLOPs: 1204.9070. Time: 6.9960 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #178: GFLOPs: 1194.1614. Time: 7.0590 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #179: GFLOPs: 1199.4113. Time: 7.0281 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #180: GFLOPs: 1161.3734. Time: 7.2583 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #181: GFLOPs: 1193.1993. Time: 7.0647 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #182: GFLOPs: 1132.6840. Time: 7.4421 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #183: GFLOPs: 1087.7936. Time: 7.7492 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #184: GFLOPs: 1174.4371. Time: 7.1775 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #185: GFLOPs: 1131.0753. Time: 7.4527 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #186: GFLOPs: 1161.4917. Time: 7.2575 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #187: GFLOPs: 905.1430. Time: 9.3130 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #188: GFLOPs: 1167.7653. Time: 7.2185 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #189: GFLOPs: 1111.3147. Time: 7.5852 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #190: GFLOPs: 260.4743. Time: 32.3624 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #191: GFLOPs: 208.9141. Time: 40.3494 us. Best GFLOPs: 1437.4026
2024-04-30 01:57:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #192: GFLOPs: 41.8328. Time: 201.5063 us. Best GFLOPs: 1437.4026
2024-04-30 03:21:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:21:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 03:21:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 1614 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2022 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 2827 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 3232 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 3634 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:33 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-30 03:21:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:21:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 55 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:22:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:22:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x33363b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cbeed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cbdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fa52e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4bc6ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cbbf08)]: 57 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cbcf08)]: 0 failure(s)
2024-04-30 03:22:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0022  0.9816  0.9812  0.9812  0.9793  0.9793  0.9757  0.9757  0.9722  0.9698  0.9680  0.9663  0.9661  0.9620  0.9620  0.9620
[17 : 32]:	0.9609  0.9592  0.9592  0.9573  0.9573  0.9572  0.9572  0.9567  0.9555  0.9536  0.9531  0.9507  0.9507  0.9507  0.9490  0.9490
[33 : 48]:	0.9480  0.9480  0.9477  0.9470  0.9469  0.9464  0.9459  0.9459  0.9442  0.9421  0.9421  0.9411  0.9399  0.9395  0.9390  0.9381
[49 : 64]:	0.9380  0.9379  0.9376  0.9374  0.9365  0.9365  0.9364  0.9364  0.9332  0.9332  0.9324  0.9311  0.9249  0.9240  0.9224  0.9198
2024-04-30 03:22:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:22:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #193: GFLOPs: 1269.7272. Time: 6.6389 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #194: GFLOPs: 1404.2839. Time: 6.0028 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #195: GFLOPs: 1324.9527. Time: 6.3622 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #196: GFLOPs: 1328.4839. Time: 6.3453 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #197: GFLOPs: 1324.7256. Time: 6.3633 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #198: GFLOPs: 1324.6010. Time: 6.3639 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #199: GFLOPs: 1397.9309. Time: 6.0300 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #200: GFLOPs: 1395.6908. Time: 6.0397 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #201: GFLOPs: 1395.3653. Time: 6.0411 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #202: GFLOPs: 1314.1582. Time: 6.4144 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #203: GFLOPs: 1432.4641. Time: 5.8847 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #204: GFLOPs: 1098.8012. Time: 7.6716 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #205: GFLOPs: 1314.6550. Time: 6.4120 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #206: GFLOPs: 1386.5112. Time: 6.0797 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #207: GFLOPs: 1396.5923. Time: 6.0358 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #208: GFLOPs: 1396.9294. Time: 6.0344 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #209: GFLOPs: 1397.0171. Time: 6.0340 us. Best GFLOPs: 1437.4026
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #210: GFLOPs: 1455.6685. Time: 5.7909 us. Best GFLOPs: 1455.6685
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #211: GFLOPs: 1455.5886. Time: 5.7912 us. Best GFLOPs: 1455.6685
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #212: GFLOPs: 1464.9672. Time: 5.7541 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #213: GFLOPs: 1455.5994. Time: 5.7911 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #214: GFLOPs: 1447.4819. Time: 5.8236 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #215: GFLOPs: 1442.5826. Time: 5.8434 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #216: GFLOPs: 1447.6984. Time: 5.8227 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #217: GFLOPs: 1349.1346. Time: 6.2481 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #218: GFLOPs: 1437.0049. Time: 5.8661 us. Best GFLOPs: 1464.9672
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #219: GFLOPs: 1465.3217. Time: 5.7527 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #220: GFLOPs: 1397.9476. Time: 6.0300 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #221: GFLOPs: 1398.0633. Time: 6.0295 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #222: GFLOPs: 1398.0948. Time: 6.0293 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #223: GFLOPs: 1398.0480. Time: 6.0295 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #224: GFLOPs: 1398.0404. Time: 6.0296 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #225: GFLOPs: 1418.7517. Time: 5.9415 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #226: GFLOPs: 1418.8574. Time: 5.9411 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #227: GFLOPs: 1400.5500. Time: 6.0188 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #228: GFLOPs: 1351.3344. Time: 6.2380 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #229: GFLOPs: 1351.0872. Time: 6.2391 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #230: GFLOPs: 1408.7789. Time: 5.9836 us. Best GFLOPs: 1465.3217
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #231: GFLOPs: 1501.4319. Time: 5.6144 us. Best GFLOPs: 1501.4319
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #232: GFLOPs: 1501.6377. Time: 5.6136 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #233: GFLOPs: 1453.0163. Time: 5.8014 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #234: GFLOPs: 1471.5720. Time: 5.7283 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #235: GFLOPs: 1472.1721. Time: 5.7259 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #236: GFLOPs: 1462.7357. Time: 5.7629 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #237: GFLOPs: 1408.3183. Time: 5.9856 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #238: GFLOPs: 1429.5578. Time: 5.8966 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #239: GFLOPs: 1421.5148. Time: 5.9300 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #240: GFLOPs: 1408.2234. Time: 5.9860 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #241: GFLOPs: 1351.5505. Time: 6.2370 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #242: GFLOPs: 1439.8633. Time: 5.8544 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #243: GFLOPs: 1452.8005. Time: 5.8023 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #244: GFLOPs: 1451.7337. Time: 5.8066 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #245: GFLOPs: 1414.3865. Time: 5.9599 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #246: GFLOPs: 1408.0989. Time: 5.9865 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #247: GFLOPs: 1471.3612. Time: 5.7291 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #248: GFLOPs: 1480.6986. Time: 5.6930 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #249: GFLOPs: 1467.2123. Time: 5.7453 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #250: GFLOPs: 1474.6709. Time: 5.7162 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #251: GFLOPs: 1439.8866. Time: 5.8543 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #252: GFLOPs: 1440.2256. Time: 5.8529 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #253: GFLOPs: 1401.4161. Time: 6.0150 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #254: GFLOPs: 311.1792. Time: 27.0891 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #255: GFLOPs: 133.4554. Time: 63.1639 us. Best GFLOPs: 1501.6377
2024-04-30 03:23:32 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #256: GFLOPs: 429.6637. Time: 19.6190 us. Best GFLOPs: 1501.6377
