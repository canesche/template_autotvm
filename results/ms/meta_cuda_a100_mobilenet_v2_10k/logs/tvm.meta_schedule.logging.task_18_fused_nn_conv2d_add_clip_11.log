2024-04-29 22:55:55 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_conv2d_add_clip_11"
2024-04-29 22:55:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(384), T.int64(16), T.int64(16)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(384), T.int64(14), T.int64(14), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(384), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(384), T.int64(14), T.int64(14)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3])
                compute[v_i0, v_i1, v_i2, v_i3] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3], T.float32(6)), T.float32(0))
2024-04-29 22:55:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 22:55:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(43008)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(16), dj_0 + b_0_c_0_i_0_j_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), dj_0)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(384), b_1_c_1_i_1_j_1_fused * T.int64(24) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(8) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(384), b_1_c_1_i_1_j_1_fused * T.int64(24) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 16, 3, 8, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-29 22:55:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(43008)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(16), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(384), b_1_c_1_i_1_j_1_fused * T.int64(24) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(8) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(384), b_1_c_1_i_1_j_1_fused * T.int64(24) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 16, 3, 8, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-29 22:55:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(43008)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(16), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(384), b_1_c_1_i_1_j_1_fused * T.int64(24) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(8) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(384), b_1_c_1_i_1_j_1_fused * T.int64(24) + b_2_c_2_i_2_j_2_fused // T.int64(14) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + b_2_c_2_i_2_j_2_fused % T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 16, 3, 8, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-04-29 23:28:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:28:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 23:28:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 496 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:28:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 990 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:28:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:28:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1981 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:28:42 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-04-29 23:28:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:28:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:29:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:29:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-29 23:29:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9993  0.9990  0.9986  0.9985  0.9973  0.9972  0.9961  0.9960  0.9958  0.9949  0.9933  0.9931  0.9896  0.9866  0.9863
[17 : 32]:	0.9857  0.9857  0.9848  0.9845  0.9819  0.9815  0.9815  0.9801  0.9800  0.9790  0.9774  0.9768  0.9762  0.9759  0.9754  0.9749
[33 : 48]:	0.9741  0.9736  0.9734  0.9732  0.9718  0.9717  0.9714  0.9713  0.9707  0.9702  0.9702  0.9701  0.9694  0.9688  0.9675  0.9674
[49 : 64]:	0.9669  0.9662  0.9660  0.9649  0.9646  0.9646  0.9643  0.9619  0.9617  0.9611  0.9611  0.9609  0.9603  0.9598  0.9591  0.9582
2024-04-29 23:29:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:29:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #1: GFLOPs: 279.2560. Time: 5.6598 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #2: GFLOPs: 87.0639. Time: 18.1538 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #3: GFLOPs: 111.4696. Time: 14.1791 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #4: GFLOPs: 143.5894. Time: 11.0074 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #5: GFLOPs: 55.0345. Time: 28.7191 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #6: GFLOPs: 225.9996. Time: 6.9936 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #7: GFLOPs: 86.7652. Time: 18.2163 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #8: GFLOPs: 66.9452. Time: 23.6095 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #9: GFLOPs: 76.2475. Time: 20.7291 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #10: GFLOPs: 153.7382. Time: 10.2808 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #11: GFLOPs: 87.2739. Time: 18.1102 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #12: GFLOPs: 51.6658. Time: 30.5917 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #13: GFLOPs: 41.1399. Time: 38.4187 us. Best GFLOPs: 279.2560
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #14: GFLOPs: 423.7908. Time: 3.7295 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #15: GFLOPs: 201.0168. Time: 7.8627 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #16: GFLOPs: 233.7349. Time: 6.7621 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #17: GFLOPs: 152.7279. Time: 10.3488 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #18: GFLOPs: 172.0080. Time: 9.1888 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #19: GFLOPs: 266.2247. Time: 5.9369 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #20: GFLOPs: 197.0505. Time: 8.0210 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #21: GFLOPs: 243.4830. Time: 6.4914 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #22: GFLOPs: 156.9645. Time: 10.0694 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #23: GFLOPs: 152.7743. Time: 10.3456 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #24: GFLOPs: 115.1349. Time: 13.7278 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #25: GFLOPs: 30.1269. Time: 52.4629 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #26: GFLOPs: 66.9554. Time: 23.6059 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #27: GFLOPs: 160.8994. Time: 9.8232 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #28: GFLOPs: 169.3271. Time: 9.3343 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #29: GFLOPs: 22.2563. Time: 71.0157 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #30: GFLOPs: 148.3281. Time: 10.6557 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #31: GFLOPs: 105.9342. Time: 14.9201 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #32: GFLOPs: 149.8213. Time: 10.5495 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #33: GFLOPs: 144.0793. Time: 10.9700 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #34: GFLOPs: 86.6005. Time: 18.2510 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #35: GFLOPs: 138.3615. Time: 11.4233 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #36: GFLOPs: 117.9677. Time: 13.3981 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #37: GFLOPs: 196.9495. Time: 8.0251 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #38: GFLOPs: 110.1946. Time: 14.3432 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #39: GFLOPs: 93.9600. Time: 16.8214 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #40: GFLOPs: 59.9203. Time: 26.3774 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #41: GFLOPs: 90.5426. Time: 17.4563 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #42: GFLOPs: 144.8403. Time: 10.9123 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #43: GFLOPs: 37.7201. Time: 41.9019 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #44: GFLOPs: 77.6884. Time: 20.3447 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #45: GFLOPs: 47.5515. Time: 33.2386 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #46: GFLOPs: 234.6488. Time: 6.7358 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #47: GFLOPs: 225.5405. Time: 7.0078 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #48: GFLOPs: 26.9672. Time: 58.6098 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #49: GFLOPs: 55.5484. Time: 28.4534 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #50: GFLOPs: 259.6942. Time: 6.0862 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #51: GFLOPs: 257.0492. Time: 6.1488 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #52: GFLOPs: 165.9632. Time: 9.5235 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #53: GFLOPs: 29.1819. Time: 54.1618 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #54: GFLOPs: 288.8787. Time: 5.4713 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #55: GFLOPs: 102.5171. Time: 15.4174 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #56: GFLOPs: 60.7691. Time: 26.0090 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #57: GFLOPs: 210.3352. Time: 7.5144 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #58: GFLOPs: 85.4105. Time: 18.5053 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #59: GFLOPs: 248.2217. Time: 6.3675 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #60: GFLOPs: 358.1416. Time: 4.4132 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #61: GFLOPs: 80.9109. Time: 19.5344 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #62: GFLOPs: 223.2616. Time: 7.0793 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #63: GFLOPs: 184.6543. Time: 8.5595 us. Best GFLOPs: 423.7908
2024-04-29 23:50:57 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #64: GFLOPs: 169.1241. Time: 9.3455 us. Best GFLOPs: 423.7908
2024-04-30 00:06:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:06:46 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-30 00:06:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 436 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:06:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 874 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:06:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1307 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:06:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1738 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:06:57 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-30 00:07:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:07:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:07:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:07:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:07:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9952  0.9952  0.9952  0.9929  0.9929  0.9805  0.9370  0.9370  0.9195  0.9170  0.9170  0.9170  0.9170  0.9147  0.9147  0.9147
[17 : 32]:	0.9147  0.9102  0.9102  0.9102  0.9102  0.9090  0.9023  0.8989  0.8989  0.8989  0.8989  0.8972  0.8870  0.8824  0.8733  0.8711
[33 : 48]:	0.8708  0.8548  0.8548  0.8540  0.8521  0.8504  0.8427  0.8424  0.8408  0.8407  0.8407  0.8407  0.8386  0.8319  0.8319  0.8297
[49 : 64]:	0.8269  0.8260  0.8226  0.8224  0.8224  0.8224  0.8203  0.8169  0.8169  0.8169  0.8091  0.8091  0.8091  0.8081  0.8078  0.8063
2024-04-30 00:07:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:07:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #65: GFLOPs: 366.5890. Time: 4.3115 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #66: GFLOPs: 405.8747. Time: 3.8942 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #67: GFLOPs: 381.7168. Time: 4.1406 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #68: GFLOPs: 406.2250. Time: 3.8908 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #69: GFLOPs: 406.0820. Time: 3.8922 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #70: GFLOPs: 405.5104. Time: 3.8977 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #71: GFLOPs: 381.5162. Time: 4.1428 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #72: GFLOPs: 381.5887. Time: 4.1420 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #73: GFLOPs: 382.3711. Time: 4.1335 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #74: GFLOPs: 296.3499. Time: 5.3334 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #75: GFLOPs: 294.6112. Time: 5.3648 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #76: GFLOPs: 294.5704. Time: 5.3656 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #77: GFLOPs: 325.2159. Time: 4.8600 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #78: GFLOPs: 360.2762. Time: 4.3870 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #79: GFLOPs: 360.2031. Time: 4.3879 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #80: GFLOPs: 361.0555. Time: 4.3776 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #81: GFLOPs: 360.3377. Time: 4.3863 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #82: GFLOPs: 383.0982. Time: 4.1257 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #83: GFLOPs: 383.0966. Time: 4.1257 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #84: GFLOPs: 382.7354. Time: 4.1296 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #85: GFLOPs: 383.1175. Time: 4.1255 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #86: GFLOPs: 280.9645. Time: 5.6254 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #87: GFLOPs: 381.9098. Time: 4.1385 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #88: GFLOPs: 350.3232. Time: 4.5117 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #89: GFLOPs: 355.3509. Time: 4.4478 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #90: GFLOPs: 355.1538. Time: 4.4503 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #91: GFLOPs: 355.4236. Time: 4.4469 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #92: GFLOPs: 386.0053. Time: 4.0946 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #93: GFLOPs: 139.8281. Time: 11.3035 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #94: GFLOPs: 171.2921. Time: 9.2272 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #95: GFLOPs: 308.2552. Time: 5.1274 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #96: GFLOPs: 296.0728. Time: 5.3384 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #97: GFLOPs: 296.0909. Time: 5.3380 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #98: GFLOPs: 161.6764. Time: 9.7760 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #99: GFLOPs: 161.5896. Time: 9.7812 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #100: GFLOPs: 139.8399. Time: 11.3025 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #101: GFLOPs: 353.8835. Time: 4.4663 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #102: GFLOPs: 143.5273. Time: 11.0121 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #103: GFLOPs: 364.3386. Time: 4.3381 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #104: GFLOPs: 323.7620. Time: 4.8818 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #105: GFLOPs: 343.6805. Time: 4.5989 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #106: GFLOPs: 344.8364. Time: 4.5835 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #107: GFLOPs: 341.4729. Time: 4.6286 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #108: GFLOPs: 341.6143. Time: 4.6267 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #109: GFLOPs: 350.6786. Time: 4.5071 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #110: GFLOPs: 381.8015. Time: 4.1397 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #111: GFLOPs: 343.4516. Time: 4.6019 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #112: GFLOPs: 343.3037. Time: 4.6039 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #113: GFLOPs: 364.0612. Time: 4.3414 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #114: GFLOPs: 361.0746. Time: 4.3773 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #115: GFLOPs: 340.9872. Time: 4.6352 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #116: GFLOPs: 334.2909. Time: 4.7280 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #117: GFLOPs: 333.9874. Time: 4.7323 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #118: GFLOPs: 334.2979. Time: 4.7280 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #119: GFLOPs: 342.2549. Time: 4.6180 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #120: GFLOPs: 281.5315. Time: 5.6141 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #121: GFLOPs: 279.8003. Time: 5.6488 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #122: GFLOPs: 281.5321. Time: 5.6141 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #123: GFLOPs: 294.3732. Time: 5.3692 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #124: GFLOPs: 293.3478. Time: 5.3880 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #125: GFLOPs: 293.3545. Time: 5.3878 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #126: GFLOPs: 42.7355. Time: 36.9844 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #127: GFLOPs: 41.9630. Time: 37.6651 us. Best GFLOPs: 423.7908
2024-04-30 00:08:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #128: GFLOPs: 125.4866. Time: 12.5953 us. Best GFLOPs: 423.7908
2024-04-30 00:45:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:45:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:45:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 792 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1184 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1580 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:16 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-30 00:45:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 00:45:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9441  0.9405  0.9405  0.9317  0.9305  0.9285  0.9285  0.9282  0.9243  0.9149  0.9146  0.9146  0.9146  0.9111  0.9010  0.8985
[17 : 32]:	0.8985  0.8975  0.8968  0.8951  0.8939  0.8925  0.8925  0.8922  0.8922  0.8919  0.8915  0.8906  0.8906  0.8906  0.8906  0.8902
[33 : 48]:	0.8877  0.8793  0.8790  0.8783  0.8783  0.8783  0.8783  0.8777  0.8774  0.8765  0.8765  0.8758  0.8732  0.8732  0.8732  0.8731
[49 : 64]:	0.8730  0.8730  0.8719  0.8696  0.8688  0.8682  0.8675  0.8668  0.8645  0.8644  0.8637  0.8625  0.8619  0.8618  0.8609  0.8607
2024-04-30 00:45:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:45:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #129: GFLOPs: 397.4783. Time: 3.9764 us. Best GFLOPs: 423.7908
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #130: GFLOPs: 401.2465. Time: 3.9391 us. Best GFLOPs: 423.7908
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #131: GFLOPs: 401.1827. Time: 3.9397 us. Best GFLOPs: 423.7908
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #132: GFLOPs: 429.1153. Time: 3.6833 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #133: GFLOPs: 428.6322. Time: 3.6874 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #134: GFLOPs: 401.2320. Time: 3.9392 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #135: GFLOPs: 401.2109. Time: 3.9394 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #136: GFLOPs: 373.6972. Time: 4.2295 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #137: GFLOPs: 401.2069. Time: 3.9395 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #138: GFLOPs: 400.7984. Time: 3.9435 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #139: GFLOPs: 412.5323. Time: 3.8313 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #140: GFLOPs: 412.9450. Time: 3.8275 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #141: GFLOPs: 412.6538. Time: 3.8302 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #142: GFLOPs: 401.2864. Time: 3.9387 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #143: GFLOPs: 413.6277. Time: 3.8212 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #144: GFLOPs: 401.1460. Time: 3.9401 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #145: GFLOPs: 401.1742. Time: 3.9398 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #146: GFLOPs: 401.2963. Time: 3.9386 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #147: GFLOPs: 375.7974. Time: 4.2058 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #148: GFLOPs: 376.9997. Time: 4.1924 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #149: GFLOPs: 422.6939. Time: 3.7392 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #150: GFLOPs: 399.6783. Time: 3.9545 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #151: GFLOPs: 399.7379. Time: 3.9540 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #152: GFLOPs: 364.4877. Time: 4.3363 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #153: GFLOPs: 364.4449. Time: 4.3369 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #154: GFLOPs: 393.6887. Time: 4.0147 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #155: GFLOPs: 428.9476. Time: 3.6847 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #156: GFLOPs: 393.3754. Time: 4.0179 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #157: GFLOPs: 392.8737. Time: 4.0230 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #158: GFLOPs: 392.8848. Time: 4.0229 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #159: GFLOPs: 393.0665. Time: 4.0211 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #160: GFLOPs: 401.3272. Time: 3.9383 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #161: GFLOPs: 399.7146. Time: 3.9542 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #162: GFLOPs: 423.0807. Time: 3.7358 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #163: GFLOPs: 376.8488. Time: 4.1941 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #164: GFLOPs: 394.6357. Time: 4.0051 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #165: GFLOPs: 394.8390. Time: 4.0030 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #166: GFLOPs: 373.9722. Time: 4.2264 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #167: GFLOPs: 374.0548. Time: 4.2254 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #168: GFLOPs: 376.4256. Time: 4.1988 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #169: GFLOPs: 350.2345. Time: 4.5128 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #170: GFLOPs: 348.2077. Time: 4.5391 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #171: GFLOPs: 349.8135. Time: 4.5182 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #172: GFLOPs: 371.6638. Time: 4.2526 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #173: GFLOPs: 375.1687. Time: 4.2129 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #174: GFLOPs: 343.8770. Time: 4.5962 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #175: GFLOPs: 343.7996. Time: 4.5973 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #176: GFLOPs: 299.3518. Time: 5.2799 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #177: GFLOPs: 387.1392. Time: 4.0826 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #178: GFLOPs: 386.8635. Time: 4.0855 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #179: GFLOPs: 350.4734. Time: 4.5097 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #180: GFLOPs: 351.2925. Time: 4.4992 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #181: GFLOPs: 375.2796. Time: 4.2116 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #182: GFLOPs: 387.0998. Time: 4.0830 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #183: GFLOPs: 396.7106. Time: 3.9841 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #184: GFLOPs: 400.5869. Time: 3.9456 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #185: GFLOPs: 350.4715. Time: 4.5098 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #186: GFLOPs: 376.0665. Time: 4.2028 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #187: GFLOPs: 349.5599. Time: 4.5215 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #188: GFLOPs: 373.7643. Time: 4.2287 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #189: GFLOPs: 412.4427. Time: 3.8322 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #190: GFLOPs: 159.7357. Time: 9.8947 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #191: GFLOPs: 195.2669. Time: 8.0943 us. Best GFLOPs: 429.1153
2024-04-30 00:47:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #192: GFLOPs: 168.6264. Time: 9.3731 us. Best GFLOPs: 429.1153
2024-04-30 01:14:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:14:37 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:14:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:14:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:14:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:14:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:14:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 2001 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:14:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 2397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:14:51 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-30 01:14:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:15:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:15:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:15:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:15:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9529  0.9508  0.9493  0.9493  0.9456  0.9429  0.9429  0.9420  0.9402  0.9400  0.9400  0.9389  0.9389  0.9365  0.9351  0.9351
[17 : 32]:	0.9347  0.9324  0.9311  0.9295  0.9295  0.9292  0.9292  0.9291  0.9268  0.9255  0.9255  0.9106  0.9061  0.9051  0.9051  0.9050
[33 : 48]:	0.9050  0.9027  0.9027  0.9020  0.9008  0.8992  0.8987  0.8987  0.8983  0.8983  0.8975  0.8972  0.8972  0.8967  0.8967  0.8966
[49 : 64]:	0.8966  0.8948  0.8945  0.8945  0.8938  0.8901  0.8899  0.8888  0.8882  0.8874  0.8868  0.8868  0.8864  0.8858  0.8850  0.8836
2024-04-30 01:15:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:15:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #193: GFLOPs: 407.3850. Time: 3.8797 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #194: GFLOPs: 409.3049. Time: 3.8615 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #195: GFLOPs: 409.4992. Time: 3.8597 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #196: GFLOPs: 409.3928. Time: 3.8607 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #197: GFLOPs: 409.0266. Time: 3.8642 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #198: GFLOPs: 409.1716. Time: 3.8628 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #199: GFLOPs: 386.5753. Time: 4.0886 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #200: GFLOPs: 383.0474. Time: 4.1262 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #201: GFLOPs: 409.0525. Time: 3.8639 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #202: GFLOPs: 407.4844. Time: 3.8788 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #203: GFLOPs: 407.6649. Time: 3.8771 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #204: GFLOPs: 382.9699. Time: 4.1271 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #205: GFLOPs: 382.9635. Time: 4.1271 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #206: GFLOPs: 382.9644. Time: 4.1271 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #207: GFLOPs: 383.0212. Time: 4.1265 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #208: GFLOPs: 382.9637. Time: 4.1271 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #209: GFLOPs: 409.0932. Time: 3.8635 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #210: GFLOPs: 409.1133. Time: 3.8633 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #211: GFLOPs: 409.2587. Time: 3.8620 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #212: GFLOPs: 382.9940. Time: 4.1268 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #213: GFLOPs: 383.1864. Time: 4.1247 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #214: GFLOPs: 383.0901. Time: 4.1258 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #215: GFLOPs: 383.0918. Time: 4.1258 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #216: GFLOPs: 383.0209. Time: 4.1265 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #217: GFLOPs: 383.0600. Time: 4.1261 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #218: GFLOPs: 383.1803. Time: 4.1248 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #219: GFLOPs: 383.0921. Time: 4.1258 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #220: GFLOPs: 385.2705. Time: 4.1024 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #221: GFLOPs: 383.5263. Time: 4.1211 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #222: GFLOPs: 410.6945. Time: 3.8485 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #223: GFLOPs: 410.6833. Time: 3.8486 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #224: GFLOPs: 361.6317. Time: 4.3706 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #225: GFLOPs: 361.7340. Time: 4.3694 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #226: GFLOPs: 360.8495. Time: 4.3801 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #227: GFLOPs: 360.8666. Time: 4.3799 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #228: GFLOPs: 408.3222. Time: 3.8708 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #229: GFLOPs: 383.6382. Time: 4.1199 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #230: GFLOPs: 384.5339. Time: 4.1103 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #231: GFLOPs: 377.8029. Time: 4.1835 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #232: GFLOPs: 377.9225. Time: 4.1822 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #233: GFLOPs: 383.6203. Time: 4.1201 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #234: GFLOPs: 383.4122. Time: 4.1223 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #235: GFLOPs: 368.8175. Time: 4.2854 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #236: GFLOPs: 388.5256. Time: 4.0681 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #237: GFLOPs: 384.9463. Time: 4.1059 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #238: GFLOPs: 384.8193. Time: 4.1072 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #239: GFLOPs: 409.1254. Time: 3.8632 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #240: GFLOPs: 388.7472. Time: 4.0657 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #241: GFLOPs: 388.7645. Time: 4.0656 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #242: GFLOPs: 384.8488. Time: 4.1069 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #243: GFLOPs: 384.7641. Time: 4.1078 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #244: GFLOPs: 385.1408. Time: 4.1038 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #245: GFLOPs: 361.6342. Time: 4.3706 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #246: GFLOPs: 386.9623. Time: 4.0845 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #247: GFLOPs: 360.8019. Time: 4.3806 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #248: GFLOPs: 385.0221. Time: 4.1051 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #249: GFLOPs: 369.0529. Time: 4.2827 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #250: GFLOPs: 328.5614. Time: 4.8105 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #251: GFLOPs: 384.8036. Time: 4.1074 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #252: GFLOPs: 388.6078. Time: 4.0672 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #253: GFLOPs: 388.4557. Time: 4.0688 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #254: GFLOPs: 191.8973. Time: 8.2364 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #255: GFLOPs: 73.4649. Time: 21.5143 us. Best GFLOPs: 429.1153
2024-04-30 01:16:45 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #256: GFLOPs: 243.1318. Time: 6.5008 us. Best GFLOPs: 429.1153
2024-04-30 01:45:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:45:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 01:45:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:45:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 790 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:45:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:45:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1589 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:45:25 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 01:45:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:45:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 64 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:45:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:46:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 01:46:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9608  0.9605  0.9589  0.9535  0.9528  0.9522  0.9497  0.9494  0.9494  0.9484  0.9472  0.9443  0.9428  0.9428  0.9428  0.9415
[17 : 32]:	0.9397  0.9393  0.9367  0.9357  0.9357  0.9348  0.9348  0.9345  0.9332  0.9327  0.9324  0.9319  0.9307  0.9298  0.9298  0.9279
[33 : 48]:	0.9279  0.9273  0.9267  0.9262  0.9252  0.9251  0.9239  0.9239  0.9233  0.9226  0.9203  0.9192  0.9176  0.9155  0.9147  0.9146
[49 : 64]:	0.9138  0.9138  0.9136  0.9133  0.9131  0.9129  0.9119  0.9115  0.9107  0.9098  0.9096  0.9096  0.9066  0.9063  0.9047  0.9030
2024-04-30 01:46:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:46:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #257: GFLOPs: 422.6734. Time: 3.7394 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #258: GFLOPs: 391.8081. Time: 4.0340 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #259: GFLOPs: 423.7416. Time: 3.7300 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #260: GFLOPs: 391.1174. Time: 4.0411 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #261: GFLOPs: 424.9273. Time: 3.7196 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #262: GFLOPs: 391.0810. Time: 4.0415 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #263: GFLOPs: 391.0565. Time: 4.0417 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #264: GFLOPs: 425.0469. Time: 3.7185 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #265: GFLOPs: 424.9715. Time: 3.7192 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #266: GFLOPs: 390.9060. Time: 4.0433 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #267: GFLOPs: 424.9401. Time: 3.7195 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #268: GFLOPs: 423.9448. Time: 3.7282 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #269: GFLOPs: 392.1846. Time: 4.0301 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #270: GFLOPs: 392.2640. Time: 4.0293 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #271: GFLOPs: 392.3025. Time: 4.0289 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #272: GFLOPs: 392.2293. Time: 4.0296 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #273: GFLOPs: 391.7489. Time: 4.0346 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #274: GFLOPs: 384.5802. Time: 4.1098 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #275: GFLOPs: 424.9640. Time: 3.7192 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #276: GFLOPs: 425.0066. Time: 3.7189 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #277: GFLOPs: 425.0155. Time: 3.7188 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #278: GFLOPs: 424.9681. Time: 3.7192 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #279: GFLOPs: 425.0048. Time: 3.7189 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #280: GFLOPs: 396.6949. Time: 3.9843 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #281: GFLOPs: 396.6487. Time: 3.9847 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #282: GFLOPs: 282.2265. Time: 5.6003 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #283: GFLOPs: 424.8308. Time: 3.7204 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #284: GFLOPs: 328.7315. Time: 4.8080 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #285: GFLOPs: 392.9560. Time: 4.0222 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #286: GFLOPs: 328.7246. Time: 4.8081 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #287: GFLOPs: 393.0732. Time: 4.0210 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #288: GFLOPs: 391.3388. Time: 4.0388 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #289: GFLOPs: 391.3936. Time: 4.0382 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #290: GFLOPs: 392.9908. Time: 4.0218 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #291: GFLOPs: 393.1334. Time: 4.0204 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #292: GFLOPs: 393.0139. Time: 4.0216 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #293: GFLOPs: 393.0490. Time: 4.0212 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #294: GFLOPs: 392.3997. Time: 4.0279 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #295: GFLOPs: 395.1236. Time: 4.0001 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #296: GFLOPs: 395.1396. Time: 4.0000 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #297: GFLOPs: 393.0888. Time: 4.0208 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #298: GFLOPs: 395.0660. Time: 4.0007 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #299: GFLOPs: 392.0213. Time: 4.0318 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #300: GFLOPs: 393.0344. Time: 4.0214 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #301: GFLOPs: 329.2378. Time: 4.8006 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #302: GFLOPs: 392.5147. Time: 4.0267 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #303: GFLOPs: 393.0372. Time: 4.0214 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #304: GFLOPs: 392.5102. Time: 4.0268 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #305: GFLOPs: 393.0175. Time: 4.0216 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #306: GFLOPs: 392.9370. Time: 4.0224 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #307: GFLOPs: 392.9034. Time: 4.0227 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #308: GFLOPs: 384.6061. Time: 4.1095 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #309: GFLOPs: 391.1801. Time: 4.0405 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #310: GFLOPs: 392.9054. Time: 4.0227 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #311: GFLOPs: 377.7253. Time: 4.1844 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #312: GFLOPs: 392.9940. Time: 4.0218 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #313: GFLOPs: 392.9891. Time: 4.0219 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #314: GFLOPs: 392.9565. Time: 4.0222 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #315: GFLOPs: 392.9777. Time: 4.0220 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #316: GFLOPs: 392.9261. Time: 4.0225 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #317: GFLOPs: 392.9744. Time: 4.0220 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #318: GFLOPs: 18.7673. Time: 84.2181 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #319: GFLOPs: 2.2144. Time: 713.7597 us. Best GFLOPs: 429.1153
2024-04-30 01:47:18 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #320: GFLOPs: 248.4473. Time: 6.3617 us. Best GFLOPs: 429.1153
2024-04-30 02:05:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:05:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 02:05:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1194 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1595 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1995 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:32 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-30 02:05:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:05:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:06:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:06:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9758  0.9663  0.9649  0.9647  0.9642  0.9637  0.9622  0.9597  0.9480  0.9265  0.9211  0.9209  0.9196  0.9191  0.9189  0.9186
[17 : 32]:	0.9177  0.9160  0.9155  0.9150  0.9150  0.9147  0.9141  0.9136  0.9132  0.9124  0.9124  0.9124  0.9124  0.9124  0.9122  0.9121
[33 : 48]:	0.9121  0.9116  0.9113  0.9105  0.9105  0.9096  0.9094  0.9091  0.9091  0.9089  0.9086  0.9077  0.9077  0.9048  0.9044  0.9044
[49 : 64]:	0.9044  0.9022  0.9017  0.9009  0.9004  0.8998  0.8995  0.8987  0.8980  0.8969  0.8967  0.8965  0.8958  0.8951  0.8934  0.8927
2024-04-30 02:06:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:06:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #321: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #322: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #323: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #324: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #325: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #326: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_clip_11] Trial #327: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(16), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(16), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(54))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 6, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #328: GFLOPs: 412.6864. Time: 3.8299 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #329: GFLOPs: 409.5164. Time: 3.8595 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #330: GFLOPs: 403.2235. Time: 3.9198 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #331: GFLOPs: 374.9136. Time: 4.2158 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #332: GFLOPs: 398.9669. Time: 3.9616 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #333: GFLOPs: 402.7677. Time: 3.9242 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #334: GFLOPs: 374.9273. Time: 4.2156 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #335: GFLOPs: 374.3775. Time: 4.2218 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #336: GFLOPs: 403.2505. Time: 3.9195 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #337: GFLOPs: 374.9269. Time: 4.2156 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #338: GFLOPs: 399.2991. Time: 3.9583 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #339: GFLOPs: 373.3098. Time: 4.2339 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #340: GFLOPs: 402.5846. Time: 3.9260 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #341: GFLOPs: 398.5390. Time: 3.9658 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #342: GFLOPs: 402.4856. Time: 3.9270 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #343: GFLOPs: 401.3722. Time: 3.9379 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #344: GFLOPs: 397.6435. Time: 3.9748 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #345: GFLOPs: 374.8907. Time: 4.2160 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #346: GFLOPs: 384.9776. Time: 4.1055 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #347: GFLOPs: 385.0739. Time: 4.1045 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #348: GFLOPs: 401.4079. Time: 3.9375 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #349: GFLOPs: 401.3722. Time: 3.9379 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #350: GFLOPs: 402.5671. Time: 3.9262 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #351: GFLOPs: 404.6686. Time: 3.9058 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #352: GFLOPs: 404.5357. Time: 3.9071 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #353: GFLOPs: 404.5813. Time: 3.9066 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #354: GFLOPs: 374.9454. Time: 4.2154 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #355: GFLOPs: 395.9093. Time: 3.9922 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #356: GFLOPs: 404.6946. Time: 3.9055 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #357: GFLOPs: 404.6845. Time: 3.9056 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #358: GFLOPs: 402.5266. Time: 3.9266 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #359: GFLOPs: 402.6321. Time: 3.9255 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #360: GFLOPs: 375.0211. Time: 4.2145 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #361: GFLOPs: 401.6597. Time: 3.9350 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #362: GFLOPs: 402.5794. Time: 3.9260 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #363: GFLOPs: 374.9073. Time: 4.2158 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #364: GFLOPs: 374.9257. Time: 4.2156 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #365: GFLOPs: 374.8564. Time: 4.2164 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #366: GFLOPs: 426.0650. Time: 3.7096 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #367: GFLOPs: 374.8827. Time: 4.2161 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #368: GFLOPs: 374.8889. Time: 4.2160 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #369: GFLOPs: 374.8243. Time: 4.2168 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #370: GFLOPs: 398.3537. Time: 3.9677 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #371: GFLOPs: 374.6739. Time: 4.2185 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #372: GFLOPs: 384.9638. Time: 4.1057 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #373: GFLOPs: 374.0025. Time: 4.2260 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #374: GFLOPs: 396.0057. Time: 3.9912 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #375: GFLOPs: 378.9710. Time: 4.1706 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #376: GFLOPs: 389.3466. Time: 4.0595 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #377: GFLOPs: 389.5264. Time: 4.0576 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #378: GFLOPs: 374.4648. Time: 4.2208 us. Best GFLOPs: 429.1153
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #379: GFLOPs: 465.0421. Time: 3.3987 us. Best GFLOPs: 465.0421
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #380: GFLOPs: 374.4216. Time: 4.2213 us. Best GFLOPs: 465.0421
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #381: GFLOPs: 388.9270. Time: 4.0639 us. Best GFLOPs: 465.0421
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #382: GFLOPs: 108.5764. Time: 14.5570 us. Best GFLOPs: 465.0421
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #383: GFLOPs: 185.1194. Time: 8.5380 us. Best GFLOPs: 465.0421
2024-04-30 02:07:23 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #384: GFLOPs: 116.1103. Time: 13.6124 us. Best GFLOPs: 465.0421
2024-04-30 02:49:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:49:04 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 02:49:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 794 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1588 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:14 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 02:49:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 02:49:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0051  0.9993  0.9936  0.9769  0.9057  0.9049  0.9024  0.9000  0.8987  0.8872  0.8835  0.8786  0.8785  0.8734  0.8723  0.8685
[17 : 32]:	0.8613  0.8605  0.8568  0.8554  0.8547  0.8490  0.8490  0.8488  0.8480  0.8479  0.8471  0.8451  0.8451  0.8443  0.8440  0.8428
[33 : 48]:	0.8422  0.8408  0.8382  0.8366  0.8366  0.8362  0.8351  0.8350  0.8343  0.8341  0.8337  0.8324  0.8324  0.8322  0.8319  0.8302
[49 : 64]:	0.8296  0.8290  0.8286  0.8280  0.8280  0.8280  0.8267  0.8262  0.8261  0.8256  0.8255  0.8254  0.8247  0.8239  0.8230  0.8226
2024-04-30 02:49:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:49:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #385: GFLOPs: 455.4852. Time: 3.4700 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #386: GFLOPs: 355.9252. Time: 4.4407 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #387: GFLOPs: 355.9768. Time: 4.4400 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #388: GFLOPs: 355.9132. Time: 4.4408 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #389: GFLOPs: 366.7286. Time: 4.3098 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #390: GFLOPs: 366.8198. Time: 4.3088 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #391: GFLOPs: 409.9500. Time: 3.8555 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #392: GFLOPs: 409.8605. Time: 3.8563 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #393: GFLOPs: 433.9960. Time: 3.6418 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #394: GFLOPs: 433.0471. Time: 3.6498 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #395: GFLOPs: 410.0637. Time: 3.8544 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #396: GFLOPs: 438.2152. Time: 3.6068 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #397: GFLOPs: 437.6643. Time: 3.6113 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #398: GFLOPs: 447.7436. Time: 3.5300 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #399: GFLOPs: 415.7670. Time: 3.8015 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #400: GFLOPs: 432.7952. Time: 3.6519 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #401: GFLOPs: 455.2509. Time: 3.4718 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #402: GFLOPs: 437.8688. Time: 3.6096 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #403: GFLOPs: 407.7983. Time: 3.8758 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #404: GFLOPs: 408.1141. Time: 3.8728 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #405: GFLOPs: 407.9940. Time: 3.8739 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #406: GFLOPs: 409.0120. Time: 3.8643 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #407: GFLOPs: 408.2927. Time: 3.8711 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #408: GFLOPs: 389.9897. Time: 4.0528 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #409: GFLOPs: 408.3546. Time: 3.8705 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #410: GFLOPs: 408.3208. Time: 3.8708 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #411: GFLOPs: 408.9122. Time: 3.8652 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #412: GFLOPs: 408.3802. Time: 3.8703 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #413: GFLOPs: 408.3274. Time: 3.8708 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #414: GFLOPs: 408.3376. Time: 3.8707 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #415: GFLOPs: 397.6294. Time: 3.9749 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #416: GFLOPs: 364.1382. Time: 4.3405 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #417: GFLOPs: 408.7460. Time: 3.8668 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #418: GFLOPs: 390.1215. Time: 4.0514 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #419: GFLOPs: 462.1178. Time: 3.4202 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #420: GFLOPs: 454.5480. Time: 3.4772 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #421: GFLOPs: 454.7709. Time: 3.4755 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #422: GFLOPs: 385.9845. Time: 4.0948 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #423: GFLOPs: 390.6447. Time: 4.0460 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #424: GFLOPs: 385.7155. Time: 4.0977 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #425: GFLOPs: 385.5919. Time: 4.0990 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #426: GFLOPs: 396.1470. Time: 3.9898 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #427: GFLOPs: 441.6082. Time: 3.5791 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #428: GFLOPs: 385.7136. Time: 4.0977 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #429: GFLOPs: 385.7025. Time: 4.0978 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #430: GFLOPs: 409.3724. Time: 3.8609 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #431: GFLOPs: 385.7591. Time: 4.0972 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #432: GFLOPs: 407.4596. Time: 3.8790 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #433: GFLOPs: 402.0256. Time: 3.9315 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #434: GFLOPs: 462.1502. Time: 3.4200 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #435: GFLOPs: 433.1141. Time: 3.6493 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #436: GFLOPs: 407.1001. Time: 3.8824 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #437: GFLOPs: 407.0784. Time: 3.8827 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #438: GFLOPs: 406.9877. Time: 3.8835 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #439: GFLOPs: 406.8325. Time: 3.8850 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #440: GFLOPs: 408.3947. Time: 3.8701 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #441: GFLOPs: 408.1288. Time: 3.8727 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #442: GFLOPs: 395.1509. Time: 3.9998 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #443: GFLOPs: 405.4159. Time: 3.8986 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #444: GFLOPs: 433.9039. Time: 3.6426 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #445: GFLOPs: 405.2139. Time: 3.9005 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #446: GFLOPs: 10.3320. Time: 152.9754 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #447: GFLOPs: 90.4146. Time: 17.4811 us. Best GFLOPs: 465.0421
2024-04-30 02:51:06 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #448: GFLOPs: 26.5083. Time: 59.6244 us. Best GFLOPs: 465.0421
2024-04-30 03:10:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:10:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 03:10:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:10:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:10:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1191 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:10:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:10:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:10:39 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-30 03:10:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:10:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:11:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3681398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd910d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4dcdce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c4c858)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33a3208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd5798)]: 54 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d31638)]: 0 failure(s)
2024-04-30 03:11:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9779  0.9755  0.9746  0.9726  0.9662  0.9662  0.9662  0.9621  0.9592  0.9571  0.9571  0.9571  0.9566  0.9560  0.9527  0.9527
[17 : 32]:	0.9527  0.9506  0.9504  0.9504  0.9498  0.9479  0.9479  0.9477  0.9474  0.9471  0.9471  0.9467  0.9461  0.9455  0.9447  0.9439
[33 : 48]:	0.9429  0.9414  0.9396  0.9396  0.9394  0.9394  0.9381  0.9374  0.9374  0.9374  0.9373  0.9368  0.9357  0.9313  0.9294  0.9291
[49 : 64]:	0.9276  0.9265  0.9263  0.9247  0.9244  0.9244  0.9233  0.9233  0.9226  0.9196  0.9185  0.9166  0.9143  0.9143  0.9143  0.9143
2024-04-30 03:11:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:11:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #449: GFLOPs: 413.4823. Time: 3.8225 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #450: GFLOPs: 445.2429. Time: 3.5498 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #451: GFLOPs: 444.9093. Time: 3.5525 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #452: GFLOPs: 445.0027. Time: 3.5518 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #453: GFLOPs: 444.5317. Time: 3.5555 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #454: GFLOPs: 444.6089. Time: 3.5549 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #455: GFLOPs: 444.4901. Time: 3.5559 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #456: GFLOPs: 445.3482. Time: 3.5490 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #457: GFLOPs: 446.0950. Time: 3.5431 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #458: GFLOPs: 444.9745. Time: 3.5520 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #459: GFLOPs: 444.8446. Time: 3.5530 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #460: GFLOPs: 445.1821. Time: 3.5503 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #461: GFLOPs: 452.3842. Time: 3.4938 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #462: GFLOPs: 443.7880. Time: 3.5615 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #463: GFLOPs: 455.1160. Time: 3.4728 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #464: GFLOPs: 455.3631. Time: 3.4710 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #465: GFLOPs: 455.0369. Time: 3.4734 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #466: GFLOPs: 445.2019. Time: 3.5502 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #467: GFLOPs: 442.0912. Time: 3.5752 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #468: GFLOPs: 442.0710. Time: 3.5753 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #469: GFLOPs: 443.3964. Time: 3.5646 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #470: GFLOPs: 442.8066. Time: 3.5694 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #471: GFLOPs: 442.8291. Time: 3.5692 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #472: GFLOPs: 445.5929. Time: 3.5471 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #473: GFLOPs: 442.3121. Time: 3.5734 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #474: GFLOPs: 444.9297. Time: 3.5523 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #475: GFLOPs: 445.6289. Time: 3.5468 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #476: GFLOPs: 444.9664. Time: 3.5521 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #477: GFLOPs: 442.3868. Time: 3.5728 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #478: GFLOPs: 445.0921. Time: 3.5510 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #479: GFLOPs: 445.4942. Time: 3.5478 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #480: GFLOPs: 443.7773. Time: 3.5616 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #481: GFLOPs: 442.4355. Time: 3.5724 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #482: GFLOPs: 445.5067. Time: 3.5477 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #483: GFLOPs: 445.2664. Time: 3.5497 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #484: GFLOPs: 445.2058. Time: 3.5501 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #485: GFLOPs: 444.3729. Time: 3.5568 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #486: GFLOPs: 444.6420. Time: 3.5546 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #487: GFLOPs: 442.1810. Time: 3.5744 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #488: GFLOPs: 417.0651. Time: 3.7897 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #489: GFLOPs: 444.3812. Time: 3.5567 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #490: GFLOPs: 444.5279. Time: 3.5556 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #491: GFLOPs: 445.4499. Time: 3.5482 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #492: GFLOPs: 442.2417. Time: 3.5739 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #493: GFLOPs: 443.8257. Time: 3.5612 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #494: GFLOPs: 443.7654. Time: 3.5617 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #495: GFLOPs: 394.1339. Time: 4.0102 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #496: GFLOPs: 397.5911. Time: 3.9753 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #497: GFLOPs: 445.5289. Time: 3.5476 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #498: GFLOPs: 419.0860. Time: 3.7714 us. Best GFLOPs: 465.0421
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #499: GFLOPs: 473.3554. Time: 3.3390 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #500: GFLOPs: 443.1558. Time: 3.5666 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #501: GFLOPs: 444.9018. Time: 3.5526 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #502: GFLOPs: 444.9358. Time: 3.5523 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #503: GFLOPs: 418.7006. Time: 3.7749 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #504: GFLOPs: 418.7710. Time: 3.7742 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #505: GFLOPs: 396.3242. Time: 3.9880 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #506: GFLOPs: 445.0837. Time: 3.5511 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #507: GFLOPs: 392.7375. Time: 4.0244 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #508: GFLOPs: 416.8969. Time: 3.7912 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #509: GFLOPs: 442.1792. Time: 3.5744 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #510: GFLOPs: 80.7366. Time: 19.5765 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #511: GFLOPs: 137.3200. Time: 11.5099 us. Best GFLOPs: 473.3554
2024-04-30 03:12:34 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_clip_11] Trial #512: GFLOPs: 109.8882. Time: 14.3832 us. Best GFLOPs: 473.3554
