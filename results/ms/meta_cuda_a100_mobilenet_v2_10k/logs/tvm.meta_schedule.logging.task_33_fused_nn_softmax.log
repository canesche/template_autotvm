2024-04-29 22:55:59 [INFO] [task_scheduler.cc:160] Initializing Task #33: "fused_nn_softmax"
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(64) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(64) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(2)):
                    for k_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(512) + k_1)
                            T.where(k_0 * T.int64(512) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-29 23:49:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:49:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 23:49:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-29 23:49:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 23:49:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-29 23:49:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-29 23:49:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-29 23:49:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-29 23:49:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9981  0.9979  0.9934  0.9925  0.9909  0.9858  0.9815  0.9805  0.9798  0.9745  0.9728  0.9713  0.9707  0.9689  0.9645  0.9620
[17 : 32]:	0.9615  0.9568  0.9545  0.9474  0.9427  0.9388  0.9336  0.9329  0.9207  0.9131  0.9100  0.9038  0.9034  0.8987  0.8961  0.8859
[33 : 48]:	0.8793  0.8783  0.8735  0.8727  0.8695  0.8675  0.8647  0.8586  0.8558  0.8556  0.8540  0.8532  0.8492  0.8479  0.8451  0.8443
[49 : 64]:	0.8395  0.8311  0.8275  0.8275  0.8130  0.8103  0.8038  0.7902  0.7886  0.7846  0.7840  0.7759  0.7752  0.7607  0.7596  0.7595
2024-04-29 23:49:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:49:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_softmax] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for k_0 in range(T.int64(63)):
                for k_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("T_softmax_maxelem"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(16) + k_1)
                        T.where(k_0 * T.int64(16) + k_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                with T.block("T_softmax_expsum_init"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(T_softmax_expsum[v_i0])
                    T_softmax_expsum[v_i0] = T.float32(0)
                for k in range(T.int64(1000)):
                    with T.block("T_softmax_expsum_update"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k)
                        T.reads(T_softmax_expsum[v_i0], p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
        for i0_i1_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
            for i0_i1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("T_softmax_norm"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1)
                    T.where(i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1 < T.int64(1000))
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
sch.enter_postproc()
b26 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b26, ann_key="meta_schedule.unroll_explicit")
b27, b28, b29 = sch.get_child_blocks(b26)
l30, l31, l32 = sch.get_loops(block=b27)
sch.annotate(block_or_loop=l30, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l30, ann_key="pragma_unroll_explicit", ann_val=1)
l33, l34, l35 = sch.get_loops(block=b28)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l36, l37 = sch.get_loops(block=b29)
b38 = sch.get_block(name="T_softmax_expsum", func_name="main")
l39, l40, l41 = sch.get_loops(block=b38)
b42 = sch.decompose_reduction(block=b38, loop=l41)
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_softmax] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
        for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                with T.block("T_softmax_maxelem_init"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(T_softmax_maxelem[v_i0])
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                for k in range(T.int64(1000)):
                    with T.block("T_softmax_maxelem_update"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k)
                        T.reads(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1_0 in T.grid(T.int64(1), T.int64(8)):
                for ax1_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("T_softmax_expsum"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(128) + ax1_1)
                        T.where(ax1_0 * T.int64(128) + ax1_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum_shared[v_i0])
                        with T.init():
                            T_softmax_expsum_shared[v_i0] = T.float32(0)
                        T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i1_0 in range(T.int64(8)):
                for i1_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(128) + i1_1)
                        T.where(i1_0 * T.int64(128) + i1_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
sch.enter_postproc()
b26 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b26, ann_key="meta_schedule.unroll_explicit")
b27, b28, b29 = sch.get_child_blocks(b26)
l30, l31, l32 = sch.get_loops(block=b27)
sch.annotate(block_or_loop=l30, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l30, ann_key="pragma_unroll_explicit", ann_val=1)
l33, l34, l35, l36 = sch.get_loops(block=b28)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l37, l38, l39 = sch.get_loops(block=b29)
b40 = sch.get_block(name="T_softmax_maxelem", func_name="main")
l41, l42, l43 = sch.get_loops(block=b40)
b44 = sch.decompose_reduction(block=b40, loop=l43)
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_softmax] Trial #3: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
            for k_0 in range(T.int64(250)):
                for k_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("T_softmax_maxelem"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(4) + k_1)
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
            for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                with T.block("T_softmax_expsum_init"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(T_softmax_expsum[v_i0])
                    T_softmax_expsum[v_i0] = T.float32(0)
                for k in range(T.int64(1000)):
                    with T.block("T_softmax_expsum_update"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_k = T.axis.reduce(T.int64(1000), k)
                        T.reads(T_softmax_expsum[v_i0], p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
        for i0_i1_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for i0_i1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("T_softmax_norm"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(128) + i0_i1_fused_1)
                    T.where(i0_i1_fused_0 * T.int64(128) + i0_i1_fused_1 < T.int64(1000))
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
sch.enter_postproc()
b26 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b26, ann_key="meta_schedule.unroll_explicit")
b27, b28, b29 = sch.get_child_blocks(b26)
l30, l31, l32 = sch.get_loops(block=b27)
l33, l34, l35 = sch.get_loops(block=b28)
l36, l37 = sch.get_loops(block=b29)
b38 = sch.get_block(name="T_softmax_expsum", func_name="main")
l39, l40, l41 = sch.get_loops(block=b38)
b42 = sch.decompose_reduction(block=b38, loop=l41)
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #4: GFLOPs: 0.1056. Time: 37.8918 us. Best GFLOPs: 0.1056
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #5: GFLOPs: 0.2571. Time: 15.5556 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #6: GFLOPs: 0.1070. Time: 37.3905 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #7: GFLOPs: 0.1069. Time: 37.4264 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #8: GFLOPs: 0.0860. Time: 46.5332 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #9: GFLOPs: 0.1083. Time: 36.9189 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #10: GFLOPs: 0.1529. Time: 26.1674 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #11: GFLOPs: 0.0861. Time: 46.4819 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #12: GFLOPs: 0.1552. Time: 25.7710 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #13: GFLOPs: 0.2188. Time: 18.2817 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #14: GFLOPs: 0.1076. Time: 37.1895 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #15: GFLOPs: 0.0960. Time: 41.6604 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #16: GFLOPs: 0.1069. Time: 37.4307 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #17: GFLOPs: 0.1518. Time: 26.3475 us. Best GFLOPs: 0.2571
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #18: GFLOPs: 1.0219. Time: 3.9142 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #19: GFLOPs: 0.1056. Time: 37.8721 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #20: GFLOPs: 0.7129. Time: 5.6107 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #21: GFLOPs: 0.1553. Time: 25.7579 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #22: GFLOPs: 0.1492. Time: 26.8036 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #23: GFLOPs: 0.1083. Time: 36.9201 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #24: GFLOPs: 0.1438. Time: 27.8193 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #25: GFLOPs: 0.1063. Time: 37.6231 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #26: GFLOPs: 0.2570. Time: 15.5642 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #27: GFLOPs: 0.1547. Time: 25.8488 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #28: GFLOPs: 0.1075. Time: 37.2148 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #29: GFLOPs: 0.1225. Time: 32.6616 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #30: GFLOPs: 0.2481. Time: 16.1214 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #31: GFLOPs: 0.1083. Time: 36.9227 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #32: GFLOPs: 0.0855. Time: 46.8019 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #33: GFLOPs: 0.1077. Time: 37.1498 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #34: GFLOPs: 0.1048. Time: 38.1748 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #35: GFLOPs: 0.1510. Time: 26.4868 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #36: GFLOPs: 0.4475. Time: 8.9377 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #37: GFLOPs: 0.0953. Time: 41.9669 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #38: GFLOPs: 0.4474. Time: 8.9402 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #39: GFLOPs: 0.1080. Time: 37.0532 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #40: GFLOPs: 0.1521. Time: 26.2945 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #41: GFLOPs: 0.0852. Time: 46.9433 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #42: GFLOPs: 0.9766. Time: 4.0958 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #43: GFLOPs: 0.4481. Time: 8.9262 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #44: GFLOPs: 0.1070. Time: 37.3701 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #45: GFLOPs: 0.1045. Time: 38.2913 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #46: GFLOPs: 0.1042. Time: 38.3981 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #47: GFLOPs: 0.1057. Time: 37.8526 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #48: GFLOPs: 0.1915. Time: 20.8886 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #49: GFLOPs: 0.1085. Time: 36.8617 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #50: GFLOPs: 0.2522. Time: 15.8576 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #51: GFLOPs: 0.1066. Time: 37.5193 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #52: GFLOPs: 0.1063. Time: 37.6338 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #53: GFLOPs: 0.7075. Time: 5.6541 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #54: GFLOPs: 0.1084. Time: 36.9139 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #55: GFLOPs: 0.0957. Time: 41.7807 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #56: GFLOPs: 0.1068. Time: 37.4525 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #57: GFLOPs: 0.1054. Time: 37.9501 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #58: GFLOPs: 0.0850. Time: 47.0410 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #59: GFLOPs: 0.1069. Time: 37.4263 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #60: GFLOPs: 1.0219. Time: 3.9141 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #61: GFLOPs: 0.1084. Time: 36.9058 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #62: GFLOPs: 0.1537. Time: 26.0171 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #63: GFLOPs: 0.1069. Time: 37.4267 us. Best GFLOPs: 1.0219
2024-04-29 23:51:26 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #64: GFLOPs: 0.8614. Time: 4.6434 us. Best GFLOPs: 1.0219
2024-04-30 01:33:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:33:48 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-30 01:33:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-30 01:33:49 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-30 01:33:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-30 01:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-30 01:33:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-30 01:33:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3aba538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4e06ee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d17488)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47813c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x367a4b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd9910b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4dfe698)]: 0 failure(s)
2024-04-30 01:33:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0053  0.9307  0.9304  0.9280  0.9058  0.8877  0.8633  0.8260  0.7882  0.7769  0.7552  0.6615  0.6112  0.5903  0.5261  0.5176
[17 : 32]:	0.4819  0.4561  0.4113  0.3816  0.3723  0.3714  0.3663  0.3464  0.3454  0.3433  0.3417  0.3354  0.3167  0.3102  0.3101  0.2849
[33 : 48]:	0.2772  0.2671  0.2660  0.2596  0.2547  0.2460  0.2423  0.2381  0.2354  0.2282  0.2270  0.2246  0.2214  0.2189  0.2085  0.2019
[49 : 64]:	0.2018  0.1983  0.1980  0.1960  0.1924  0.1909  0.1862  0.1858  0.1834  0.1829  0.1829  0.1814  0.1781  0.1765  0.1754  0.1678
2024-04-30 01:33:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:33:57 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #65: GFLOPs: 1.0478. Time: 3.8175 us. Best GFLOPs: 1.0478
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #66: GFLOPs: 1.1844. Time: 3.3772 us. Best GFLOPs: 1.1844
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #67: GFLOPs: 1.1847. Time: 3.3764 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #68: GFLOPs: 1.1842. Time: 3.3778 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #69: GFLOPs: 1.1513. Time: 3.4743 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #70: GFLOPs: 0.9903. Time: 4.0392 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #71: GFLOPs: 1.0477. Time: 3.8178 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #72: GFLOPs: 0.8923. Time: 4.4828 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #73: GFLOPs: 0.7814. Time: 5.1192 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #74: GFLOPs: 0.8925. Time: 4.4820 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #75: GFLOPs: 0.8924. Time: 4.4825 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #76: GFLOPs: 0.4604. Time: 8.6872 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #77: GFLOPs: 0.8924. Time: 4.4822 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #78: GFLOPs: 0.6693. Time: 5.9767 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #79: GFLOPs: 0.6692. Time: 5.9776 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #80: GFLOPs: 0.8925. Time: 4.4817 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #81: GFLOPs: 0.4852. Time: 8.2438 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #82: GFLOPs: 0.3596. Time: 11.1220 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #83: GFLOPs: 0.2758. Time: 14.5041 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #84: GFLOPs: 0.2552. Time: 15.6713 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #85: GFLOPs: 0.2562. Time: 15.6115 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #86: GFLOPs: 0.2816. Time: 14.2038 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #87: GFLOPs: 0.2555. Time: 15.6559 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #88: GFLOPs: 0.2752. Time: 14.5342 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #89: GFLOPs: 0.2564. Time: 15.6011 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #90: GFLOPs: 0.2042. Time: 19.5857 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #91: GFLOPs: 0.2613. Time: 15.3101 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #92: GFLOPs: 0.2553. Time: 15.6695 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #93: GFLOPs: 0.2601. Time: 15.3812 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #94: GFLOPs: 0.2718. Time: 14.7158 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #95: GFLOPs: 0.2089. Time: 19.1447 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #96: GFLOPs: 0.2272. Time: 17.6022 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #97: GFLOPs: 0.4740. Time: 8.4386 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #98: GFLOPs: 0.1538. Time: 26.0156 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #99: GFLOPs: 0.2601. Time: 15.3799 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #100: GFLOPs: 0.2807. Time: 14.2492 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #101: GFLOPs: 0.2200. Time: 18.1836 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #102: GFLOPs: 0.2426. Time: 16.4901 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #103: GFLOPs: 0.1549. Time: 25.8193 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #104: GFLOPs: 0.2312. Time: 17.2974 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #105: GFLOPs: 0.2519. Time: 15.8781 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #106: GFLOPs: 0.1892. Time: 21.1379 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #107: GFLOPs: 0.1083. Time: 36.9388 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #108: GFLOPs: 0.2522. Time: 15.8581 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #109: GFLOPs: 0.1539. Time: 25.9911 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #110: GFLOPs: 0.1090. Time: 36.6993 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #111: GFLOPs: 0.1088. Time: 36.7664 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #112: GFLOPs: 0.1090. Time: 36.6938 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #113: GFLOPs: 0.1236. Time: 32.3731 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #114: GFLOPs: 0.2283. Time: 17.5183 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #115: GFLOPs: 0.1092. Time: 36.6204 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #116: GFLOPs: 0.2186. Time: 18.3005 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #117: GFLOPs: 0.1511. Time: 26.4694 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #118: GFLOPs: 0.1097. Time: 36.4713 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #119: GFLOPs: 0.1090. Time: 36.7136 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #120: GFLOPs: 0.1561. Time: 25.6327 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #121: GFLOPs: 0.1090. Time: 36.6927 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #122: GFLOPs: 0.1079. Time: 37.0725 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #123: GFLOPs: 0.1076. Time: 37.1691 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #124: GFLOPs: 0.1081. Time: 36.9886 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #125: GFLOPs: 0.1090. Time: 36.7133 us. Best GFLOPs: 1.1847
2024-04-30 01:35:10 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_softmax] Trial #126: GFLOPs: 0.1354. Time: 29.5489 us. Best GFLOPs: 1.1847
