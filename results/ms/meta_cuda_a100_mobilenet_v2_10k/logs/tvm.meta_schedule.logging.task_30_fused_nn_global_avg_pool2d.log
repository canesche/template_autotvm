2024-04-29 22:55:59 [INFO] [task_scheduler.cc:160] Initializing Task #30: "fused_nn_global_avg_pool2d"
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1280), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1280), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(5), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 22:55:59 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1280), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(256)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 23:46:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:46:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 23:46:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-29 23:46:30 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 23:46:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-29 23:46:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-29 23:46:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-29 23:46:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-29 23:46:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9987  0.9966  0.9947  0.9896  0.9854  0.9847  0.9842  0.9818  0.9734  0.9704  0.9653  0.9616  0.9576  0.9550  0.9546
[17 : 32]:	0.9419  0.9395  0.9361  0.9332  0.9318  0.9299  0.9285  0.9261  0.9246  0.9215  0.9075  0.9060  0.8999  0.8985  0.8957  0.8883
[33 : 48]:	0.8880  0.8835  0.8819  0.8785  0.8641  0.8631  0.8561  0.8561  0.8541  0.8473  0.8433  0.8412  0.8403  0.8311  0.8278  0.8236
[49 : 64]:	0.8220  0.8204  0.8196  0.8094  0.8054  0.8044  0.8035  0.7863  0.7811  0.7797  0.7777  0.7745  0.7632  0.7615  0.7514  0.7424
2024-04-29 23:46:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:46:32 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1280), thread="blockIdx.x"):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_0_fused + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(8) + ax4_ax5_fused_1) // T.int64(7))
                        v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(8) + ax4_ax5_fused_1) % T.int64(7))
                        T.where(ax4_ax5_fused_0 * T.int64(8) + ax4_ax5_fused_1 < T.int64(49))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_0_fused)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(8)) + ax3_1 < T.int64(1))
                    T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=1)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
l41, l42 = sch.get_loops(block=b33)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(10), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(20), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(40), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1280), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_0_fused + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) // T.int64(7))
                        v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) % T.int64(7))
                        T.where(ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1 < T.int64(49))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_0_fused)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(512)) + ax3_1 < T.int64(1))
                    T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #6: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(20), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #7: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(5), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(40), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #8: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(20), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #9: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(40), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(40), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #10: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1280))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(5), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 15.8436. Time: 4.0395 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 11.8152. Time: 5.4168 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 7.8232. Time: 8.1808 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 5.6602. Time: 11.3069 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 9.5492. Time: 6.7021 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 11.1741. Time: 5.7275 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 3.6753. Time: 17.4137 us. Best GFLOPs: 15.8436
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 16.7846. Time: 3.8130 us. Best GFLOPs: 16.7846
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 9.6709. Time: 6.6178 us. Best GFLOPs: 16.7846
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 17.4518. Time: 3.6672 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 11.3383. Time: 5.6446 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 17.4386. Time: 3.6700 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 10.8680. Time: 5.8888 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 9.7278. Time: 6.5791 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 3.6505. Time: 17.5319 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 11.4343. Time: 5.5972 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 5.7990. Time: 11.0364 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 16.6457. Time: 3.8448 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 9.5477. Time: 6.7032 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 3.6505. Time: 17.5319 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 17.4463. Time: 3.6684 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 17.4309. Time: 3.6716 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 5.7366. Time: 11.1564 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 5.7720. Time: 11.0879 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 11.2693. Time: 5.6791 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 9.5647. Time: 6.6913 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 5.7374. Time: 11.1549 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 17.0574. Time: 3.7520 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 5.6836. Time: 11.2604 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 7.8236. Time: 8.1804 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 10.4680. Time: 6.1139 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 3.6633. Time: 17.4704 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 7.8227. Time: 8.1813 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 3.5761. Time: 17.8965 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 17.0556. Time: 3.7524 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 7.8996. Time: 8.1017 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 10.8630. Time: 5.8916 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 10.5840. Time: 6.0469 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 5.7175. Time: 11.1938 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 11.1196. Time: 5.7556 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 9.7619. Time: 6.5561 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 11.3533. Time: 5.6372 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 9.5630. Time: 6.6924 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 17.0474. Time: 3.7542 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 9.7285. Time: 6.5786 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 5.8201. Time: 10.9964 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 15.1036. Time: 4.2374 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 10.8672. Time: 5.8893 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 10.7267. Time: 5.9664 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 9.6716. Time: 6.6173 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 15.1019. Time: 4.2379 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 7.7273. Time: 8.2823 us. Best GFLOPs: 17.4518
2024-04-29 23:51:20 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 5.7717. Time: 11.0887 us. Best GFLOPs: 17.4518
2024-04-30 01:47:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:47:18 [INFO] [evolutionary_search.cc:715] Picked top 53 candidate(s) from database
2024-04-30 01:47:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 01:47:18 [INFO] [evolutionary_search.cc:723] Sampled 459 candidate(s)
2024-04-30 01:47:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 01:47:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 01:47:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 01:47:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 01:47:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0413  1.0290  1.0139  1.0132  1.0109  1.0047  0.9859  0.9768  0.9671  0.9506  0.9442  0.9178  0.9042  0.8971  0.8803  0.8767
[17 : 32]:	0.8764  0.8637  0.8627  0.8609  0.8604  0.8590  0.7454  0.7437  0.6967  0.6630  0.6581  0.6577  0.6571  0.6568  0.6558  0.6544
[33 : 48]:	0.6541  0.6522  0.6511  0.6492  0.6482  0.6469  0.6468  0.6464  0.6438  0.6420  0.6419  0.6409  0.6407  0.6406  0.5948  0.5930
[49 : 64]:	0.5919  0.5907  0.5903  0.5891  0.5879  0.5868  0.5854  0.5841  0.5835  0.5814  0.5802  0.5786  0.5784  0.5782  0.5781  0.5741
2024-04-30 01:47:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:47:22 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 17.3023. Time: 3.6989 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #65: GFLOPs: 16.9678. Time: 3.7718 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #66: GFLOPs: 17.0958. Time: 3.7436 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #67: GFLOPs: 17.2996. Time: 3.6995 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #68: GFLOPs: 17.2988. Time: 3.6997 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #69: GFLOPs: 17.0926. Time: 3.7443 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #70: GFLOPs: 17.3011. Time: 3.6992 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #71: GFLOPs: 17.1019. Time: 3.7423 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #72: GFLOPs: 16.9750. Time: 3.7702 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #73: GFLOPs: 15.5792. Time: 4.1081 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #74: GFLOPs: 15.8321. Time: 4.0424 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #75: GFLOPs: 17.1099. Time: 3.7405 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #76: GFLOPs: 15.8287. Time: 4.0433 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #77: GFLOPs: 15.8884. Time: 4.0281 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #78: GFLOPs: 15.8311. Time: 4.0427 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #79: GFLOPs: 15.0744. Time: 4.2456 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #80: GFLOPs: 15.8316. Time: 4.0425 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #81: GFLOPs: 15.8923. Time: 4.0271 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #82: GFLOPs: 15.0740. Time: 4.2457 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #83: GFLOPs: 15.8907. Time: 4.0275 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #84: GFLOPs: 15.8918. Time: 4.0272 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #85: GFLOPs: 15.0726. Time: 4.2461 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #86: GFLOPs: 11.4841. Time: 5.5729 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #87: GFLOPs: 11.4821. Time: 5.5739 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #88: GFLOPs: 11.4792. Time: 5.5753 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #89: GFLOPs: 10.7162. Time: 5.9722 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #90: GFLOPs: 10.7145. Time: 5.9732 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #91: GFLOPs: 10.7657. Time: 5.9448 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #92: GFLOPs: 10.7140. Time: 5.9735 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #93: GFLOPs: 10.7137. Time: 5.9737 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #94: GFLOPs: 10.7542. Time: 5.9511 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #95: GFLOPs: 10.7556. Time: 5.9504 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #96: GFLOPs: 10.7947. Time: 5.9288 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #97: GFLOPs: 10.7707. Time: 5.9420 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #98: GFLOPs: 10.7952. Time: 5.9285 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #99: GFLOPs: 10.8020. Time: 5.9248 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #100: GFLOPs: 10.7938. Time: 5.9293 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #101: GFLOPs: 10.9627. Time: 5.8380 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #102: GFLOPs: 10.7953. Time: 5.9285 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #103: GFLOPs: 10.7708. Time: 5.9420 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #104: GFLOPs: 10.7853. Time: 5.9340 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #105: GFLOPs: 10.9626. Time: 5.8380 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #106: GFLOPs: 10.7873. Time: 5.9329 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #107: GFLOPs: 10.7923. Time: 5.9302 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #108: GFLOPs: 10.9584. Time: 5.8403 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #109: GFLOPs: 10.7868. Time: 5.9332 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #110: GFLOPs: 10.3716. Time: 6.1707 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #111: GFLOPs: 10.3697. Time: 6.1718 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #112: GFLOPs: 10.3730. Time: 6.1699 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #113: GFLOPs: 10.3760. Time: 6.1681 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #114: GFLOPs: 10.3669. Time: 6.1735 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #115: GFLOPs: 10.3698. Time: 6.1718 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #116: GFLOPs: 10.3784. Time: 6.1667 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #117: GFLOPs: 10.3755. Time: 6.1684 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #118: GFLOPs: 10.3962. Time: 6.1561 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #119: GFLOPs: 10.3967. Time: 6.1558 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #120: GFLOPs: 10.4810. Time: 6.1063 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #121: GFLOPs: 10.3961. Time: 6.1562 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #122: GFLOPs: 10.3965. Time: 6.1559 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #123: GFLOPs: 10.4068. Time: 6.1498 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #124: GFLOPs: 10.4632. Time: 6.1167 us. Best GFLOPs: 17.4518
2024-04-30 01:48:33 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #125: GFLOPs: 3.5792. Time: 17.8809 us. Best GFLOPs: 17.4518
2024-04-30 03:28:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:28:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 03:28:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 03:28:21 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 03:28:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 03:28:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 03:28:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 03:28:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3963618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd9927f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd9c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x47659f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c3ebf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd969bd8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd9c0bb8)]: 0 failure(s)
2024-04-30 03:28:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.6309  0.6263  0.6174  0.6164  0.6149  0.6127  0.6115  0.6113  0.5064  0.5064  0.5064  0.5057  0.5045  0.5045  0.5025  0.4958
[17 : 32]:	0.4929  0.4925  0.4921  0.4916  0.4906  0.4906  0.4886  0.4609  0.4608  0.4590  0.4571  0.4561  0.4555  0.4542  0.4532  0.4532
[33 : 48]:	0.4513  0.4473  0.4455  0.4450  0.4432  0.4419  0.4413  0.4403  0.4397  0.4396  0.4377  0.4354  0.3634  0.3615  0.3585  0.3566
[49 : 64]:	0.3554  0.3538  0.3538  0.3519  0.3500  0.3499  0.3475  0.3450  0.3418  0.3403  0.3395  0.3384  0.3380  0.3360  0.3341  0.2742
2024-04-30 03:28:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:28:25 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #126: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(20), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(40), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_global_avg_pool2d] Trial #127: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(20), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(40), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1280), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #128: GFLOPs: 10.4386. Time: 6.1311 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #129: GFLOPs: 10.4465. Time: 6.1265 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #130: GFLOPs: 10.9480. Time: 5.8458 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #131: GFLOPs: 10.4462. Time: 6.1266 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #132: GFLOPs: 10.4395. Time: 6.1306 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #133: GFLOPs: 11.2664. Time: 5.6806 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #134: GFLOPs: 9.4984. Time: 6.7379 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #135: GFLOPs: 9.8248. Time: 6.5141 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #136: GFLOPs: 9.4677. Time: 6.7598 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #137: GFLOPs: 9.4802. Time: 6.7509 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #138: GFLOPs: 9.8251. Time: 6.5139 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #139: GFLOPs: 9.4800. Time: 6.7511 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #140: GFLOPs: 9.8262. Time: 6.5132 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #141: GFLOPs: 9.4559. Time: 6.7682 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #142: GFLOPs: 9.4554. Time: 6.7686 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #143: GFLOPs: 9.6494. Time: 6.6325 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #144: GFLOPs: 9.4557. Time: 6.7684 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #145: GFLOPs: 9.4510. Time: 6.7718 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #146: GFLOPs: 9.4487. Time: 6.7735 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #147: GFLOPs: 9.6486. Time: 6.6331 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #148: GFLOPs: 9.4508. Time: 6.7719 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #149: GFLOPs: 7.8670. Time: 8.1352 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #150: GFLOPs: 7.8281. Time: 8.1757 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #151: GFLOPs: 7.8286. Time: 8.1751 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #152: GFLOPs: 7.9276. Time: 8.0731 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #153: GFLOPs: 7.8268. Time: 8.1771 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #154: GFLOPs: 7.8678. Time: 8.1345 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #155: GFLOPs: 7.9285. Time: 8.0721 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #156: GFLOPs: 7.8672. Time: 8.1350 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #157: GFLOPs: 7.8272. Time: 8.1766 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #158: GFLOPs: 7.9289. Time: 8.0717 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #159: GFLOPs: 7.8150. Time: 8.1894 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #160: GFLOPs: 7.8181. Time: 8.1861 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #161: GFLOPs: 8.0816. Time: 7.9192 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #162: GFLOPs: 8.0813. Time: 7.9196 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #163: GFLOPs: 7.8134. Time: 8.1910 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #164: GFLOPs: 7.8128. Time: 8.1917 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #165: GFLOPs: 8.0820. Time: 7.9188 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #166: GFLOPs: 7.8152. Time: 8.1891 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #167: GFLOPs: 8.0822. Time: 7.9186 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #168: GFLOPs: 7.8088. Time: 8.1958 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #169: GFLOPs: 7.8136. Time: 8.1908 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #170: GFLOPs: 5.7035. Time: 11.2212 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #171: GFLOPs: 5.7580. Time: 11.1149 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #172: GFLOPs: 5.7051. Time: 11.2180 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #173: GFLOPs: 5.7595. Time: 11.1121 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #174: GFLOPs: 5.7088. Time: 11.2107 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #175: GFLOPs: 5.5367. Time: 11.5592 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #176: GFLOPs: 5.5423. Time: 11.5475 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #177: GFLOPs: 5.7034. Time: 11.2215 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #178: GFLOPs: 5.7563. Time: 11.1183 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #179: GFLOPs: 5.8419. Time: 10.9553 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #180: GFLOPs: 5.7611. Time: 11.1090 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #181: GFLOPs: 5.8422. Time: 10.9548 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #182: GFLOPs: 5.8403. Time: 10.9583 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #183: GFLOPs: 5.6122. Time: 11.4037 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #184: GFLOPs: 5.7612. Time: 11.1088 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #185: GFLOPs: 5.8418. Time: 10.9555 us. Best GFLOPs: 17.4518
2024-04-30 03:29:39 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_global_avg_pool2d] Trial #186: GFLOPs: 5.5335. Time: 11.5659 us. Best GFLOPs: 17.4518
