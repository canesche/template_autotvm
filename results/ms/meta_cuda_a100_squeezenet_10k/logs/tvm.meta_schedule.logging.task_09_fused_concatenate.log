2024-04-28 23:45:47 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_concatenate"
2024-04-28 23:45:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(55), T.int64(55)), "float32"), p1: T.Buffer((T.int64(1), T.int64(64), T.int64(55), T.int64(55)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(128), T.int64(55), T.int64(55)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(55), T.int64(55)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(64) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
2024-04-28 23:45:47 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-28 23:45:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(55), T.int64(55)), "float32"), p1: T.Buffer((T.int64(1), T.int64(64), T.int64(55), T.int64(55)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(128), T.int64(55), T.int64(55)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                    with T.block("T_concat"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3025))
                        v_ax2 = T.axis.spatial(T.int64(55), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3025) // T.int64(55))
                        v_ax3 = T.axis.spatial(T.int64(55), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(55))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(387200))
                        T.reads(p1[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(64) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
l6, l7, l8 = sch.split(loop=l5, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l7, l8, l6)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
2024-04-29 00:02:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:02:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 00:02:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36719b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x470acb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x441e448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x34a1808)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3519b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x47005f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46e4418)]: 0 failure(s)
2024-04-29 00:02:42 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 00:02:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36719b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x470acb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x441e448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x34a1808)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3519b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x47005f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46e4418)]: 0 failure(s)
2024-04-29 00:02:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36719b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x470acb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x441e448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x34a1808)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3519b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x47005f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46e4418)]: 0 failure(s)
2024-04-29 00:02:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36719b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x470acb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x441e448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x34a1808)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3519b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x47005f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46e4418)]: 0 failure(s)
2024-04-29 00:02:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36719b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x470acb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x441e448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x34a1808)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3519b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x47005f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46e4418)]: 0 failure(s)
2024-04-29 00:02:43 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.7499
2024-04-29 00:02:43 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2024-04-29 00:02:43 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2024-04-29 00:21:26 [INFO] [task_scheduler.cc:121] [Task #9: fused_concatenate] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(55), T.int64(55)), "float32"), p1: T.Buffer((T.int64(1), T.int64(64), T.int64(55), T.int64(55)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(128), T.int64(55), T.int64(55)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                    with T.block("T_concat"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3025))
                        v_ax2 = T.axis.spatial(T.int64(55), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3025) // T.int64(55))
                        v_ax3 = T.axis.spatial(T.int64(55), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(55))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(387200))
                        T.reads(p1[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(64) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
l6, l7, l8 = sch.split(loop=l5, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l7, l8, l6)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
