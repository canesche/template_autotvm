2024-04-28 23:45:49 [INFO] [task_scheduler.cc:160] Initializing Task #15: "fused_nn_max_pool2d_2"
2024-04-28 23:45:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(256), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(v_ax2 < T.int64(27) and v_ax3 < T.int64(27), p0[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(256), T.int64(13), T.int64(13), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-04-28 23:45:49 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-28 23:45:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(256), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(85), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                            v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                            v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(43264))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(v_ax2 * T.int64(2) + v_rv0 < T.int64(27) and v_ax3 * T.int64(2) + v_rv1 < T.int64(27), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
2024-04-28 23:45:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(256), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(43264), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(169))
                            v_ax2 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                            v_ax3 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(13))
                            v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) % T.int64(3))
                            T.where(rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(v_ax2 * T.int64(2) + v_rv0 < T.int64(27) and v_ax3 * T.int64(2) + v_rv1 < T.int64(27), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
2024-04-29 00:08:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:08:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 00:08:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 00:08:24 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 00:08:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 00:08:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 00:08:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 00:08:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 00:08:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9668  0.9572  0.9477  0.9429  0.9429  0.8922  0.8273  0.8065  0.7990  0.7980  0.7550  0.7501  0.7345  0.7250  0.7080  0.7007
[17 : 32]:	0.6806  0.6781  0.6641  0.6614  0.6474  0.6465  0.6412  0.6352  0.6248  0.6239  0.6009  0.5918  0.5757  0.5755  0.5375  0.5162
[33 : 48]:	0.5049  0.4970  0.4919  0.4871  0.4397  0.4112  0.3953  0.3356  0.3106  0.3091  0.2874  0.2834  0.2813  0.2810  0.2468  0.2313
[49 : 64]:	0.2052  0.2015  0.1980  0.1902  0.1883  0.1740  0.1690  0.1586  0.1490  0.1484  0.1439  0.1152  0.1131  0.1129  0.1121  0.1044
2024-04-29 00:08:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:08:26 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 8.7310. Time: 44.5970 us. Best GFLOPs: 8.7310
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 119.7976. Time: 3.2503 us. Best GFLOPs: 119.7976
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 119.8109. Time: 3.2499 us. Best GFLOPs: 119.8109
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 11.1321. Time: 34.9779 us. Best GFLOPs: 119.8109
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 11.2310. Time: 34.6698 us. Best GFLOPs: 119.8109
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 8.7300. Time: 44.6022 us. Best GFLOPs: 119.8109
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 11.2391. Time: 34.6447 us. Best GFLOPs: 119.8109
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 124.3400. Time: 3.1315 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 11.0249. Time: 35.3179 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 121.5363. Time: 3.2038 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 4.4423. Time: 87.6520 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 105.2205. Time: 3.7006 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 8.7334. Time: 44.5848 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 105.2240. Time: 3.7004 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 11.0983. Time: 35.0841 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 4.4418. Time: 87.6627 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 11.0941. Time: 35.0976 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 11.1357. Time: 34.9664 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 120.6743. Time: 3.2267 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 105.2139. Time: 3.7008 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 11.0155. Time: 35.3481 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 124.1373. Time: 3.1367 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 112.1531. Time: 3.4718 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 4.4409. Time: 87.6793 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 11.0988. Time: 35.0827 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 121.5234. Time: 3.2041 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 11.0258. Time: 35.3151 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 105.2211. Time: 3.7006 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 120.2624. Time: 3.2377 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 124.1530. Time: 3.1363 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 11.0943. Time: 35.0970 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 106.1582. Time: 3.6679 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 124.1740. Time: 3.1357 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 112.1037. Time: 3.4734 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 120.5054. Time: 3.2312 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 11.2289. Time: 34.6764 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 11.2282. Time: 34.6785 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 119.6666. Time: 3.2538 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 11.1307. Time: 34.9822 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #40: GFLOPs: 112.1144. Time: 3.4730 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 11.0951. Time: 35.0943 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 11.0955. Time: 35.0933 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 11.1330. Time: 34.9749 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 121.3112. Time: 3.2097 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 112.1240. Time: 3.4727 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 11.0227. Time: 35.3248 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 11.0229. Time: 35.3244 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 124.1490. Time: 3.1364 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 8.7305. Time: 44.5996 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 11.2346. Time: 34.6585 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #51: GFLOPs: 11.0212. Time: 35.3296 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #52: GFLOPs: 11.1380. Time: 34.9593 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #53: GFLOPs: 121.5416. Time: 3.2036 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #54: GFLOPs: 119.3828. Time: 3.2616 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #55: GFLOPs: 11.0186. Time: 35.3379 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #56: GFLOPs: 11.0251. Time: 35.3172 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #57: GFLOPs: 11.0959. Time: 35.0918 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #58: GFLOPs: 4.4404. Time: 87.6900 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #59: GFLOPs: 11.0983. Time: 35.0843 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #60: GFLOPs: 8.7329. Time: 44.5872 us. Best GFLOPs: 124.3400
2024-04-29 00:21:36 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #61: GFLOPs: 119.8768. Time: 3.2481 us. Best GFLOPs: 124.3400
2024-04-29 03:02:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:02:30 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 03:02:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 03:02:31 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 03:02:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 03:02:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 03:02:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 03:02:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4564a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4894aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4886a48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3935368)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4568bd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4420178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x46059b8)]: 0 failure(s)
2024-04-29 03:02:37 [INFO] [evolutionary_search.cc:649] Scores of the best 9 candidates:
[1 : 9]:	0.9698  0.9685  0.9623  0.8526  0.1360  0.0919  0.0873  0.0839  0.0646
2024-04-29 03:02:37 [INFO] [evolutionary_search.cc:727] Got 9 candidate(s) with evolutionary search
2024-04-29 03:02:37 [INFO] [evolutionary_search.cc:730] Sending 9 candidates(s) for measurement
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_max_pool2d_2] Trial #62: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(256), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(85), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                    v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                    v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(43264))
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(43264))
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(v_ax2 * T.int64(2) + v_rv0 < T.int64(27) and v_ax3 * T.int64(2) + v_rv1 < T.int64(27), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
sch.enter_postproc()
b14 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b14, ann_key="meta_schedule.unroll_explicit")
b15, = sch.get_child_blocks(b14)
l16, l17, l18, l19 = sch.get_loops(block=b15)
sch.annotate(block_or_loop=l16, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l16, ann_key="pragma_unroll_explicit", ann_val=1)
b20 = sch.get_block(name="pool_max", func_name="main")
l21, l22, l23, l24 = sch.get_loops(block=b20)
b25 = sch.decompose_reduction(block=b20, loop=l23)
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_max_pool2d_2] Trial #63: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(256), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(169), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                    v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                    v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(v_ax2 * T.int64(2) + v_rv0 < T.int64(27) and v_ax3 * T.int64(2) + v_rv1 < T.int64(27), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
sch.enter_postproc()
b14 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b14, ann_key="meta_schedule.unroll_explicit")
b15, = sch.get_child_blocks(b14)
l16, l17, l18, l19 = sch.get_loops(block=b15)
sch.annotate(block_or_loop=l16, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l16, ann_key="pragma_unroll_explicit", ann_val=1)
b20 = sch.get_block(name="pool_max", func_name="main")
l21, l22, l23, l24 = sch.get_loops(block=b20)
b25 = sch.decompose_reduction(block=b20, loop=l23)
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_max_pool2d_2] Trial #64: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(256), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(676), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                    v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                    v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(v_ax2 * T.int64(2) + v_rv0 < T.int64(27) and v_ax3 * T.int64(2) + v_rv1 < T.int64(27), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
sch.enter_postproc()
b14 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b14, ann_key="meta_schedule.unroll_explicit")
b15, = sch.get_child_blocks(b14)
l16, l17, l18, l19 = sch.get_loops(block=b15)
b20 = sch.get_block(name="pool_max", func_name="main")
l21, l22, l23, l24 = sch.get_loops(block=b20)
b25 = sch.decompose_reduction(block=b20, loop=l23)
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #65: GFLOPs: 99.0656. Time: 3.9305 us. Best GFLOPs: 124.3400
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #66: GFLOPs: 11.0799. Time: 35.1425 us. Best GFLOPs: 124.3400
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #67: GFLOPs: 11.1238. Time: 35.0040 us. Best GFLOPs: 124.3400
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #68: GFLOPs: 11.0180. Time: 35.3401 us. Best GFLOPs: 124.3400
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #69: GFLOPs: 11.0204. Time: 35.3323 us. Best GFLOPs: 124.3400
2024-04-29 03:02:52 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_max_pool2d_2] Trial #70: GFLOPs: 4.4488. Time: 87.5235 us. Best GFLOPs: 124.3400
