2024-04-29 08:24:27 [INFO] [task_scheduler.cc:160] Initializing Task #87: "fused_nn_max_pool2d"
2024-04-29 08:24:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 08:24:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(9), T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(9), T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)):
                with T.block("pad_temp"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 10:36:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:36:49 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:36:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb6bd08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8b31ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xee01cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x80afbb8)]: 0 failure(s)
2024-04-29 10:36:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:36:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb6bd08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8b31ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xee01cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x80afbb8)]: 0 failure(s)
2024-04-29 10:37:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb6bd08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8b31ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xee01cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x80afbb8)]: 0 failure(s)
2024-04-29 10:37:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb6bd08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8b31ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xee01cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x80afbb8)]: 0 failure(s)
2024-04-29 10:37:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeb6bd08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8b31ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xee01cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x80afbb8)]: 0 failure(s)
2024-04-29 10:37:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9959  0.9900  0.9863  0.9806  0.9802  0.9743  0.9634  0.9615  0.9522  0.9508  0.9464  0.9408  0.9260  0.9208  0.9108
[17 : 32]:	0.9080  0.9069  0.8982  0.8961  0.8824  0.8761  0.8758  0.8724  0.8717  0.8677  0.8659  0.8650  0.8603  0.8595  0.8577  0.8548
[33 : 48]:	0.8542  0.8522  0.8519  0.8466  0.8431  0.8421  0.8363  0.8324  0.8273  0.8269  0.8224  0.8198  0.8188  0.8157  0.8143  0.8085
[49 : 64]:	0.8075  0.8061  0.8055  0.8041  0.8025  0.7999  0.7948  0.7705  0.7633  0.7544  0.7489  0.7440  0.7430  0.7389  0.7315  0.7283
2024-04-29 10:37:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:37:12 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #1: GFLOPs: 5.9233. Time: 304.9523 us. Best GFLOPs: 5.9233
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #2: GFLOPs: 1.4256. Time: 1267.1077 us. Best GFLOPs: 5.9233
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #3: GFLOPs: 68.2434. Time: 26.4690 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #4: GFLOPs: 6.7129. Time: 269.0861 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #5: GFLOPs: 42.7557. Time: 42.2479 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #6: GFLOPs: 17.3427. Time: 104.1553 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #7: GFLOPs: 31.0699. Time: 58.1379 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #8: GFLOPs: 12.1814. Time: 148.2860 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #9: GFLOPs: 53.3291. Time: 33.8715 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #10: GFLOPs: 21.5542. Time: 83.8043 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #11: GFLOPs: 17.0503. Time: 105.9418 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #12: GFLOPs: 13.1435. Time: 137.4317 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #13: GFLOPs: 11.3324. Time: 159.3957 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #14: GFLOPs: 5.2190. Time: 346.1049 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #15: GFLOPs: 23.9529. Time: 75.4121 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #16: GFLOPs: 18.7202. Time: 96.4911 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #17: GFLOPs: 36.7533. Time: 49.1476 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #18: GFLOPs: 8.1212. Time: 222.4230 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #19: GFLOPs: 3.4620. Time: 521.7546 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #20: GFLOPs: 16.9702. Time: 106.4414 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #21: GFLOPs: 8.6503. Time: 208.8181 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #22: GFLOPs: 13.6193. Time: 132.6309 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #23: GFLOPs: 52.8439. Time: 34.1825 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #24: GFLOPs: 12.5282. Time: 144.1821 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #25: GFLOPs: 9.0756. Time: 199.0325 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #26: GFLOPs: 6.8591. Time: 263.3498 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #27: GFLOPs: 26.7547. Time: 67.5146 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #28: GFLOPs: 12.5468. Time: 143.9683 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #29: GFLOPs: 9.1363. Time: 197.7092 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #30: GFLOPs: 12.9286. Time: 139.7160 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #31: GFLOPs: 11.6960. Time: 154.4404 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #32: GFLOPs: 3.4542. Time: 522.9388 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #33: GFLOPs: 37.8097. Time: 47.7744 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #34: GFLOPs: 1.5194. Time: 1188.8669 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #35: GFLOPs: 1.1405. Time: 1583.8700 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #36: GFLOPs: 1.4422. Time: 1252.5070 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #37: GFLOPs: 0.8144. Time: 2217.9527 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #38: GFLOPs: 6.8161. Time: 265.0096 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #39: GFLOPs: 1.3002. Time: 1389.2350 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #40: GFLOPs: 33.5493. Time: 53.8412 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #41: GFLOPs: 22.9217. Time: 78.8047 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #42: GFLOPs: 17.2759. Time: 104.5580 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #43: GFLOPs: 52.8567. Time: 34.1742 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:121] [Task #87: fused_nn_max_pool2d] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(32)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(32), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b21)
l44 = sch.fuse(l38, l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l44)
sch.annotate(block_or_loop=l44, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l44, ann_key="pragma_unroll_explicit", ann_val=1)
b45 = sch.get_block(name="pool_max_rf", func_name="main")
l46, l47, l48, l49, l50 = sch.get_loops(block=b45)
b51 = sch.decompose_reduction(block=b45, loop=l50)
b52 = sch.get_block(name="pool_max", func_name="main")
l53, l54, l55 = sch.get_loops(block=b52)
b56 = sch.decompose_reduction(block=b52, loop=l55)
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #45: GFLOPs: 33.0937. Time: 54.5825 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #46: GFLOPs: 13.3421. Time: 135.3860 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #47: GFLOPs: 5.0687. Time: 356.3713 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #48: GFLOPs: 1.2159. Time: 1485.5898 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #49: GFLOPs: 1.2096. Time: 1493.3650 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #50: GFLOPs: 10.4148. Time: 173.4400 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #51: GFLOPs: 24.6285. Time: 73.3434 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #52: GFLOPs: 8.0855. Time: 223.4057 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #53: GFLOPs: 7.3806. Time: 244.7422 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #54: GFLOPs: 17.5637. Time: 102.8446 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #55: GFLOPs: 14.6771. Time: 123.0721 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #56: GFLOPs: 33.4873. Time: 53.9410 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #57: GFLOPs: 35.3361. Time: 51.1188 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #58: GFLOPs: 7.7257. Time: 233.8077 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #59: GFLOPs: 10.0885. Time: 179.0487 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #60: GFLOPs: 20.4511. Time: 88.3246 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #61: GFLOPs: 6.7970. Time: 265.7553 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #62: GFLOPs: 24.6213. Time: 73.3648 us. Best GFLOPs: 68.2434
2024-04-29 11:05:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_max_pool2d] Trial #63: GFLOPs: 41.2882. Time: 43.7495 us. Best GFLOPs: 68.2434
