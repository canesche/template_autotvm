2024-04-29 08:24:11 [INFO] [task_scheduler.cc:160] Initializing Task #82: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79"
2024-04-29 08:24:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(96), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:24:11 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(4), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:24:11 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(4), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:24:11 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(4), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(4), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 10:31:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:31:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:31:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 10:31:38 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:31:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 10:31:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 10:31:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 10:31:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 10:31:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9985  0.9976  0.9974  0.9971  0.9970  0.9963  0.9958  0.9952  0.9941  0.9939  0.9933  0.9931  0.9921  0.9921  0.9915
[17 : 32]:	0.9909  0.9905  0.9899  0.9897  0.9897  0.9896  0.9888  0.9886  0.9882  0.9881  0.9876  0.9873  0.9864  0.9862  0.9856  0.9851
[33 : 48]:	0.9847  0.9846  0.9832  0.9826  0.9825  0.9819  0.9819  0.9818  0.9812  0.9808  0.9806  0.9805  0.9799  0.9797  0.9795  0.9791
[49 : 64]:	0.9782  0.9767  0.9759  0.9755  0.9751  0.9742  0.9740  0.9740  0.9725  0.9723  0.9721  0.9721  0.9715  0.9713  0.9712  0.9712
2024-04-29 10:31:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:31:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #1: GFLOPs: 35.5222. Time: 2192.2386 us. Best GFLOPs: 35.5222
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #2: GFLOPs: 150.0082. Time: 519.1259 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #3: GFLOPs: 103.7900. Time: 750.2956 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #4: GFLOPs: 4.3417. Time: 17936.1428 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #5: GFLOPs: 112.0561. Time: 694.9478 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #6: GFLOPs: 61.3703. Time: 1268.9052 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #7: GFLOPs: 138.2701. Time: 563.1957 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #8: GFLOPs: 48.6198. Time: 1601.6761 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #9: GFLOPs: 77.5228. Time: 1004.5195 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:121] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(8), T.int64(56), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #11: GFLOPs: 8.3959. Time: 9275.1315 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:121] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + ow_1 * T.int64(8) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + ow_1 * T.int64(8) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(56), T.int64(8)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 8, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #13: GFLOPs: 22.1360. Time: 3517.9336 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #14: GFLOPs: 38.7784. Time: 2008.1596 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #15: GFLOPs: 11.7330. Time: 6637.1223 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #16: GFLOPs: 40.6726. Time: 1914.6322 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #17: GFLOPs: 19.9449. Time: 3904.4134 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #18: GFLOPs: 70.3388. Time: 1107.1159 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #19: GFLOPs: 99.5288. Time: 782.4184 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #20: GFLOPs: 51.5356. Time: 1511.0568 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:121] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(49), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(96), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(8)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #22: GFLOPs: 88.0903. Time: 884.0153 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #23: GFLOPs: 1.6742. Time: 46513.5467 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #24: GFLOPs: 52.7719. Time: 1475.6551 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #25: GFLOPs: 44.0159. Time: 1769.2060 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #26: GFLOPs: 23.5200. Time: 3310.9381 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #27: GFLOPs: 50.3201. Time: 1547.5551 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #28: GFLOPs: 48.1916. Time: 1615.9062 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #29: GFLOPs: 55.2131. Time: 1410.4115 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #30: GFLOPs: 111.6469. Time: 697.4953 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #31: GFLOPs: 38.4667. Time: 2024.4302 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #32: GFLOPs: 90.8345. Time: 857.3085 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #33: GFLOPs: 18.9607. Time: 4107.0737 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #34: GFLOPs: 3.8527. Time: 20212.3612 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #35: GFLOPs: 41.9140. Time: 1857.9263 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #36: GFLOPs: 9.5984. Time: 8113.1182 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #37: GFLOPs: 94.0004. Time: 828.4343 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #38: GFLOPs: 44.8445. Time: 1736.5149 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #39: GFLOPs: 79.9122. Time: 974.4836 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #40: GFLOPs: 31.3736. Time: 2482.1250 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #41: GFLOPs: 20.9219. Time: 3722.0794 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #42: GFLOPs: 58.0584. Time: 1341.2895 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #43: GFLOPs: 147.4323. Time: 528.1962 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #44: GFLOPs: 37.3757. Time: 2083.5246 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #45: GFLOPs: 26.9897. Time: 2885.2899 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #46: GFLOPs: 1.7677. Time: 44052.4507 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #47: GFLOPs: 67.5853. Time: 1152.2209 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #48: GFLOPs: 5.5283. Time: 14086.3505 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #49: GFLOPs: 128.2690. Time: 607.1079 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #50: GFLOPs: 91.7217. Time: 849.0154 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #51: GFLOPs: 84.4148. Time: 922.5058 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #52: GFLOPs: 85.9532. Time: 905.9951 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #53: GFLOPs: 62.3437. Time: 1249.0932 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #54: GFLOPs: 1.5143. Time: 51424.8617 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #55: GFLOPs: 53.8322. Time: 1446.5914 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #56: GFLOPs: 59.4790. Time: 1309.2536 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #57: GFLOPs: 102.2473. Time: 761.6159 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #58: GFLOPs: 100.5600. Time: 774.3947 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:121] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #60: GFLOPs: 79.8327. Time: 975.4540 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #61: GFLOPs: 20.7390. Time: 3754.9147 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #62: GFLOPs: 6.0375. Time: 12898.2733 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #63: GFLOPs: 140.2156. Time: 555.3815 us. Best GFLOPs: 150.0082
2024-04-29 11:04:50 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #64: GFLOPs: 40.6229. Time: 1916.9767 us. Best GFLOPs: 150.0082
2024-04-29 12:03:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:03:51 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 12:03:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 12:03:53 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 12:03:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 12:04:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 12:04:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 12:04:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa54b588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d4b788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x98a3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaff4858)]: 0 failure(s)
2024-04-29 12:04:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8685  0.8586  0.8514  0.8391  0.8315  0.8289  0.8163  0.8071  0.7955  0.7950  0.7933  0.7742  0.7692  0.7629  0.7547  0.7405
[17 : 32]:	0.7359  0.7348  0.7248  0.7239  0.7218  0.7211  0.7204  0.7153  0.7134  0.7095  0.7059  0.7052  0.7038  0.7030  0.7030  0.7021
[33 : 48]:	0.7015  0.7015  0.7014  0.7014  0.7008  0.6975  0.6967  0.6956  0.6951  0.6938  0.6937  0.6936  0.6931  0.6919  0.6916  0.6907
[49 : 64]:	0.6902  0.6881  0.6879  0.6858  0.6857  0.6856  0.6821  0.6812  0.6809  0.6795  0.6781  0.6769  0.6769  0.6763  0.6762  0.6761
2024-04-29 12:04:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:04:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #65: GFLOPs: 140.4807. Time: 554.3335 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #66: GFLOPs: 105.4958. Time: 738.1638 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #67: GFLOPs: 148.4377. Time: 524.6185 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #68: GFLOPs: 117.5059. Time: 662.7171 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #69: GFLOPs: 126.8976. Time: 613.6691 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #70: GFLOPs: 107.0312. Time: 727.5745 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #71: GFLOPs: 118.8711. Time: 655.1057 us. Best GFLOPs: 150.0082
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #72: GFLOPs: 154.3121. Time: 504.6471 us. Best GFLOPs: 154.3121
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #73: GFLOPs: 136.6794. Time: 569.7504 us. Best GFLOPs: 154.3121
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #74: GFLOPs: 130.6846. Time: 595.8864 us. Best GFLOPs: 154.3121
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #75: GFLOPs: 158.8786. Time: 490.1425 us. Best GFLOPs: 158.8786
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #76: GFLOPs: 179.6653. Time: 433.4345 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #77: GFLOPs: 148.8787. Time: 523.0645 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #78: GFLOPs: 69.4582. Time: 1121.1507 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #79: GFLOPs: 123.1448. Time: 632.3705 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #80: GFLOPs: 150.1908. Time: 518.4949 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #81: GFLOPs: 123.5068. Time: 630.5173 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #82: GFLOPs: 143.4103. Time: 543.0095 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #83: GFLOPs: 141.2193. Time: 551.4341 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #84: GFLOPs: 82.6614. Time: 942.0745 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #85: GFLOPs: 150.3144. Time: 518.0686 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #86: GFLOPs: 47.4449. Time: 1641.3394 us. Best GFLOPs: 179.6653
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #87: GFLOPs: 201.4700. Time: 386.5248 us. Best GFLOPs: 201.4700
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #88: GFLOPs: 257.9358. Time: 301.9090 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #89: GFLOPs: 149.2459. Time: 521.7775 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #90: GFLOPs: 89.6522. Time: 868.6140 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #91: GFLOPs: 152.0738. Time: 512.0747 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #92: GFLOPs: 78.6123. Time: 990.5976 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #93: GFLOPs: 115.9953. Time: 671.3474 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #94: GFLOPs: 89.7292. Time: 867.8681 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #95: GFLOPs: 88.6130. Time: 878.8009 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #96: GFLOPs: 111.9278. Time: 695.7443 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #97: GFLOPs: 147.6775. Time: 527.3191 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #98: GFLOPs: 146.9612. Time: 529.8891 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #99: GFLOPs: 62.8838. Time: 1238.3668 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #100: GFLOPs: 166.3476. Time: 468.1350 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #101: GFLOPs: 141.1174. Time: 551.8322 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #102: GFLOPs: 85.7428. Time: 908.2178 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #103: GFLOPs: 118.7441. Time: 655.8063 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #104: GFLOPs: 181.5277. Time: 428.9876 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #105: GFLOPs: 206.3091. Time: 377.4586 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #106: GFLOPs: 214.1761. Time: 363.5940 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #107: GFLOPs: 117.5253. Time: 662.6078 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #108: GFLOPs: 138.4197. Time: 562.5871 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #109: GFLOPs: 117.0814. Time: 665.1200 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #110: GFLOPs: 80.8224. Time: 963.5098 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #111: GFLOPs: 98.0092. Time: 794.5493 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #112: GFLOPs: 91.2352. Time: 853.5424 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #113: GFLOPs: 89.7204. Time: 867.9534 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #114: GFLOPs: 31.7275. Time: 2454.4356 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #115: GFLOPs: 79.8386. Time: 975.3825 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #116: GFLOPs: 116.5252. Time: 668.2945 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #117: GFLOPs: 124.7079. Time: 624.4443 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #118: GFLOPs: 127.3631. Time: 611.4265 us. Best GFLOPs: 257.9358
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #119: GFLOPs: 281.1997. Time: 276.9318 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #120: GFLOPs: 91.4707. Time: 851.3457 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #121: GFLOPs: 113.3840. Time: 686.8089 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #122: GFLOPs: 91.6098. Time: 850.0531 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #123: GFLOPs: 95.1585. Time: 818.3519 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #124: GFLOPs: 100.3495. Time: 776.0197 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #125: GFLOPs: 83.9895. Time: 927.1774 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #126: GFLOPs: 88.0646. Time: 884.2727 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #127: GFLOPs: 53.5781. Time: 1453.4501 us. Best GFLOPs: 281.1997
2024-04-29 12:05:49 [INFO] [task_scheduler.cc:131] [Task #82: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_79] Trial #128: GFLOPs: 7.9957. Time: 9739.4098 us. Best GFLOPs: 281.1997
