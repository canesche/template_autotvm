2024-04-29 08:22:45 [INFO] [task_scheduler.cc:160] Initializing Task #60: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59"
2024-04-29 08:22:45 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(384), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:22:45 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:22:45 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1), T.int64(384), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(384), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[384, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:22:45 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(384), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[384, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:22:45 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1), T.int64(384), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[384, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:56:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:56:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:56:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa85c7e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83c8818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa794268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba96fb8)]: 0 failure(s)
2024-04-29 09:56:57 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:57:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa85c7e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83c8818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa794268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba96fb8)]: 0 failure(s)
2024-04-29 09:57:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa85c7e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83c8818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa794268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba96fb8)]: 0 failure(s)
2024-04-29 09:57:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa85c7e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83c8818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa794268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba96fb8)]: 0 failure(s)
2024-04-29 09:57:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa85c7e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83c8818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa794268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba96fb8)]: 0 failure(s)
2024-04-29 09:57:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9994  0.9993  0.9984  0.9974  0.9972  0.9967  0.9966  0.9963  0.9959  0.9957  0.9952  0.9944  0.9942  0.9939  0.9936
[17 : 32]:	0.9936  0.9933  0.9930  0.9927  0.9922  0.9918  0.9917  0.9909  0.9907  0.9900  0.9898  0.9898  0.9885  0.9878  0.9866  0.9858
[33 : 48]:	0.9856  0.9853  0.9848  0.9848  0.9842  0.9834  0.9827  0.9811  0.9802  0.9799  0.9790  0.9785  0.9784  0.9780  0.9776  0.9765
[49 : 64]:	0.9754  0.9746  0.9739  0.9732  0.9726  0.9724  0.9723  0.9718  0.9716  0.9714  0.9710  0.9707  0.9697  0.9696  0.9691  0.9689
2024-04-29 09:57:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:57:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:01:38 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #1: GFLOPs: 7.6946. Time: 2510.5743 us. Best GFLOPs: 7.6946
2024-04-29 11:01:38 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #2: GFLOPs: 50.9656. Time: 379.0350 us. Best GFLOPs: 50.9656
2024-04-29 11:01:38 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #3: GFLOPs: 82.8496. Time: 233.1666 us. Best GFLOPs: 82.8496
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:121] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #5: GFLOPs: 71.4986. Time: 270.1837 us. Best GFLOPs: 82.8496
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #6: GFLOPs: 12.5200. Time: 1542.9475 us. Best GFLOPs: 82.8496
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #7: GFLOPs: 21.6600. Time: 891.8616 us. Best GFLOPs: 82.8496
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #8: GFLOPs: 1.5429. Time: 12520.4536 us. Best GFLOPs: 82.8496
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #9: GFLOPs: 75.1025. Time: 257.2185 us. Best GFLOPs: 82.8496
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #10: GFLOPs: 95.5242. Time: 202.2290 us. Best GFLOPs: 95.5242
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #11: GFLOPs: 52.3016. Time: 369.3529 us. Best GFLOPs: 95.5242
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #12: GFLOPs: 51.3699. Time: 376.0523 us. Best GFLOPs: 95.5242
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #13: GFLOPs: 13.4420. Time: 1437.1225 us. Best GFLOPs: 95.5242
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #14: GFLOPs: 130.8077. Time: 147.6806 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #15: GFLOPs: 3.9964. Time: 4833.8300 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #16: GFLOPs: 27.0888. Time: 713.1263 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #17: GFLOPs: 4.3868. Time: 4403.5795 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #18: GFLOPs: 42.1712. Time: 458.0793 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #19: GFLOPs: 0.9807. Time: 19697.0093 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #20: GFLOPs: 51.7417. Time: 373.3502 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #21: GFLOPs: 50.6608. Time: 381.3155 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #22: GFLOPs: 4.1851. Time: 4615.8869 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #23: GFLOPs: 12.7014. Time: 1520.9111 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #24: GFLOPs: 0.8318. Time: 23224.5972 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #25: GFLOPs: 17.2470. Time: 1120.0627 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #26: GFLOPs: 83.1748. Time: 232.2550 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #27: GFLOPs: 3.4357. Time: 5622.7077 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #28: GFLOPs: 33.9579. Time: 568.8736 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #29: GFLOPs: 8.0665. Time: 2394.8006 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #30: GFLOPs: 62.8188. Time: 307.5155 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #31: GFLOPs: 38.3708. Time: 503.4492 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #32: GFLOPs: 89.9572. Time: 214.7438 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #33: GFLOPs: 0.4978. Time: 38809.6100 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #34: GFLOPs: 55.7330. Time: 346.6127 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #35: GFLOPs: 4.9015. Time: 3941.2119 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #36: GFLOPs: 73.8049. Time: 261.7410 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #37: GFLOPs: 17.9124. Time: 1078.4575 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #38: GFLOPs: 7.7470. Time: 2493.5743 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #39: GFLOPs: 36.1626. Time: 534.1916 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #40: GFLOPs: 61.3344. Time: 314.9582 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #41: GFLOPs: 14.6606. Time: 1317.6643 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #42: GFLOPs: 78.6086. Time: 245.7462 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #43: GFLOPs: 74.6611. Time: 258.7394 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #44: GFLOPs: 74.4760. Time: 259.3823 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #45: GFLOPs: 85.2156. Time: 226.6927 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #46: GFLOPs: 2.0557. Time: 9396.9726 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #47: GFLOPs: 9.0290. Time: 2139.5324 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #48: GFLOPs: 27.5035. Time: 702.3735 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #49: GFLOPs: 1.3778. Time: 14020.2712 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #50: GFLOPs: 77.9456. Time: 247.8363 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #51: GFLOPs: 88.9235. Time: 217.2403 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #52: GFLOPs: 12.4366. Time: 1553.2985 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #53: GFLOPs: 6.9955. Time: 2761.4437 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #54: GFLOPs: 76.2589. Time: 253.3179 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #55: GFLOPs: 63.4028. Time: 304.6831 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #56: GFLOPs: 40.4401. Time: 477.6877 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #57: GFLOPs: 74.2489. Time: 260.1757 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #58: GFLOPs: 2.0701. Time: 9331.6175 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #59: GFLOPs: 50.0507. Time: 385.9635 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #60: GFLOPs: 73.0709. Time: 264.3700 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #61: GFLOPs: 84.2503. Time: 229.2901 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #62: GFLOPs: 36.9095. Time: 523.3824 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #63: GFLOPs: 93.1605. Time: 207.3601 us. Best GFLOPs: 130.8077
2024-04-29 11:01:39 [INFO] [task_scheduler.cc:131] [Task #60: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_59] Trial #64: GFLOPs: 40.3993. Time: 478.1705 us. Best GFLOPs: 130.8077
