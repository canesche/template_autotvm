2024-04-29 08:20:42 [INFO] [task_scheduler.cc:160] Initializing Task #29: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29"
2024-04-29 08:20:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(176), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(176), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(704), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:20:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:20:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(176), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(176), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(704), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:20:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(176), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(176), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(704), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:20:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(176), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(176), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(704), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:08:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:08:34 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:08:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83675d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8642ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf243a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa2fee98)]: 0 failure(s)
2024-04-29 09:08:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:08:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83675d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8642ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf243a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa2fee98)]: 0 failure(s)
2024-04-29 09:08:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83675d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8642ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf243a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa2fee98)]: 0 failure(s)
2024-04-29 09:08:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83675d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8642ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf243a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa2fee98)]: 0 failure(s)
2024-04-29 09:08:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83675d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8642ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf243a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa2fee98)]: 0 failure(s)
2024-04-29 09:08:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9988  0.9987  0.9985  0.9984  0.9984  0.9983  0.9981  0.9981  0.9979  0.9979  0.9971  0.9966  0.9964  0.9963  0.9954
[17 : 32]:	0.9942  0.9942  0.9940  0.9937  0.9936  0.9932  0.9925  0.9921  0.9906  0.9905  0.9903  0.9903  0.9898  0.9890  0.9889  0.9883
[33 : 48]:	0.9875  0.9857  0.9852  0.9852  0.9852  0.9848  0.9845  0.9839  0.9829  0.9824  0.9818  0.9816  0.9804  0.9802  0.9801  0.9782
[49 : 64]:	0.9780  0.9770  0.9766  0.9761  0.9754  0.9753  0.9738  0.9734  0.9730  0.9728  0.9727  0.9726  0.9725  0.9725  0.9722  0.9721
2024-04-29 09:08:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:08:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #1: GFLOPs: 28.9589. Time: 305.3815 us. Best GFLOPs: 28.9589
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #2: GFLOPs: 22.4891. Time: 393.2363 us. Best GFLOPs: 28.9589
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #3: GFLOPs: 18.2698. Time: 484.0518 us. Best GFLOPs: 28.9589
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #4: GFLOPs: 101.6093. Time: 87.0346 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #5: GFLOPs: 1.5694. Time: 5634.9566 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #6: GFLOPs: 88.8181. Time: 99.5689 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #7: GFLOPs: 5.4221. Time: 1631.0196 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #8: GFLOPs: 81.3623. Time: 108.6931 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #9: GFLOPs: 67.2317. Time: 131.5380 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #10: GFLOPs: 60.3772. Time: 146.4713 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #11: GFLOPs: 94.0022. Time: 94.0778 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #12: GFLOPs: 28.3185. Time: 312.2877 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #13: GFLOPs: 83.8006. Time: 105.5306 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #14: GFLOPs: 11.2281. Time: 787.6249 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #15: GFLOPs: 13.9214. Time: 635.2485 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #16: GFLOPs: 28.5640. Time: 309.6040 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #17: GFLOPs: 0.5219. Time: 16943.6483 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #18: GFLOPs: 44.6647. Time: 197.9981 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #19: GFLOPs: 21.8906. Time: 403.9863 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #20: GFLOPs: 14.0669. Time: 628.6744 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #21: GFLOPs: 87.2085. Time: 101.4066 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #22: GFLOPs: 21.1480. Time: 418.1720 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #23: GFLOPs: 5.2402. Time: 1687.6383 us. Best GFLOPs: 101.6093
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #24: GFLOPs: 121.7627. Time: 72.6291 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #25: GFLOPs: 0.2817. Time: 31392.3852 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #26: GFLOPs: 4.8054. Time: 1840.3349 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #27: GFLOPs: 62.1020. Time: 142.4031 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #28: GFLOPs: 8.0311. Time: 1101.1623 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #29: GFLOPs: 2.6931. Time: 3283.7781 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #30: GFLOPs: 46.2093. Time: 191.3795 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #31: GFLOPs: 8.1662. Time: 1082.9418 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #32: GFLOPs: 6.6344. Time: 1332.9740 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(176), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(176), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(44), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(704), ic_0 * T.int64(44) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 44])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #34: GFLOPs: 64.9291. Time: 136.2027 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #35: GFLOPs: 10.7799. Time: 820.3743 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #36: GFLOPs: 4.7966. Time: 1843.6918 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #37: GFLOPs: 61.4151. Time: 143.9958 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #38: GFLOPs: 5.4588. Time: 1620.0622 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #39: GFLOPs: 73.2669. Time: 120.7028 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #40: GFLOPs: 56.5914. Time: 156.2696 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #41: GFLOPs: 10.2780. Time: 860.4339 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #42: GFLOPs: 60.8751. Time: 145.2733 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #43: GFLOPs: 0.9499. Time: 9309.5806 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #44: GFLOPs: 1.5621. Time: 5661.1807 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #45: GFLOPs: 34.0684. Time: 259.5815 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #46: GFLOPs: 50.4265. Time: 175.3743 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #47: GFLOPs: 34.4916. Time: 256.3963 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #48: GFLOPs: 60.5935. Time: 145.9484 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #49: GFLOPs: 1.0274. Time: 8607.3296 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #50: GFLOPs: 4.5559. Time: 1941.0987 us. Best GFLOPs: 121.7627
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #51: GFLOPs: 128.0592. Time: 69.0581 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #52: GFLOPs: 24.9732. Time: 354.1205 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #53: GFLOPs: 3.0540. Time: 2895.7139 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #54: GFLOPs: 22.3161. Time: 396.2848 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #55: GFLOPs: 84.3157. Time: 104.8857 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #56: GFLOPs: 26.0583. Time: 339.3746 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #57: GFLOPs: 2.9293. Time: 3018.9547 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #58: GFLOPs: 59.1932. Time: 149.4009 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #59: GFLOPs: 23.2449. Time: 380.4500 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #60: GFLOPs: 52.7083. Time: 167.7823 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #61: GFLOPs: 19.7350. Time: 448.1139 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #62: GFLOPs: 25.5363. Time: 346.3115 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #63: GFLOPs: 38.4283. Time: 230.1307 us. Best GFLOPs: 128.0592
2024-04-29 10:58:08 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #64: GFLOPs: 9.8110. Time: 901.3909 us. Best GFLOPs: 128.0592
