2024-04-29 08:23:24 [INFO] [task_scheduler.cc:160] Initializing Task #70: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68"
2024-04-29 08:23:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(352), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:23:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:23:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(4), T.int64(1), T.int64(2), T.int64(176), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[176, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:23:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(4), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(176), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[176, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:23:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(1), T.int64(2), T.int64(176), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[176, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 10:12:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:12:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:12:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 10:12:03 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:12:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 10:12:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 10:12:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 10:12:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 10:12:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9996  0.9995  0.9973  0.9972  0.9969  0.9968  0.9966  0.9956  0.9955  0.9955  0.9954  0.9953  0.9951  0.9946
[17 : 32]:	0.9943  0.9939  0.9932  0.9924  0.9923  0.9917  0.9907  0.9904  0.9903  0.9901  0.9897  0.9894  0.9894  0.9863  0.9861  0.9856
[33 : 48]:	0.9849  0.9845  0.9844  0.9843  0.9841  0.9835  0.9831  0.9829  0.9827  0.9815  0.9811  0.9805  0.9800  0.9795  0.9792  0.9789
[49 : 64]:	0.9780  0.9778  0.9774  0.9770  0.9764  0.9759  0.9758  0.9753  0.9752  0.9743  0.9732  0.9732  0.9728  0.9722  0.9716  0.9714
2024-04-29 10:12:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:12:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #1: GFLOPs: 102.5251. Time: 691.0359 us. Best GFLOPs: 102.5251
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #2: GFLOPs: 49.1535. Time: 1441.3719 us. Best GFLOPs: 102.5251
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #3: GFLOPs: 79.7875. Time: 887.9652 us. Best GFLOPs: 102.5251
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #4: GFLOPs: 109.5294. Time: 646.8445 us. Best GFLOPs: 109.5294
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #5: GFLOPs: 79.4134. Time: 892.1481 us. Best GFLOPs: 109.5294
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #6: GFLOPs: 47.2523. Time: 1499.3667 us. Best GFLOPs: 109.5294
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #7: GFLOPs: 81.3154. Time: 871.2809 us. Best GFLOPs: 109.5294
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #8: GFLOPs: 141.2992. Time: 501.4078 us. Best GFLOPs: 141.2992
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #9: GFLOPs: 16.3544. Time: 4332.0870 us. Best GFLOPs: 141.2992
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #10: GFLOPs: 12.5338. Time: 5652.6005 us. Best GFLOPs: 141.2992
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #11: GFLOPs: 71.9640. Time: 984.4990 us. Best GFLOPs: 141.2992
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #12: GFLOPs: 163.4918. Time: 433.3459 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #13: GFLOPs: 38.9418. Time: 1819.3413 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #14: GFLOPs: 30.7028. Time: 2307.5597 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #15: GFLOPs: 18.3314. Time: 3864.8630 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #16: GFLOPs: 48.2342. Time: 1468.8441 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #17: GFLOPs: 151.8507. Time: 466.5670 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #18: GFLOPs: 73.6629. Time: 961.7935 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #19: GFLOPs: 7.2398. Time: 9785.9148 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #20: GFLOPs: 101.6564. Time: 696.9410 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #21: GFLOPs: 12.3078. Time: 5756.4098 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #22: GFLOPs: 36.3003. Time: 1951.7361 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #23: GFLOPs: 21.6002. Time: 3279.9945 us. Best GFLOPs: 163.4918
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #24: GFLOPs: 184.2574. Time: 384.5084 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #25: GFLOPs: 77.7152. Time: 911.6427 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #26: GFLOPs: 26.2085. Time: 2703.2639 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #27: GFLOPs: 41.1674. Time: 1720.9866 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #28: GFLOPs: 59.4842. Time: 1191.0477 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #29: GFLOPs: 88.4751. Time: 800.7733 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #30: GFLOPs: 92.8953. Time: 762.6708 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #31: GFLOPs: 122.8636. Time: 576.6438 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #32: GFLOPs: 12.3923. Time: 5717.1186 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #33: GFLOPs: 50.1083. Time: 1413.9066 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #34: GFLOPs: 160.2608. Time: 442.0825 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #35: GFLOPs: 44.9685. Time: 1575.5133 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #36: GFLOPs: 3.3277. Time: 21290.3684 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #37: GFLOPs: 77.6838. Time: 912.0115 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #38: GFLOPs: 66.9047. Time: 1058.9466 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #39: GFLOPs: 123.4534. Time: 573.8887 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #40: GFLOPs: 72.6666. Time: 974.9809 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #41: GFLOPs: 127.9659. Time: 553.6515 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #42: GFLOPs: 113.7564. Time: 622.8092 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #43: GFLOPs: 8.2454. Time: 8592.5109 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #44: GFLOPs: 42.2457. Time: 1677.0603 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #45: GFLOPs: 97.0476. Time: 730.0387 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #46: GFLOPs: 75.6457. Time: 936.5834 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #47: GFLOPs: 2.4111. Time: 29384.5337 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #48: GFLOPs: 45.2835. Time: 1564.5539 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #49: GFLOPs: 81.3402. Time: 871.0151 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #50: GFLOPs: 76.7027. Time: 923.6766 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #51: GFLOPs: 127.4587. Time: 555.8549 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:121] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(22), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(22) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 22])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #53: GFLOPs: 11.8320. Time: 5987.8737 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #54: GFLOPs: 50.1104. Time: 1413.8485 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #55: GFLOPs: 9.6638. Time: 7331.3455 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #56: GFLOPs: 37.8752. Time: 1870.5787 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #57: GFLOPs: 4.1712. Time: 16985.2500 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #58: GFLOPs: 53.3212. Time: 1328.7118 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #59: GFLOPs: 61.5309. Time: 1151.4301 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #60: GFLOPs: 56.6170. Time: 1251.3645 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #61: GFLOPs: 53.6192. Time: 1321.3266 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #62: GFLOPs: 37.4426. Time: 1892.1896 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #63: GFLOPs: 53.5895. Time: 1322.0605 us. Best GFLOPs: 184.2574
2024-04-29 11:02:58 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #64: GFLOPs: 105.0088. Time: 674.6910 us. Best GFLOPs: 184.2574
2024-04-29 12:34:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:34:26 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 12:34:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 12:34:28 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 12:34:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 12:34:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 12:34:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 12:34:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x776d918)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8f48b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x88dfcf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8003a08)]: 0 failure(s)
2024-04-29 12:34:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8219  0.7849  0.7848  0.7665  0.7469  0.7423  0.7392  0.7172  0.7165  0.7100  0.7010  0.7010  0.6997  0.6958  0.6942  0.6923
[17 : 32]:	0.6878  0.6874  0.6809  0.6779  0.6761  0.6729  0.6695  0.6693  0.6676  0.6673  0.6662  0.6651  0.6643  0.6639  0.6635  0.6615
[33 : 48]:	0.6613  0.6608  0.6586  0.6570  0.6570  0.6560  0.6559  0.6545  0.6544  0.6533  0.6522  0.6516  0.6513  0.6508  0.6504  0.6488
[49 : 64]:	0.6486  0.6485  0.6484  0.6483  0.6457  0.6418  0.6403  0.6388  0.6380  0.6361  0.6359  0.6347  0.6333  0.6333  0.6317  0.6299
2024-04-29 12:34:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:34:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #65: GFLOPs: 160.1680. Time: 442.3389 us. Best GFLOPs: 184.2574
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #66: GFLOPs: 178.0420. Time: 397.9315 us. Best GFLOPs: 184.2574
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #67: GFLOPs: 200.5123. Time: 353.3375 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #68: GFLOPs: 177.4449. Time: 399.2704 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #69: GFLOPs: 167.1629. Time: 423.8292 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #70: GFLOPs: 169.5561. Time: 417.8470 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #71: GFLOPs: 78.3612. Time: 904.1276 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #72: GFLOPs: 157.5966. Time: 449.5562 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #73: GFLOPs: 82.6769. Time: 856.9324 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #74: GFLOPs: 181.7212. Time: 389.8749 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #75: GFLOPs: 169.3438. Time: 418.3707 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #76: GFLOPs: 184.7343. Time: 383.5157 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #77: GFLOPs: 183.0757. Time: 386.9903 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #78: GFLOPs: 165.9636. Time: 426.8919 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #79: GFLOPs: 123.4396. Time: 573.9529 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #80: GFLOPs: 178.1126. Time: 397.7736 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #81: GFLOPs: 171.3773. Time: 413.4067 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #82: GFLOPs: 108.2721. Time: 654.3559 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #83: GFLOPs: 169.7270. Time: 417.4263 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #84: GFLOPs: 198.0412. Time: 357.7463 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #85: GFLOPs: 100.9067. Time: 702.1190 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #86: GFLOPs: 161.2906. Time: 439.2601 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #87: GFLOPs: 144.2931. Time: 491.0040 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #88: GFLOPs: 69.0373. Time: 1026.2353 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #89: GFLOPs: 161.2130. Time: 439.4714 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #90: GFLOPs: 108.9018. Time: 650.5725 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #91: GFLOPs: 174.1494. Time: 406.8260 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #92: GFLOPs: 197.0146. Time: 359.6105 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #93: GFLOPs: 152.1601. Time: 465.6182 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #94: GFLOPs: 170.9230. Time: 414.5055 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #95: GFLOPs: 83.9388. Time: 844.0499 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #96: GFLOPs: 165.5442. Time: 427.9735 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #97: GFLOPs: 164.5771. Time: 430.4883 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #98: GFLOPs: 126.2466. Time: 561.1915 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #99: GFLOPs: 111.3930. Time: 636.0229 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #100: GFLOPs: 133.9014. Time: 529.1095 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #101: GFLOPs: 193.6843. Time: 365.7937 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #102: GFLOPs: 135.2262. Time: 523.9257 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #103: GFLOPs: 169.4164. Time: 418.1916 us. Best GFLOPs: 200.5123
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #104: GFLOPs: 225.0498. Time: 314.8126 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #105: GFLOPs: 175.1319. Time: 404.5437 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #106: GFLOPs: 102.0895. Time: 693.9844 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #107: GFLOPs: 184.4184. Time: 384.1726 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #108: GFLOPs: 150.8582. Time: 469.6365 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #109: GFLOPs: 137.7350. Time: 514.3828 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #110: GFLOPs: 120.1127. Time: 589.8502 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #111: GFLOPs: 87.0494. Time: 813.8883 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #112: GFLOPs: 113.7573. Time: 622.8042 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #113: GFLOPs: 95.1966. Time: 744.2338 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #114: GFLOPs: 174.5521. Time: 405.8875 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #115: GFLOPs: 30.4245. Time: 2328.6643 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #116: GFLOPs: 160.2849. Time: 442.0162 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #117: GFLOPs: 93.0658. Time: 761.2732 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #118: GFLOPs: 127.0601. Time: 557.5986 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #119: GFLOPs: 162.6395. Time: 435.6169 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #120: GFLOPs: 91.9691. Time: 770.3513 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #121: GFLOPs: 189.9240. Time: 373.0361 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #122: GFLOPs: 73.4739. Time: 964.2676 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #123: GFLOPs: 58.2907. Time: 1215.4347 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #124: GFLOPs: 72.6787. Time: 974.8182 us. Best GFLOPs: 225.0498
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #125: GFLOPs: 254.0805. Time: 278.8427 us. Best GFLOPs: 254.0805
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #126: GFLOPs: 44.2600. Time: 1600.7337 us. Best GFLOPs: 254.0805
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #127: GFLOPs: 169.7357. Time: 417.4049 us. Best GFLOPs: 254.0805
2024-04-29 12:36:25 [INFO] [task_scheduler.cc:131] [Task #70: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_68] Trial #128: GFLOPs: 75.3164. Time: 940.6785 us. Best GFLOPs: 254.0805
