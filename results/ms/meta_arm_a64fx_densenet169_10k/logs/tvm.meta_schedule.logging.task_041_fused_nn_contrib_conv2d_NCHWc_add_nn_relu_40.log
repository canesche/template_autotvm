2024-04-29 08:21:29 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40"
2024-04-29 08:21:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(992), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:21:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:21:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(496), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(992), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[496, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:21:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(496), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(992), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[496, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:21:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(496), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(992), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[496, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:27:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:27:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:27:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 09:27:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:27:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 09:27:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 09:27:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 09:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 09:27:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9990  0.9983  0.9978  0.9977  0.9975  0.9974  0.9955  0.9950  0.9950  0.9938  0.9931  0.9927  0.9925  0.9924  0.9918
[17 : 32]:	0.9911  0.9908  0.9901  0.9900  0.9889  0.9885  0.9884  0.9872  0.9872  0.9869  0.9866  0.9865  0.9853  0.9852  0.9845  0.9843
[33 : 48]:	0.9842  0.9837  0.9834  0.9829  0.9826  0.9823  0.9821  0.9817  0.9815  0.9799  0.9795  0.9795  0.9794  0.9794  0.9791  0.9785
[49 : 64]:	0.9775  0.9774  0.9770  0.9766  0.9763  0.9759  0.9758  0.9755  0.9754  0.9753  0.9751  0.9748  0.9747  0.9742  0.9722  0.9714
2024-04-29 09:27:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:27:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #1: GFLOPs: 59.9448. Time: 831.1777 us. Best GFLOPs: 59.9448
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #2: GFLOPs: 8.0441. Time: 6193.9364 us. Best GFLOPs: 59.9448
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #3: GFLOPs: 52.2419. Time: 953.7312 us. Best GFLOPs: 59.9448
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #4: GFLOPs: 2.3211. Time: 21466.1916 us. Best GFLOPs: 59.9448
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #5: GFLOPs: 33.5809. Time: 1483.7245 us. Best GFLOPs: 59.9448
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #6: GFLOPs: 94.1953. Time: 528.9518 us. Best GFLOPs: 94.1953
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #7: GFLOPs: 33.2477. Time: 1498.5951 us. Best GFLOPs: 94.1953
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #8: GFLOPs: 102.9222. Time: 484.1012 us. Best GFLOPs: 102.9222
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #9: GFLOPs: 58.4999. Time: 851.7071 us. Best GFLOPs: 102.9222
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #10: GFLOPs: 104.2775. Time: 477.8095 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #11: GFLOPs: 1.0305. Time: 48350.8693 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #12: GFLOPs: 51.6345. Time: 964.9507 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #13: GFLOPs: 58.1462. Time: 856.8880 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #14: GFLOPs: 62.5364. Time: 796.7329 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #15: GFLOPs: 11.8646. Time: 4199.4386 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #16: GFLOPs: 59.7614. Time: 833.7288 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #17: GFLOPs: 6.7233. Time: 7410.8024 us. Best GFLOPs: 104.2775
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #18: GFLOPs: 150.9566. Time: 330.0602 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #19: GFLOPs: 3.7738. Time: 13202.9665 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #20: GFLOPs: 53.9296. Time: 923.8855 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #21: GFLOPs: 36.8285. Time: 1352.8854 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #22: GFLOPs: 40.8390. Time: 1220.0283 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #23: GFLOPs: 93.3359. Time: 533.8221 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #24: GFLOPs: 2.5365. Time: 19643.2708 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #25: GFLOPs: 29.3087. Time: 1700.0009 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #26: GFLOPs: 54.9083. Time: 907.4183 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #27: GFLOPs: 70.1269. Time: 710.4944 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #28: GFLOPs: 38.1672. Time: 1305.4341 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #29: GFLOPs: 11.0772. Time: 4497.9683 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #30: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(31), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(992), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[31, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #31: GFLOPs: 105.1169. Time: 473.9938 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #32: GFLOPs: 38.8077. Time: 1283.8876 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #33: GFLOPs: 46.9979. Time: 1060.1488 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #34: GFLOPs: 107.2225. Time: 464.6857 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #35: GFLOPs: 102.3629. Time: 486.7465 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #36: GFLOPs: 46.9738. Time: 1060.6927 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #37: GFLOPs: 4.0044. Time: 12442.6468 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #38: GFLOPs: 1.5097. Time: 33002.7717 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #39: GFLOPs: 22.3691. Time: 2227.3947 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #40: GFLOPs: 8.4664. Time: 5884.9770 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #41: GFLOPs: 52.6975. Time: 945.4856 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #42: GFLOPs: 10.0472. Time: 4959.0837 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #43: GFLOPs: 14.2841. Time: 3488.1259 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #44: GFLOPs: 72.4818. Time: 687.4107 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #45: GFLOPs: 0.4433. Time: 112394.9780 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #46: GFLOPs: 97.2719. Time: 512.2218 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #47: GFLOPs: 31.3883. Time: 1587.3654 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #48: GFLOPs: 5.8109. Time: 8574.3089 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #49: GFLOPs: 0.0816. Time: 610943.0987 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #50: GFLOPs: 6.8447. Time: 7279.3706 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #51: GFLOPs: 1.4828. Time: 33601.7820 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #52: GFLOPs: 4.1496. Time: 12007.0861 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #53: GFLOPs: 4.0055. Time: 12438.9465 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #54: GFLOPs: 78.1877. Time: 637.2452 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #55: GFLOPs: 6.9296. Time: 7190.1154 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(992), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(992), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[992, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #57: GFLOPs: 76.2195. Time: 653.7011 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #58: GFLOPs: 8.6465. Time: 5762.4280 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #59: GFLOPs: 60.6768. Time: 821.1502 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #60: GFLOPs: 4.9809. Time: 10003.2209 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #61: GFLOPs: 3.1987. Time: 15576.6677 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #62: GFLOPs: 67.4358. Time: 738.8474 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #63: GFLOPs: 35.8611. Time: 1389.3806 us. Best GFLOPs: 150.9566
2024-04-29 10:59:10 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #64: GFLOPs: 36.0525. Time: 1382.0060 us. Best GFLOPs: 150.9566
2024-04-29 12:54:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:54:39 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 12:54:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 12:54:41 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 12:54:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 12:54:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 12:54:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 12:55:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd8dcbd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8db3188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7155a28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7d98948)]: 0 failure(s)
2024-04-29 12:55:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8960  0.8461  0.8157  0.8140  0.8044  0.7803  0.7533  0.7381  0.7338  0.7293  0.7246  0.7167  0.7167  0.7053  0.6975  0.6958
[17 : 32]:	0.6954  0.6937  0.6896  0.6894  0.6871  0.6867  0.6837  0.6837  0.6762  0.6757  0.6743  0.6738  0.6738  0.6727  0.6727  0.6725
[33 : 48]:	0.6695  0.6685  0.6668  0.6652  0.6650  0.6642  0.6637  0.6595  0.6588  0.6588  0.6567  0.6567  0.6547  0.6545  0.6533  0.6527
[49 : 64]:	0.6519  0.6511  0.6509  0.6496  0.6491  0.6478  0.6473  0.6451  0.6439  0.6415  0.6407  0.6399  0.6394  0.6389  0.6382  0.6374
2024-04-29 12:55:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:55:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #65: GFLOPs: 140.4324. Time: 354.7954 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #66: GFLOPs: 110.5774. Time: 450.5871 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #67: GFLOPs: 148.4602. Time: 335.6102 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #68: GFLOPs: 49.0468. Time: 1015.8623 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #69: GFLOPs: 80.0345. Time: 622.5408 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #70: GFLOPs: 67.1200. Time: 742.3236 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #71: GFLOPs: 95.9673. Time: 519.1850 us. Best GFLOPs: 150.9566
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #72: GFLOPs: 202.3490. Time: 246.2319 us. Best GFLOPs: 202.3490
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #73: GFLOPs: 130.4453. Time: 381.9590 us. Best GFLOPs: 202.3490
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #74: GFLOPs: 119.6333. Time: 416.4790 us. Best GFLOPs: 202.3490
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #75: GFLOPs: 146.3123. Time: 340.5372 us. Best GFLOPs: 202.3490
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #76: GFLOPs: 238.4622. Time: 208.9420 us. Best GFLOPs: 238.4622
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #77: GFLOPs: 241.6304. Time: 206.2024 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #78: GFLOPs: 101.7856. Time: 489.5069 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #79: GFLOPs: 122.6105. Time: 406.3661 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #80: GFLOPs: 141.0832. Time: 353.1587 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #81: GFLOPs: 134.6571. Time: 370.0121 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #82: GFLOPs: 140.9205. Time: 353.5664 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #83: GFLOPs: 220.8756. Time: 225.5784 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #84: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(31), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(992), ic_0 * T.int64(31) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 31])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #85: GFLOPs: 157.7261. Time: 315.8942 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #86: GFLOPs: 76.6769. Time: 649.8017 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #87: GFLOPs: 138.0751. Time: 360.8528 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #88: GFLOPs: 151.8894. Time: 328.0333 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #89: GFLOPs: 154.7657. Time: 321.9368 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #90: GFLOPs: 91.6788. Time: 543.4710 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #91: GFLOPs: 105.2959. Time: 473.1882 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #92: GFLOPs: 163.7213. Time: 304.3267 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #93: GFLOPs: 137.0724. Time: 363.4923 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #94: GFLOPs: 33.7950. Time: 1474.3220 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #95: GFLOPs: 60.5589. Time: 822.7486 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #96: GFLOPs: 156.5385. Time: 318.2909 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #97: GFLOPs: 59.4713. Time: 837.7951 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #98: GFLOPs: 105.4802. Time: 472.3613 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #99: GFLOPs: 127.3372. Time: 391.2820 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #100: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(248), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(248), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(31), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(992), ic_0 * T.int64(31) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 31])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #101: GFLOPs: 62.1915. Time: 801.1502 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #102: GFLOPs: 188.6286. Time: 264.1421 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #103: GFLOPs: 104.8751. Time: 475.0868 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #104: GFLOPs: 206.4041. Time: 241.3943 us. Best GFLOPs: 241.6304
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #105: GFLOPs: 307.9899. Time: 161.7740 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #106: GFLOPs: 46.6229. Time: 1068.6752 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #107: GFLOPs: 100.3873. Time: 496.3254 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #108: GFLOPs: 146.3736. Time: 340.3946 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #109: GFLOPs: 137.3069. Time: 362.8716 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #110: GFLOPs: 139.3508. Time: 357.5491 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #111: GFLOPs: 57.9953. Time: 859.1174 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #112: GFLOPs: 120.1822. Time: 414.5769 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #113: GFLOPs: 181.5140. Time: 274.4955 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #114: GFLOPs: 36.9503. Time: 1348.4282 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #115: GFLOPs: 123.6201. Time: 403.0474 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #116: GFLOPs: 154.1140. Time: 323.2982 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #117: GFLOPs: 90.5423. Time: 550.2926 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #118: GFLOPs: 121.8143. Time: 409.0222 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #119: GFLOPs: 142.2585. Time: 350.2410 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #120: GFLOPs: 146.8904. Time: 339.1969 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #121: GFLOPs: 270.5580. Time: 184.1556 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #122: GFLOPs: 120.9091. Time: 412.0845 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #123: GFLOPs: 188.1250. Time: 264.8493 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #124: GFLOPs: 117.9299. Time: 422.4947 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #125: GFLOPs: 106.8813. Time: 466.1692 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #126: GFLOPs: 112.8493. Time: 441.5159 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #127: GFLOPs: 73.7035. Time: 676.0166 us. Best GFLOPs: 307.9899
2024-04-29 12:56:49 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #128: GFLOPs: 5.8606. Time: 8501.6655 us. Best GFLOPs: 307.9899
