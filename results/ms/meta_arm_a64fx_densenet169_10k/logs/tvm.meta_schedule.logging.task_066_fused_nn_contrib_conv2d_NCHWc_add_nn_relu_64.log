2024-04-29 08:23:08 [INFO] [task_scheduler.cc:160] Initializing Task #66: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64"
2024-04-29 08:23:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:23:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:23:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(60) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:23:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:23:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(28), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 10:05:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:05:57 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:06:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 10:06:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:06:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 10:06:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 10:06:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 10:06:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 10:06:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9979  0.9979  0.9978  0.9976  0.9974  0.9972  0.9972  0.9970  0.9962  0.9961  0.9957  0.9956  0.9954  0.9940  0.9932  0.9931
[17 : 32]:	0.9919  0.9918  0.9908  0.9908  0.9905  0.9903  0.9902  0.9892  0.9883  0.9882  0.9880  0.9880  0.9875  0.9862  0.9843  0.9840
[33 : 48]:	0.9832  0.9829  0.9825  0.9811  0.9810  0.9790  0.9775  0.9769  0.9764  0.9764  0.9762  0.9754  0.9744  0.9733  0.9731  0.9730
[49 : 64]:	0.9726  0.9725  0.9723  0.9721  0.9720  0.9719  0.9717  0.9714  0.9713  0.9704  0.9697  0.9689  0.9684  0.9684  0.9684  0.9683
2024-04-29 10:06:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:06:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #1: GFLOPs: 57.5716. Time: 1676.8444 us. Best GFLOPs: 57.5716
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(240), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[240, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #3: GFLOPs: 66.8163. Time: 1444.8372 us. Best GFLOPs: 66.8163
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #4: GFLOPs: 82.6642. Time: 1167.8403 us. Best GFLOPs: 82.6642
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #5: GFLOPs: 55.0711. Time: 1752.9823 us. Best GFLOPs: 82.6642
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #6: GFLOPs: 29.0603. Time: 3322.0097 us. Best GFLOPs: 82.6642
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #7: GFLOPs: 109.3046. Time: 883.2071 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #8: GFLOPs: 14.3117. Time: 6745.4267 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #9: GFLOPs: 9.6120. Time: 10043.5234 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #10: GFLOPs: 14.1868. Time: 6804.8099 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #11: GFLOPs: 62.0765. Time: 1555.1569 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #12: GFLOPs: 53.3478. Time: 1809.6079 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #13: GFLOPs: 40.0220. Time: 2412.1384 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #14: GFLOPs: 16.8889. Time: 5716.1103 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #15: GFLOPs: 10.1589. Time: 9502.8902 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #16: GFLOPs: 15.1293. Time: 6380.8981 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #17: GFLOPs: 58.1540. Time: 1660.0508 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #18: GFLOPs: 4.9267. Time: 19594.9803 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #19: GFLOPs: 12.0517. Time: 8010.3491 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #20: GFLOPs: 86.7354. Time: 1113.0248 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #21: GFLOPs: 88.7711. Time: 1087.5007 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #22: GFLOPs: 2.2784. Time: 42370.6200 us. Best GFLOPs: 109.3046
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #23: GFLOPs: 155.9628. Time: 618.9848 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #24: GFLOPs: 35.5619. Time: 2714.6634 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #25: GFLOPs: 54.2698. Time: 1778.8660 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #26: GFLOPs: 67.5661. Time: 1428.8029 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #27: GFLOPs: 10.7709. Time: 8962.8867 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #28: GFLOPs: 5.2700. Time: 18318.3835 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #29: GFLOPs: 11.6286. Time: 8301.8602 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #30: GFLOPs: 60.8576. Time: 1586.3036 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #31: GFLOPs: 37.8618. Time: 2549.7643 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #32: GFLOPs: 37.1625. Time: 2597.7403 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #33: GFLOPs: 94.7687. Time: 1018.6762 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #34: GFLOPs: 54.5108. Time: 1771.0003 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #35: GFLOPs: 85.7246. Time: 1126.1487 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #36: GFLOPs: 51.3545. Time: 1879.8462 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #37: GFLOPs: 91.3079. Time: 1057.2871 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #38: GFLOPs: 26.5789. Time: 3632.1584 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #39: GFLOPs: 3.8487. Time: 25083.3008 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #40: GFLOPs: 5.9991. Time: 16092.2151 us. Best GFLOPs: 155.9628
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[10, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #42: GFLOPs: 161.9484. Time: 596.1074 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #43: GFLOPs: 26.3404. Time: 3665.0337 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #44: GFLOPs: 97.2771. Time: 992.4088 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #45: GFLOPs: 64.5704. Time: 1495.0906 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #46: GFLOPs: 110.7913. Time: 871.3553 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #47: GFLOPs: 34.1839. Time: 2824.0974 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #48: GFLOPs: 55.8593. Time: 1728.2449 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #49: GFLOPs: 71.5238. Time: 1349.7405 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #50: GFLOPs: 51.0066. Time: 1892.6681 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #51: GFLOPs: 111.1582. Time: 868.4792 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #52: GFLOPs: 135.4664. Time: 712.6387 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #53: GFLOPs: 74.6641. Time: 1292.9725 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #54: GFLOPs: 102.3389. Time: 943.3224 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #55: GFLOPs: 56.7171. Time: 1702.1089 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #56: GFLOPs: 25.7380. Time: 3750.8214 us. Best GFLOPs: 161.9484
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #57: GFLOPs: 234.8899. Time: 410.9952 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #58: GFLOPs: 57.3062. Time: 1684.6103 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #59: GFLOPs: 12.9976. Time: 7427.4112 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #60: GFLOPs: 71.9232. Time: 1342.2460 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #61: GFLOPs: 93.5721. Time: 1031.7032 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #62: GFLOPs: 43.4434. Time: 2222.1705 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #63: GFLOPs: 78.7258. Time: 1226.2637 us. Best GFLOPs: 234.8899
2024-04-29 11:02:25 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #64: GFLOPs: 90.9181. Time: 1061.8192 us. Best GFLOPs: 234.8899
2024-04-29 12:29:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:30:00 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 12:30:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 12:30:02 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 12:30:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 12:30:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 12:30:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 12:30:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf895fb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xef17b98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xef345a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7f55708)]: 0 failure(s)
2024-04-29 12:30:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9652  0.7929  0.7929  0.7786  0.7781  0.7773  0.7262  0.7110  0.7058  0.7023  0.6991  0.6945  0.6886  0.6878  0.6846  0.6840
[17 : 32]:	0.6834  0.6813  0.6712  0.6669  0.6604  0.6601  0.6571  0.6555  0.6554  0.6527  0.6519  0.6505  0.6503  0.6481  0.6481  0.6479
[33 : 48]:	0.6437  0.6415  0.6409  0.6372  0.6359  0.6359  0.6325  0.6311  0.6306  0.6306  0.6303  0.6302  0.6263  0.6261  0.6257  0.6247
[49 : 64]:	0.6190  0.6184  0.6154  0.6151  0.6149  0.6130  0.6122  0.6122  0.6121  0.6116  0.6116  0.6113  0.6018  0.6004  0.5998  0.5986
2024-04-29 12:30:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:30:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #65: GFLOPs: 235.3177. Time: 410.2481 us. Best GFLOPs: 235.3177
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #66: GFLOPs: 107.9348. Time: 894.4158 us. Best GFLOPs: 235.3177
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #67: GFLOPs: 136.7382. Time: 706.0105 us. Best GFLOPs: 235.3177
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #68: GFLOPs: 102.6180. Time: 940.7571 us. Best GFLOPs: 235.3177
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #69: GFLOPs: 215.5880. Time: 447.7921 us. Best GFLOPs: 235.3177
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #70: GFLOPs: 106.2216. Time: 908.8420 us. Best GFLOPs: 235.3177
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #71: GFLOPs: 295.2258. Time: 326.9993 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #72: GFLOPs: 290.0162. Time: 332.8732 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #73: GFLOPs: 222.5324. Time: 433.8183 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #74: GFLOPs: 99.7736. Time: 967.5768 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #75: GFLOPs: 117.8671. Time: 819.0466 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #76: GFLOPs: 106.1503. Time: 909.4518 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #77: GFLOPs: 84.7297. Time: 1139.3712 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #78: GFLOPs: 233.3676. Time: 413.6762 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #79: GFLOPs: 248.3240. Time: 388.7608 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #80: GFLOPs: 149.3478. Time: 646.4014 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #81: GFLOPs: 170.8605. Time: 565.0143 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #82: GFLOPs: 188.0887. Time: 513.2611 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #83: GFLOPs: 191.1429. Time: 505.0599 us. Best GFLOPs: 295.2258
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #84: GFLOPs: 433.2654. Time: 222.8164 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #85: GFLOPs: 112.1752. Time: 860.6059 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #86: GFLOPs: 83.3869. Time: 1157.7191 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #87: GFLOPs: 128.9489. Time: 748.6579 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(8) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(8) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(8) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b67)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b107)
b130 = sch.decompose_reduction(block=b107, loop=l114)
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #89: GFLOPs: 104.7524. Time: 921.5890 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #90: GFLOPs: 149.7900. Time: 644.4932 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #91: GFLOPs: 158.9863. Time: 607.2135 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #92: GFLOPs: 171.4785. Time: 562.9781 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #93: GFLOPs: 129.5750. Time: 745.0405 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #94: GFLOPs: 164.2494. Time: 587.7564 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #95: GFLOPs: 121.7265. Time: 793.0783 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #96: GFLOPs: 157.4196. Time: 613.2567 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #97: GFLOPs: 97.2321. Time: 992.8677 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #98: GFLOPs: 246.2435. Time: 392.0454 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #99: GFLOPs: 146.0563. Time: 660.9684 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #100: GFLOPs: 243.5670. Time: 396.3535 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #101: GFLOPs: 275.9012. Time: 349.9029 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #102: GFLOPs: 277.6462. Time: 347.7037 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #103: GFLOPs: 199.7301. Time: 483.3454 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #104: GFLOPs: 152.7344. Time: 632.0688 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #105: GFLOPs: 143.9550. Time: 670.6165 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #106: GFLOPs: 156.9055. Time: 615.2661 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #107: GFLOPs: 152.5415. Time: 632.8681 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #108: GFLOPs: 118.4756. Time: 814.8397 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #109: GFLOPs: 100.4930. Time: 960.6498 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #110: GFLOPs: 134.9664. Time: 715.2787 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #111: GFLOPs: 97.3320. Time: 991.8486 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #112: GFLOPs: 130.0814. Time: 742.1400 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #113: GFLOPs: 132.1754. Time: 730.3827 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #114: GFLOPs: 83.7647. Time: 1152.4977 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #115: GFLOPs: 248.6138. Time: 388.3076 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #116: GFLOPs: 171.7841. Time: 561.9766 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #117: GFLOPs: 126.4222. Time: 763.6207 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #118: GFLOPs: 142.5057. Time: 677.4369 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #119: GFLOPs: 59.3681. Time: 1626.1025 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #120: GFLOPs: 59.2795. Time: 1628.5343 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #121: GFLOPs: 163.2639. Time: 591.3041 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #122: GFLOPs: 91.6512. Time: 1053.3260 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #123: GFLOPs: 93.9174. Time: 1027.9102 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #124: GFLOPs: 255.6553. Time: 377.6125 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #125: GFLOPs: 86.0987. Time: 1121.2555 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #126: GFLOPs: 83.3044. Time: 1158.8655 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #127: GFLOPs: 5.4736. Time: 17637.2112 us. Best GFLOPs: 433.2654
2024-04-29 12:32:01 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #128: GFLOPs: 14.5620. Time: 6629.4848 us. Best GFLOPs: 433.2654
