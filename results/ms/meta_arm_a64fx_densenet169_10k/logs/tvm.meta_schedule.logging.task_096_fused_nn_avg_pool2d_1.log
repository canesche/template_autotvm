2024-04-29 08:24:47 [INFO] [task_scheduler.cc:160] Initializing Task #96: "fused_nn_avg_pool2d_1"
2024-04-29 08:24:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 08:24:47 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2), T.int64(2)):
                with T.block("pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2)):
                with T.block("pool_sum"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4), T.int64(2)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:47 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(64), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2 + ax2_1)
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax3, ax4 in T.grid(T.int64(14), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 10:47:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:47:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:47:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6affa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc7d37b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfa42f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe54ccf8)]: 0 failure(s)
2024-04-29 10:47:16 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:47:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6affa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc7d37b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfa42f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe54ccf8)]: 0 failure(s)
2024-04-29 10:47:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6affa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc7d37b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfa42f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe54ccf8)]: 0 failure(s)
2024-04-29 10:47:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6affa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc7d37b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfa42f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe54ccf8)]: 0 failure(s)
2024-04-29 10:47:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6affa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc7d37b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfa42f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe54ccf8)]: 0 failure(s)
2024-04-29 10:47:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9971  0.9955  0.9950  0.9947  0.9921  0.9914  0.9905  0.9884  0.9866  0.9852  0.9851  0.9848  0.9807  0.9785  0.9766  0.9749
[17 : 32]:	0.9745  0.9731  0.9721  0.9701  0.9683  0.9679  0.9676  0.9674  0.9654  0.9649  0.9526  0.9515  0.9481  0.9469  0.9465  0.9465
[33 : 48]:	0.9463  0.9404  0.9403  0.9401  0.9390  0.9331  0.9324  0.9276  0.9247  0.9239  0.9237  0.9198  0.9175  0.9167  0.9161  0.9157
[49 : 64]:	0.9128  0.9107  0.9102  0.9066  0.9043  0.9021  0.8975  0.8967  0.8957  0.8887  0.8867  0.8859  0.8822  0.8812  0.8810  0.8747
2024-04-29 10:47:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:47:32 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #1: GFLOPs: 68.7618. Time: 18.2427 us. Best GFLOPs: 68.7618
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #2: GFLOPs: 110.4221. Time: 11.3600 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #3: GFLOPs: 25.6404. Time: 48.9228 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #4: GFLOPs: 39.9110. Time: 31.4299 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #5: GFLOPs: 47.9164. Time: 26.1789 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #6: GFLOPs: 52.5216. Time: 23.8835 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #7: GFLOPs: 76.7386. Time: 16.3464 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #8: GFLOPs: 43.5821. Time: 28.7824 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #9: GFLOPs: 81.4787. Time: 15.3954 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #10: GFLOPs: 62.1171. Time: 20.1941 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #11: GFLOPs: 39.8815. Time: 31.4532 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #12: GFLOPs: 100.6993. Time: 12.4569 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #13: GFLOPs: 94.8174. Time: 13.2296 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #14: GFLOPs: 32.0970. Time: 39.0815 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #15: GFLOPs: 59.2986. Time: 21.1539 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #16: GFLOPs: 25.2900. Time: 49.6006 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #17: GFLOPs: 63.0361. Time: 19.8997 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #18: GFLOPs: 108.9737. Time: 11.5110 us. Best GFLOPs: 110.4221
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #19: GFLOPs: 118.7776. Time: 10.5609 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #20: GFLOPs: 35.7378. Time: 35.1001 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #21: GFLOPs: 108.2909. Time: 11.5836 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #22: GFLOPs: 24.5822. Time: 51.0287 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #23: GFLOPs: 98.2924. Time: 12.7619 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #24: GFLOPs: 48.3209. Time: 25.9598 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #25: GFLOPs: 60.3405. Time: 20.7887 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #26: GFLOPs: 60.5433. Time: 20.7190 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #27: GFLOPs: 47.8530. Time: 26.2136 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #28: GFLOPs: 43.4115. Time: 28.8956 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #29: GFLOPs: 19.2434. Time: 65.1860 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #30: GFLOPs: 55.8983. Time: 22.4407 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #31: GFLOPs: 27.5588. Time: 45.5173 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #32: GFLOPs: 56.7748. Time: 22.0943 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #33: GFLOPs: 26.1058. Time: 48.0507 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #34: GFLOPs: 44.3768. Time: 28.2670 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #35: GFLOPs: 114.5184. Time: 10.9537 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #36: GFLOPs: 82.9677. Time: 15.1191 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #37: GFLOPs: 27.0155. Time: 46.4327 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #38: GFLOPs: 31.5724. Time: 39.7309 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #39: GFLOPs: 114.9695. Time: 10.9107 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #40: GFLOPs: 40.5912. Time: 30.9033 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #41: GFLOPs: 38.4002. Time: 32.6665 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #42: GFLOPs: 47.2355. Time: 26.5563 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #43: GFLOPs: 99.7844. Time: 12.5711 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #44: GFLOPs: 107.3458. Time: 11.6856 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #45: GFLOPs: 41.7224. Time: 30.0654 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #46: GFLOPs: 79.9162. Time: 15.6965 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #47: GFLOPs: 98.0667. Time: 12.7913 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #48: GFLOPs: 75.5283. Time: 16.6083 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #49: GFLOPs: 107.5487. Time: 11.6635 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #50: GFLOPs: 24.2597. Time: 51.7072 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #51: GFLOPs: 45.2832. Time: 27.7012 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #52: GFLOPs: 34.5558. Time: 36.3007 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #53: GFLOPs: 108.4686. Time: 11.5646 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #54: GFLOPs: 83.2763. Time: 15.0631 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #55: GFLOPs: 80.8692. Time: 15.5115 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:121] [Task #96: fused_nn_avg_pool2d_1] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(14), T.int64(14), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(2)):
                    with T.block("pool_sum_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(2)):
                        with T.block("pool_sum_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
        for ax0_ax1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(14)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(56)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(14), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(14), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(14)):
                for ax4_ax5_fused in T.vectorized(T.int64(56)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(14), ax3)
                        v_ax3 = T.axis.spatial(T.int64(14), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax2 in range(T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30 = sch.get_loops(block=b21)
l31 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l31)
l32 = sch.fuse(l30, preserve_unit_iters=True)
sch.vectorize(loop=l32)
sch.annotate(block_or_loop=l31, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l31, ann_key="pragma_unroll_explicit", ann_val=1)
l33, l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l33, l34, preserve_unit_iters=True)
sch.parallel(loop=l41)
l42 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l42)
sch.annotate(block_or_loop=l41, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l41, ann_key="pragma_unroll_explicit", ann_val=1)
l43, l44, l45, l46 = sch.get_loops(block=b23)
l47 = sch.fuse(l45, l46, preserve_unit_iters=True)
sch.vectorize(loop=l47)
b48 = sch.get_block(name="pool_sum_rf", func_name="main")
l49, l50, l51, l52, l53, l54 = sch.get_loops(block=b48)
b55 = sch.decompose_reduction(block=b48, loop=l53)
b56 = sch.get_block(name="pool_sum", func_name="main")
l57, l58, l59, l60, l61, l62 = sch.get_loops(block=b56)
b63 = sch.decompose_reduction(block=b56, loop=l58)
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #57: GFLOPs: 62.8399. Time: 19.9618 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #58: GFLOPs: 32.7023. Time: 38.3581 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #59: GFLOPs: 66.5707. Time: 18.8431 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #60: GFLOPs: 60.5765. Time: 20.7077 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #61: GFLOPs: 51.8494. Time: 24.1931 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #62: GFLOPs: 75.1974. Time: 16.6814 us. Best GFLOPs: 118.7776
2024-04-29 11:07:07 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_avg_pool2d_1] Trial #63: GFLOPs: 41.6491. Time: 30.1183 us. Best GFLOPs: 118.7776
