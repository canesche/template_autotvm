2024-04-29 08:23:16 [INFO] [task_scheduler.cc:160] Initializing Task #68: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66"
2024-04-29 08:23:16 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(416), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:23:16 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:23:16 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:23:16 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:23:16 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(28), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 10:09:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:09:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:09:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 10:09:03 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:09:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 10:09:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 10:09:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 10:09:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 10:09:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9996  0.9993  0.9987  0.9982  0.9979  0.9976  0.9964  0.9962  0.9960  0.9959  0.9955  0.9953  0.9953  0.9949  0.9943
[17 : 32]:	0.9936  0.9933  0.9932  0.9925  0.9917  0.9915  0.9913  0.9909  0.9903  0.9901  0.9901  0.9887  0.9885  0.9864  0.9861  0.9860
[33 : 48]:	0.9859  0.9854  0.9848  0.9845  0.9843  0.9840  0.9840  0.9839  0.9831  0.9829  0.9828  0.9820  0.9817  0.9816  0.9808  0.9803
[49 : 64]:	0.9803  0.9803  0.9803  0.9802  0.9785  0.9784  0.9769  0.9758  0.9752  0.9750  0.9747  0.9744  0.9742  0.9730  0.9726  0.9724
2024-04-29 10:09:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:09:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #1: GFLOPs: 85.6702. Time: 976.9278 us. Best GFLOPs: 85.6702
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #2: GFLOPs: 157.1405. Time: 532.6033 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #3: GFLOPs: 2.4324. Time: 34408.3600 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #4: GFLOPs: 42.0771. Time: 1989.0523 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #5: GFLOPs: 71.5239. Time: 1170.1482 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #6: GFLOPs: 100.3639. Time: 833.9014 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #7: GFLOPs: 41.7446. Time: 2004.8958 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #8: GFLOPs: 17.1088. Time: 4891.8417 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #9: GFLOPs: 59.8497. Time: 1398.3954 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #10: GFLOPs: 36.2793. Time: 2306.9255 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #11: GFLOPs: 68.3706. Time: 1224.1156 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #12: GFLOPs: 5.7180. Time: 14636.8917 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #13: GFLOPs: 43.7731. Time: 1911.9861 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #14: GFLOPs: 121.0884. Time: 691.1772 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #15: GFLOPs: 42.3611. Time: 1975.7197 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #16: GFLOPs: 29.3332. Time: 2853.1999 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #17: GFLOPs: 10.1175. Time: 8272.1569 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #18: GFLOPs: 18.2370. Time: 4589.2300 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #19: GFLOPs: 82.5653. Time: 1013.6649 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #20: GFLOPs: 41.4320. Time: 2020.0246 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #21: GFLOPs: 104.0061. Time: 804.6990 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #22: GFLOPs: 6.2155. Time: 13465.3889 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #23: GFLOPs: 14.5865. Time: 5737.7267 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #24: GFLOPs: 51.5962. Time: 1622.0864 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #25: GFLOPs: 58.0869. Time: 1440.8334 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #26: GFLOPs: 28.1766. Time: 2970.3188 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #27: GFLOPs: 41.8917. Time: 1997.8562 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #28: GFLOPs: 135.9306. Time: 615.7080 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #29: GFLOPs: 74.7821. Time: 1119.1662 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #30: GFLOPs: 110.9439. Time: 754.3776 us. Best GFLOPs: 157.1405
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #31: GFLOPs: 171.0334. Time: 489.3406 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #32: GFLOPs: 3.8036. Time: 22003.6784 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #33: GFLOPs: 81.0482. Time: 1032.6394 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #34: GFLOPs: 40.3772. Time: 2072.7911 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #35: GFLOPs: 81.8552. Time: 1022.4583 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #36: GFLOPs: 57.6649. Time: 1451.3786 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #37: GFLOPs: 7.1401. Time: 11721.5744 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #38: GFLOPs: 70.4192. Time: 1188.5052 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #39: GFLOPs: 45.4132. Time: 1842.9359 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:121] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #41: GFLOPs: 163.3662. Time: 512.3065 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #42: GFLOPs: 147.7843. Time: 566.3225 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #43: GFLOPs: 57.2467. Time: 1461.9817 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #44: GFLOPs: 64.3778. Time: 1300.0387 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #45: GFLOPs: 22.6863. Time: 3689.1704 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #46: GFLOPs: 47.6152. Time: 1757.7085 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #47: GFLOPs: 49.6616. Time: 1685.2775 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #48: GFLOPs: 49.9982. Time: 1673.9326 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #49: GFLOPs: 15.1896. Time: 5509.9347 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:121] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=64)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #51: GFLOPs: 52.7690. Time: 1586.0379 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #52: GFLOPs: 4.7486. Time: 17624.7790 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #53: GFLOPs: 65.0763. Time: 1286.0839 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:121] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(13), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[13, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #55: GFLOPs: 159.7681. Time: 523.8441 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #56: GFLOPs: 85.2723. Time: 981.4856 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #57: GFLOPs: 1.2553. Time: 66674.5967 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #58: GFLOPs: 43.8240. Time: 1909.7661 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #59: GFLOPs: 57.0775. Time: 1466.3136 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #60: GFLOPs: 59.8909. Time: 1397.4342 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #61: GFLOPs: 0.8139. Time: 102829.0097 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #62: GFLOPs: 81.0225. Time: 1032.9675 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #63: GFLOPs: 57.9689. Time: 1443.7679 us. Best GFLOPs: 171.0334
2024-04-29 11:02:41 [INFO] [task_scheduler.cc:121] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #64: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(104), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(104), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(104), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(32) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(416), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[104, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 12:16:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:16:19 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 12:16:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 12:16:22 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 12:16:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 12:16:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 12:16:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 12:16:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd432738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8709da8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf675008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xca55f78)]: 0 failure(s)
2024-04-29 12:16:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9369  0.8852  0.8737  0.8737  0.8623  0.8608  0.8521  0.8516  0.8486  0.8364  0.8278  0.8147  0.8147  0.8087  0.8022  0.8011
[17 : 32]:	0.7909  0.7761  0.7756  0.7749  0.7749  0.7713  0.7712  0.7706  0.7699  0.7687  0.7672  0.7630  0.7626  0.7594  0.7590  0.7582
[33 : 48]:	0.7582  0.7538  0.7501  0.7497  0.7473  0.7463  0.7442  0.7433  0.7433  0.7418  0.7403  0.7402  0.7396  0.7382  0.7381  0.7379
[49 : 64]:	0.7379  0.7369  0.7360  0.7258  0.7220  0.7204  0.7190  0.7185  0.7184  0.7176  0.7168  0.7165  0.7159  0.7149  0.7144  0.7144
2024-04-29 12:16:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:16:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #65: GFLOPs: 164.9830. Time: 507.2859 us. Best GFLOPs: 171.0334
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #66: GFLOPs: 98.5906. Time: 848.8999 us. Best GFLOPs: 171.0334
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #67: GFLOPs: 99.8072. Time: 838.5521 us. Best GFLOPs: 171.0334
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #68: GFLOPs: 319.8088. Time: 261.6988 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #69: GFLOPs: 139.3019. Time: 600.8073 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #70: GFLOPs: 211.6870. Time: 395.3647 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #71: GFLOPs: 9.5307. Time: 8781.5024 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #72: GFLOPs: 4.7186. Time: 17736.8837 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #73: GFLOPs: 214.2651. Time: 390.6076 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #74: GFLOPs: 214.9786. Time: 389.3112 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #75: GFLOPs: 171.4915. Time: 488.0334 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #76: GFLOPs: 133.1904. Time: 628.3755 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #77: GFLOPs: 87.2971. Time: 958.7214 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #78: GFLOPs: 138.0549. Time: 606.2339 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #79: GFLOPs: 166.5889. Time: 502.3957 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #80: GFLOPs: 142.9785. Time: 585.3576 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #81: GFLOPs: 214.4025. Time: 390.3572 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #82: GFLOPs: 87.4562. Time: 956.9772 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #83: GFLOPs: 128.4544. Time: 651.5431 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #84: GFLOPs: 119.8482. Time: 698.3297 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #85: GFLOPs: 104.7839. Time: 798.7256 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #86: GFLOPs: 93.4308. Time: 895.7811 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #87: GFLOPs: 143.2469. Time: 584.2608 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #88: GFLOPs: 121.4566. Time: 689.0820 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #89: GFLOPs: 7.8243. Time: 10696.5673 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #90: GFLOPs: 166.7053. Time: 502.0451 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #91: GFLOPs: 125.1512. Time: 668.7395 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #92: GFLOPs: 149.5205. Time: 559.7466 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #93: GFLOPs: 159.1794. Time: 525.7815 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #94: GFLOPs: 50.5241. Time: 1656.5067 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #95: GFLOPs: 108.8098. Time: 769.1733 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #96: GFLOPs: 181.6936. Time: 460.6302 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #97: GFLOPs: 201.9917. Time: 414.3417 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #98: GFLOPs: 113.7452. Time: 735.7985 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #99: GFLOPs: 186.5474. Time: 448.6451 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #100: GFLOPs: 93.9946. Time: 890.4082 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #101: GFLOPs: 102.0410. Time: 820.1956 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #102: GFLOPs: 108.2077. Time: 773.4527 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #103: GFLOPs: 109.8394. Time: 761.9633 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #104: GFLOPs: 140.3258. Time: 596.4232 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #105: GFLOPs: 150.5920. Time: 555.7635 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #106: GFLOPs: 131.8395. Time: 634.8138 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #107: GFLOPs: 152.9224. Time: 547.2945 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #108: GFLOPs: 123.9747. Time: 675.0857 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #109: GFLOPs: 86.3107. Time: 969.6780 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #110: GFLOPs: 108.7169. Time: 769.8302 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #111: GFLOPs: 137.7247. Time: 607.6872 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #112: GFLOPs: 101.4780. Time: 824.7457 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #113: GFLOPs: 104.2686. Time: 802.6732 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #114: GFLOPs: 164.2366. Time: 509.5914 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #115: GFLOPs: 132.4675. Time: 631.8045 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #116: GFLOPs: 137.5969. Time: 608.2517 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #117: GFLOPs: 147.0763. Time: 569.0485 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #118: GFLOPs: 124.5678. Time: 671.8717 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #119: GFLOPs: 164.0108. Time: 510.2931 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #120: GFLOPs: 77.1765. Time: 1084.4441 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #121: GFLOPs: 152.4989. Time: 548.8144 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #122: GFLOPs: 198.5644. Time: 421.4933 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #123: GFLOPs: 134.5852. Time: 621.8632 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #124: GFLOPs: 155.9258. Time: 536.7526 us. Best GFLOPs: 319.8088
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #125: GFLOPs: 366.8264. Time: 228.1558 us. Best GFLOPs: 366.8264
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #126: GFLOPs: 110.6347. Time: 756.4860 us. Best GFLOPs: 366.8264
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #127: GFLOPs: 28.4404. Time: 2942.7680 us. Best GFLOPs: 366.8264
2024-04-29 12:18:12 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_66] Trial #128: GFLOPs: 1.5792. Time: 52997.3457 us. Best GFLOPs: 366.8264
