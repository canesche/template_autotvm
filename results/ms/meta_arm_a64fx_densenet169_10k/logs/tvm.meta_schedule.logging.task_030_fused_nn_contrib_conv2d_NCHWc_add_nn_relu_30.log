2024-04-29 08:20:46 [INFO] [task_scheduler.cc:160] Initializing Task #30: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30"
2024-04-29 08:20:46 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:20:46 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:20:46 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[112, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:20:46 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[112, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:20:46 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[112, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:10:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:10:04 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:10:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaca148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf592be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c8f078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc8e3e28)]: 0 failure(s)
2024-04-29 09:10:07 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:10:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaca148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf592be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c8f078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc8e3e28)]: 0 failure(s)
2024-04-29 09:10:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaca148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf592be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c8f078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc8e3e28)]: 0 failure(s)
2024-04-29 09:10:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaca148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf592be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c8f078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc8e3e28)]: 0 failure(s)
2024-04-29 09:10:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaaca148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf592be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c8f078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc8e3e28)]: 0 failure(s)
2024-04-29 09:10:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9990  0.9989  0.9979  0.9976  0.9959  0.9946  0.9940  0.9939  0.9937  0.9932  0.9923  0.9921  0.9919  0.9915  0.9913
[17 : 32]:	0.9903  0.9900  0.9893  0.9893  0.9891  0.9885  0.9880  0.9878  0.9877  0.9874  0.9873  0.9869  0.9868  0.9865  0.9865  0.9847
[33 : 48]:	0.9845  0.9826  0.9823  0.9821  0.9806  0.9806  0.9796  0.9792  0.9792  0.9784  0.9782  0.9772  0.9762  0.9756  0.9750  0.9747
[49 : 64]:	0.9744  0.9742  0.9738  0.9737  0.9737  0.9730  0.9729  0.9713  0.9708  0.9707  0.9703  0.9691  0.9691  0.9685  0.9685  0.9684
2024-04-29 09:10:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:10:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #1: GFLOPs: 8.7003. Time: 970.3272 us. Best GFLOPs: 8.7003
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #2: GFLOPs: 16.5118. Time: 511.2764 us. Best GFLOPs: 16.5118
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #3: GFLOPs: 16.2601. Time: 519.1913 us. Best GFLOPs: 16.5118
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #4: GFLOPs: 17.2443. Time: 489.5593 us. Best GFLOPs: 17.2443
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #5: GFLOPs: 57.5576. Time: 146.6725 us. Best GFLOPs: 57.5576
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #6: GFLOPs: 18.3486. Time: 460.0966 us. Best GFLOPs: 57.5576
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #7: GFLOPs: 24.3522. Time: 346.6672 us. Best GFLOPs: 57.5576
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #8: GFLOPs: 83.7017. Time: 100.8595 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #9: GFLOPs: 12.4768. Time: 676.6263 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #10: GFLOPs: 12.8614. Time: 656.3910 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #11: GFLOPs: 1.4067. Time: 6001.3519 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #12: GFLOPs: 29.0530. Time: 290.5760 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #13: GFLOPs: 4.8982. Time: 1723.5183 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #14: GFLOPs: 2.9374. Time: 2873.9866 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #15: GFLOPs: 26.6965. Time: 316.2257 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #16: GFLOPs: 33.5683. Time: 251.4907 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #17: GFLOPs: 22.8205. Time: 369.9352 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #18: GFLOPs: 18.4166. Time: 458.3977 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #19: GFLOPs: 15.4441. Time: 546.6229 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #20: GFLOPs: 24.2689. Time: 347.8568 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #21: GFLOPs: 71.3490. Time: 118.3214 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #22: GFLOPs: 3.9160. Time: 2155.7741 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #23: GFLOPs: 43.2096. Time: 195.3760 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #24: GFLOPs: 15.6973. Time: 537.8049 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #25: GFLOPs: 33.7054. Time: 250.4675 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #26: GFLOPs: 26.9202. Time: 313.5974 us. Best GFLOPs: 83.7017
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #27: GFLOPs: 115.3475. Time: 73.1885 us. Best GFLOPs: 115.3475
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #28: GFLOPs: 26.9809. Time: 312.8924 us. Best GFLOPs: 115.3475
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #29: GFLOPs: 55.4324. Time: 152.2957 us. Best GFLOPs: 115.3475
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #30: GFLOPs: 86.8692. Time: 97.1818 us. Best GFLOPs: 115.3475
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #31: GFLOPs: 55.4495. Time: 152.2485 us. Best GFLOPs: 115.3475
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #32: GFLOPs: 13.0950. Time: 644.6822 us. Best GFLOPs: 115.3475
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #33: GFLOPs: 130.9085. Time: 64.4886 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #34: GFLOPs: 58.6416. Time: 143.9612 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #35: GFLOPs: 37.7243. Time: 223.7845 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #36: GFLOPs: 81.8513. Time: 103.1396 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #37: GFLOPs: 53.8584. Time: 156.7466 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #38: GFLOPs: 92.0232. Time: 91.7389 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #39: GFLOPs: 19.9953. Time: 422.2041 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #40: GFLOPs: 15.0892. Time: 559.4820 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #41: GFLOPs: 5.2418. Time: 1610.5223 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #42: GFLOPs: 12.2398. Time: 689.7255 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #43: GFLOPs: 54.3985. Time: 155.1903 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #44: GFLOPs: 3.2941. Time: 2562.8293 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #45: GFLOPs: 12.6140. Time: 669.2677 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #46: GFLOPs: 72.6013. Time: 116.2805 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #47: GFLOPs: 45.7808. Time: 184.4028 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #48: GFLOPs: 64.3925. Time: 131.1039 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #49: GFLOPs: 13.8814. Time: 608.1610 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #50: GFLOPs: 3.4589. Time: 2440.7105 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #51: GFLOPs: 10.7534. Time: 785.0677 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #52: GFLOPs: 64.0347. Time: 131.8364 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #53: GFLOPs: 5.8564. Time: 1441.5227 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #54: GFLOPs: 0.8265. Time: 10213.9678 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #55: GFLOPs: 59.9696. Time: 140.7733 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #56: GFLOPs: 58.5177. Time: 144.2660 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #57: GFLOPs: 103.8856. Time: 81.2636 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #58: GFLOPs: 43.2745. Time: 195.0829 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #59: GFLOPs: 16.0264. Time: 526.7644 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #60: GFLOPs: 31.8140. Time: 265.3586 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #61: GFLOPs: 3.4546. Time: 2443.7205 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #62: GFLOPs: 12.6345. Time: 668.1778 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #63: GFLOPs: 32.0637. Time: 263.2915 us. Best GFLOPs: 130.9085
2024-04-29 10:58:12 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #64: GFLOPs: 16.9662. Time: 497.5841 us. Best GFLOPs: 130.9085
