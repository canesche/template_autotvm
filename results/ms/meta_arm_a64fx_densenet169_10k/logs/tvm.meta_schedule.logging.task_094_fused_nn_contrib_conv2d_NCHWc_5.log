2024-04-29 08:24:44 [INFO] [task_scheduler.cc:160] Initializing Task #94: "fused_nn_contrib_conv2d_NCHWc_5"
2024-04-29 08:24:44 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
2024-04-29 08:24:44 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:44 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(64), oc_chunk_1 * T.int64(16) + ax1)
                        v2 = T.axis.spatial(T.int64(28), ax2)
                        v3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 1, 16])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[512, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:24:44 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(4), T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0, v1, v2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 1, 16])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[512, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:24:44 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 1, 16])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[512, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2024-04-29 10:45:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:45:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:45:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 10:45:39 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:45:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 10:45:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 10:45:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 10:45:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 10:45:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9985  0.9983  0.9979  0.9970  0.9960  0.9956  0.9932  0.9928  0.9921  0.9920  0.9916  0.9910  0.9908  0.9907  0.9896  0.9887
[17 : 32]:	0.9885  0.9883  0.9881  0.9875  0.9873  0.9873  0.9870  0.9867  0.9863  0.9863  0.9862  0.9861  0.9858  0.9852  0.9849  0.9847
[33 : 48]:	0.9846  0.9845  0.9843  0.9841  0.9839  0.9836  0.9831  0.9824  0.9823  0.9821  0.9820  0.9810  0.9808  0.9800  0.9797  0.9795
[49 : 64]:	0.9794  0.9792  0.9790  0.9785  0.9785  0.9783  0.9781  0.9771  0.9770  0.9770  0.9756  0.9755  0.9746  0.9743  0.9741  0.9731
2024-04-29 10:45:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:45:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #1: GFLOPs: 16.2661. Time: 12634.9400 us. Best GFLOPs: 16.2661
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #2: GFLOPs: 56.7134. Time: 3623.8515 us. Best GFLOPs: 56.7134
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(32) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(128) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(128) // T.int64(64) * T.int64(14) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(32) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(128) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(128) // T.int64(64) * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 32, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, = sch.get_child_blocks(b63)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b64)
l91 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l91)
sch.annotate(block_or_loop=l91, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l91, ann_key="pragma_unroll_explicit", ann_val=1)
b92 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b92)
b113 = sch.decompose_reduction(block=b92, loop=l97)
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #4: GFLOPs: 36.0036. Time: 5708.3475 us. Best GFLOPs: 56.7134
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #5: GFLOPs: 174.8490. Time: 1175.4196 us. Best GFLOPs: 174.8490
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #6: GFLOPs: 26.0509. Time: 7889.1964 us. Best GFLOPs: 174.8490
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #7: GFLOPs: 22.9736. Time: 8945.9732 us. Best GFLOPs: 174.8490
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #8: GFLOPs: 82.5162. Time: 2490.6731 us. Best GFLOPs: 174.8490
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #9: GFLOPs: 64.4187. Time: 3190.3913 us. Best GFLOPs: 174.8490
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #10: GFLOPs: 38.5506. Time: 5331.1957 us. Best GFLOPs: 174.8490
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #11: GFLOPs: 187.0831. Time: 1098.5541 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #12: GFLOPs: 8.9160. Time: 23050.8080 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #13: GFLOPs: 3.3856. Time: 60705.0953 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #14: GFLOPs: 93.2808. Time: 2203.2498 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #15: GFLOPs: 82.0448. Time: 2504.9845 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #16: GFLOPs: 40.9053. Time: 5024.3082 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #17: GFLOPs: 141.8578. Time: 1448.7814 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #18: GFLOPs: 62.9114. Time: 3266.8310 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #19: GFLOPs: 21.6571. Time: 9489.7774 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #20: GFLOPs: 171.9790. Time: 1195.0350 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #21: GFLOPs: 81.7136. Time: 2515.1384 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #22: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(512), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 4, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[256, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, = sch.get_child_blocks(b63)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b64)
l91 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l91)
sch.annotate(block_or_loop=l91, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l91, ann_key="pragma_unroll_explicit", ann_val=1)
b92 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b92)
b110 = sch.decompose_reduction(block=b92, loop=l94)
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #23: GFLOPs: 98.4108. Time: 2088.3984 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #24: GFLOPs: 14.0700. Time: 14607.0044 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #25: GFLOPs: 153.8328. Time: 1336.0017 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #26: GFLOPs: 10.9317. Time: 18800.5313 us. Best GFLOPs: 187.0831
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #27: GFLOPs: 311.0016. Time: 660.8356 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #28: GFLOPs: 3.5535. Time: 57836.1390 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #29: GFLOPs: 3.1453. Time: 65341.2743 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #30: GFLOPs: 139.4905. Time: 1473.3689 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #31: GFLOPs: 59.7445. Time: 3439.9962 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #32: GFLOPs: 2.0227. Time: 101606.7417 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #33: GFLOPs: 70.6643. Time: 2908.4122 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #34: GFLOPs: 68.8281. Time: 2986.0023 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #35: GFLOPs: 18.9777. Time: 10829.6267 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #36: GFLOPs: 60.6488. Time: 3388.7032 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #37: GFLOPs: 70.1965. Time: 2927.7929 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #38: GFLOPs: 42.8286. Time: 4798.6832 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #39: GFLOPs: 9.4325. Time: 21788.6024 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #40: GFLOPs: 95.8021. Time: 2145.2642 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #41: GFLOPs: 4.0508. Time: 50735.7900 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #42: GFLOPs: 62.3988. Time: 3293.6687 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #43: GFLOPs: 71.6203. Time: 2869.5907 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #44: GFLOPs: 61.4845. Time: 3342.6482 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #45: GFLOPs: 30.7839. Time: 6676.2507 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #46: GFLOPs: 63.8819. Time: 3217.1996 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #47: GFLOPs: 64.5926. Time: 3181.8011 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #48: GFLOPs: 26.6978. Time: 7698.0500 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #49: GFLOPs: 3.9134. Time: 52517.5033 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #50: GFLOPs: 40.1501. Time: 5118.8190 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #51: GFLOPs: 2.9251. Time: 70260.0997 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #52: GFLOPs: 57.0183. Time: 3604.4696 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #53: GFLOPs: 6.0045. Time: 34227.9350 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(1568) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(1568) // T.int64(224) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(1568) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(1568) // T.int64(224) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 8, 1, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, = sch.get_child_blocks(b63)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90 = sch.get_loops(block=b64)
l91 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l91)
sch.annotate(block_or_loop=l91, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l91, ann_key="pragma_unroll_explicit", ann_val=1)
b92 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b92)
b113 = sch.decompose_reduction(block=b92, loop=l97)
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #55: GFLOPs: 62.9774. Time: 3263.4084 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #56: GFLOPs: 45.7168. Time: 4495.5179 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_1 * T.int64(64) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_1 * T.int64(64) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 64, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[256, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #58: GFLOPs: 18.4927. Time: 11113.6267 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #59: GFLOPs: 59.4672. Time: 3456.0356 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #60: GFLOPs: 22.0838. Time: 9306.4131 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #61: GFLOPs: 68.1574. Time: 3015.3854 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #62: GFLOPs: 24.2170. Time: 8486.6223 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #63: GFLOPs: 8.6281. Time: 23820.0770 us. Best GFLOPs: 311.0016
2024-04-29 11:06:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #64: GFLOPs: 56.9566. Time: 3608.3768 us. Best GFLOPs: 311.0016
2024-04-29 11:52:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:52:50 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 11:52:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 11:52:52 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 11:52:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 11:53:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 11:53:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 11:53:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x819a028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b08ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4b6e568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc616ce8)]: 0 failure(s)
2024-04-29 11:53:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9928  0.9874  0.9576  0.7833  0.7537  0.7187  0.7163  0.7132  0.7035  0.6449  0.6377  0.6238  0.6203  0.6151  0.6150  0.6150
[17 : 32]:	0.6113  0.6093  0.6089  0.6073  0.6071  0.6051  0.6044  0.6044  0.6031  0.6031  0.6025  0.6012  0.6012  0.6009  0.6005  0.5996
[33 : 48]:	0.5978  0.5970  0.5934  0.5924  0.5921  0.5920  0.5888  0.5884  0.5884  0.5843  0.5830  0.5829  0.5823  0.5804  0.5792  0.5765
[49 : 64]:	0.5757  0.5757  0.5749  0.5737  0.5735  0.5722  0.5720  0.5714  0.5709  0.5701  0.5698  0.5685  0.5671  0.5662  0.5660  0.5647
2024-04-29 11:53:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:53:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #65: GFLOPs: 283.7555. Time: 724.2886 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #66: GFLOPs: 283.9421. Time: 723.8128 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #67: GFLOPs: 280.6360. Time: 732.3397 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #68: GFLOPs: 245.6897. Time: 836.5059 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #69: GFLOPs: 88.9614. Time: 2310.2264 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #70: GFLOPs: 155.4247. Time: 1322.3184 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #71: GFLOPs: 129.0122. Time: 1593.0347 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #72: GFLOPs: 123.0236. Time: 1670.5806 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #73: GFLOPs: 127.7077. Time: 1609.3075 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #74: GFLOPs: 134.2269. Time: 1531.1452 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #75: GFLOPs: 79.5787. Time: 2582.6110 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #76: GFLOPs: 152.9716. Time: 1343.5231 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #77: GFLOPs: 209.8273. Time: 979.4765 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #78: GFLOPs: 129.8869. Time: 1582.3061 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #79: GFLOPs: 157.5720. Time: 1304.2984 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #80: GFLOPs: 132.7172. Time: 1548.5626 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #81: GFLOPs: 192.8520. Time: 1065.6922 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #82: GFLOPs: 107.7085. Time: 1908.1218 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #83: GFLOPs: 152.8204. Time: 1344.8528 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #84: GFLOPs: 187.9907. Time: 1093.2502 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #85: GFLOPs: 179.3217. Time: 1146.1019 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #86: GFLOPs: 71.2952. Time: 2882.6757 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #87: GFLOPs: 96.5024. Time: 2129.6969 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #88: GFLOPs: 106.4213. Time: 1931.2005 us. Best GFLOPs: 311.0016
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #89: GFLOPs: 516.7963. Time: 397.6826 us. Best GFLOPs: 516.7963
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #90: GFLOPs: 521.5730. Time: 394.0405 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #91: GFLOPs: 127.1543. Time: 1616.3104 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #92: GFLOPs: 266.3387. Time: 771.6525 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #93: GFLOPs: 264.0263. Time: 778.4106 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #94: GFLOPs: 188.3972. Time: 1090.8914 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #95: GFLOPs: 162.0143. Time: 1268.5359 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #96: GFLOPs: 156.9979. Time: 1309.0681 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #97: GFLOPs: 246.6044. Time: 833.4034 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #98: GFLOPs: 75.5912. Time: 2718.8481 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #99: GFLOPs: 299.7116. Time: 685.7289 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #100: GFLOPs: 176.1459. Time: 1166.7654 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #101: GFLOPs: 25.8250. Time: 7958.2195 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #102: GFLOPs: 95.6384. Time: 2148.9368 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #103: GFLOPs: 216.2801. Time: 950.2533 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #104: GFLOPs: 83.5299. Time: 2460.4481 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #105: GFLOPs: 82.3778. Time: 2494.8589 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #106: GFLOPs: 132.0562. Time: 1556.3134 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #107: GFLOPs: 120.3337. Time: 1707.9244 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #108: GFLOPs: 145.6198. Time: 1411.3530 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #109: GFLOPs: 46.3761. Time: 4431.6109 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #110: GFLOPs: 80.2839. Time: 2559.9263 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #111: GFLOPs: 193.5799. Time: 1061.6851 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #112: GFLOPs: 33.4939. Time: 6136.0713 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #113: GFLOPs: 265.1309. Time: 775.1677 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #114: GFLOPs: 263.9571. Time: 778.6148 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #115: GFLOPs: 184.0836. Time: 1116.4540 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #116: GFLOPs: 153.8356. Time: 1335.9773 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #117: GFLOPs: 68.5353. Time: 2998.7582 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #118: GFLOPs: 90.3460. Time: 2274.8210 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #119: GFLOPs: 168.7263. Time: 1218.0725 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #120: GFLOPs: 518.6597. Time: 396.2538 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #121: GFLOPs: 111.4691. Time: 1843.7470 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #122: GFLOPs: 61.0899. Time: 3364.2360 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #123: GFLOPs: 518.2126. Time: 396.5957 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #124: GFLOPs: 195.3350. Time: 1052.1456 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #125: GFLOPs: 33.6885. Time: 6100.6221 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #126: GFLOPs: 14.6866. Time: 13993.7940 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #127: GFLOPs: 52.0391. Time: 3949.3545 us. Best GFLOPs: 521.5730
2024-04-29 11:54:38 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_5] Trial #128: GFLOPs: 58.3355. Time: 3523.0835 us. Best GFLOPs: 521.5730
