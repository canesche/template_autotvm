2024-04-29 08:24:56 [INFO] [task_scheduler.cc:160] Initializing Task #100: "fused_nn_global_avg_pool2d"
2024-04-29 08:24:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 08:24:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(7)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(416)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(416), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(7)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                with T.block("adaptive_pool_sum"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(416), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(416), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(416)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(416), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSRR", [ax2, ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 10:52:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:52:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:52:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x457dc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe343978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa01c5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d94218)]: 0 failure(s)
2024-04-29 10:52:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:52:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x457dc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe343978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa01c5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d94218)]: 0 failure(s)
2024-04-29 10:52:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x457dc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe343978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa01c5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d94218)]: 0 failure(s)
2024-04-29 10:52:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x457dc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe343978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa01c5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d94218)]: 0 failure(s)
2024-04-29 10:52:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x457dc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe343978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa01c5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d94218)]: 0 failure(s)
2024-04-29 10:52:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9988  0.9979  0.9865  0.9825  0.9713  0.9668  0.9656  0.9574  0.9573  0.9559  0.9524  0.9521  0.9513  0.9510  0.9478
[17 : 32]:	0.9470  0.9462  0.9454  0.9453  0.9372  0.9344  0.9290  0.9060  0.9015  0.8964  0.8948  0.8944  0.8873  0.8839  0.8815  0.8703
[33 : 48]:	0.8552  0.8535  0.8498  0.8410  0.8408  0.8392  0.8381  0.8337  0.8308  0.8300  0.8219  0.8198  0.8143  0.8134  0.8129  0.8118
[49 : 64]:	0.8059  0.7950  0.7937  0.7852  0.7827  0.7782  0.7770  0.7683  0.7606  0.7595  0.7592  0.7581  0.7561  0.7487  0.7460  0.7449
2024-04-29 10:52:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:52:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 1.5371. Time: 54.1295 us. Best GFLOPs: 1.5371
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 1.1117. Time: 74.8385 us. Best GFLOPs: 1.5371
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 2.4816. Time: 33.5271 us. Best GFLOPs: 2.4816
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 2.5718. Time: 32.3514 us. Best GFLOPs: 2.5718
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 0.8428. Time: 98.7160 us. Best GFLOPs: 2.5718
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 3.8955. Time: 21.3582 us. Best GFLOPs: 3.8955
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 7.7280. Time: 10.7660 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 6.2376. Time: 13.3385 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 3.5860. Time: 23.2013 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 3.7348. Time: 22.2772 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 3.5946. Time: 23.1460 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 3.0575. Time: 27.2119 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 3.1920. Time: 26.0651 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 7.4993. Time: 11.0943 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 3.7824. Time: 21.9965 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 7.5489. Time: 11.0214 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 5.7662. Time: 14.4290 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 5.7890. Time: 14.3722 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 3.7513. Time: 22.1790 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.8574. Time: 17.1286 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 2.7462. Time: 30.2967 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 2.8950. Time: 28.7390 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 3.5313. Time: 23.5607 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 3.2982. Time: 25.2262 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 2.5548. Time: 32.5662 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 5.5084. Time: 15.1043 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 6.9576. Time: 11.9582 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 7.5970. Time: 10.9517 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 3.9439. Time: 21.0958 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 3.7812. Time: 22.0038 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 3.0210. Time: 27.5401 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 3.0584. Time: 27.2039 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 3.4827. Time: 23.8895 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 3.1182. Time: 26.6817 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 3.4756. Time: 23.9385 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 3.5792. Time: 23.2457 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 3.4792. Time: 23.9133 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 3.8383. Time: 21.6763 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 2.4531. Time: 33.9167 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 3.6070. Time: 23.0665 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 6.0791. Time: 13.6861 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 6.2794. Time: 13.2496 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 0.7286. Time: 114.1845 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 3.4356. Time: 24.2168 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 7.1222. Time: 11.6818 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 2.6949. Time: 30.8735 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 3.6896. Time: 22.5496 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 6.2422. Time: 13.3286 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 7.3141. Time: 11.3753 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 3.6563. Time: 22.7554 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 3.4879. Time: 23.8537 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 2.5876. Time: 32.1528 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 7.4948. Time: 11.1010 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 2.9801. Time: 27.9184 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 3.0959. Time: 26.8743 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 3.9222. Time: 21.2125 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 3.7246. Time: 22.3380 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 4.2847. Time: 19.4178 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 5.7406. Time: 14.4933 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 1.6625. Time: 50.0456 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 7.5194. Time: 11.0647 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 3.2998. Time: 25.2137 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 5.6530. Time: 14.7178 us. Best GFLOPs: 7.7280
2024-04-29 11:07:52 [INFO] [task_scheduler.cc:131] [Task #100: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 7.3227. Time: 11.3620 us. Best GFLOPs: 7.7280
