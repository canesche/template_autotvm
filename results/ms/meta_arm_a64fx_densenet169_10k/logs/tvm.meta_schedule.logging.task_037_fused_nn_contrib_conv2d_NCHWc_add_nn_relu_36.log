2024-04-29 08:21:13 [INFO] [task_scheduler.cc:160] Initializing Task #37: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36"
2024-04-29 08:21:13 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1120), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:21:13 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:21:13 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(280), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1120), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[280, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:21:13 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(280), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1120), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[280, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:21:13 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(280), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1120), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[280, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:21:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:21:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:21:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 09:21:34 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:21:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 09:21:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 09:21:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 09:21:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 09:21:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9995  0.9988  0.9981  0.9975  0.9970  0.9958  0.9954  0.9953  0.9950  0.9950  0.9921  0.9921  0.9921  0.9909  0.9903
[17 : 32]:	0.9900  0.9898  0.9883  0.9882  0.9879  0.9873  0.9862  0.9858  0.9855  0.9854  0.9853  0.9851  0.9843  0.9840  0.9828  0.9825
[33 : 48]:	0.9825  0.9821  0.9820  0.9818  0.9810  0.9810  0.9806  0.9806  0.9792  0.9781  0.9778  0.9774  0.9769  0.9767  0.9766  0.9761
[49 : 64]:	0.9758  0.9754  0.9753  0.9730  0.9720  0.9710  0.9709  0.9705  0.9702  0.9699  0.9693  0.9690  0.9690  0.9685  0.9677  0.9675
2024-04-29 09:21:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:21:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #1: GFLOPs: 75.6995. Time: 743.0337 us. Best GFLOPs: 75.6995
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #2: GFLOPs: 29.1902. Time: 1926.9225 us. Best GFLOPs: 75.6995
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #3: GFLOPs: 118.5228. Time: 474.5695 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #4: GFLOPs: 57.0371. Time: 986.1526 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #5: GFLOPs: 18.4036. Time: 3056.3202 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #6: GFLOPs: 27.6955. Time: 2030.9165 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #7: GFLOPs: 25.6181. Time: 2195.6049 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #8: GFLOPs: 0.1627. Time: 345669.2427 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #9: GFLOPs: 20.3632. Time: 2762.2020 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #10: GFLOPs: 26.1588. Time: 2150.2236 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #11: GFLOPs: 6.1193. Time: 9191.7682 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #12: GFLOPs: 19.9805. Time: 2815.1148 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #13: GFLOPs: 38.1552. Time: 1474.1715 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #14: GFLOPs: 90.2290. Time: 623.3837 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:121] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1120), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1120), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1120, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #16: GFLOPs: 15.5393. Time: 3619.6769 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #17: GFLOPs: 14.8417. Time: 3789.8074 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #18: GFLOPs: 110.3677. Time: 509.6354 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #19: GFLOPs: 9.7541. Time: 5766.5308 us. Best GFLOPs: 118.5228
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #20: GFLOPs: 128.5468. Time: 437.5628 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #21: GFLOPs: 62.8538. Time: 894.8914 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #22: GFLOPs: 87.7912. Time: 640.6942 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #23: GFLOPs: 10.8021. Time: 5207.0494 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:121] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1120), ic_0 * T.int64(10) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[112, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #25: GFLOPs: 27.7595. Time: 2026.2352 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #26: GFLOPs: 34.3008. Time: 1639.8269 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #27: GFLOPs: 22.2465. Time: 2528.3650 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #28: GFLOPs: 7.9183. Time: 7103.4413 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:121] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(70), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1120), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[70, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #30: GFLOPs: 28.7803. Time: 1954.3678 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #31: GFLOPs: 20.6476. Time: 2724.1615 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #32: GFLOPs: 46.0028. Time: 1222.6917 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #33: GFLOPs: 82.6821. Time: 680.2839 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #34: GFLOPs: 53.0644. Time: 1059.9809 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #35: GFLOPs: 106.3669. Time: 528.8047 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #36: GFLOPs: 34.3666. Time: 1636.6865 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #37: GFLOPs: 93.9458. Time: 598.7208 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:121] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(140), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(1120), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[140, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #39: GFLOPs: 1.8997. Time: 29607.9850 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #40: GFLOPs: 8.1574. Time: 6895.2252 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #41: GFLOPs: 3.5572. Time: 15812.4227 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #42: GFLOPs: 34.0349. Time: 1652.6368 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #43: GFLOPs: 50.8046. Time: 1107.1291 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #44: GFLOPs: 12.4296. Time: 4525.2532 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #45: GFLOPs: 20.0129. Time: 2810.5561 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #46: GFLOPs: 61.4746. Time: 914.9682 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #47: GFLOPs: 39.2185. Time: 1434.2025 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #48: GFLOPs: 1.7219. Time: 32665.1010 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #49: GFLOPs: 55.6675. Time: 1010.4161 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #50: GFLOPs: 26.8357. Time: 2095.9897 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #51: GFLOPs: 90.5476. Time: 621.1903 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #52: GFLOPs: 87.7896. Time: 640.7056 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #53: GFLOPs: 7.4106. Time: 7590.1527 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #54: GFLOPs: 10.0609. Time: 5590.7037 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #55: GFLOPs: 1.4897. Time: 37757.2377 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #56: GFLOPs: 101.0294. Time: 556.7421 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #57: GFLOPs: 81.0725. Time: 693.7902 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #58: GFLOPs: 53.6086. Time: 1049.2210 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #59: GFLOPs: 22.5906. Time: 2489.8590 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #60: GFLOPs: 63.3690. Time: 887.6159 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #61: GFLOPs: 68.2172. Time: 824.5323 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #62: GFLOPs: 1.5318. Time: 36719.2980 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #63: GFLOPs: 42.0241. Time: 1338.4538 us. Best GFLOPs: 128.5468
2024-04-29 10:58:47 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #64: GFLOPs: 2.8000. Time: 20088.3926 us. Best GFLOPs: 128.5468
2024-04-29 12:22:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:22:04 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 12:22:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 12:22:07 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 12:22:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 12:22:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 12:22:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 12:22:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79e4788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa2743a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6cd19e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa35cd98)]: 0 failure(s)
2024-04-29 12:22:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9802  0.8485  0.8460  0.8445  0.8440  0.8422  0.8238  0.8232  0.8146  0.8108  0.8108  0.8087  0.8078  0.8066  0.7974  0.7928
[17 : 32]:	0.7727  0.7727  0.7727  0.7678  0.7658  0.7658  0.7643  0.7633  0.7579  0.7579  0.7557  0.7541  0.7473  0.7433  0.7425  0.7425
[33 : 48]:	0.7398  0.7388  0.7373  0.7364  0.7338  0.7329  0.7313  0.7277  0.7268  0.7260  0.7259  0.7254  0.7242  0.7234  0.7177  0.7164
[49 : 64]:	0.7145  0.7144  0.7142  0.7117  0.7117  0.7113  0.7113  0.7111  0.7098  0.7096  0.7082  0.7082  0.7081  0.7058  0.7033  0.7029
2024-04-29 12:22:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:22:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #65: GFLOPs: 49.5921. Time: 1134.1992 us. Best GFLOPs: 128.5468
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #66: GFLOPs: 157.3132. Time: 357.5499 us. Best GFLOPs: 157.3132
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #67: GFLOPs: 109.5292. Time: 513.5372 us. Best GFLOPs: 157.3132
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #68: GFLOPs: 150.8340. Time: 372.9085 us. Best GFLOPs: 157.3132
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #69: GFLOPs: 190.4305. Time: 295.3692 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #70: GFLOPs: 129.4750. Time: 434.4260 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #71: GFLOPs: 150.3581. Time: 374.0890 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #72: GFLOPs: 102.9081. Time: 546.5781 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #73: GFLOPs: 101.8011. Time: 552.5217 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #74: GFLOPs: 100.9635. Time: 557.1055 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #75: GFLOPs: 122.9638. Time: 457.4299 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #76: GFLOPs: 112.1204. Time: 501.6686 us. Best GFLOPs: 190.4305
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #77: GFLOPs: 192.4097. Time: 292.3309 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #78: GFLOPs: 31.8336. Time: 1766.9138 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #79: GFLOPs: 112.0274. Time: 502.0854 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #80: GFLOPs: 22.5134. Time: 2498.3932 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #81: GFLOPs: 39.4641. Time: 1425.2787 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #82: GFLOPs: 75.7363. Time: 742.6730 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #83: GFLOPs: 37.9009. Time: 1484.0612 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #84: GFLOPs: 96.1011. Time: 585.2931 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #85: GFLOPs: 106.2766. Time: 529.2540 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #86: GFLOPs: 118.2042. Time: 475.8485 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #87: GFLOPs: 121.2290. Time: 463.9755 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #88: GFLOPs: 111.8441. Time: 502.9081 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #89: GFLOPs: 75.3528. Time: 746.4523 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #90: GFLOPs: 75.7047. Time: 742.9825 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #91: GFLOPs: 49.9311. Time: 1126.4974 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #92: GFLOPs: 134.4248. Time: 418.4293 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #93: GFLOPs: 69.1018. Time: 813.9774 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #94: GFLOPs: 50.0064. Time: 1124.8019 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #95: GFLOPs: 88.6399. Time: 634.5598 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #96: GFLOPs: 77.0798. Time: 729.7278 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #97: GFLOPs: 112.5915. Time: 499.5698 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #98: GFLOPs: 99.5774. Time: 564.8601 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #99: GFLOPs: 92.8391. Time: 605.8581 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #100: GFLOPs: 86.2664. Time: 652.0187 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #101: GFLOPs: 117.1346. Time: 480.1935 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #102: GFLOPs: 161.4253. Time: 348.4416 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #103: GFLOPs: 63.6809. Time: 883.2680 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #104: GFLOPs: 103.9571. Time: 541.0627 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #105: GFLOPs: 85.4396. Time: 658.3283 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #106: GFLOPs: 143.2764. Time: 392.5789 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #107: GFLOPs: 114.2378. Time: 492.3701 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #108: GFLOPs: 86.3121. Time: 651.6731 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #109: GFLOPs: 102.2762. Time: 549.9548 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #110: GFLOPs: 124.8690. Time: 450.4505 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #111: GFLOPs: 81.2933. Time: 691.9055 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #112: GFLOPs: 127.1775. Time: 442.2738 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #113: GFLOPs: 96.9633. Time: 580.0886 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #114: GFLOPs: 137.6453. Time: 408.6394 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #115: GFLOPs: 71.3744. Time: 788.0593 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #116: GFLOPs: 90.0850. Time: 624.3805 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #117: GFLOPs: 88.5829. Time: 634.9676 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #118: GFLOPs: 99.8735. Time: 563.1856 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #119: GFLOPs: 110.7599. Time: 507.8310 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #120: GFLOPs: 75.1729. Time: 748.2385 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #121: GFLOPs: 74.4337. Time: 755.6699 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #122: GFLOPs: 89.4918. Time: 628.5192 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #123: GFLOPs: 130.5991. Time: 430.6868 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #124: GFLOPs: 110.4170. Time: 509.4080 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #125: GFLOPs: 110.4773. Time: 509.1298 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #126: GFLOPs: 48.2049. Time: 1166.8369 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #127: GFLOPs: 25.7284. Time: 2186.1958 us. Best GFLOPs: 192.4097
2024-04-29 12:23:53 [INFO] [task_scheduler.cc:131] [Task #37: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_36] Trial #128: GFLOPs: 53.4948. Time: 1051.4529 us. Best GFLOPs: 192.4097
