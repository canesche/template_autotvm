2024-04-29 08:24:35 [INFO] [task_scheduler.cc:160] Initializing Task #90: "fused_nn_contrib_conv2d_NCHWc_3"
2024-04-29 08:24:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4), T.int64(128), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
2024-04-29 08:24:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(30), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(8) + oh_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(4)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(8), oc_chunk_1 + ax1)
                            v2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ax3)
                            v4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(30), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(8) + oh_1 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(56), T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + ax2)
                        v3, v4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(58), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(8) + oh_1 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
2024-04-29 10:40:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:40:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:40:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 10:40:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:40:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 10:40:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 10:40:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 10:40:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 10:40:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9992  0.9990  0.9986  0.9981  0.9977  0.9965  0.9949  0.9944  0.9944  0.9939  0.9938  0.9936  0.9934  0.9922  0.9920
[17 : 32]:	0.9917  0.9915  0.9904  0.9897  0.9895  0.9895  0.9894  0.9893  0.9868  0.9859  0.9849  0.9838  0.9837  0.9837  0.9836  0.9834
[33 : 48]:	0.9831  0.9830  0.9815  0.9807  0.9799  0.9796  0.9795  0.9793  0.9785  0.9773  0.9771  0.9766  0.9763  0.9756  0.9755  0.9753
[49 : 64]:	0.9751  0.9748  0.9746  0.9743  0.9740  0.9733  0.9722  0.9722  0.9718  0.9711  0.9707  0.9707  0.9688  0.9687  0.9686  0.9682
2024-04-29 10:40:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:40:57 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #1: GFLOPs: 44.7452. Time: 5167.2779 us. Best GFLOPs: 44.7452
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #2: GFLOPs: 6.3459. Time: 36434.8973 us. Best GFLOPs: 44.7452
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #3: GFLOPs: 70.9246. Time: 3259.9547 us. Best GFLOPs: 70.9246
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #4: GFLOPs: 36.8696. Time: 6271.0537 us. Best GFLOPs: 70.9246
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #5: GFLOPs: 44.0298. Time: 5251.2431 us. Best GFLOPs: 70.9246
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #6: GFLOPs: 42.7542. Time: 5407.9127 us. Best GFLOPs: 70.9246
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #7: GFLOPs: 2.5178. Time: 91831.5940 us. Best GFLOPs: 70.9246
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #8: GFLOPs: 83.1709. Time: 2779.9507 us. Best GFLOPs: 83.1709
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #9: GFLOPs: 40.2568. Time: 5743.4082 us. Best GFLOPs: 83.1709
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #10: GFLOPs: 4.4194. Time: 52317.1777 us. Best GFLOPs: 83.1709
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #11: GFLOPs: 21.0325. Time: 10993.0289 us. Best GFLOPs: 83.1709
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(30), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(28) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(8), T.int64(28), T.int64(2)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(28), T.int64(2)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                                v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_global"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                            v4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b69)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b115)
b140 = sch.decompose_reduction(block=b115, loop=l124)
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #13: GFLOPs: 86.8564. Time: 2661.9902 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(128)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(32), ic_0 // T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(28) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(4) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(28) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(28) + ax3)
                        v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #15: GFLOPs: 0.8143. Time: 283955.1010 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #16: GFLOPs: 9.2083. Time: 25108.8428 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #17: GFLOPs: 23.3865. Time: 9886.5180 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #18: GFLOPs: 2.6398. Time: 87586.2717 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #19: GFLOPs: 9.1366. Time: 25306.0595 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #20: GFLOPs: 74.6888. Time: 3095.6578 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #21: GFLOPs: 6.4584. Time: 35799.9550 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #22: GFLOPs: 43.1892. Time: 5353.4464 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #23: GFLOPs: 1.7596. Time: 131398.7540 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #24: GFLOPs: 48.3131. Time: 4785.6763 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #25: GFLOPs: 19.7195. Time: 11724.9708 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #26: GFLOPs: 72.0677. Time: 3208.2475 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #27: GFLOPs: 30.6712. Time: 7538.3770 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #28: GFLOPs: 3.6068. Time: 64104.8907 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #29: GFLOPs: 65.3962. Time: 3535.5438 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #30: GFLOPs: 35.6847. Time: 6479.2750 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(16), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(14) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(14) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(14) + oh_1 + ax2)
                        v3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(2) + ax3)
                        v4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b69)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b118)
b143 = sch.decompose_reduction(block=b118, loop=l127)
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #32: GFLOPs: 2.7705. Time: 83453.7100 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #33: GFLOPs: 52.6233. Time: 4393.7007 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #34: GFLOPs: 3.0950. Time: 74705.4590 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #35: GFLOPs: 28.4695. Time: 8121.3714 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #36: GFLOPs: 14.6572. Time: 15774.5920 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #37: GFLOPs: 23.8853. Time: 9680.0615 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #38: GFLOPs: 12.9746. Time: 17820.3317 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #39: GFLOPs: 3.7276. Time: 62026.0580 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #40: GFLOPs: 12.3247. Time: 18760.0405 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #41: GFLOPs: 14.9510. Time: 15464.5661 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #42: GFLOPs: 65.0073. Time: 3556.6956 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #43: GFLOPs: 56.0914. Time: 4122.0428 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #44: GFLOPs: 76.0102. Time: 3041.8403 us. Best GFLOPs: 86.8564
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #45: GFLOPs: 112.0986. Time: 2062.5683 us. Best GFLOPs: 112.0986
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #46: GFLOPs: 14.3590. Time: 16102.2164 us. Best GFLOPs: 112.0986
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #47: GFLOPs: 12.3272. Time: 18756.2205 us. Best GFLOPs: 112.0986
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #48: GFLOPs: 27.5790. Time: 8383.5961 us. Best GFLOPs: 112.0986
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #49: GFLOPs: 31.4362. Time: 7354.9231 us. Best GFLOPs: 112.0986
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #50: GFLOPs: 7.8263. Time: 29542.8787 us. Best GFLOPs: 112.0986
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #51: GFLOPs: 124.7703. Time: 1853.0926 us. Best GFLOPs: 124.7703
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #52: GFLOPs: 3.3500. Time: 69018.5397 us. Best GFLOPs: 124.7703
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #53: GFLOPs: 66.8700. Time: 3457.6182 us. Best GFLOPs: 124.7703
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #54: GFLOPs: 85.6455. Time: 2699.6283 us. Best GFLOPs: 124.7703
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #55: GFLOPs: 45.9137. Time: 5035.7776 us. Best GFLOPs: 124.7703
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #56: GFLOPs: 18.3757. Time: 12582.4104 us. Best GFLOPs: 124.7703
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #57: GFLOPs: 163.0345. Time: 1418.1719 us. Best GFLOPs: 163.0345
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #58: GFLOPs: 3.4764. Time: 66508.1730 us. Best GFLOPs: 163.0345
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #59: GFLOPs: 47.5486. Time: 4862.6217 us. Best GFLOPs: 163.0345
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #60: GFLOPs: 57.7653. Time: 4002.5936 us. Best GFLOPs: 163.0345
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #61: GFLOPs: 34.5656. Time: 6689.0567 us. Best GFLOPs: 163.0345
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #62: GFLOPs: 24.1958. Time: 9555.8295 us. Best GFLOPs: 163.0345
2024-04-29 11:06:05 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #63: GFLOPs: 30.1523. Time: 7668.1010 us. Best GFLOPs: 163.0345
2024-04-29 11:08:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:08:28 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 11:08:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:08:33 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 11:08:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:08:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:09:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:09:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:09:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9451  0.8995  0.8783  0.8658  0.8575  0.8575  0.8572  0.8561  0.8550  0.8541  0.8496  0.8417  0.8276  0.8245  0.8112  0.8104
[17 : 32]:	0.8014  0.8014  0.7938  0.7900  0.7880  0.7880  0.7862  0.7840  0.7809  0.7806  0.7806  0.7703  0.7679  0.7628  0.7592  0.7570
[33 : 48]:	0.7569  0.7549  0.7493  0.7448  0.7438  0.7405  0.7397  0.7365  0.7351  0.7336  0.7336  0.7313  0.7307  0.7299  0.7285  0.7247
[49 : 64]:	0.7238  0.7227  0.7167  0.7164  0.7157  0.7151  0.7141  0.7139  0.7136  0.7133  0.7108  0.7072  0.7047  0.7047  0.7034  0.7032
2024-04-29 11:09:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:09:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #64: GFLOPs: 168.5486. Time: 1371.7763 us. Best GFLOPs: 168.5486
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #65: GFLOPs: 236.1038. Time: 979.2768 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #66: GFLOPs: 195.7633. Time: 1181.0742 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #67: GFLOPs: 111.4805. Time: 2074.0045 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #68: GFLOPs: 153.5453. Time: 1505.8163 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #69: GFLOPs: 190.3726. Time: 1214.5186 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #70: GFLOPs: 125.2934. Time: 1845.3573 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #71: GFLOPs: 149.9538. Time: 1541.8820 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #72: GFLOPs: 141.2832. Time: 1636.5077 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #73: GFLOPs: 184.6179. Time: 1252.3759 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #74: GFLOPs: 167.7640. Time: 1378.1920 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #75: GFLOPs: 125.5426. Time: 1841.6936 us. Best GFLOPs: 236.1038
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #76: GFLOPs: 322.6402. Time: 716.6219 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #77: GFLOPs: 182.8484. Time: 1264.4957 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #78: GFLOPs: 161.2813. Time: 1433.5887 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #79: GFLOPs: 143.3407. Time: 1613.0169 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #80: GFLOPs: 126.6614. Time: 1825.4256 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #81: GFLOPs: 201.9204. Time: 1145.0602 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(16)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #83: GFLOPs: 93.6565. Time: 2468.7135 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #84: GFLOPs: 187.7115. Time: 1231.7359 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #85: GFLOPs: 164.1577. Time: 1408.4691 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #86: GFLOPs: 233.2816. Time: 991.1242 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #87: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(16)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #88: GFLOPs: 173.1230. Time: 1335.5303 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #89: GFLOPs: 126.2145. Time: 1831.8893 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #90: GFLOPs: 124.0750. Time: 1863.4782 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #91: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(10)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(8) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(8) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_global"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(8) + oh_1 * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b67)
l79 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b69)
l118 = sch.fuse(l116, l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b119)
b143 = sch.decompose_reduction(block=b119, loop=l127)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #92: GFLOPs: 167.6341. Time: 1379.2600 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #93: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(16)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #94: GFLOPs: 144.5156. Time: 1599.9030 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #95: GFLOPs: 179.9275. Time: 1285.0231 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #96: GFLOPs: 202.1943. Time: 1143.5092 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #97: GFLOPs: 138.9752. Time: 1663.6858 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #98: GFLOPs: 179.8763. Time: 1285.3890 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #99: GFLOPs: 76.5961. Time: 3018.5739 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #100: GFLOPs: 110.9397. Time: 2084.1149 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #101: GFLOPs: 141.0198. Time: 1639.5639 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #102: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #103: GFLOPs: 224.3514. Time: 1030.5752 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #104: GFLOPs: 124.3444. Time: 1859.4404 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #105: GFLOPs: 128.6898. Time: 1796.6540 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #106: GFLOPs: 149.5706. Time: 1545.8322 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #107: GFLOPs: 115.3585. Time: 2004.2816 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #108: GFLOPs: 150.6842. Time: 1534.4077 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #109: GFLOPs: 181.6493. Time: 1272.8426 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #110: GFLOPs: 135.2233. Time: 1709.8455 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #111: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(6)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #112: GFLOPs: 93.2220. Time: 2480.2189 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #113: GFLOPs: 91.9416. Time: 2514.7598 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #114: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(4)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(4) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #115: GFLOPs: 112.3780. Time: 2057.4409 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #116: GFLOPs: 104.4169. Time: 2214.3062 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #117: GFLOPs: 119.3512. Time: 1937.2326 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #118: GFLOPs: 205.4945. Time: 1125.1445 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #119: GFLOPs: 172.3981. Time: 1341.1458 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #120: GFLOPs: 165.9977. Time: 1392.8567 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #121: GFLOPs: 146.8225. Time: 1574.7656 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #122: GFLOPs: 23.3228. Time: 9913.5273 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #123: GFLOPs: 116.8274. Time: 1979.0825 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #124: GFLOPs: 78.3336. Time: 2951.6189 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #125: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(58), T.int64(58), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(30), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(28) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(28) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(2) * T.int64(28) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b103)
b128 = sch.decompose_reduction(block=b103, loop=l112)
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #126: GFLOPs: 40.2776. Time: 5740.4410 us. Best GFLOPs: 322.6402
2024-04-29 11:10:55 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #127: GFLOPs: 115.0157. Time: 2010.2554 us. Best GFLOPs: 322.6402
2024-04-29 11:15:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:15:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:15:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:15:29 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:15:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:15:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:16:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:16:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:16:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9683  0.9683  0.9683  0.9601  0.9601  0.9085  0.8317  0.8317  0.8213  0.7896  0.7843  0.7843  0.7843  0.7830  0.7754  0.7664
[17 : 32]:	0.7637  0.7604  0.7604  0.7454  0.7443  0.7413  0.7368  0.7247  0.7119  0.7063  0.6967  0.6955  0.6935  0.6935  0.6917  0.6885
[33 : 48]:	0.6844  0.6813  0.6812  0.6812  0.6779  0.6779  0.6771  0.6762  0.6760  0.6755  0.6747  0.6740  0.6737  0.6519  0.6496  0.6461
[49 : 64]:	0.6426  0.6424  0.6403  0.6389  0.6365  0.6354  0.6332  0.6320  0.6311  0.6298  0.6288  0.6285  0.6283  0.6247  0.6236  0.6235
2024-04-29 11:16:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:16:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #128: GFLOPs: 237.6854. Time: 972.7608 us. Best GFLOPs: 322.6402
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #129: GFLOPs: 359.9577. Time: 642.3282 us. Best GFLOPs: 359.9577
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #130: GFLOPs: 360.2149. Time: 641.8696 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #131: GFLOPs: 231.1270. Time: 1000.3637 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #132: GFLOPs: 231.0752. Time: 1000.5879 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #133: GFLOPs: 216.8563. Time: 1066.1944 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #134: GFLOPs: 111.1761. Time: 2079.6818 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #135: GFLOPs: 104.2542. Time: 2217.7622 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #136: GFLOPs: 328.1592. Time: 704.5697 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #137: GFLOPs: 82.0818. Time: 2816.8352 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #138: GFLOPs: 107.1602. Time: 2157.6197 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #139: GFLOPs: 78.6940. Time: 2938.1011 us. Best GFLOPs: 360.2149
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #140: GFLOPs: 600.8876. Time: 384.7824 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #141: GFLOPs: 166.9715. Time: 1384.7336 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #142: GFLOPs: 197.2124. Time: 1172.3958 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #143: GFLOPs: 62.0517. Time: 3726.1018 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #144: GFLOPs: 103.6801. Time: 2230.0420 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #145: GFLOPs: 145.2793. Time: 1591.4934 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #146: GFLOPs: 137.9181. Time: 1676.4375 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #147: GFLOPs: 115.0733. Time: 2009.2497 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #148: GFLOPs: 107.1417. Time: 2157.9918 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #149: GFLOPs: 78.9185. Time: 2929.7439 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #150: GFLOPs: 83.3952. Time: 2772.4737 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #151: GFLOPs: 95.7243. Time: 2415.3842 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #152: GFLOPs: 254.2533. Time: 909.3728 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #153: GFLOPs: 147.1658. Time: 1571.0915 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #154: GFLOPs: 166.2754. Time: 1390.5303 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #155: GFLOPs: 98.0365. Time: 2358.4176 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #156: GFLOPs: 113.2068. Time: 2042.3768 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #157: GFLOPs: 197.6622. Time: 1169.7278 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #158: GFLOPs: 176.0640. Time: 1313.2212 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #159: GFLOPs: 123.2936. Time: 1875.2878 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #160: GFLOPs: 261.7200. Time: 883.4288 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #161: GFLOPs: 204.7270. Time: 1129.3628 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #162: GFLOPs: 165.3379. Time: 1398.4154 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #163: GFLOPs: 189.5530. Time: 1219.7695 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #164: GFLOPs: 193.2409. Time: 1196.4912 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #165: GFLOPs: 187.1343. Time: 1235.5355 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #166: GFLOPs: 179.6024. Time: 1287.3494 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #167: GFLOPs: 130.3116. Time: 1774.2939 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #168: GFLOPs: 52.3244. Time: 4418.8003 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #169: GFLOPs: 106.0286. Time: 2180.6484 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #170: GFLOPs: 191.8573. Time: 1205.1199 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #171: GFLOPs: 76.6118. Time: 3017.9559 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #172: GFLOPs: 63.6525. Time: 3632.3924 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #173: GFLOPs: 168.0039. Time: 1376.2240 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #174: GFLOPs: 97.0978. Time: 2381.2188 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #175: GFLOPs: 121.1337. Time: 1908.7259 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #176: GFLOPs: 180.8277. Time: 1278.6264 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #177: GFLOPs: 173.9515. Time: 1329.1697 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #178: GFLOPs: 126.5971. Time: 1826.3527 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #179: GFLOPs: 101.7618. Time: 2272.0812 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #180: GFLOPs: 137.4041. Time: 1682.7077 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #181: GFLOPs: 79.5176. Time: 2907.6714 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #182: GFLOPs: 130.2617. Time: 1774.9737 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #183: GFLOPs: 132.6960. Time: 1742.4119 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #184: GFLOPs: 183.7410. Time: 1258.3530 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #185: GFLOPs: 195.7875. Time: 1180.9284 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #186: GFLOPs: 132.6621. Time: 1742.8566 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #187: GFLOPs: 110.1133. Time: 2099.7550 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #188: GFLOPs: 126.3009. Time: 1830.6356 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #189: GFLOPs: 38.4252. Time: 6017.1732 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #190: GFLOPs: 9.1060. Time: 25391.1793 us. Best GFLOPs: 600.8876
2024-04-29 11:17:57 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #191: GFLOPs: 103.6990. Time: 2229.6363 us. Best GFLOPs: 600.8876
2024-04-29 11:45:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:45:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:45:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:45:19 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:45:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:45:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:45:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:46:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:46:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7470  0.6962  0.6759  0.6666  0.6666  0.6665  0.6614  0.6614  0.6614  0.6555  0.6555  0.6555  0.6555  0.6535  0.6535  0.6422
[17 : 32]:	0.6169  0.5969  0.5914  0.5837  0.5692  0.5581  0.5454  0.5454  0.5340  0.5094  0.5094  0.5010  0.5002  0.4995  0.4995  0.4934
[33 : 48]:	0.4934  0.4934  0.4884  0.4797  0.4771  0.4670  0.4657  0.4643  0.4609  0.4604  0.4600  0.4588  0.4587  0.4587  0.4582  0.4569
[49 : 64]:	0.4528  0.4498  0.4483  0.4434  0.4412  0.4412  0.4396  0.4394  0.4392  0.4370  0.4370  0.4370  0.4353  0.4335  0.4331  0.4326
2024-04-29 11:46:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:46:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #192: GFLOPs: 248.2191. Time: 931.4794 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #193: GFLOPs: 126.3288. Time: 1830.2326 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #194: GFLOPs: 73.2628. Time: 3155.9109 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #195: GFLOPs: 106.4072. Time: 2172.8885 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #196: GFLOPs: 592.5269. Time: 390.2118 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #197: GFLOPs: 51.5349. Time: 4486.4899 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #198: GFLOPs: 87.1412. Time: 2653.2907 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #199: GFLOPs: 502.4606. Time: 460.1575 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #200: GFLOPs: 66.8251. Time: 3459.9428 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #201: GFLOPs: 83.9392. Time: 2754.5051 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #202: GFLOPs: 593.8643. Time: 389.3330 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #203: GFLOPs: 597.0768. Time: 387.2383 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #204: GFLOPs: 115.7757. Time: 1997.0594 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #205: GFLOPs: 174.3164. Time: 1326.3868 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #206: GFLOPs: 192.7545. Time: 1199.5105 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #207: GFLOPs: 114.0969. Time: 2026.4450 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #208: GFLOPs: 104.1496. Time: 2219.9885 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #209: GFLOPs: 121.2697. Time: 1906.5849 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #210: GFLOPs: 246.6035. Time: 937.5820 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #211: GFLOPs: 118.8784. Time: 1944.9369 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #212: GFLOPs: 81.4374. Time: 2839.1248 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #213: GFLOPs: 198.2989. Time: 1165.9723 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #214: GFLOPs: 546.4004. Time: 423.1531 us. Best GFLOPs: 600.8876
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #215: GFLOPs: 710.8834. Time: 325.2446 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #216: GFLOPs: 157.8018. Time: 1465.1991 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #217: GFLOPs: 237.5931. Time: 973.1384 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #218: GFLOPs: 322.4901. Time: 716.9554 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #219: GFLOPs: 70.0860. Time: 3298.9610 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #220: GFLOPs: 210.9157. Time: 1096.2248 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #221: GFLOPs: 99.7676. Time: 2317.4953 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #222: GFLOPs: 187.1137. Time: 1235.6715 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #223: GFLOPs: 448.4875. Time: 515.5350 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #224: GFLOPs: 63.1831. Time: 3659.3832 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #225: GFLOPs: 111.8271. Time: 2067.5763 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #226: GFLOPs: 163.2009. Time: 1416.7261 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #227: GFLOPs: 60.4713. Time: 3823.4851 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #228: GFLOPs: 185.8082. Time: 1244.3532 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #229: GFLOPs: 134.2660. Time: 1722.0374 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #230: GFLOPs: 175.5633. Time: 1316.9668 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #231: GFLOPs: 124.9710. Time: 1850.1170 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #232: GFLOPs: 168.1525. Time: 1375.0077 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #233: GFLOPs: 167.5279. Time: 1380.1347 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #234: GFLOPs: 159.0743. Time: 1453.4784 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #235: GFLOPs: 195.2057. Time: 1184.4481 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #236: GFLOPs: 206.6795. Time: 1118.6935 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #237: GFLOPs: 222.6343. Time: 1038.5235 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #238: GFLOPs: 174.1921. Time: 1327.3335 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #239: GFLOPs: 174.9772. Time: 1321.3780 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #240: GFLOPs: 188.5997. Time: 1225.9354 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #241: GFLOPs: 151.1242. Time: 1529.9406 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #242: GFLOPs: 87.1332. Time: 2653.5341 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #243: GFLOPs: 167.2769. Time: 1382.2056 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #244: GFLOPs: 326.4520. Time: 708.2543 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #245: GFLOPs: 326.7841. Time: 707.5345 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #246: GFLOPs: 152.9387. Time: 1511.7887 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #247: GFLOPs: 321.6932. Time: 718.7315 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #248: GFLOPs: 114.3065. Time: 2022.7286 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #249: GFLOPs: 158.3937. Time: 1459.7239 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #250: GFLOPs: 193.0895. Time: 1197.4293 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #251: GFLOPs: 184.8639. Time: 1250.7094 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #252: GFLOPs: 220.0389. Time: 1050.7733 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #253: GFLOPs: 19.4136. Time: 11909.7150 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #254: GFLOPs: 121.4810. Time: 1903.2688 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #255: GFLOPs: 37.9183. Time: 6097.6078 us. Best GFLOPs: 710.8834
2024-04-29 11:47:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:47:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:48:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:48:02 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:48:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:48:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:48:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:48:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:49:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8551  0.8551  0.7265  0.7265  0.7265  0.7265  0.7018  0.7018  0.7018  0.7018  0.7018  0.6938  0.6568  0.6568  0.6507  0.6500
[17 : 32]:	0.6434  0.6434  0.6365  0.5656  0.5639  0.5337  0.5328  0.5328  0.5328  0.5290  0.5262  0.5262  0.5173  0.5173  0.5146  0.5146
[33 : 48]:	0.5085  0.5085  0.4971  0.4954  0.4926  0.4926  0.4893  0.4805  0.4805  0.4746  0.4746  0.4732  0.4730  0.4730  0.4699  0.4657
[49 : 64]:	0.4657  0.4551  0.4520  0.4385  0.4385  0.4280  0.4239  0.4201  0.4200  0.4148  0.4138  0.4129  0.4127  0.4115  0.4115  0.4115
2024-04-29 11:49:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:49:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:50:26 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #256: GFLOPs: 355.0391. Time: 651.2269 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #257: GFLOPs: 255.2828. Time: 905.7055 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #258: GFLOPs: 89.8068. Time: 2574.5380 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #259: GFLOPs: 83.3672. Time: 2773.4060 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #260: GFLOPs: 593.9720. Time: 389.2625 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #261: GFLOPs: 113.5286. Time: 2036.5881 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #262: GFLOPs: 107.3537. Time: 2153.7315 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #263: GFLOPs: 592.7378. Time: 390.0730 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #264: GFLOPs: 113.7135. Time: 2033.2765 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #265: GFLOPs: 81.3017. Time: 2843.8659 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #266: GFLOPs: 87.0609. Time: 2655.7397 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #267: GFLOPs: 599.2791. Time: 385.8152 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #268: GFLOPs: 259.5383. Time: 890.8550 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #269: GFLOPs: 595.9261. Time: 387.9860 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #270: GFLOPs: 499.6299. Time: 462.7646 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #271: GFLOPs: 264.8912. Time: 872.8526 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #272: GFLOPs: 554.3486. Time: 417.0859 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #273: GFLOPs: 401.6838. Time: 575.6045 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #274: GFLOPs: 84.6040. Time: 2732.8624 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #275: GFLOPs: 516.9899. Time: 447.2254 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #276: GFLOPs: 213.7467. Time: 1081.7056 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #277: GFLOPs: 148.2838. Time: 1559.2463 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #278: GFLOPs: 118.8554. Time: 1945.3131 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #279: GFLOPs: 117.2517. Time: 1971.9196 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #280: GFLOPs: 521.3728. Time: 443.4658 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #281: GFLOPs: 411.2895. Time: 562.1612 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #282: GFLOPs: 79.7988. Time: 2897.4238 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #283: GFLOPs: 429.2272. Time: 538.6682 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #284: GFLOPs: 495.2656. Time: 466.8424 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #285: GFLOPs: 253.0052. Time: 913.8586 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #286: GFLOPs: 501.6782. Time: 460.8752 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #287: GFLOPs: 255.4373. Time: 905.1577 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #288: GFLOPs: 115.8358. Time: 1996.0233 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #289: GFLOPs: 592.2391. Time: 390.4015 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #290: GFLOPs: 458.9184. Time: 503.8173 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #291: GFLOPs: 155.9970. Time: 1482.1501 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #292: GFLOPs: 165.2130. Time: 1399.4724 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #293: GFLOPs: 148.4335. Time: 1557.6738 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #294: GFLOPs: 374.3890. Time: 617.5689 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #295: GFLOPs: 159.6823. Time: 1447.9441 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #296: GFLOPs: 153.8121. Time: 1503.2047 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #297: GFLOPs: 251.4035. Time: 919.6810 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #298: GFLOPs: 489.7882. Time: 472.0633 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #299: GFLOPs: 517.0435. Time: 447.1790 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #300: GFLOPs: 121.2362. Time: 1907.1117 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #301: GFLOPs: 121.2669. Time: 1906.6290 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #302: GFLOPs: 176.2433. Time: 1311.8852 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #303: GFLOPs: 143.2139. Time: 1614.4458 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #304: GFLOPs: 154.5582. Time: 1495.9479 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #305: GFLOPs: 127.3016. Time: 1816.2454 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #306: GFLOPs: 123.5838. Time: 1870.8850 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #307: GFLOPs: 45.3546. Time: 5097.8534 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #308: GFLOPs: 128.7953. Time: 1795.1814 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #309: GFLOPs: 159.4787. Time: 1449.7921 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #310: GFLOPs: 182.2665. Time: 1268.5328 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #311: GFLOPs: 119.3955. Time: 1936.5140 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #312: GFLOPs: 163.9919. Time: 1409.8927 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #313: GFLOPs: 74.2826. Time: 3112.5877 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #314: GFLOPs: 94.2394. Time: 2453.4443 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #315: GFLOPs: 150.9845. Time: 1531.3554 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #316: GFLOPs: 106.2454. Time: 2176.1982 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #317: GFLOPs: 8.2792. Time: 27926.7117 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #318: GFLOPs: 19.2722. Time: 11997.0970 us. Best GFLOPs: 710.8834
2024-04-29 11:50:27 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #319: GFLOPs: 54.7072. Time: 4226.3351 us. Best GFLOPs: 710.8834
2024-04-29 11:59:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:59:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:59:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:59:06 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:59:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:59:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:59:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 11:59:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 12:00:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7251  0.7251  0.7251  0.7251  0.7127  0.7127  0.7028  0.7028  0.7028  0.7028  0.7028  0.7028  0.6944  0.6905  0.6781  0.6745
[17 : 32]:	0.6745  0.6745  0.6739  0.6739  0.6639  0.6639  0.6466  0.6339  0.6315  0.6259  0.6259  0.6259  0.6259  0.6259  0.6259  0.6200
[33 : 48]:	0.6149  0.6031  0.5994  0.5994  0.5716  0.5679  0.5672  0.5580  0.5580  0.5543  0.5543  0.5524  0.5514  0.5504  0.5468  0.5399
[49 : 64]:	0.5359  0.5359  0.5359  0.5359  0.5359  0.5281  0.5222  0.5222  0.5222  0.5194  0.5194  0.5168  0.5168  0.5164  0.5123  0.5123
2024-04-29 12:00:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:00:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #320: GFLOPs: 546.5415. Time: 423.0438 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #321: GFLOPs: 515.2569. Time: 448.7295 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #322: GFLOPs: 700.3616. Time: 330.1309 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #323: GFLOPs: 514.5069. Time: 449.3837 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #324: GFLOPs: 544.3984. Time: 424.7092 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #325: GFLOPs: 515.5970. Time: 448.4336 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #326: GFLOPs: 595.1929. Time: 388.4640 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #327: GFLOPs: 113.5576. Time: 2036.0680 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #328: GFLOPs: 112.0811. Time: 2062.8898 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #329: GFLOPs: 116.3276. Time: 1987.5850 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #330: GFLOPs: 591.3910. Time: 390.9613 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #331: GFLOPs: 89.5201. Time: 2582.7846 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #332: GFLOPs: 89.6152. Time: 2580.0420 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #333: GFLOPs: 400.6395. Time: 577.1049 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #334: GFLOPs: 578.2394. Time: 399.8534 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #335: GFLOPs: 705.6897. Time: 327.6384 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #336: GFLOPs: 702.2798. Time: 329.2292 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #337: GFLOPs: 545.2205. Time: 424.0688 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #338: GFLOPs: 69.5664. Time: 3323.6019 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #339: GFLOPs: 94.9296. Time: 2435.6058 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #340: GFLOPs: 214.4036. Time: 1078.3916 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #341: GFLOPs: 182.6296. Time: 1266.0103 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #342: GFLOPs: 431.1085. Time: 536.3174 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #343: GFLOPs: 205.0269. Time: 1127.7105 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #344: GFLOPs: 592.0485. Time: 390.5271 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #345: GFLOPs: 128.3795. Time: 1800.9963 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #346: GFLOPs: 127.7634. Time: 1809.6804 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #347: GFLOPs: 125.2861. Time: 1845.4647 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #348: GFLOPs: 126.5424. Time: 1827.1427 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #349: GFLOPs: 396.9398. Time: 582.4838 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #350: GFLOPs: 517.7955. Time: 446.5296 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #351: GFLOPs: 73.6856. Time: 3137.8061 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #352: GFLOPs: 521.2295. Time: 443.5877 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #353: GFLOPs: 383.6860. Time: 602.6048 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #354: GFLOPs: 502.2699. Time: 460.3322 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #355: GFLOPs: 254.3864. Time: 908.8969 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #356: GFLOPs: 205.3894. Time: 1125.7202 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #357: GFLOPs: 456.4367. Time: 506.5565 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #358: GFLOPs: 325.9416. Time: 709.3634 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #359: GFLOPs: 78.2863. Time: 2953.4027 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #360: GFLOPs: 86.8681. Time: 2661.6343 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #361: GFLOPs: 104.4772. Time: 2213.0278 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #362: GFLOPs: 106.0474. Time: 2180.2612 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #363: GFLOPs: 210.6463. Time: 1097.6265 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #364: GFLOPs: 138.5901. Time: 1668.3085 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #365: GFLOPs: 444.9027. Time: 519.6889 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #366: GFLOPs: 73.2272. Time: 3157.4473 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #367: GFLOPs: 308.5529. Time: 749.3399 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #368: GFLOPs: 168.8835. Time: 1369.0564 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #369: GFLOPs: 604.1593. Time: 382.6988 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #370: GFLOPs: 178.7024. Time: 1293.8328 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #371: GFLOPs: 603.3000. Time: 383.2438 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #372: GFLOPs: 179.0133. Time: 1291.5859 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #373: GFLOPs: 60.2997. Time: 3834.3642 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #374: GFLOPs: 377.1385. Time: 613.0665 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #375: GFLOPs: 494.1384. Time: 467.9074 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #376: GFLOPs: 121.1510. Time: 1908.4531 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #377: GFLOPs: 487.3610. Time: 474.4143 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #378: GFLOPs: 246.3445. Time: 938.5677 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #379: GFLOPs: 158.9616. Time: 1454.5089 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #380: GFLOPs: 608.7364. Time: 379.8212 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #381: GFLOPs: 33.1870. Time: 6966.9136 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #382: GFLOPs: 6.4539. Time: 35825.2337 us. Best GFLOPs: 710.8834
2024-04-29 12:01:35 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #383: GFLOPs: 66.1785. Time: 3493.7464 us. Best GFLOPs: 710.8834
2024-04-29 12:43:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:43:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 12:43:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 12:43:46 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 12:43:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 12:44:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 12:44:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 12:44:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd34b148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc373a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x811df08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe320348)]: 0 failure(s)
2024-04-29 12:44:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8936  0.8936  0.8936  0.8936  0.8936  0.8142  0.8142  0.8142  0.8142  0.8142  0.8067  0.7840  0.7408  0.7408  0.7273  0.7049
[17 : 32]:	0.7049  0.7047  0.7047  0.7047  0.7047  0.7015  0.6834  0.6834  0.6834  0.6834  0.6834  0.6834  0.6834  0.6834  0.6806  0.6806
[33 : 48]:	0.6806  0.6806  0.6806  0.6806  0.6806  0.6806  0.6717  0.6717  0.6502  0.6395  0.6298  0.6248  0.6234  0.6217  0.6117  0.6117
[49 : 64]:	0.6000  0.6000  0.5888  0.5885  0.5882  0.5877  0.5844  0.5844  0.5766  0.5766  0.5766  0.5766  0.5766  0.5766  0.5766  0.5645
2024-04-29 12:44:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:44:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #384: GFLOPs: 516.1297. Time: 447.9708 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #385: GFLOPs: 513.0887. Time: 450.6258 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #386: GFLOPs: 699.7327. Time: 330.4276 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #387: GFLOPs: 703.3173. Time: 328.7435 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #388: GFLOPs: 515.7551. Time: 448.2961 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #389: GFLOPs: 516.3226. Time: 447.8034 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #390: GFLOPs: 545.4887. Time: 423.8603 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #391: GFLOPs: 701.6352. Time: 329.5317 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #392: GFLOPs: 515.3851. Time: 448.6180 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #393: GFLOPs: 700.6594. Time: 329.9906 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #394: GFLOPs: 517.2485. Time: 447.0018 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #395: GFLOPs: 576.5706. Time: 401.0108 us. Best GFLOPs: 710.8834
2024-04-29 12:46:03 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #396: GFLOPs: 108.3380. Time: 2134.1627 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #397: GFLOPs: 73.9794. Time: 3125.3444 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #398: GFLOPs: 517.2177. Time: 447.0284 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #399: GFLOPs: 608.0231. Time: 380.2668 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #400: GFLOPs: 153.0191. Time: 1510.9941 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #401: GFLOPs: 576.6422. Time: 400.9610 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #402: GFLOPs: 574.4480. Time: 402.4925 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #403: GFLOPs: 555.4690. Time: 416.2447 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #404: GFLOPs: 401.1931. Time: 576.3085 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #405: GFLOPs: 605.5399. Time: 381.8262 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #406: GFLOPs: 81.1162. Time: 2850.3669 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #407: GFLOPs: 590.6209. Time: 391.4711 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #408: GFLOPs: 592.0664. Time: 390.5154 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #409: GFLOPs: 594.6635. Time: 388.8098 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #410: GFLOPs: 485.0574. Time: 476.6674 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #411: GFLOPs: 110.6485. Time: 2089.5998 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #412: GFLOPs: 110.6810. Time: 2088.9862 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #413: GFLOPs: 82.7803. Time: 2793.0664 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #414: GFLOPs: 89.4784. Time: 2583.9883 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #415: GFLOPs: 83.3920. Time: 2772.5803 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #416: GFLOPs: 83.3528. Time: 2773.8857 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #417: GFLOPs: 593.9967. Time: 389.2463 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #418: GFLOPs: 86.0304. Time: 2687.5514 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #419: GFLOPs: 596.9639. Time: 387.3115 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #420: GFLOPs: 114.2883. Time: 2023.0509 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #421: GFLOPs: 594.4953. Time: 388.9198 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #422: GFLOPs: 603.7907. Time: 382.9324 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #423: GFLOPs: 174.6869. Time: 1323.5737 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #424: GFLOPs: 398.2103. Time: 580.6254 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #425: GFLOPs: 450.0612. Time: 513.7323 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #426: GFLOPs: 520.6650. Time: 444.0686 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #427: GFLOPs: 691.2480. Time: 334.4834 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #428: GFLOPs: 594.8337. Time: 388.6986 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #429: GFLOPs: 221.8623. Time: 1042.1376 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #430: GFLOPs: 119.9403. Time: 1927.7167 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #431: GFLOPs: 127.3084. Time: 1816.1493 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #432: GFLOPs: 155.8920. Time: 1483.1490 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #433: GFLOPs: 216.8118. Time: 1066.4135 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #434: GFLOPs: 104.3077. Time: 2216.6240 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #435: GFLOPs: 182.4129. Time: 1267.5143 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #436: GFLOPs: 228.5439. Time: 1011.6698 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #437: GFLOPs: 71.3337. Time: 3241.2603 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #438: GFLOPs: 89.3074. Time: 2588.9355 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #439: GFLOPs: 69.1129. Time: 3345.4090 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #440: GFLOPs: 183.8949. Time: 1257.3000 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #441: GFLOPs: 501.2662. Time: 461.2539 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #442: GFLOPs: 502.8488. Time: 459.8023 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #443: GFLOPs: 210.5164. Time: 1098.3041 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #444: GFLOPs: 213.2300. Time: 1084.3267 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #445: GFLOPs: 12.5885. Time: 18366.8963 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #446: GFLOPs: 116.4632. Time: 1985.2705 us. Best GFLOPs: 710.8834
2024-04-29 12:46:04 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_contrib_conv2d_NCHWc_3] Trial #447: GFLOPs: 2.9571. Time: 78188.6083 us. Best GFLOPs: 710.8834
