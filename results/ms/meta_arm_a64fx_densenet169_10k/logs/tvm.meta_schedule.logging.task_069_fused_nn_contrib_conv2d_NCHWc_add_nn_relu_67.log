2024-04-29 08:23:20 [INFO] [task_scheduler.cc:160] Initializing Task #69: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67"
2024-04-29 08:23:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(384), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:23:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:23:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:23:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:23:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 10:10:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:10:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:10:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 10:10:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:10:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 10:10:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 10:10:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 10:10:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 10:10:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9992  0.9986  0.9985  0.9977  0.9977  0.9977  0.9976  0.9976  0.9967  0.9962  0.9961  0.9955  0.9954  0.9953  0.9946
[17 : 32]:	0.9943  0.9941  0.9940  0.9934  0.9933  0.9931  0.9929  0.9929  0.9924  0.9903  0.9903  0.9902  0.9900  0.9889  0.9888  0.9880
[33 : 48]:	0.9868  0.9863  0.9862  0.9862  0.9859  0.9859  0.9857  0.9848  0.9844  0.9838  0.9833  0.9832  0.9831  0.9821  0.9815  0.9815
[49 : 64]:	0.9813  0.9813  0.9804  0.9803  0.9802  0.9792  0.9779  0.9774  0.9770  0.9759  0.9759  0.9743  0.9736  0.9733  0.9732  0.9728
2024-04-29 10:10:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:10:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #1: GFLOPs: 119.3591. Time: 647.3827 us. Best GFLOPs: 119.3591
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #2: GFLOPs: 94.1771. Time: 820.4867 us. Best GFLOPs: 119.3591
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #3: GFLOPs: 128.8937. Time: 599.4943 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #4: GFLOPs: 1.7075. Time: 45255.0767 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:121] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #6: GFLOPs: 19.1911. Time: 4026.4086 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #7: GFLOPs: 34.8563. Time: 2216.8441 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #8: GFLOPs: 35.1725. Time: 2196.9139 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #9: GFLOPs: 6.0869. Time: 12694.6143 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #10: GFLOPs: 44.6161. Time: 1731.9106 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #11: GFLOPs: 58.9859. Time: 1309.9908 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #12: GFLOPs: 93.3315. Time: 827.9201 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #13: GFLOPs: 77.9975. Time: 990.6862 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #14: GFLOPs: 29.1925. Time: 2646.9515 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #15: GFLOPs: 8.2331. Time: 9385.4673 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #16: GFLOPs: 89.6748. Time: 861.6806 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #17: GFLOPs: 7.3624. Time: 10495.3625 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #18: GFLOPs: 93.2277. Time: 828.8422 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #19: GFLOPs: 66.4345. Time: 1163.1155 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #20: GFLOPs: 55.3490. Time: 1396.0695 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #21: GFLOPs: 21.1069. Time: 3660.9447 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #22: GFLOPs: 56.2629. Time: 1373.3916 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #23: GFLOPs: 1.1884. Time: 65021.5617 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #24: GFLOPs: 55.7418. Time: 1386.2322 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #25: GFLOPs: 5.2623. Time: 14684.0244 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #26: GFLOPs: 2.0301. Time: 38062.4843 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #27: GFLOPs: 38.0038. Time: 2033.2467 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #28: GFLOPs: 5.9481. Time: 12990.8899 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #29: GFLOPs: 13.1439. Time: 5878.8459 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #30: GFLOPs: 0.8776. Time: 88047.9790 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #31: GFLOPs: 36.0577. Time: 2142.9838 us. Best GFLOPs: 128.8937
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #32: GFLOPs: 137.7814. Time: 560.8236 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #33: GFLOPs: 51.1289. Time: 1511.2999 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #34: GFLOPs: 79.8462. Time: 967.7482 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #35: GFLOPs: 8.9369. Time: 8646.3039 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #36: GFLOPs: 4.6837. Time: 16497.9894 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #37: GFLOPs: 122.1990. Time: 632.3377 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #38: GFLOPs: 56.3525. Time: 1371.2082 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #39: GFLOPs: 13.0891. Time: 5903.4768 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #40: GFLOPs: 116.8540. Time: 661.2612 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #41: GFLOPs: 10.0203. Time: 7711.4473 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #42: GFLOPs: 6.3410. Time: 12185.9347 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #43: GFLOPs: 1.3152. Time: 58753.4590 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #44: GFLOPs: 12.6584. Time: 6104.3187 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #45: GFLOPs: 83.1460. Time: 929.3421 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #46: GFLOPs: 98.7913. Time: 782.1642 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #47: GFLOPs: 68.8745. Time: 1121.9104 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #48: GFLOPs: 7.4011. Time: 10440.4754 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #49: GFLOPs: 67.4518. Time: 1145.5750 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #50: GFLOPs: 94.2458. Time: 819.8885 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #51: GFLOPs: 0.8482. Time: 91094.8007 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #52: GFLOPs: 74.9024. Time: 1031.6237 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #53: GFLOPs: 51.7859. Time: 1492.1252 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #54: GFLOPs: 53.7736. Time: 1436.9701 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #55: GFLOPs: 81.5576. Time: 947.4411 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #56: GFLOPs: 10.0146. Time: 7715.8426 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #57: GFLOPs: 27.9965. Time: 2760.0271 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #58: GFLOPs: 1.1731. Time: 65867.5277 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #59: GFLOPs: 98.7160. Time: 782.7609 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #60: GFLOPs: 103.1028. Time: 749.4563 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #61: GFLOPs: 68.3034. Time: 1131.2908 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #62: GFLOPs: 5.0588. Time: 15274.6781 us. Best GFLOPs: 137.7814
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #63: GFLOPs: 224.7769. Time: 343.7678 us. Best GFLOPs: 224.7769
2024-04-29 11:02:50 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #64: GFLOPs: 10.1470. Time: 7615.1889 us. Best GFLOPs: 224.7769
2024-04-29 12:48:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:48:30 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 12:48:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 12:48:32 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 12:48:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 12:48:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 12:48:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 12:48:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe782928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf4f1a98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x81e3588)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfb6f1d8)]: 0 failure(s)
2024-04-29 12:48:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8317  0.8227  0.7985  0.7784  0.7771  0.7701  0.7579  0.7572  0.7429  0.7400  0.7284  0.7277  0.7203  0.7192  0.7150  0.7149
[17 : 32]:	0.7148  0.7121  0.7053  0.6981  0.6955  0.6953  0.6953  0.6883  0.6883  0.6856  0.6848  0.6834  0.6834  0.6830  0.6830  0.6815
[33 : 48]:	0.6802  0.6779  0.6777  0.6768  0.6744  0.6742  0.6696  0.6696  0.6691  0.6691  0.6662  0.6641  0.6592  0.6590  0.6514  0.6504
[49 : 64]:	0.6497  0.6482  0.6467  0.6452  0.6452  0.6422  0.6422  0.6364  0.6347  0.6306  0.6299  0.6291  0.6244  0.6241  0.6241  0.6232
2024-04-29 12:48:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:48:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #65: GFLOPs: 92.9594. Time: 831.2342 us. Best GFLOPs: 224.7769
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #66: GFLOPs: 116.6571. Time: 662.3775 us. Best GFLOPs: 224.7769
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #67: GFLOPs: 79.4021. Time: 973.1609 us. Best GFLOPs: 224.7769
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #68: GFLOPs: 94.1324. Time: 820.8765 us. Best GFLOPs: 224.7769
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #69: GFLOPs: 225.3352. Time: 342.9159 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #70: GFLOPs: 59.6062. Time: 1296.3593 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #71: GFLOPs: 148.0084. Time: 522.0720 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #72: GFLOPs: 151.6738. Time: 509.4555 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #73: GFLOPs: 192.0995. Time: 402.2448 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #74: GFLOPs: 187.9477. Time: 411.1306 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #75: GFLOPs: 140.1127. Time: 551.4919 us. Best GFLOPs: 225.3352
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #76: GFLOPs: 225.5373. Time: 342.6086 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #77: GFLOPs: 154.5828. Time: 499.8683 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #78: GFLOPs: 154.3537. Time: 500.6103 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #79: GFLOPs: 191.8227. Time: 402.8253 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #80: GFLOPs: 224.0643. Time: 344.8610 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #81: GFLOPs: 203.1066. Time: 380.4458 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #82: GFLOPs: 185.8862. Time: 415.6900 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #83: GFLOPs: 183.7294. Time: 420.5697 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #84: GFLOPs: 169.8269. Time: 454.9987 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #85: GFLOPs: 159.0190. Time: 485.9234 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #86: GFLOPs: 186.2134. Time: 414.9596 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #87: GFLOPs: 191.9444. Time: 402.5700 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:121] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(98) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(98) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(98) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #89: GFLOPs: 107.9884. Time: 715.5492 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #90: GFLOPs: 164.2471. Time: 470.4561 us. Best GFLOPs: 225.5373
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #91: GFLOPs: 285.0554. Time: 271.0737 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #92: GFLOPs: 191.5099. Time: 403.4833 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #93: GFLOPs: 216.2636. Time: 357.3003 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #94: GFLOPs: 151.2662. Time: 510.8281 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #95: GFLOPs: 174.3142. Time: 443.2860 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:121] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #96: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l111)
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:121] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #97: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(98) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(98) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(98) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #98: GFLOPs: 157.6711. Time: 490.0773 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #99: GFLOPs: 170.1876. Time: 454.0344 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #100: GFLOPs: 89.4488. Time: 863.8577 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #101: GFLOPs: 179.3833. Time: 430.7593 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #102: GFLOPs: 101.0539. Time: 764.6521 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #103: GFLOPs: 168.0148. Time: 459.9063 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #104: GFLOPs: 158.7656. Time: 486.6989 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #105: GFLOPs: 111.6741. Time: 691.9336 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #106: GFLOPs: 95.1468. Time: 812.1243 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #107: GFLOPs: 91.5372. Time: 844.1487 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:121] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #108: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(7) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(7) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #109: GFLOPs: 97.5130. Time: 792.4177 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #110: GFLOPs: 172.1854. Time: 448.7666 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #111: GFLOPs: 104.1054. Time: 742.2386 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #112: GFLOPs: 110.0102. Time: 702.3990 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #113: GFLOPs: 83.9800. Time: 920.1125 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #114: GFLOPs: 141.8902. Time: 544.5835 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #115: GFLOPs: 58.0758. Time: 1330.5198 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #116: GFLOPs: 164.1742. Time: 470.6648 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #117: GFLOPs: 47.1406. Time: 1639.1629 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #118: GFLOPs: 185.2173. Time: 417.1913 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #119: GFLOPs: 188.3236. Time: 410.3100 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #120: GFLOPs: 134.1179. Time: 576.1426 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #121: GFLOPs: 129.2576. Time: 597.8064 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #122: GFLOPs: 100.5822. Time: 768.2376 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #123: GFLOPs: 154.8524. Time: 498.9979 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #124: GFLOPs: 124.4846. Time: 620.7275 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #125: GFLOPs: 170.9627. Time: 451.9760 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #126: GFLOPs: 5.4188. Time: 14259.8074 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #127: GFLOPs: 21.5681. Time: 3582.6491 us. Best GFLOPs: 285.0554
2024-04-29 12:50:32 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_67] Trial #128: GFLOPs: 30.2699. Time: 2552.7357 us. Best GFLOPs: 285.0554
