2024-04-29 08:20:14 [INFO] [task_scheduler.cc:160] Initializing Task #22: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22"
2024-04-29 08:20:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(928), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:20:14 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:20:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(58), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(58) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 58])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:20:14 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(58), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(58) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 58])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:20:14 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(58), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(58) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 58])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:58:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:58:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:58:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfc2eef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4a8d838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa260f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbc6bac8)]: 0 failure(s)
2024-04-29 08:58:06 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:58:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfc2eef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4a8d838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa260f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbc6bac8)]: 0 failure(s)
2024-04-29 08:58:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfc2eef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4a8d838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa260f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbc6bac8)]: 0 failure(s)
2024-04-29 08:58:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfc2eef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4a8d838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa260f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbc6bac8)]: 0 failure(s)
2024-04-29 08:58:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfc2eef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4a8d838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa260f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbc6bac8)]: 0 failure(s)
2024-04-29 08:58:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9998  0.9996  0.9987  0.9986  0.9983  0.9971  0.9969  0.9953  0.9953  0.9950  0.9949  0.9948  0.9947  0.9942  0.9937
[17 : 32]:	0.9932  0.9887  0.9881  0.9874  0.9872  0.9870  0.9839  0.9838  0.9833  0.9830  0.9829  0.9826  0.9823  0.9819  0.9815  0.9813
[33 : 48]:	0.9805  0.9804  0.9802  0.9795  0.9795  0.9792  0.9786  0.9781  0.9772  0.9771  0.9767  0.9763  0.9755  0.9752  0.9749  0.9745
[49 : 64]:	0.9743  0.9738  0.9736  0.9735  0.9735  0.9725  0.9695  0.9685  0.9681  0.9674  0.9669  0.9668  0.9668  0.9666  0.9661  0.9654
2024-04-29 08:58:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:58:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #1: GFLOPs: 9.9164. Time: 1175.1647 us. Best GFLOPs: 9.9164
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #2: GFLOPs: 19.1073. Time: 609.8901 us. Best GFLOPs: 19.1073
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #3: GFLOPs: 0.5561. Time: 20956.2584 us. Best GFLOPs: 19.1073
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #4: GFLOPs: 6.9636. Time: 1673.4761 us. Best GFLOPs: 19.1073
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #5: GFLOPs: 18.5954. Time: 626.6810 us. Best GFLOPs: 19.1073
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #6: GFLOPs: 48.3056. Time: 241.2426 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #7: GFLOPs: 42.3369. Time: 275.2534 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #8: GFLOPs: 12.4069. Time: 939.2668 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #9: GFLOPs: 28.1317. Time: 414.2442 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #10: GFLOPs: 3.3384. Time: 3490.6876 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #11: GFLOPs: 2.2783. Time: 5114.8610 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #12: GFLOPs: 24.0581. Time: 484.3842 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #13: GFLOPs: 25.4588. Time: 457.7356 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #14: GFLOPs: 44.3020. Time: 263.0439 us. Best GFLOPs: 48.3056
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #15: GFLOPs: 69.5093. Time: 167.6521 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #16: GFLOPs: 19.9030. Time: 585.5075 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #17: GFLOPs: 65.5914. Time: 177.6663 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #18: GFLOPs: 19.8396. Time: 587.3782 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #19: GFLOPs: 60.6714. Time: 192.0736 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #20: GFLOPs: 7.3637. Time: 1582.5519 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #21: GFLOPs: 28.5425. Time: 408.2817 us. Best GFLOPs: 69.5093
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #22: GFLOPs: 113.9084. Time: 102.3048 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #23: GFLOPs: 2.2041. Time: 5287.1259 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #24: GFLOPs: 71.2520. Time: 163.5515 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #25: GFLOPs: 61.1895. Time: 190.4474 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #26: GFLOPs: 45.1416. Time: 258.1518 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #27: GFLOPs: 29.6172. Time: 393.4662 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #28: GFLOPs: 31.5281. Time: 369.6183 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #29: GFLOPs: 0.7417. Time: 15712.7159 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #30: GFLOPs: 14.9402. Time: 780.0035 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #31: GFLOPs: 32.2520. Time: 361.3230 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #32: GFLOPs: 8.7065. Time: 1338.4715 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #33: GFLOPs: 86.7807. Time: 134.2854 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #34: GFLOPs: 67.1371. Time: 173.5759 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #35: GFLOPs: 85.4307. Time: 136.4073 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #36: GFLOPs: 44.4475. Time: 262.1832 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #37: GFLOPs: 50.6714. Time: 229.9794 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #38: GFLOPs: 0.3585. Time: 32503.9023 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #39: GFLOPs: 52.9186. Time: 220.2134 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #40: GFLOPs: 1.4878. Time: 7832.4080 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #41: GFLOPs: 8.7835. Time: 1326.7384 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #42: GFLOPs: 59.2346. Time: 196.7327 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #43: GFLOPs: 17.3498. Time: 671.6715 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #44: GFLOPs: 54.4105. Time: 214.1753 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #45: GFLOPs: 3.6007. Time: 3236.4091 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #46: GFLOPs: 4.4872. Time: 2597.0469 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #47: GFLOPs: 5.8695. Time: 1985.4241 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #48: GFLOPs: 64.2028. Time: 181.5087 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #49: GFLOPs: 91.5036. Time: 127.3543 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #50: GFLOPs: 71.5747. Time: 162.8142 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #51: GFLOPs: 0.3817. Time: 30533.8438 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #52: GFLOPs: 40.0630. Time: 290.8762 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #53: GFLOPs: 50.6450. Time: 230.0994 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #54: GFLOPs: 20.7607. Time: 561.3188 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #55: GFLOPs: 35.5664. Time: 327.6512 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #56: GFLOPs: 9.1372. Time: 1275.3747 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #57: GFLOPs: 3.8885. Time: 2996.9013 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #58: GFLOPs: 54.7637. Time: 212.7937 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #59: GFLOPs: 21.7779. Time: 535.1001 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #60: GFLOPs: 26.7410. Time: 435.7862 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #61: GFLOPs: 2.7265. Time: 4274.1534 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #62: GFLOPs: 107.2824. Time: 108.6233 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #63: GFLOPs: 53.4444. Time: 218.0466 us. Best GFLOPs: 113.9084
2024-04-29 10:57:38 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #64: GFLOPs: 25.6871. Time: 453.6667 us. Best GFLOPs: 113.9084
