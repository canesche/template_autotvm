2024-04-29 08:24:53 [INFO] [task_scheduler.cc:160] Initializing Task #99: "fused_nn_avg_pool2d_2"
2024-04-29 08:24:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 08:24:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(160)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4), T.int64(1)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4), T.int64(4), T.int64(1)):
                with T.block("pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(160), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(160), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax2_1)
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax3, ax4 in T.grid(T.int64(7), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 10:50:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:50:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:50:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc5149e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc50ea38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x904c5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9de1a88)]: 0 failure(s)
2024-04-29 10:50:49 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:50:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc5149e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc50ea38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x904c5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9de1a88)]: 0 failure(s)
2024-04-29 10:50:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc5149e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc50ea38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x904c5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9de1a88)]: 0 failure(s)
2024-04-29 10:51:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc5149e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc50ea38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x904c5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9de1a88)]: 0 failure(s)
2024-04-29 10:51:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc5149e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc50ea38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x904c5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9de1a88)]: 0 failure(s)
2024-04-29 10:51:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9973  0.9969  0.9951  0.9947  0.9935  0.9900  0.9880  0.9856  0.9825  0.9821  0.9793  0.9761  0.9751  0.9737  0.9672  0.9665
[17 : 32]:	0.9627  0.9595  0.9592  0.9526  0.9524  0.9521  0.9514  0.9501  0.9472  0.9471  0.9434  0.9397  0.9378  0.9359  0.9328  0.9288
[33 : 48]:	0.9285  0.9278  0.9267  0.9252  0.9244  0.9181  0.9172  0.9170  0.9151  0.9103  0.9070  0.9043  0.9004  0.9004  0.8996  0.8980
[49 : 64]:	0.8965  0.8947  0.8908  0.8906  0.8836  0.8814  0.8806  0.8805  0.8784  0.8779  0.8738  0.8686  0.8672  0.8653  0.8636  0.8598
2024-04-29 10:51:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:51:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #1: GFLOPs: 9.8392. Time: 79.6813 us. Best GFLOPs: 9.8392
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #2: GFLOPs: 30.6147. Time: 25.6086 us. Best GFLOPs: 30.6147
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #3: GFLOPs: 31.4790. Time: 24.9055 us. Best GFLOPs: 31.4790
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #4: GFLOPs: 33.1134. Time: 23.6762 us. Best GFLOPs: 33.1134
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #5: GFLOPs: 43.7221. Time: 17.9314 us. Best GFLOPs: 43.7221
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #6: GFLOPs: 71.9125. Time: 10.9021 us. Best GFLOPs: 71.9125
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #7: GFLOPs: 26.4177. Time: 29.6770 us. Best GFLOPs: 71.9125
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #8: GFLOPs: 69.0666. Time: 11.3514 us. Best GFLOPs: 71.9125
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #9: GFLOPs: 65.0532. Time: 12.0517 us. Best GFLOPs: 71.9125
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #10: GFLOPs: 72.3177. Time: 10.8410 us. Best GFLOPs: 72.3177
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #11: GFLOPs: 77.7884. Time: 10.0786 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #12: GFLOPs: 44.5677. Time: 17.5912 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #13: GFLOPs: 27.1237. Time: 28.9046 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #14: GFLOPs: 72.4541. Time: 10.8206 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #15: GFLOPs: 39.3719. Time: 19.9127 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #16: GFLOPs: 25.7965. Time: 30.3918 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #17: GFLOPs: 29.0005. Time: 27.0340 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #18: GFLOPs: 19.6018. Time: 39.9962 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #19: GFLOPs: 76.1373. Time: 10.2972 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #20: GFLOPs: 71.5761. Time: 10.9534 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #21: GFLOPs: 72.7613. Time: 10.7750 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #22: GFLOPs: 30.4372. Time: 25.7579 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #23: GFLOPs: 68.8805. Time: 11.3820 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:121] [Task #99: fused_nn_avg_pool2d_2] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(160), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(4)):
                for ax1_init, ax2_init, ax3_init, ax4_init, ax5_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_init)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5_init)
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                for ax0, ax1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l44, l45, l46, l47 = sch.get_loops(block=b23)
b48 = sch.get_block(name="pool_sum_rf", func_name="main")
l49, l50, l51, l52, l53, l54, l55, l56 = sch.get_loops(block=b48)
b57 = sch.decompose_reduction(block=b48, loop=l56)
b58 = sch.get_block(name="pool_sum", func_name="main")
l59, l60, l61, l62, l63, l64, l65, l66, l67, l68 = sch.get_loops(block=b58)
b69 = sch.decompose_reduction(block=b58, loop=l63)
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #25: GFLOPs: 73.3449. Time: 10.6892 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #26: GFLOPs: 65.0489. Time: 12.0525 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #27: GFLOPs: 25.5628. Time: 30.6696 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #28: GFLOPs: 63.6311. Time: 12.3210 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #29: GFLOPs: 27.8724. Time: 28.1282 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #30: GFLOPs: 18.0684. Time: 43.3907 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #31: GFLOPs: 24.7701. Time: 31.6511 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:121] [Task #99: fused_nn_avg_pool2d_2] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(160), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(160), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax2 in range(T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l41)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l42, l43, l44, l45 = sch.get_loops(block=b23)
l46 = sch.fuse(l44, l45, preserve_unit_iters=True)
sch.vectorize(loop=l46)
b47 = sch.get_block(name="pool_sum_rf", func_name="main")
l48, l49, l50, l51, l52, l53, l54, l55 = sch.get_loops(block=b47)
b56 = sch.decompose_reduction(block=b47, loop=l55)
b57 = sch.get_block(name="pool_sum", func_name="main")
l58, l59, l60, l61, l62, l63 = sch.get_loops(block=b57)
b64 = sch.decompose_reduction(block=b57, loop=l59)
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #33: GFLOPs: 26.3014. Time: 29.8082 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #34: GFLOPs: 69.4430. Time: 11.2898 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #35: GFLOPs: 26.3952. Time: 29.7024 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #36: GFLOPs: 30.7067. Time: 25.5319 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #37: GFLOPs: 69.2861. Time: 11.3154 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #38: GFLOPs: 32.4252. Time: 24.1787 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #39: GFLOPs: 75.5977. Time: 10.3707 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #40: GFLOPs: 20.2202. Time: 38.7731 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #41: GFLOPs: 25.5934. Time: 30.6329 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #42: GFLOPs: 50.9642. Time: 15.3834 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #43: GFLOPs: 30.5041. Time: 25.7015 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #44: GFLOPs: 21.7083. Time: 36.1152 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #45: GFLOPs: 38.4059. Time: 20.4135 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #46: GFLOPs: 66.3827. Time: 11.8103 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #47: GFLOPs: 26.5746. Time: 29.5019 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #48: GFLOPs: 68.2090. Time: 11.4941 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #49: GFLOPs: 65.9958. Time: 11.8795 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #50: GFLOPs: 30.9639. Time: 25.3198 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #51: GFLOPs: 67.2352. Time: 11.6606 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #52: GFLOPs: 75.4927. Time: 10.3851 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #53: GFLOPs: 73.5585. Time: 10.6582 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #54: GFLOPs: 74.0234. Time: 10.5912 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #55: GFLOPs: 38.3061. Time: 20.4667 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #56: GFLOPs: 35.2050. Time: 22.2696 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #57: GFLOPs: 25.8389. Time: 30.3419 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #58: GFLOPs: 34.1428. Time: 22.9624 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #59: GFLOPs: 26.7178. Time: 29.3438 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #60: GFLOPs: 60.8732. Time: 12.8792 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #61: GFLOPs: 76.5018. Time: 10.2481 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #62: GFLOPs: 71.5631. Time: 10.9554 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #63: GFLOPs: 25.4907. Time: 30.7564 us. Best GFLOPs: 77.7884
2024-04-29 11:07:40 [INFO] [task_scheduler.cc:131] [Task #99: fused_nn_avg_pool2d_2] Trial #64: GFLOPs: 25.5953. Time: 30.6306 us. Best GFLOPs: 77.7884
