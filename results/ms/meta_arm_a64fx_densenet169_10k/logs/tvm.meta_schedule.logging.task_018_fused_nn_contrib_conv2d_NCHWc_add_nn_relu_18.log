2024-04-29 08:19:58 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18"
2024-04-29 08:19:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1056), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:19:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:19:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1056), ic_0 * T.int64(11) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 11])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:19:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1056), ic_0 * T.int64(11) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 11])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:19:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1056), ic_0 * T.int64(11) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 11])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:52:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:52:04 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:52:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a165d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ca1a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa79b3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba24378)]: 0 failure(s)
2024-04-29 08:52:07 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:52:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a165d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ca1a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa79b3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba24378)]: 0 failure(s)
2024-04-29 08:52:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a165d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ca1a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa79b3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba24378)]: 0 failure(s)
2024-04-29 08:52:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a165d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ca1a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa79b3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba24378)]: 0 failure(s)
2024-04-29 08:52:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a165d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ca1a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa79b3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba24378)]: 0 failure(s)
2024-04-29 08:52:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9994  0.9991  0.9990  0.9990  0.9985  0.9984  0.9976  0.9970  0.9960  0.9959  0.9959  0.9955  0.9951  0.9949  0.9946
[17 : 32]:	0.9945  0.9929  0.9928  0.9924  0.9916  0.9910  0.9903  0.9900  0.9888  0.9886  0.9882  0.9881  0.9867  0.9867  0.9861  0.9856
[33 : 48]:	0.9854  0.9843  0.9838  0.9833  0.9830  0.9827  0.9820  0.9819  0.9816  0.9813  0.9810  0.9805  0.9805  0.9804  0.9795  0.9791
[49 : 64]:	0.9791  0.9790  0.9788  0.9782  0.9772  0.9770  0.9766  0.9761  0.9761  0.9760  0.9759  0.9754  0.9745  0.9743  0.9734  0.9728
2024-04-29 08:52:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:52:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #1: GFLOPs: 107.5573. Time: 123.2739 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #2: GFLOPs: 70.7029. Time: 187.5314 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #3: GFLOPs: 85.8848. Time: 154.3813 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #4: GFLOPs: 65.6097. Time: 202.0890 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #5: GFLOPs: 3.8602. Time: 3434.7950 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #6: GFLOPs: 46.0108. Time: 288.1715 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #7: GFLOPs: 54.4429. Time: 243.5396 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #8: GFLOPs: 45.3666. Time: 292.2636 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #9: GFLOPs: 67.0625. Time: 197.7113 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #10: GFLOPs: 46.6101. Time: 284.4664 us. Best GFLOPs: 107.5573
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #11: GFLOPs: 135.7190. Time: 97.6946 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #12: GFLOPs: 114.4982. Time: 115.8010 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #13: GFLOPs: 98.1029. Time: 135.1541 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #14: GFLOPs: 42.3808. Time: 312.8544 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #15: GFLOPs: 98.9181. Time: 134.0403 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #16: GFLOPs: 34.0065. Time: 389.8963 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #17: GFLOPs: 84.7550. Time: 156.4392 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #18: GFLOPs: 25.8236. Time: 513.4462 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #19: GFLOPs: 38.3576. Time: 345.6681 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #20: GFLOPs: 58.9080. Time: 225.0799 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #21: GFLOPs: 91.2054. Time: 145.3752 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #22: GFLOPs: 42.2933. Time: 313.5017 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #23: GFLOPs: 4.4495. Time: 2979.8871 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #24: GFLOPs: 11.9965. Time: 1105.2438 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #25: GFLOPs: 18.9502. Time: 699.6764 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #26: GFLOPs: 78.3127. Time: 169.3085 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #27: GFLOPs: 31.8004. Time: 416.9441 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #28: GFLOPs: 55.0145. Time: 241.0094 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #29: GFLOPs: 31.4617. Time: 421.4334 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #30: GFLOPs: 53.1170. Time: 249.6191 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #31: GFLOPs: 23.3397. Time: 568.0889 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #32: GFLOPs: 6.5496. Time: 2024.4026 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #33: GFLOPs: 17.7549. Time: 746.7791 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #34: GFLOPs: 40.5374. Time: 327.0807 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #35: GFLOPs: 36.0383. Time: 367.9143 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #36: GFLOPs: 5.4435. Time: 2435.7723 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #37: GFLOPs: 21.9305. Time: 604.5924 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #38: GFLOPs: 36.4023. Time: 364.2352 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #39: GFLOPs: 8.9844. Time: 1475.7771 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #40: GFLOPs: 62.9788. Time: 210.5311 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #41: GFLOPs: 15.1892. Time: 872.9259 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #42: GFLOPs: 34.0672. Time: 389.2019 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #43: GFLOPs: 2.3240. Time: 5705.1897 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #44: GFLOPs: 14.6734. Time: 903.6054 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #45: GFLOPs: 34.6681. Time: 382.4558 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #46: GFLOPs: 31.1029. Time: 426.2947 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #47: GFLOPs: 53.6871. Time: 246.9680 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #48: GFLOPs: 36.4276. Time: 363.9829 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #49: GFLOPs: 51.5682. Time: 257.1158 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #50: GFLOPs: 64.0288. Time: 207.0787 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #51: GFLOPs: 60.0950. Time: 220.6340 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #52: GFLOPs: 45.4327. Time: 291.8384 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #53: GFLOPs: 11.8653. Time: 1117.4582 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #54: GFLOPs: 86.0518. Time: 154.0817 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #55: GFLOPs: 4.3599. Time: 3041.1513 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #56: GFLOPs: 52.1307. Time: 254.3418 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #57: GFLOPs: 30.0331. Time: 441.4798 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #58: GFLOPs: 15.9257. Time: 832.5543 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #59: GFLOPs: 4.9798. Time: 2662.5374 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #60: GFLOPs: 24.0310. Time: 551.7459 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #61: GFLOPs: 69.3254. Time: 191.2576 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #62: GFLOPs: 17.1329. Time: 773.8922 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #63: GFLOPs: 36.6078. Time: 362.1906 us. Best GFLOPs: 135.7190
2024-04-29 10:57:24 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #64: GFLOPs: 23.3727. Time: 567.2857 us. Best GFLOPs: 135.7190
