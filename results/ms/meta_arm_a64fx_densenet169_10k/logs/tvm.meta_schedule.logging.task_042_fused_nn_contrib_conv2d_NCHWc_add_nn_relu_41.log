2024-04-29 08:21:33 [INFO] [task_scheduler.cc:160] Initializing Task #42: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41"
2024-04-29 08:21:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(960), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:21:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:21:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(60) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:21:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:21:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(60) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:29:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:29:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:29:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 09:29:11 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:29:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 09:29:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 09:29:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 09:29:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 09:29:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9990  0.9987  0.9985  0.9984  0.9983  0.9982  0.9980  0.9978  0.9974  0.9972  0.9971  0.9965  0.9959  0.9954  0.9941
[17 : 32]:	0.9941  0.9933  0.9932  0.9930  0.9925  0.9913  0.9912  0.9911  0.9907  0.9903  0.9902  0.9897  0.9895  0.9895  0.9892  0.9888
[33 : 48]:	0.9887  0.9874  0.9874  0.9871  0.9860  0.9856  0.9852  0.9847  0.9844  0.9844  0.9841  0.9838  0.9836  0.9827  0.9822  0.9818
[49 : 64]:	0.9817  0.9806  0.9796  0.9795  0.9793  0.9788  0.9771  0.9770  0.9769  0.9767  0.9761  0.9758  0.9752  0.9734  0.9733  0.9731
2024-04-29 09:29:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:29:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #1: GFLOPs: 9.0778. Time: 5311.7709 us. Best GFLOPs: 9.0778
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #2: GFLOPs: 5.7748. Time: 8349.8718 us. Best GFLOPs: 9.0778
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #3: GFLOPs: 25.1447. Time: 1917.6667 us. Best GFLOPs: 25.1447
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #4: GFLOPs: 15.2962. Time: 3152.3559 us. Best GFLOPs: 25.1447
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #5: GFLOPs: 0.7554. Time: 63831.3767 us. Best GFLOPs: 25.1447
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #6: GFLOPs: 117.2065. Time: 411.4033 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #7: GFLOPs: 56.0466. Time: 860.3405 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #8: GFLOPs: 28.7186. Time: 1679.0221 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #9: GFLOPs: 2.5454. Time: 18943.6027 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:121] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(192), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(5) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[192, 5])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #11: GFLOPs: 3.8831. Time: 12417.7043 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #12: GFLOPs: 28.3965. Time: 1698.0656 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #13: GFLOPs: 4.5166. Time: 10676.0212 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #14: GFLOPs: 40.5972. Time: 1187.7445 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #15: GFLOPs: 1.4717. Time: 32765.3495 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #16: GFLOPs: 2.8535. Time: 16898.2153 us. Best GFLOPs: 117.2065
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:121] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(98) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(196) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(98) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(196) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[15, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #18: GFLOPs: 130.2903. Time: 370.0901 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #19: GFLOPs: 7.3755. Time: 6537.7796 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #20: GFLOPs: 75.8486. Time: 635.7289 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #21: GFLOPs: 118.6971. Time: 406.2368 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #22: GFLOPs: 69.0605. Time: 698.2154 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #23: GFLOPs: 29.6978. Time: 1623.6601 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #24: GFLOPs: 90.7046. Time: 531.6065 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #25: GFLOPs: 39.7586. Time: 1212.7981 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #26: GFLOPs: 107.8970. Time: 446.8995 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #27: GFLOPs: 118.3986. Time: 407.2612 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #28: GFLOPs: 66.1873. Time: 728.5256 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #29: GFLOPs: 115.0332. Time: 419.1757 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #30: GFLOPs: 38.9791. Time: 1237.0507 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #31: GFLOPs: 1.2186. Time: 39568.4677 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #32: GFLOPs: 23.6431. Time: 2039.4600 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #33: GFLOPs: 58.1996. Time: 828.5137 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #34: GFLOPs: 56.2780. Time: 856.8019 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #35: GFLOPs: 75.1616. Time: 641.5397 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #36: GFLOPs: 70.8133. Time: 680.9330 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #37: GFLOPs: 86.3799. Time: 558.2219 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #38: GFLOPs: 49.3823. Time: 976.4461 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #39: GFLOPs: 38.1540. Time: 1263.8034 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #40: GFLOPs: 31.5923. Time: 1526.2924 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #41: GFLOPs: 9.9356. Time: 4853.1608 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #42: GFLOPs: 28.4547. Time: 1694.5917 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #43: GFLOPs: 84.2379. Time: 572.4164 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #44: GFLOPs: 7.9373. Time: 6074.9871 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #45: GFLOPs: 16.6483. Time: 2896.3401 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #46: GFLOPs: 28.1819. Time: 1710.9988 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #47: GFLOPs: 4.4941. Time: 10729.4187 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #48: GFLOPs: 94.3180. Time: 511.2402 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #49: GFLOPs: 68.3093. Time: 705.8938 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #50: GFLOPs: 21.0882. Time: 2286.5426 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #51: GFLOPs: 82.3544. Time: 585.5074 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #52: GFLOPs: 25.5479. Time: 1887.4020 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #53: GFLOPs: 32.3616. Time: 1490.0110 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #54: GFLOPs: 38.4324. Time: 1254.6480 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #55: GFLOPs: 84.6927. Time: 569.3424 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #56: GFLOPs: 21.1601. Time: 2278.7716 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #57: GFLOPs: 52.3005. Time: 921.9627 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #58: GFLOPs: 114.7061. Time: 420.3711 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #59: GFLOPs: 6.3822. Time: 7555.2509 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #60: GFLOPs: 1.3681. Time: 35245.7377 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #61: GFLOPs: 88.4525. Time: 545.1414 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #62: GFLOPs: 98.1021. Time: 491.5198 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #63: GFLOPs: 32.3285. Time: 1491.5344 us. Best GFLOPs: 130.2903
2024-04-29 10:59:37 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #64: GFLOPs: 99.3156. Time: 485.5144 us. Best GFLOPs: 130.2903
2024-04-29 12:36:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:36:26 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 12:36:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 12:36:28 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 12:36:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 12:36:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 12:36:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 12:36:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfcced08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa03c0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcd78e48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3116658)]: 0 failure(s)
2024-04-29 12:36:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9808  0.9081  0.8999  0.8946  0.8943  0.8929  0.8783  0.8767  0.8631  0.8592  0.8588  0.8522  0.8394  0.8371  0.8347  0.8319
[17 : 32]:	0.8314  0.8293  0.8278  0.8269  0.8224  0.8172  0.8159  0.8136  0.8097  0.8082  0.8082  0.8040  0.8022  0.8013  0.7974  0.7964
[33 : 48]:	0.7962  0.7929  0.7929  0.7924  0.7915  0.7912  0.7908  0.7903  0.7877  0.7874  0.7867  0.7855  0.7847  0.7840  0.7838  0.7800
[49 : 64]:	0.7777  0.7773  0.7750  0.7744  0.7736  0.7724  0.7707  0.7703  0.7686  0.7680  0.7669  0.7669  0.7669  0.7665  0.7654  0.7638
2024-04-29 12:36:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:36:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #65: GFLOPs: 65.0372. Time: 741.4083 us. Best GFLOPs: 130.2903
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #66: GFLOPs: 58.6357. Time: 822.3517 us. Best GFLOPs: 130.2903
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #67: GFLOPs: 108.9975. Time: 442.3877 us. Best GFLOPs: 130.2903
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #68: GFLOPs: 124.6741. Time: 386.7616 us. Best GFLOPs: 130.2903
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #69: GFLOPs: 112.7864. Time: 427.5262 us. Best GFLOPs: 130.2903
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #70: GFLOPs: 90.1854. Time: 534.6668 us. Best GFLOPs: 130.2903
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #71: GFLOPs: 143.3576. Time: 336.3557 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #72: GFLOPs: 127.0030. Time: 379.6693 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #73: GFLOPs: 126.4354. Time: 381.3736 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #74: GFLOPs: 107.7221. Time: 447.6254 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #75: GFLOPs: 100.1042. Time: 481.6896 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #76: GFLOPs: 123.0961. Time: 391.7196 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #77: GFLOPs: 118.7543. Time: 406.0410 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #78: GFLOPs: 79.2334. Time: 608.5708 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #79: GFLOPs: 138.8401. Time: 347.2999 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #80: GFLOPs: 89.0415. Time: 541.5353 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:121] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #81: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[15, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #82: GFLOPs: 105.1142. Time: 458.7311 us. Best GFLOPs: 143.3576
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #83: GFLOPs: 204.6862. Time: 235.5759 us. Best GFLOPs: 204.6862
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:121] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #84: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[15, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #85: GFLOPs: 219.7990. Time: 219.3783 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #86: GFLOPs: 146.5586. Time: 329.0093 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #87: GFLOPs: 71.7288. Time: 672.2427 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #88: GFLOPs: 207.4259. Time: 232.4644 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #89: GFLOPs: 141.5644. Time: 340.6161 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #90: GFLOPs: 115.4600. Time: 417.6263 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #91: GFLOPs: 136.6225. Time: 352.9370 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #92: GFLOPs: 77.6998. Time: 620.5824 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #93: GFLOPs: 83.6118. Time: 576.7024 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #94: GFLOPs: 186.1317. Time: 259.0593 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #95: GFLOPs: 105.7009. Time: 456.1846 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #96: GFLOPs: 132.7378. Time: 363.2660 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #97: GFLOPs: 128.3463. Time: 375.6955 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #98: GFLOPs: 148.1580. Time: 325.4576 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #99: GFLOPs: 176.1990. Time: 273.6629 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #100: GFLOPs: 52.4713. Time: 918.9626 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #101: GFLOPs: 129.0157. Time: 373.7461 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #102: GFLOPs: 59.0851. Time: 816.0968 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #103: GFLOPs: 127.2298. Time: 378.9926 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #104: GFLOPs: 122.4887. Time: 393.6620 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #105: GFLOPs: 153.3211. Time: 314.4978 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #106: GFLOPs: 54.0057. Time: 892.8522 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #107: GFLOPs: 160.3067. Time: 300.7930 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #108: GFLOPs: 176.5157. Time: 273.1719 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #109: GFLOPs: 61.1199. Time: 788.9268 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #110: GFLOPs: 115.4193. Time: 417.7735 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #111: GFLOPs: 117.4034. Time: 410.7134 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #112: GFLOPs: 119.4353. Time: 403.7260 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #113: GFLOPs: 192.6925. Time: 250.2388 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #114: GFLOPs: 167.7206. Time: 287.4969 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #115: GFLOPs: 95.2273. Time: 506.3581 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #116: GFLOPs: 112.5649. Time: 428.3676 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #117: GFLOPs: 90.7135. Time: 531.5540 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #118: GFLOPs: 107.5754. Time: 448.2356 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #119: GFLOPs: 213.2988. Time: 226.0638 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #120: GFLOPs: 115.9381. Time: 415.9043 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #121: GFLOPs: 134.8949. Time: 357.4571 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #122: GFLOPs: 74.4832. Time: 647.3827 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #123: GFLOPs: 112.9454. Time: 426.9242 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #124: GFLOPs: 54.6348. Time: 882.5711 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #125: GFLOPs: 39.8659. Time: 1209.5337 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #126: GFLOPs: 28.7074. Time: 1679.6783 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #127: GFLOPs: 35.6574. Time: 1352.2901 us. Best GFLOPs: 219.7990
2024-04-29 12:38:28 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_41] Trial #128: GFLOPs: 15.3280. Time: 3145.8196 us. Best GFLOPs: 219.7990
