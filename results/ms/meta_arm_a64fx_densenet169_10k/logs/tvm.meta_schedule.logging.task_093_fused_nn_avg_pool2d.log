2024-04-29 08:24:41 [INFO] [task_scheduler.cc:160] Initializing Task #93: "fused_nn_avg_pool2d"
2024-04-29 08:24:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 08:24:41 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:24:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(28)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(4)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax3)
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax3)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax3, ax4 in T.grid(T.int64(28), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:41 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(28), T.int64(28), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 08:24:41 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        v_rv0, v_rv1 = T.axis.remap("RR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 10:44:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:44:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:44:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x844d048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x72c6478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x888ee38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbefd988)]: 0 failure(s)
2024-04-29 10:44:04 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:44:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x844d048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x72c6478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x888ee38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbefd988)]: 0 failure(s)
2024-04-29 10:44:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x844d048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x72c6478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x888ee38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbefd988)]: 0 failure(s)
2024-04-29 10:44:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x844d048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x72c6478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x888ee38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbefd988)]: 0 failure(s)
2024-04-29 10:44:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x844d048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x72c6478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x888ee38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbefd988)]: 0 failure(s)
2024-04-29 10:44:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9981  0.9967  0.9962  0.9939  0.9931  0.9930  0.9894  0.9865  0.9860  0.9808  0.9797  0.9781  0.9780  0.9779  0.9769
[17 : 32]:	0.9732  0.9720  0.9686  0.9680  0.9672  0.9642  0.9621  0.9621  0.9610  0.9575  0.9530  0.9469  0.9458  0.9454  0.9451  0.9439
[33 : 48]:	0.9333  0.9327  0.9288  0.9257  0.9233  0.9213  0.9187  0.9161  0.9157  0.9144  0.9138  0.9117  0.9065  0.9042  0.9035  0.9033
[49 : 64]:	0.9002  0.9000  0.8996  0.8960  0.8920  0.8894  0.8880  0.8861  0.8847  0.8812  0.8806  0.8796  0.8788  0.8781  0.8775  0.8773
2024-04-29 10:44:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:44:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #1: GFLOPs: 118.8543. Time: 21.1082 us. Best GFLOPs: 118.8543
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #2: GFLOPs: 140.1635. Time: 17.8991 us. Best GFLOPs: 140.1635
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #3: GFLOPs: 199.5926. Time: 12.5696 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #4: GFLOPs: 62.3254. Time: 40.2532 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #5: GFLOPs: 177.9890. Time: 14.0953 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #6: GFLOPs: 66.4037. Time: 37.7810 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #7: GFLOPs: 93.8183. Time: 26.7411 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #8: GFLOPs: 33.4643. Time: 74.9693 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #9: GFLOPs: 61.6869. Time: 40.6699 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #10: GFLOPs: 50.7482. Time: 49.4362 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #11: GFLOPs: 43.4398. Time: 57.7534 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #12: GFLOPs: 148.9388. Time: 16.8445 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #13: GFLOPs: 92.5199. Time: 27.1163 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #14: GFLOPs: 139.7744. Time: 17.9489 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #15: GFLOPs: 46.9100. Time: 53.4811 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #16: GFLOPs: 32.8954. Time: 76.2659 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #17: GFLOPs: 106.8172. Time: 23.4868 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #18: GFLOPs: 46.5532. Time: 53.8910 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #19: GFLOPs: 54.6664. Time: 45.8929 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #20: GFLOPs: 69.2459. Time: 36.2303 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #21: GFLOPs: 67.1523. Time: 37.3599 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #22: GFLOPs: 179.0074. Time: 14.0151 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #23: GFLOPs: 84.5166. Time: 29.6841 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #24: GFLOPs: 54.7659. Time: 45.8095 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #25: GFLOPs: 51.9113. Time: 48.3286 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #26: GFLOPs: 174.8523. Time: 14.3481 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #27: GFLOPs: 177.2089. Time: 14.1573 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #28: GFLOPs: 177.1701. Time: 14.1604 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #29: GFLOPs: 45.8552. Time: 54.7113 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #30: GFLOPs: 117.9726. Time: 21.2660 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #31: GFLOPs: 180.0195. Time: 13.9363 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #32: GFLOPs: 43.7025. Time: 57.4063 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #33: GFLOPs: 131.6962. Time: 19.0499 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #34: GFLOPs: 53.0241. Time: 47.3144 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #35: GFLOPs: 62.9729. Time: 39.8394 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #36: GFLOPs: 83.4923. Time: 30.0483 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #37: GFLOPs: 95.9010. Time: 26.1603 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #38: GFLOPs: 114.8153. Time: 21.8507 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #39: GFLOPs: 53.5902. Time: 46.8145 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #40: GFLOPs: 51.7184. Time: 48.5089 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #41: GFLOPs: 65.8042. Time: 38.1252 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #42: GFLOPs: 54.5465. Time: 45.9938 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #43: GFLOPs: 198.6698. Time: 12.6280 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #44: GFLOPs: 50.7123. Time: 49.4713 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #45: GFLOPs: 73.1459. Time: 34.2986 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #46: GFLOPs: 54.7764. Time: 45.8008 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #47: GFLOPs: 42.3574. Time: 59.2293 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #48: GFLOPs: 50.7267. Time: 49.4572 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #49: GFLOPs: 111.4307. Time: 22.5144 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #50: GFLOPs: 39.8493. Time: 62.9572 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #51: GFLOPs: 52.2334. Time: 48.0305 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #52: GFLOPs: 165.7368. Time: 15.1373 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #53: GFLOPs: 141.5366. Time: 17.7254 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #54: GFLOPs: 54.1779. Time: 46.3067 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #55: GFLOPs: 149.1555. Time: 16.8200 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #56: GFLOPs: 127.3694. Time: 19.6970 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #57: GFLOPs: 47.2581. Time: 53.0872 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #58: GFLOPs: 93.3223. Time: 26.8832 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #59: GFLOPs: 33.1455. Time: 75.6905 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #60: GFLOPs: 51.9208. Time: 48.3197 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #61: GFLOPs: 76.0178. Time: 33.0028 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #62: GFLOPs: 37.9562. Time: 66.0973 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #63: GFLOPs: 56.4801. Time: 44.4192 us. Best GFLOPs: 199.5926
2024-04-29 11:06:36 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d] Trial #64: GFLOPs: 53.8999. Time: 46.5455 us. Best GFLOPs: 199.5926
