2024-04-29 08:23:28 [INFO] [task_scheduler.cc:160] Initializing Task #71: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69"
2024-04-29 08:23:28 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(320), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:23:28 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:23:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:23:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:23:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 10:13:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:13:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:13:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 10:13:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:13:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 10:13:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 10:13:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 10:13:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 10:13:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9995  0.9994  0.9987  0.9985  0.9978  0.9969  0.9962  0.9950  0.9946  0.9940  0.9932  0.9932  0.9923  0.9923  0.9922
[17 : 32]:	0.9918  0.9915  0.9911  0.9911  0.9908  0.9908  0.9906  0.9903  0.9890  0.9889  0.9888  0.9881  0.9879  0.9876  0.9876  0.9873
[33 : 48]:	0.9871  0.9869  0.9869  0.9862  0.9860  0.9850  0.9849  0.9849  0.9847  0.9846  0.9846  0.9841  0.9838  0.9834  0.9823  0.9820
[49 : 64]:	0.9814  0.9812  0.9796  0.9794  0.9790  0.9787  0.9773  0.9768  0.9767  0.9765  0.9765  0.9765  0.9758  0.9752  0.9748  0.9739
2024-04-29 10:13:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:13:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #1: GFLOPs: 1.8900. Time: 34087.1213 us. Best GFLOPs: 1.8900
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #2: GFLOPs: 25.1840. Time: 2558.2158 us. Best GFLOPs: 25.1840
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #3: GFLOPs: 73.5710. Time: 875.6980 us. Best GFLOPs: 73.5710
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #4: GFLOPs: 17.8753. Time: 3604.1990 us. Best GFLOPs: 73.5710
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #5: GFLOPs: 33.6697. Time: 1913.4729 us. Best GFLOPs: 73.5710
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #6: GFLOPs: 128.2480. Time: 502.3546 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #7: GFLOPs: 2.2105. Time: 29145.5865 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #8: GFLOPs: 64.3599. Time: 1001.0265 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:121] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(320), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(320), ic_0 + ic_1)
                                v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[320, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b106)
b133 = sch.decompose_reduction(block=b106, loop=l117)
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #10: GFLOPs: 4.4300. Time: 14543.1027 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #11: GFLOPs: 11.5034. Time: 5600.5889 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #12: GFLOPs: 48.6428. Time: 1324.4708 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #13: GFLOPs: 3.6088. Time: 17852.4013 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #14: GFLOPs: 63.9682. Time: 1007.1564 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #15: GFLOPs: 71.8699. Time: 896.4249 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #16: GFLOPs: 44.1068. Time: 1460.6807 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #17: GFLOPs: 57.0597. Time: 1129.0984 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #18: GFLOPs: 4.9372. Time: 13049.0591 us. Best GFLOPs: 128.2480
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #19: GFLOPs: 134.5264. Time: 478.9094 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #20: GFLOPs: 78.2239. Time: 823.6104 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #21: GFLOPs: 4.9370. Time: 13049.6441 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #22: GFLOPs: 10.8510. Time: 5937.3442 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #23: GFLOPs: 20.4589. Time: 3149.0414 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #24: GFLOPs: 52.0161. Time: 1238.5781 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #25: GFLOPs: 104.4880. Time: 616.5874 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #26: GFLOPs: 26.0503. Time: 2473.1360 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #27: GFLOPs: 69.8315. Time: 922.5921 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #28: GFLOPs: 12.1976. Time: 5281.8756 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #29: GFLOPs: 6.6436. Time: 9697.4568 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #30: GFLOPs: 6.2426. Time: 10320.3092 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #31: GFLOPs: 7.1354. Time: 9029.0633 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #32: GFLOPs: 59.6420. Time: 1080.2113 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #33: GFLOPs: 45.4012. Time: 1419.0378 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #34: GFLOPs: 120.4315. Time: 534.9595 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #35: GFLOPs: 23.1545. Time: 2782.4441 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:121] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(1)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #37: GFLOPs: 39.9885. Time: 1611.1123 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #38: GFLOPs: 5.6743. Time: 11353.9026 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #39: GFLOPs: 37.8821. Time: 1700.6969 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #40: GFLOPs: 11.5830. Time: 5562.1191 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #41: GFLOPs: 18.7191. Time: 3441.7314 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #42: GFLOPs: 1.2941. Time: 49785.8293 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #43: GFLOPs: 55.3514. Time: 1163.9447 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #44: GFLOPs: 6.2639. Time: 10285.2769 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #45: GFLOPs: 75.8298. Time: 849.6135 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:121] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b103)
b127 = sch.decompose_reduction(block=b103, loop=l111)
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #47: GFLOPs: 34.2731. Time: 1879.7848 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #48: GFLOPs: 88.1669. Time: 730.7277 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #49: GFLOPs: 77.0641. Time: 836.0047 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #50: GFLOPs: 77.8766. Time: 827.2826 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #51: GFLOPs: 112.8211. Time: 571.0455 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #52: GFLOPs: 36.8865. Time: 1746.6006 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #53: GFLOPs: 3.1639. Time: 20362.8438 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #54: GFLOPs: 82.9911. Time: 776.3003 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #55: GFLOPs: 3.0696. Time: 20988.2496 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #56: GFLOPs: 3.4037. Time: 18928.2612 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #57: GFLOPs: 7.2236. Time: 8918.7992 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #58: GFLOPs: 24.1009. Time: 2673.1741 us. Best GFLOPs: 134.5264
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #59: GFLOPs: 134.8681. Time: 477.6962 us. Best GFLOPs: 134.8681
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #60: GFLOPs: 13.3531. Time: 4824.7998 us. Best GFLOPs: 134.8681
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #61: GFLOPs: 5.3533. Time: 12034.8322 us. Best GFLOPs: 134.8681
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #62: GFLOPs: 122.8397. Time: 524.4718 us. Best GFLOPs: 134.8681
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #63: GFLOPs: 111.1147. Time: 579.8153 us. Best GFLOPs: 134.8681
2024-04-29 11:03:07 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #64: GFLOPs: 117.7307. Time: 547.2320 us. Best GFLOPs: 134.8681
2024-04-29 12:18:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:18:13 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 12:18:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 12:18:15 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 12:18:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 12:18:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 12:18:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 12:18:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7d192f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9235b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc7c41e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9aed908)]: 0 failure(s)
2024-04-29 12:18:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9896  0.9896  0.9784  0.9684  0.9664  0.9664  0.9304  0.8842  0.8802  0.8802  0.8802  0.8788  0.8688  0.8526  0.8456  0.8413
[17 : 32]:	0.8363  0.8186  0.8181  0.8057  0.7963  0.7962  0.7918  0.7900  0.7841  0.7841  0.7826  0.7824  0.7793  0.7772  0.7741  0.7741
[33 : 48]:	0.7669  0.7561  0.7543  0.7539  0.7533  0.7486  0.7431  0.7415  0.7398  0.7389  0.7389  0.7389  0.7346  0.7324  0.7295  0.7274
[49 : 64]:	0.7265  0.7244  0.7238  0.7235  0.7235  0.7232  0.7228  0.7226  0.7217  0.7213  0.7212  0.7195  0.7194  0.7176  0.7158  0.7147
2024-04-29 12:18:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:18:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #65: GFLOPs: 82.9001. Time: 777.1518 us. Best GFLOPs: 134.8681
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #66: GFLOPs: 149.1378. Time: 431.9895 us. Best GFLOPs: 149.1378
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #67: GFLOPs: 186.8884. Time: 344.7298 us. Best GFLOPs: 186.8884
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #68: GFLOPs: 195.5120. Time: 329.5244 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #69: GFLOPs: 183.1352. Time: 351.7946 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #70: GFLOPs: 184.1413. Time: 349.8725 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #71: GFLOPs: 131.0394. Time: 491.6535 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #72: GFLOPs: 115.8349. Time: 556.1882 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #73: GFLOPs: 166.1950. Time: 387.6530 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #74: GFLOPs: 151.8275. Time: 424.3368 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #75: GFLOPs: 157.1842. Time: 409.8756 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #76: GFLOPs: 93.0088. Time: 692.6868 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #77: GFLOPs: 105.2643. Time: 612.0402 us. Best GFLOPs: 195.5120
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #78: GFLOPs: 198.4172. Time: 324.6996 us. Best GFLOPs: 198.4172
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #79: GFLOPs: 128.0259. Time: 503.2260 us. Best GFLOPs: 198.4172
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #80: GFLOPs: 158.7504. Time: 405.8320 us. Best GFLOPs: 198.4172
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #81: GFLOPs: 198.9458. Time: 323.8369 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #82: GFLOPs: 144.8637. Time: 444.7352 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #83: GFLOPs: 184.7393. Time: 348.7400 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #84: GFLOPs: 166.8067. Time: 386.2315 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #85: GFLOPs: 102.6332. Time: 627.7302 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #86: GFLOPs: 141.4107. Time: 455.5949 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #87: GFLOPs: 185.5825. Time: 347.1555 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #88: GFLOPs: 115.0724. Time: 559.8733 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #89: GFLOPs: 148.3950. Time: 434.1521 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #90: GFLOPs: 113.6022. Time: 567.1191 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #91: GFLOPs: 164.8825. Time: 390.7387 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #92: GFLOPs: 156.9116. Time: 410.5879 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #93: GFLOPs: 144.8349. Time: 444.8235 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:121] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #94: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(40) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(14) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 40])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #95: GFLOPs: 131.2803. Time: 490.7512 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #96: GFLOPs: 133.0672. Time: 484.1614 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #97: GFLOPs: 84.2290. Time: 764.8903 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #98: GFLOPs: 101.3889. Time: 635.4343 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #99: GFLOPs: 150.9428. Time: 426.8238 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #100: GFLOPs: 109.1877. Time: 590.0479 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #101: GFLOPs: 102.7597. Time: 626.9575 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #102: GFLOPs: 136.8137. Time: 470.9029 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #103: GFLOPs: 88.7611. Time: 725.8356 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #104: GFLOPs: 140.5299. Time: 458.4504 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #105: GFLOPs: 137.9531. Time: 467.0137 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #106: GFLOPs: 107.5173. Time: 599.2151 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #107: GFLOPs: 140.1044. Time: 459.8428 us. Best GFLOPs: 198.9458
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #108: GFLOPs: 231.5824. Time: 278.1990 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #109: GFLOPs: 103.6859. Time: 621.3571 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #110: GFLOPs: 101.2509. Time: 636.3006 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #111: GFLOPs: 136.9664. Time: 470.3780 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #112: GFLOPs: 110.7438. Time: 581.7568 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #113: GFLOPs: 149.8994. Time: 429.7947 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #114: GFLOPs: 82.5672. Time: 780.2853 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #115: GFLOPs: 171.0522. Time: 376.6451 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #116: GFLOPs: 103.8495. Time: 620.3783 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #117: GFLOPs: 136.6152. Time: 471.5873 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #118: GFLOPs: 131.0099. Time: 491.7641 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #119: GFLOPs: 183.3403. Time: 351.4011 us. Best GFLOPs: 231.5824
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #120: GFLOPs: 267.7596. Time: 240.6113 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #121: GFLOPs: 148.5148. Time: 433.8019 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #122: GFLOPs: 136.4238. Time: 472.2488 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #123: GFLOPs: 149.3480. Time: 431.3818 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #124: GFLOPs: 113.9391. Time: 565.4424 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #125: GFLOPs: 133.0335. Time: 484.2839 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #126: GFLOPs: 96.3604. Time: 668.5943 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #127: GFLOPs: 6.7134. Time: 9596.6674 us. Best GFLOPs: 267.7596
2024-04-29 12:20:16 [INFO] [task_scheduler.cc:131] [Task #71: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_69] Trial #128: GFLOPs: 29.1504. Time: 2210.1210 us. Best GFLOPs: 267.7596
