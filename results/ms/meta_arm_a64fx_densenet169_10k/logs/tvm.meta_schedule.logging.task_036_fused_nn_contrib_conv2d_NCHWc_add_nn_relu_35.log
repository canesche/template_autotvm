2024-04-29 08:21:09 [INFO] [task_scheduler.cc:160] Initializing Task #36: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35"
2024-04-29 08:21:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1152), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:21:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:21:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(18) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:21:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:21:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:20:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:20:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:20:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 09:20:06 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:20:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 09:20:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 09:20:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 09:20:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 09:20:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9988  0.9985  0.9982  0.9977  0.9973  0.9964  0.9954  0.9953  0.9953  0.9933  0.9925  0.9924  0.9924  0.9913  0.9909
[17 : 32]:	0.9902  0.9895  0.9893  0.9892  0.9890  0.9885  0.9885  0.9884  0.9880  0.9870  0.9866  0.9860  0.9858  0.9854  0.9852  0.9850
[33 : 48]:	0.9846  0.9836  0.9835  0.9832  0.9830  0.9821  0.9818  0.9818  0.9815  0.9814  0.9810  0.9809  0.9809  0.9800  0.9799  0.9798
[49 : 64]:	0.9796  0.9786  0.9785  0.9785  0.9783  0.9781  0.9780  0.9776  0.9767  0.9767  0.9766  0.9764  0.9753  0.9744  0.9740  0.9733
2024-04-29 09:20:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:20:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #1: GFLOPs: 37.3097. Time: 1550.6124 us. Best GFLOPs: 37.3097
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #2: GFLOPs: 84.8835. Time: 681.5569 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #3: GFLOPs: 13.5802. Time: 4260.1071 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #4: GFLOPs: 3.9334. Time: 14708.2021 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #5: GFLOPs: 23.7141. Time: 2439.6043 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #6: GFLOPs: 7.5367. Time: 7676.2035 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #7: GFLOPs: 6.0712. Time: 9529.1031 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #8: GFLOPs: 5.1904. Time: 11146.1426 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[18, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #10: GFLOPs: 9.6568. Time: 5990.9239 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #11: GFLOPs: 64.4141. Time: 898.1405 us. Best GFLOPs: 84.8835
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #12: GFLOPs: 98.6042. Time: 586.7187 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #13: GFLOPs: 5.4490. Time: 10617.0967 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #14: GFLOPs: 64.9977. Time: 890.0770 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #15: GFLOPs: 18.6957. Time: 3094.4521 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #16: GFLOPs: 31.2220. Time: 1852.9514 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #17: GFLOPs: 2.7970. Time: 20683.5842 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #18: GFLOPs: 60.2157. Time: 960.7616 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #19: GFLOPs: 26.9655. Time: 2145.4418 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #20: GFLOPs: 61.6309. Time: 938.7000 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #21: GFLOPs: 7.7944. Time: 7422.4004 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #22: GFLOPs: 2.0777. Time: 27844.6237 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #23: GFLOPs: 92.5147. Time: 625.3374 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #24: GFLOPs: 18.0549. Time: 3204.2760 us. Best GFLOPs: 98.6042
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #25: GFLOPs: 111.2729. Time: 519.9194 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #26: GFLOPs: 30.0820. Time: 1923.1769 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #27: GFLOPs: 1.4598. Time: 39630.2917 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #28: GFLOPs: 42.1644. Time: 1372.0796 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #29: GFLOPs: 29.0634. Time: 1990.5765 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #30: GFLOPs: 49.4590. Time: 1169.7153 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #31: GFLOPs: 1.6134. Time: 35858.2267 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #32: GFLOPs: 49.4933. Time: 1168.9040 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(14), T.int64(4), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #34: GFLOPs: 97.8118. Time: 591.4719 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #35: GFLOPs: 95.2823. Time: 607.1738 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #36: GFLOPs: 54.1296. Time: 1068.7851 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #37: GFLOPs: 30.0075. Time: 1927.9464 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #38: GFLOPs: 107.2183. Time: 539.5808 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #39: GFLOPs: 13.5549. Time: 4268.0538 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #40: GFLOPs: 74.4640. Time: 776.9243 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #41: GFLOPs: 32.7808. Time: 1764.8403 us. Best GFLOPs: 111.2729
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #42: GFLOPs: 139.9362. Time: 413.4237 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #43: GFLOPs: 68.6988. Time: 842.1237 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #44: GFLOPs: 20.5855. Time: 2810.3681 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #45: GFLOPs: 94.5467. Time: 611.8981 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #46: GFLOPs: 106.3820. Time: 543.8227 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #48: GFLOPs: 18.5829. Time: 3113.2331 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #49: GFLOPs: 51.2163. Time: 1129.5809 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #50: GFLOPs: 5.3809. Time: 10751.5299 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #51: GFLOPs: 1.6691. Time: 34660.7690 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #52: GFLOPs: 83.7002. Time: 691.1923 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #53: GFLOPs: 35.3298. Time: 1637.5093 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #54: GFLOPs: 75.0611. Time: 770.7442 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #55: GFLOPs: 8.9058. Time: 6496.1304 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #56: GFLOPs: 39.2526. Time: 1473.8617 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #57: GFLOPs: 8.6083. Time: 6720.6045 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #58: GFLOPs: 15.2608. Time: 3790.9515 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #59: GFLOPs: 63.2076. Time: 915.2843 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #60: GFLOPs: 8.1612. Time: 7088.7565 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #61: GFLOPs: 2.2141. Time: 26128.7355 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #62: GFLOPs: 22.2192. Time: 2603.7405 us. Best GFLOPs: 139.9362
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:121] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(196) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(98) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(196) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(98) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[18, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b102)
b121 = sch.decompose_reduction(block=b102, loop=l105)
2024-04-29 10:58:42 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #64: GFLOPs: 89.0972. Time: 649.3239 us. Best GFLOPs: 139.9362
2024-04-29 12:28:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:28:18 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 12:28:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 12:28:20 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 12:28:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 12:28:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 12:28:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 12:28:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83676b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8c27e88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xec8dca8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcd82468)]: 0 failure(s)
2024-04-29 12:28:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7980  0.7905  0.7905  0.7801  0.7724  0.7707  0.7670  0.7642  0.7636  0.7628  0.7560  0.7535  0.7497  0.7462  0.7455  0.7400
[17 : 32]:	0.7398  0.7387  0.7316  0.7297  0.7290  0.7228  0.7184  0.7132  0.7124  0.7064  0.7029  0.7016  0.7003  0.6990  0.6987  0.6935
[33 : 48]:	0.6934  0.6929  0.6893  0.6835  0.6830  0.6808  0.6772  0.6760  0.6756  0.6739  0.6732  0.6727  0.6722  0.6706  0.6670  0.6631
[49 : 64]:	0.6631  0.6617  0.6595  0.6580  0.6571  0.6552  0.6550  0.6540  0.6523  0.6520  0.6509  0.6509  0.6507  0.6479  0.6478  0.6473
2024-04-29 12:28:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:28:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #65: GFLOPs: 34.3891. Time: 1682.3032 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #66: GFLOPs: 116.6037. Time: 496.1499 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #67: GFLOPs: 116.7981. Time: 495.3240 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #68: GFLOPs: 116.6937. Time: 495.7673 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #69: GFLOPs: 128.3438. Time: 450.7652 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #70: GFLOPs: 116.1778. Time: 497.9691 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #71: GFLOPs: 108.7591. Time: 531.9367 us. Best GFLOPs: 139.9362
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #72: GFLOPs: 188.0229. Time: 307.6909 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #73: GFLOPs: 116.9489. Time: 494.6857 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #74: GFLOPs: 116.5023. Time: 496.5819 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #75: GFLOPs: 92.6330. Time: 624.5387 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #76: GFLOPs: 109.2334. Time: 529.6270 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #77: GFLOPs: 106.0642. Time: 545.4521 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #78: GFLOPs: 59.9322. Time: 965.3056 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #79: GFLOPs: 98.5489. Time: 587.0480 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #80: GFLOPs: 55.3390. Time: 1045.4281 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #81: GFLOPs: 74.4188. Time: 777.3969 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #82: GFLOPs: 64.3335. Time: 899.2664 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #83: GFLOPs: 90.1626. Time: 641.6514 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #84: GFLOPs: 82.4435. Time: 701.7281 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #85: GFLOPs: 101.0449. Time: 572.5469 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #86: GFLOPs: 117.7722. Time: 491.2272 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #87: GFLOPs: 74.3372. Time: 778.2497 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #88: GFLOPs: 85.8483. Time: 673.8970 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #89: GFLOPs: 57.1199. Time: 1012.8327 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #90: GFLOPs: 98.8095. Time: 585.4999 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #91: GFLOPs: 120.9443. Time: 478.3437 us. Best GFLOPs: 188.0229
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #92: GFLOPs: 213.4748. Time: 271.0059 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #93: GFLOPs: 109.9889. Time: 525.9886 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #94: GFLOPs: 72.9350. Time: 793.2117 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #95: GFLOPs: 68.0683. Time: 849.9245 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #96: GFLOPs: 98.7386. Time: 585.9199 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #97: GFLOPs: 121.3025. Time: 476.9310 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #98: GFLOPs: 63.6403. Time: 909.0612 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #99: GFLOPs: 85.4988. Time: 676.6517 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #100: GFLOPs: 155.0451. Time: 373.1362 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #101: GFLOPs: 37.6594. Time: 1536.2159 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #102: GFLOPs: 90.9786. Time: 635.8963 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #103: GFLOPs: 117.1341. Time: 493.9034 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #104: GFLOPs: 125.5329. Time: 460.8585 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #105: GFLOPs: 148.8904. Time: 388.5605 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #106: GFLOPs: 67.8473. Time: 852.6935 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #107: GFLOPs: 113.8257. Time: 508.2589 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #108: GFLOPs: 106.9771. Time: 540.7972 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #109: GFLOPs: 42.6269. Time: 1357.1923 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #110: GFLOPs: 130.8359. Time: 442.1792 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #111: GFLOPs: 97.7693. Time: 591.7288 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #112: GFLOPs: 103.2770. Time: 560.1725 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #113: GFLOPs: 121.9217. Time: 474.5090 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #114: GFLOPs: 125.1226. Time: 462.3699 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #115: GFLOPs: 90.1176. Time: 641.9716 us. Best GFLOPs: 213.4748
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #116: GFLOPs: 220.3842. Time: 262.5094 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #117: GFLOPs: 100.3920. Time: 576.2700 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #118: GFLOPs: 67.5225. Time: 856.7945 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #119: GFLOPs: 110.4079. Time: 523.9926 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #120: GFLOPs: 96.7852. Time: 597.7456 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #121: GFLOPs: 135.5537. Time: 426.7899 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #122: GFLOPs: 101.7835. Time: 568.3918 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #123: GFLOPs: 99.5625. Time: 581.0715 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #124: GFLOPs: 121.1410. Time: 477.5670 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #125: GFLOPs: 104.8330. Time: 551.8579 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #126: GFLOPs: 67.6855. Time: 854.7309 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #127: GFLOPs: 47.2038. Time: 1225.5997 us. Best GFLOPs: 220.3842
2024-04-29 12:29:59 [INFO] [task_scheduler.cc:131] [Task #36: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #128: GFLOPs: 110.1669. Time: 525.1389 us. Best GFLOPs: 220.3842
