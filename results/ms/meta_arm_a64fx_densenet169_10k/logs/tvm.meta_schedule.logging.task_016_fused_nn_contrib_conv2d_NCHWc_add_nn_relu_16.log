2024-04-29 08:19:50 [INFO] [task_scheduler.cc:160] Initializing Task #16: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16"
2024-04-29 08:19:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1120), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:19:50 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:19:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1120), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1120), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1120, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:19:50 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1120), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1120), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1120, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:19:50 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(280), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(280), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1120), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1120), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1120, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:49:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:49:07 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:49:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86fac78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86044b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x717e018)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f45a38)]: 0 failure(s)
2024-04-29 08:49:10 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:49:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86fac78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86044b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x717e018)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f45a38)]: 0 failure(s)
2024-04-29 08:49:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86fac78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86044b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x717e018)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f45a38)]: 0 failure(s)
2024-04-29 08:49:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86fac78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86044b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x717e018)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f45a38)]: 0 failure(s)
2024-04-29 08:49:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86fac78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86044b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x717e018)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9f45a38)]: 0 failure(s)
2024-04-29 08:49:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9987  0.9981  0.9981  0.9973  0.9971  0.9961  0.9960  0.9954  0.9953  0.9953  0.9950  0.9949  0.9941  0.9940
[17 : 32]:	0.9938  0.9934  0.9933  0.9930  0.9929  0.9921  0.9915  0.9913  0.9912  0.9911  0.9904  0.9903  0.9898  0.9897  0.9877  0.9875
[33 : 48]:	0.9868  0.9868  0.9862  0.9862  0.9860  0.9857  0.9854  0.9854  0.9854  0.9851  0.9847  0.9845  0.9839  0.9833  0.9831  0.9824
[49 : 64]:	0.9824  0.9822  0.9806  0.9789  0.9781  0.9773  0.9763  0.9744  0.9743  0.9742  0.9740  0.9738  0.9734  0.9727  0.9721  0.9718
2024-04-29 08:49:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:49:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #1: GFLOPs: 3.0110. Time: 4670.1960 us. Best GFLOPs: 3.0110
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #2: GFLOPs: 17.0020. Time: 827.0695 us. Best GFLOPs: 17.0020
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #3: GFLOPs: 74.3503. Time: 189.1293 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #4: GFLOPs: 1.9085. Time: 7368.1861 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #5: GFLOPs: 22.0649. Time: 637.2942 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #6: GFLOPs: 60.3185. Time: 233.1261 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #7: GFLOPs: 21.0107. Time: 669.2694 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #8: GFLOPs: 39.3957. Time: 356.9380 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #9: GFLOPs: 0.4583. Time: 30682.4703 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #10: GFLOPs: 3.4949. Time: 4023.5040 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #11: GFLOPs: 50.8103. Time: 276.7512 us. Best GFLOPs: 74.3503
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #12: GFLOPs: 82.3853. Time: 170.6836 us. Best GFLOPs: 82.3853
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #13: GFLOPs: 18.8456. Time: 746.1595 us. Best GFLOPs: 82.3853
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #14: GFLOPs: 2.4673. Time: 5699.3861 us. Best GFLOPs: 82.3853
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #15: GFLOPs: 5.3095. Time: 2648.4185 us. Best GFLOPs: 82.3853
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #16: GFLOPs: 107.8926. Time: 130.3317 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #17: GFLOPs: 50.2516. Time: 279.8281 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #18: GFLOPs: 1.9643. Time: 7158.6623 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #19: GFLOPs: 1.8600. Time: 7560.1131 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #20: GFLOPs: 58.7115. Time: 239.5073 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #21: GFLOPs: 17.4341. Time: 806.5716 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #22: GFLOPs: 3.0958. Time: 4542.2747 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #23: GFLOPs: 17.9140. Time: 784.9628 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #24: GFLOPs: 7.7659. Time: 1810.7066 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #25: GFLOPs: 101.7691. Time: 138.1739 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #26: GFLOPs: 65.8236. Time: 213.6289 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #27: GFLOPs: 34.1205. Time: 412.1225 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #28: GFLOPs: 2.9059. Time: 4839.0610 us. Best GFLOPs: 107.8926
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #29: GFLOPs: 125.7270. Time: 111.8441 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #30: GFLOPs: 3.6963. Time: 3804.2849 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #31: GFLOPs: 17.1214. Time: 821.3029 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #32: GFLOPs: 25.7868. Time: 545.3120 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #33: GFLOPs: 49.4604. Time: 284.3047 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #34: GFLOPs: 3.1963. Time: 4399.4368 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #35: GFLOPs: 66.7996. Time: 210.5075 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #36: GFLOPs: 2.5014. Time: 5621.6336 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #37: GFLOPs: 23.6829. Time: 593.7551 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #38: GFLOPs: 10.4532. Time: 1345.2202 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #39: GFLOPs: 3.7032. Time: 3797.1620 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #40: GFLOPs: 9.5186. Time: 1477.2950 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #41: GFLOPs: 22.4745. Time: 625.6798 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #42: GFLOPs: 25.5596. Time: 550.1574 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #43: GFLOPs: 13.7172. Time: 1025.1202 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #44: GFLOPs: 15.1764. Time: 926.5569 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #45: GFLOPs: 34.6021. Time: 406.3864 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #46: GFLOPs: 79.7065. Time: 176.4200 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #47: GFLOPs: 37.1559. Time: 378.4548 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #48: GFLOPs: 21.7930. Time: 645.2455 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #49: GFLOPs: 6.6595. Time: 2111.5585 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #50: GFLOPs: 33.9820. Time: 413.8026 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #51: GFLOPs: 9.7407. Time: 1443.6141 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #52: GFLOPs: 2.4121. Time: 5829.7738 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #53: GFLOPs: 40.7347. Time: 345.2050 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #54: GFLOPs: 75.0253. Time: 187.4277 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #55: GFLOPs: 3.1418. Time: 4475.6870 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #56: GFLOPs: 11.3811. Time: 1235.5411 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #57: GFLOPs: 6.4203. Time: 2190.2245 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #58: GFLOPs: 4.8874. Time: 2877.1607 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #59: GFLOPs: 13.1273. Time: 1071.1878 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #60: GFLOPs: 103.4022. Time: 135.9916 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #61: GFLOPs: 19.8037. Time: 710.0603 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #62: GFLOPs: 21.4940. Time: 654.2204 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #63: GFLOPs: 7.4283. Time: 1892.9977 us. Best GFLOPs: 125.7270
2024-04-29 10:57:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #64: GFLOPs: 0.5662. Time: 24833.4950 us. Best GFLOPs: 125.7270
