2024-04-29 08:21:25 [INFO] [task_scheduler.cc:160] Initializing Task #40: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39"
2024-04-29 08:21:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:21:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:21:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:21:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:21:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 09:25:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:25:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 09:26:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 09:26:01 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 09:26:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 09:26:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 09:26:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 09:26:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 09:26:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9983  0.9982  0.9975  0.9971  0.9957  0.9955  0.9953  0.9947  0.9942  0.9940  0.9939  0.9931  0.9931  0.9928  0.9920
[17 : 32]:	0.9919  0.9919  0.9916  0.9912  0.9909  0.9902  0.9893  0.9889  0.9886  0.9884  0.9883  0.9882  0.9879  0.9876  0.9865  0.9862
[33 : 48]:	0.9848  0.9846  0.9844  0.9839  0.9835  0.9834  0.9833  0.9828  0.9826  0.9824  0.9812  0.9810  0.9808  0.9807  0.9806  0.9802
[49 : 64]:	0.9798  0.9791  0.9788  0.9783  0.9780  0.9771  0.9762  0.9759  0.9758  0.9755  0.9742  0.9738  0.9734  0.9724  0.9720  0.9718
2024-04-29 09:26:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:26:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #1: GFLOPs: 107.4761. Time: 478.5288 us. Best GFLOPs: 107.4761
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #2: GFLOPs: 12.2970. Time: 4182.3583 us. Best GFLOPs: 107.4761
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #3: GFLOPs: 76.3139. Time: 673.9322 us. Best GFLOPs: 107.4761
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #4: GFLOPs: 37.1273. Time: 1385.2456 us. Best GFLOPs: 107.4761
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #5: GFLOPs: 18.1829. Time: 2828.5005 us. Best GFLOPs: 107.4761
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #6: GFLOPs: 54.0695. Time: 951.1900 us. Best GFLOPs: 107.4761
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #7: GFLOPs: 130.7448. Time: 393.3647 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #8: GFLOPs: 19.7711. Time: 2601.2920 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1024), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1024, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #10: GFLOPs: 24.7883. Time: 2074.7821 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #11: GFLOPs: 95.2115. Time: 540.1703 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #12: GFLOPs: 34.9427. Time: 1471.8500 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #13: GFLOPs: 110.5114. Time: 465.3856 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #14: GFLOPs: 9.8442. Time: 5224.4451 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #15: GFLOPs: 3.0934. Time: 16625.6074 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #16: GFLOPs: 93.6795. Time: 549.0035 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #17: GFLOPs: 9.2261. Time: 5574.4457 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #18: GFLOPs: 47.1067. Time: 1091.7863 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #19: GFLOPs: 35.2112. Time: 1460.6281 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #20: GFLOPs: 32.9972. Time: 1558.6288 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #21: GFLOPs: 124.6303. Time: 412.6637 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #22: GFLOPs: 38.9272. Time: 1321.1933 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #23: GFLOPs: 75.5215. Time: 681.0035 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #24: GFLOPs: 22.9015. Time: 2245.7244 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #25: GFLOPs: 10.0965. Time: 5093.8853 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #26: GFLOPs: 4.1612. Time: 12359.6082 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #27: GFLOPs: 4.5102. Time: 11403.1616 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #28: GFLOPs: 5.7354. Time: 8967.2122 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #29: GFLOPs: 64.7246. Time: 794.6037 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #30: GFLOPs: 13.5214. Time: 3803.6317 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #33: GFLOPs: 28.1976. Time: 1823.9308 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #34: GFLOPs: 108.3844. Time: 474.5185 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #35: GFLOPs: 41.9240. Time: 1226.7530 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #36: GFLOPs: 25.4947. Time: 2017.2991 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #37: GFLOPs: 36.5971. Time: 1405.3142 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #38: GFLOPs: 11.1706. Time: 4604.0678 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #39: GFLOPs: 24.8460. Time: 2069.9635 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #40: GFLOPs: 79.3014. Time: 648.5437 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #41: GFLOPs: 53.7021. Time: 957.6986 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #42: GFLOPs: 2.4557. Time: 20943.5313 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #43: GFLOPs: 45.7182. Time: 1124.9442 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #44: GFLOPs: 117.2127. Time: 438.7784 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #45: GFLOPs: 1.9590. Time: 26253.4390 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #46: GFLOPs: 113.6142. Time: 452.6757 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #47: GFLOPs: 87.0424. Time: 590.8663 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #48: GFLOPs: 3.2748. Time: 15704.6703 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #49: GFLOPs: 0.1005. Time: 511681.1793 us. Best GFLOPs: 130.7448
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #50: GFLOPs: 153.8321. Time: 334.3282 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #51: GFLOPs: 1.8790. Time: 27371.5570 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #52: GFLOPs: 48.8357. Time: 1053.1311 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #53: GFLOPs: 46.7093. Time: 1101.0740 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #54: GFLOPs: 2.3149. Time: 22217.5526 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #55: GFLOPs: 40.6873. Time: 1264.0412 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #56: GFLOPs: 86.8958. Time: 591.8626 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #57: GFLOPs: 78.5314. Time: 654.9023 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[512, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #59: GFLOPs: 100.6620. Time: 510.9218 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #60: GFLOPs: 63.1194. Time: 814.8118 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #61: GFLOPs: 56.7833. Time: 905.7313 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #62: GFLOPs: 38.4253. Time: 1338.4524 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #63: GFLOPs: 65.2321. Time: 788.4215 us. Best GFLOPs: 153.8321
2024-04-29 10:59:03 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #64: GFLOPs: 29.0733. Time: 1768.9880 us. Best GFLOPs: 153.8321
2024-04-29 12:52:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:52:55 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 12:52:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 12:52:57 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 12:53:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 12:53:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 12:53:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 12:53:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x92afea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca11578)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfd52f58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x84db8d8)]: 0 failure(s)
2024-04-29 12:53:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9382  0.9213  0.9209  0.8926  0.8858  0.8672  0.8672  0.8548  0.8522  0.8509  0.8439  0.8404  0.8404  0.8367  0.8362  0.8310
[17 : 32]:	0.8257  0.8250  0.8198  0.8093  0.8048  0.8048  0.8048  0.8023  0.8023  0.7990  0.7944  0.7883  0.7883  0.7867  0.7865  0.7852
[33 : 48]:	0.7846  0.7830  0.7803  0.7765  0.7713  0.7706  0.7673  0.7671  0.7620  0.7618  0.7618  0.7594  0.7587  0.7586  0.7573  0.7572
[49 : 64]:	0.7558  0.7536  0.7536  0.7514  0.7514  0.7476  0.7464  0.7463  0.7441  0.7441  0.7439  0.7420  0.7415  0.7407  0.7384  0.7374
2024-04-29 12:53:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:53:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #65: GFLOPs: 119.7257. Time: 429.5686 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #66: GFLOPs: 124.2859. Time: 413.8070 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #67: GFLOPs: 98.3682. Time: 522.8356 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #68: GFLOPs: 136.0371. Time: 378.0617 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #69: GFLOPs: 113.9461. Time: 451.3571 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #70: GFLOPs: 104.7713. Time: 490.8824 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #71: GFLOPs: 112.3823. Time: 457.6378 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #72: GFLOPs: 132.5245. Time: 388.0823 us. Best GFLOPs: 153.8321
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #73: GFLOPs: 168.0597. Time: 306.0246 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #74: GFLOPs: 126.6621. Time: 406.0440 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #75: GFLOPs: 165.3324. Time: 311.0728 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #76: GFLOPs: 83.6045. Time: 615.1633 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #77: GFLOPs: 101.9498. Time: 504.4681 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #78: GFLOPs: 89.3598. Time: 575.5431 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #79: GFLOPs: 123.3815. Time: 416.8405 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #80: GFLOPs: 92.9642. Time: 553.2280 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #81: GFLOPs: 136.8769. Time: 375.7419 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #82: GFLOPs: 140.3515. Time: 366.4401 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #83: GFLOPs: 142.1166. Time: 361.8889 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #84: GFLOPs: 132.7064. Time: 387.5503 us. Best GFLOPs: 168.0597
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #85: GFLOPs: 190.1005. Time: 270.5432 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #86: GFLOPs: 146.6069. Time: 350.8047 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #87: GFLOPs: 108.6564. Time: 473.3304 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #88: GFLOPs: 101.2381. Time: 508.0143 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #89: GFLOPs: 110.5082. Time: 465.3990 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #90: GFLOPs: 120.3052. Time: 427.4994 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #91: GFLOPs: 153.3071. Time: 335.4730 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #92: GFLOPs: 143.6355. Time: 358.0620 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #93: GFLOPs: 73.6797. Time: 698.0267 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #94: GFLOPs: 85.4425. Time: 601.9300 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #95: GFLOPs: 83.8030. Time: 613.7056 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #96: GFLOPs: 65.2108. Time: 788.6790 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #97: GFLOPs: 122.3364. Time: 420.4014 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #98: GFLOPs: 103.5799. Time: 496.5286 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #99: GFLOPs: 92.5975. Time: 555.4187 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #100: GFLOPs: 95.0940. Time: 540.8373 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #101: GFLOPs: 161.2380. Time: 318.9721 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #102: GFLOPs: 51.5772. Time: 997.1528 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #103: GFLOPs: 99.3246. Time: 517.8014 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #104: GFLOPs: 53.5867. Time: 959.7608 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #105: GFLOPs: 40.3417. Time: 1274.8683 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #106: GFLOPs: 65.1873. Time: 788.9637 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #107: GFLOPs: 67.6825. Time: 759.8771 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #108: GFLOPs: 122.0040. Time: 421.5467 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #109: GFLOPs: 97.5392. Time: 527.2794 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #110: GFLOPs: 125.3573. Time: 410.2704 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #111: GFLOPs: 136.5399. Time: 376.6693 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #112: GFLOPs: 129.7103. Time: 396.5019 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #113: GFLOPs: 120.3150. Time: 427.4647 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #114: GFLOPs: 146.6584. Time: 350.6815 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #115: GFLOPs: 78.2188. Time: 657.5193 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #116: GFLOPs: 117.4362. Time: 437.9433 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #117: GFLOPs: 77.4862. Time: 663.7360 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #118: GFLOPs: 23.3041. Time: 2206.9278 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #119: GFLOPs: 10.4355. Time: 4928.4026 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #120: GFLOPs: 150.6613. Time: 341.3644 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #121: GFLOPs: 148.5810. Time: 346.1438 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #122: GFLOPs: 149.8761. Time: 343.1529 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #123: GFLOPs: 62.7673. Time: 819.3816 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #124: GFLOPs: 139.6459. Time: 368.2914 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #125: GFLOPs: 145.9844. Time: 352.3006 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #126: GFLOPs: 2.2994. Time: 22366.6182 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #127: GFLOPs: 12.0849. Time: 4255.7466 us. Best GFLOPs: 190.1005
2024-04-29 12:54:38 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_39] Trial #128: GFLOPs: 133.6327. Time: 384.8640 us. Best GFLOPs: 190.1005
