2024-04-29 08:20:10 [INFO] [task_scheduler.cc:160] Initializing Task #21: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21"
2024-04-29 08:20:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(960), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 08:20:10 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 08:20:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(15) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 15])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 08:20:10 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(15) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 15])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:20:10 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(240), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(960), ic_0 * T.int64(15) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 15])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:56:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:56:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:56:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x88d14a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26f3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c0c698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf0edce8)]: 0 failure(s)
2024-04-29 08:56:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:56:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x88d14a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26f3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c0c698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf0edce8)]: 0 failure(s)
2024-04-29 08:56:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x88d14a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26f3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c0c698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf0edce8)]: 0 failure(s)
2024-04-29 08:56:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x88d14a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26f3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c0c698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf0edce8)]: 0 failure(s)
2024-04-29 08:56:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x88d14a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26f3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8c0c698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf0edce8)]: 0 failure(s)
2024-04-29 08:56:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9984  0.9983  0.9981  0.9973  0.9969  0.9964  0.9958  0.9958  0.9955  0.9947  0.9935  0.9930  0.9922  0.9921  0.9920
[17 : 32]:	0.9919  0.9917  0.9916  0.9913  0.9905  0.9900  0.9898  0.9895  0.9894  0.9890  0.9887  0.9869  0.9863  0.9862  0.9856  0.9845
[33 : 48]:	0.9823  0.9822  0.9821  0.9809  0.9804  0.9798  0.9784  0.9774  0.9771  0.9770  0.9767  0.9756  0.9745  0.9744  0.9743  0.9741
[49 : 64]:	0.9739  0.9732  0.9717  0.9714  0.9703  0.9703  0.9700  0.9699  0.9699  0.9658  0.9655  0.9639  0.9620  0.9619  0.9611  0.9600
2024-04-29 08:56:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:56:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #1: GFLOPs: 24.5901. Time: 490.2282 us. Best GFLOPs: 24.5901
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #2: GFLOPs: 103.2367. Time: 116.7684 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #3: GFLOPs: 12.2353. Time: 985.2437 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #4: GFLOPs: 63.9411. Time: 188.5295 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #5: GFLOPs: 46.9782. Time: 256.6037 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #6: GFLOPs: 2.2105. Time: 5453.4904 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #7: GFLOPs: 14.3075. Time: 842.5491 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #8: GFLOPs: 16.1816. Time: 744.9688 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #9: GFLOPs: 6.9201. Time: 1741.9959 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #10: GFLOPs: 60.4505. Time: 199.4156 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #11: GFLOPs: 28.0706. Time: 429.4448 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #12: GFLOPs: 4.8002. Time: 2511.3199 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #13: GFLOPs: 36.2639. Time: 332.4185 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #14: GFLOPs: 4.9807. Time: 2420.3157 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #15: GFLOPs: 53.4797. Time: 225.4085 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #16: GFLOPs: 2.7584. Time: 4370.2625 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #17: GFLOPs: 15.8085. Time: 762.5495 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #18: GFLOPs: 22.0269. Time: 547.2757 us. Best GFLOPs: 103.2367
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #19: GFLOPs: 120.4563. Time: 100.0760 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #20: GFLOPs: 2.5703. Time: 4690.0674 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #21: GFLOPs: 42.2772. Time: 285.1368 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #22: GFLOPs: 34.8405. Time: 345.9991 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #23: GFLOPs: 4.1358. Time: 2914.7295 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #24: GFLOPs: 80.2398. Time: 150.2345 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #25: GFLOPs: 21.1381. Time: 570.2880 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #26: GFLOPs: 13.5708. Time: 888.2875 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #27: GFLOPs: 17.4420. Time: 691.1355 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #28: GFLOPs: 12.8659. Time: 936.9595 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #29: GFLOPs: 21.4750. Time: 561.3405 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #30: GFLOPs: 31.2832. Time: 385.3431 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #31: GFLOPs: 21.3169. Time: 565.5036 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #32: GFLOPs: 63.0928. Time: 191.0643 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #33: GFLOPs: 8.8706. Time: 1358.9620 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #34: GFLOPs: 47.7039. Time: 252.7003 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #35: GFLOPs: 91.3573. Time: 131.9520 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #36: GFLOPs: 22.6270. Time: 532.7615 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #37: GFLOPs: 46.9410. Time: 256.8069 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #38: GFLOPs: 14.7365. Time: 818.0223 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #39: GFLOPs: 52.8172. Time: 228.2361 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #40: GFLOPs: 103.1705. Time: 116.8433 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #41: GFLOPs: 86.9449. Time: 138.6485 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #42: GFLOPs: 55.8651. Time: 215.7837 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #43: GFLOPs: 22.2227. Time: 542.4545 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #44: GFLOPs: 51.1334. Time: 235.7519 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #45: GFLOPs: 81.1269. Time: 148.5918 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #46: GFLOPs: 5.1205. Time: 2354.2001 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #47: GFLOPs: 31.0442. Time: 388.3104 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #48: GFLOPs: 1.6857. Time: 7151.2727 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #49: GFLOPs: 42.3037. Time: 284.9584 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #50: GFLOPs: 2.1335. Time: 5650.3466 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #51: GFLOPs: 10.0220. Time: 1202.8294 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #52: GFLOPs: 2.8384. Time: 4247.0280 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #53: GFLOPs: 1.7628. Time: 6838.5944 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #54: GFLOPs: 44.8796. Time: 268.6028 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #55: GFLOPs: 33.8812. Time: 355.7956 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #56: GFLOPs: 82.0495. Time: 146.9208 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #57: GFLOPs: 4.5264. Time: 2663.1933 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #58: GFLOPs: 14.3814. Time: 838.2197 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #59: GFLOPs: 23.6768. Time: 509.1401 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #60: GFLOPs: 31.1322. Time: 387.2130 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #61: GFLOPs: 6.6323. Time: 1817.5923 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #62: GFLOPs: 67.8760. Time: 177.6002 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #63: GFLOPs: 35.7493. Time: 337.2037 us. Best GFLOPs: 120.4563
2024-04-29 10:57:35 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #64: GFLOPs: 80.5356. Time: 149.6827 us. Best GFLOPs: 120.4563
