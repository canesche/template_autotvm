2024-04-28 19:55:42 [INFO] [task_scheduler.cc:160] Initializing Task #138: "fused_nn_softmax"
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(8)):
                    for k_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(128) + k_1)
                            T.where(k_0 * T.int64(128) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-28 22:58:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:58:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:59:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x635d9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9a334a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa987718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26e628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa0aad98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7138078)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb482ec8)]: 0 failure(s)
2024-04-28 22:59:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:59:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x635d9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9a334a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa987718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26e628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa0aad98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7138078)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb482ec8)]: 0 failure(s)
2024-04-28 22:59:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x635d9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9a334a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa987718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26e628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa0aad98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7138078)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb482ec8)]: 0 failure(s)
2024-04-28 22:59:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x635d9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9a334a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa987718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26e628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa0aad98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7138078)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb482ec8)]: 0 failure(s)
2024-04-28 22:59:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x635d9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9a334a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa987718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc26e628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa0aad98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7138078)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb482ec8)]: 0 failure(s)
2024-04-28 22:59:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9989  0.9987  0.9912  0.9899  0.9882  0.9862  0.9835  0.9757  0.9716  0.9634  0.9623  0.9602  0.9496  0.9464  0.9420
[17 : 32]:	0.9408  0.9375  0.9360  0.9327  0.9325  0.9304  0.9214  0.9199  0.9118  0.9055  0.9045  0.9016  0.9007  0.8993  0.8990  0.8943
[33 : 48]:	0.8929  0.8872  0.8850  0.8823  0.8810  0.8789  0.8789  0.8760  0.8621  0.8587  0.8582  0.8513  0.8414  0.8383  0.8352  0.8282
[49 : 64]:	0.8218  0.8177  0.8164  0.8120  0.8088  0.8067  0.8026  0.8017  0.7889  0.7873  0.7828  0.7803  0.7802  0.7712  0.7709  0.7692
2024-04-28 22:59:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:59:02 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #1: GFLOPs: 0.2498. Time: 16.0137 us. Best GFLOPs: 0.2498
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #2: GFLOPs: 0.0950. Time: 42.0887 us. Best GFLOPs: 0.2498
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #3: GFLOPs: 0.2039. Time: 19.6173 us. Best GFLOPs: 0.2498
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #4: GFLOPs: 0.0855. Time: 46.8044 us. Best GFLOPs: 0.2498
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #5: GFLOPs: 0.1068. Time: 37.4701 us. Best GFLOPs: 0.2498
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #6: GFLOPs: 0.4917. Time: 8.1346 us. Best GFLOPs: 0.4917
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #7: GFLOPs: 0.1077. Time: 37.1414 us. Best GFLOPs: 0.4917
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #8: GFLOPs: 0.1058. Time: 37.8058 us. Best GFLOPs: 0.4917
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #9: GFLOPs: 0.1050. Time: 38.1040 us. Best GFLOPs: 0.4917
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #10: GFLOPs: 0.1080. Time: 37.0505 us. Best GFLOPs: 0.4917
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #11: GFLOPs: 0.1076. Time: 37.1701 us. Best GFLOPs: 0.4917
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #12: GFLOPs: 0.8976. Time: 4.4561 us. Best GFLOPs: 0.8976
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #13: GFLOPs: 0.1523. Time: 26.2572 us. Best GFLOPs: 0.8976
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #14: GFLOPs: 0.2289. Time: 17.4755 us. Best GFLOPs: 0.8976
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #15: GFLOPs: 0.1853. Time: 21.5895 us. Best GFLOPs: 0.8976
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #16: GFLOPs: 1.0290. Time: 3.8874 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #17: GFLOPs: 0.1055. Time: 37.9083 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #18: GFLOPs: 0.1050. Time: 38.1071 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #19: GFLOPs: 0.1047. Time: 38.1886 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #20: GFLOPs: 0.2376. Time: 16.8320 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #21: GFLOPs: 0.1041. Time: 38.4120 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #22: GFLOPs: 0.1080. Time: 37.0460 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #23: GFLOPs: 1.0272. Time: 3.8940 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #24: GFLOPs: 0.1512. Time: 26.4569 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #25: GFLOPs: 0.1067. Time: 37.4811 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #26: GFLOPs: 0.1074. Time: 37.2272 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #27: GFLOPs: 0.2155. Time: 18.5615 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #28: GFLOPs: 0.0857. Time: 46.6778 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #29: GFLOPs: 0.1064. Time: 37.6101 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #30: GFLOPs: 0.0942. Time: 42.4697 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #31: GFLOPs: 0.1519. Time: 26.3258 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #32: GFLOPs: 0.1678. Time: 23.8321 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #33: GFLOPs: 0.1061. Time: 37.6995 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #34: GFLOPs: 0.1062. Time: 37.6714 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #35: GFLOPs: 0.1049. Time: 38.1237 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #36: GFLOPs: 0.1337. Time: 29.9097 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #37: GFLOPs: 0.1073. Time: 37.2837 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #38: GFLOPs: 0.1076. Time: 37.1677 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #39: GFLOPs: 0.1510. Time: 26.4900 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #40: GFLOPs: 0.1062. Time: 37.6658 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #41: GFLOPs: 0.1062. Time: 37.6525 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #42: GFLOPs: 0.9769. Time: 4.0944 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #43: GFLOPs: 0.2380. Time: 16.8098 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #44: GFLOPs: 0.2412. Time: 16.5863 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #45: GFLOPs: 0.1059. Time: 37.7616 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #46: GFLOPs: 0.4917. Time: 8.1346 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #47: GFLOPs: 0.7057. Time: 5.6677 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #48: GFLOPs: 0.1080. Time: 37.0532 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #49: GFLOPs: 0.7131. Time: 5.6090 us. Best GFLOPs: 1.0290
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #50: GFLOPs: 1.0913. Time: 3.6654 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #51: GFLOPs: 0.1536. Time: 26.0335 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #52: GFLOPs: 0.1071. Time: 37.3330 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #53: GFLOPs: 0.1055. Time: 37.9196 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #54: GFLOPs: 0.2190. Time: 18.2658 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #55: GFLOPs: 0.2089. Time: 19.1480 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #56: GFLOPs: 0.1067. Time: 37.4913 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #57: GFLOPs: 0.1544. Time: 25.9135 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #58: GFLOPs: 0.1077. Time: 37.1316 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #59: GFLOPs: 0.1060. Time: 37.7411 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #60: GFLOPs: 0.2569. Time: 15.5723 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #61: GFLOPs: 1.0290. Time: 3.8871 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #62: GFLOPs: 0.1867. Time: 21.4234 us. Best GFLOPs: 1.0913
2024-04-28 23:09:27 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #63: GFLOPs: 0.2177. Time: 18.3720 us. Best GFLOPs: 1.0913
