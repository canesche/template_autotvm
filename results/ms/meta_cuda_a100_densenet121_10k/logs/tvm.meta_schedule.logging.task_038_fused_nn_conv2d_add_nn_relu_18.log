2024-04-28 19:55:09 [INFO] [task_scheduler.cc:160] Initializing Task #38: "fused_nn_conv2d_add_nn_relu_18"
2024-04-28 19:55:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(928), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(928), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(58), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(224)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(928), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused)
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(928), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(928), rc_0 * T.int64(16) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 1, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 4, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(58), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(224)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(928), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused)
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(928), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(928), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 1, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 4, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(928), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(928), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(58), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(224)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(928), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused)
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(928), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(928), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 1, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 4, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 20:45:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:45:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:45:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 476 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-28 20:45:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 958 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-28 20:45:56 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-28 20:45:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-28 20:46:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-28 20:46:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-28 20:46:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-28 20:46:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9988  0.9983  0.9980  0.9977  0.9969  0.9952  0.9950  0.9945  0.9942  0.9940  0.9939  0.9938  0.9938  0.9921  0.9914
[17 : 32]:	0.9897  0.9896  0.9894  0.9893  0.9878  0.9865  0.9864  0.9838  0.9815  0.9802  0.9802  0.9788  0.9787  0.9785  0.9767  0.9761
[33 : 48]:	0.9746  0.9743  0.9742  0.9728  0.9718  0.9711  0.9707  0.9706  0.9705  0.9699  0.9691  0.9684  0.9683  0.9676  0.9671  0.9669
[49 : 64]:	0.9662  0.9652  0.9649  0.9647  0.9633  0.9633  0.9632  0.9621  0.9616  0.9615  0.9615  0.9602  0.9601  0.9601  0.9596  0.9594
2024-04-28 20:46:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:46:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #1: GFLOPs: 8.9543. Time: 5205.6979 us. Best GFLOPs: 8.9543
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #2: GFLOPs: 118.3551. Time: 393.8444 us. Best GFLOPs: 118.3551
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #3: GFLOPs: 77.6240. Time: 600.5034 us. Best GFLOPs: 118.3551
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #4: GFLOPs: 458.6709. Time: 101.6273 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #5: GFLOPs: 74.0800. Time: 629.2319 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #6: GFLOPs: 17.3991. Time: 2679.0803 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #7: GFLOPs: 12.1373. Time: 3840.5309 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #8: GFLOPs: 50.4529. Time: 923.9011 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #9: GFLOPs: 321.7984. Time: 144.8531 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #10: GFLOPs: 281.6505. Time: 165.5012 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #11: GFLOPs: 85.6692. Time: 544.1107 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #12: GFLOPs: 67.4937. Time: 690.6350 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #13: GFLOPs: 34.0696. Time: 1368.1855 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #14: GFLOPs: 228.3007. Time: 204.1759 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #15: GFLOPs: 11.0239. Time: 4228.3945 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #16: GFLOPs: 224.1218. Time: 207.9830 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #17: GFLOPs: 78.7430. Time: 591.9702 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #18: GFLOPs: 293.4213. Time: 158.8620 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #19: GFLOPs: 111.7119. Time: 417.2654 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #20: GFLOPs: 129.0131. Time: 361.3083 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #21: GFLOPs: 188.8705. Time: 246.8014 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #22: GFLOPs: 320.6607. Time: 145.3670 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #23: GFLOPs: 303.4517. Time: 153.6109 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #24: GFLOPs: 129.8207. Time: 359.0606 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #25: GFLOPs: 11.1884. Time: 4166.2463 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #26: GFLOPs: 158.6108. Time: 293.8861 us. Best GFLOPs: 458.6709
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #27: GFLOPs: 944.1361. Time: 49.3716 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #28: GFLOPs: 325.6836. Time: 143.1251 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #29: GFLOPs: 177.0586. Time: 263.2660 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #30: GFLOPs: 745.4249. Time: 62.5328 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #31: GFLOPs: 274.1984. Time: 169.9992 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #32: GFLOPs: 279.0719. Time: 167.0304 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #33: GFLOPs: 75.5550. Time: 616.9482 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #34: GFLOPs: 321.8806. Time: 144.8161 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #35: GFLOPs: 114.3657. Time: 407.5830 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #36: GFLOPs: 145.2606. Time: 320.8957 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #37: GFLOPs: 65.3622. Time: 713.1571 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #38: GFLOPs: 340.9724. Time: 136.7076 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #39: GFLOPs: 112.0656. Time: 415.9483 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #40: GFLOPs: 776.6468. Time: 60.0189 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #41: GFLOPs: 211.0702. Time: 220.8436 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #42: GFLOPs: 104.6286. Time: 445.5140 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #43: GFLOPs: 312.1537. Time: 149.3287 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #44: GFLOPs: 28.7661. Time: 1620.4305 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #45: GFLOPs: 259.8636. Time: 179.3768 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #46: GFLOPs: 117.5088. Time: 396.6809 us. Best GFLOPs: 944.1361
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #47: GFLOPs: 1911.3976. Time: 24.3871 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #48: GFLOPs: 221.1811. Time: 210.7481 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #49: GFLOPs: 618.4706. Time: 75.3690 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #50: GFLOPs: 186.9818. Time: 249.2944 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #51: GFLOPs: 12.1753. Time: 3828.5410 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #52: GFLOPs: 613.6171. Time: 75.9651 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #53: GFLOPs: 103.7196. Time: 449.4184 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #54: GFLOPs: 89.7300. Time: 519.4861 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #55: GFLOPs: 33.5192. Time: 1390.6488 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #56: GFLOPs: 619.7513. Time: 75.2132 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #57: GFLOPs: 177.5079. Time: 262.5997 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #58: GFLOPs: 106.6140. Time: 437.2174 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #59: GFLOPs: 65.6197. Time: 710.3583 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #60: GFLOPs: 19.5152. Time: 2388.5776 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #61: GFLOPs: 548.7563. Time: 84.9439 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #62: GFLOPs: 907.9410. Time: 51.3398 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #63: GFLOPs: 807.2407. Time: 57.7442 us. Best GFLOPs: 1911.3976
2024-04-28 23:02:29 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #64: GFLOPs: 65.4387. Time: 712.3234 us. Best GFLOPs: 1911.3976
2024-04-29 02:01:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:01:10 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 02:01:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 413 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-29 02:01:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 846 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-29 02:01:13 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 02:01:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-29 02:01:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-29 02:01:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-29 02:01:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3976f38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcee7968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6b94b38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7b05928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x91af158)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x9fde868)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcee77e8)]: 0 failure(s)
2024-04-29 02:01:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0454  1.0422  1.0381  1.0283  1.0066  0.9775  0.9703  0.9584  0.9492  0.9479  0.9464  0.9424  0.9385  0.9379  0.9365  0.9285
[17 : 32]:	0.9270  0.9262  0.9197  0.9190  0.9189  0.9140  0.9133  0.9129  0.9108  0.9079  0.9054  0.9011  0.9002  0.8997  0.8983  0.8901
[33 : 48]:	0.8900  0.8895  0.8846  0.8836  0.8835  0.8833  0.8826  0.8745  0.8703  0.8696  0.8687  0.8652  0.8630  0.8604  0.8550  0.8504
[49 : 64]:	0.8443  0.8382  0.8377  0.8329  0.8287  0.8277  0.8247  0.8240  0.8212  0.8206  0.8201  0.8195  0.8169  0.8160  0.8151  0.8151
2024-04-29 02:01:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:01:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #65: GFLOPs: 1969.4302. Time: 23.6685 us. Best GFLOPs: 1969.4302
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #66: GFLOPs: 1933.0157. Time: 24.1144 us. Best GFLOPs: 1969.4302
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #67: GFLOPs: 1975.5937. Time: 23.5947 us. Best GFLOPs: 1975.5937
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #68: GFLOPs: 1998.2857. Time: 23.3267 us. Best GFLOPs: 1998.2857
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #69: GFLOPs: 1926.9295. Time: 24.1906 us. Best GFLOPs: 1998.2857
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #70: GFLOPs: 2165.9282. Time: 21.5213 us. Best GFLOPs: 2165.9282
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #71: GFLOPs: 1347.8739. Time: 34.5830 us. Best GFLOPs: 2165.9282
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #72: GFLOPs: 674.4795. Time: 69.1103 us. Best GFLOPs: 2165.9282
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #73: GFLOPs: 2201.7700. Time: 21.1709 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #74: GFLOPs: 1799.5818. Time: 25.9024 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #75: GFLOPs: 1437.8946. Time: 32.4179 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #76: GFLOPs: 1867.0696. Time: 24.9661 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #77: GFLOPs: 1559.8752. Time: 29.8828 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #78: GFLOPs: 1419.7211. Time: 32.8329 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #79: GFLOPs: 1521.5182. Time: 30.6362 us. Best GFLOPs: 2201.7700
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #80: GFLOPs: 2208.8612. Time: 21.1030 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #81: GFLOPs: 628.7573. Time: 74.1359 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #82: GFLOPs: 1530.2760. Time: 30.4608 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #83: GFLOPs: 629.1770. Time: 74.0865 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #84: GFLOPs: 667.9229. Time: 69.7888 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #85: GFLOPs: 1476.6719. Time: 31.5666 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #86: GFLOPs: 1504.3205. Time: 30.9864 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #87: GFLOPs: 1631.5964. Time: 28.5693 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #88: GFLOPs: 1803.2740. Time: 25.8494 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #89: GFLOPs: 1109.8857. Time: 41.9985 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #90: GFLOPs: 843.8827. Time: 55.2369 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #91: GFLOPs: 1911.9772. Time: 24.3797 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #92: GFLOPs: 1391.6715. Time: 33.4946 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #93: GFLOPs: 2009.2051. Time: 23.2000 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #94: GFLOPs: 1818.4965. Time: 25.6330 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #95: GFLOPs: 2199.3734. Time: 21.1940 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #96: GFLOPs: 1475.0016. Time: 31.6023 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #97: GFLOPs: 1726.1390. Time: 27.0045 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #98: GFLOPs: 1386.8250. Time: 33.6117 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #99: GFLOPs: 1822.3608. Time: 25.5786 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #100: GFLOPs: 1051.9701. Time: 44.3107 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #101: GFLOPs: 792.7288. Time: 58.8013 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #102: GFLOPs: 1714.9918. Time: 27.1800 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #103: GFLOPs: 622.8549. Time: 74.8385 us. Best GFLOPs: 2208.8612
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #104: GFLOPs: 2210.5963. Time: 21.0864 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #105: GFLOPs: 2086.8556. Time: 22.3367 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #106: GFLOPs: 1114.0392. Time: 41.8419 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #107: GFLOPs: 1461.5670. Time: 31.8928 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #108: GFLOPs: 2201.6868. Time: 21.1717 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #109: GFLOPs: 1923.2605. Time: 24.2367 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #110: GFLOPs: 1626.6947. Time: 28.6553 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #111: GFLOPs: 1696.8070. Time: 27.4713 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #112: GFLOPs: 408.4319. Time: 114.1280 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #113: GFLOPs: 1452.9085. Time: 32.0829 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #114: GFLOPs: 1407.0560. Time: 33.1284 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #115: GFLOPs: 612.9872. Time: 76.0432 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #116: GFLOPs: 1563.5540. Time: 29.8125 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #117: GFLOPs: 587.2033. Time: 79.3822 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #118: GFLOPs: 1407.3749. Time: 33.1209 us. Best GFLOPs: 2210.5963
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #119: GFLOPs: 2248.3278. Time: 20.7325 us. Best GFLOPs: 2248.3278
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #120: GFLOPs: 2079.5406. Time: 22.4153 us. Best GFLOPs: 2248.3278
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #121: GFLOPs: 1388.5221. Time: 33.5706 us. Best GFLOPs: 2248.3278
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #122: GFLOPs: 1537.4422. Time: 30.3189 us. Best GFLOPs: 2248.3278
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #123: GFLOPs: 1618.6200. Time: 28.7983 us. Best GFLOPs: 2248.3278
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #124: GFLOPs: 2452.3972. Time: 19.0073 us. Best GFLOPs: 2452.3972
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #125: GFLOPs: 1599.5596. Time: 29.1415 us. Best GFLOPs: 2452.3972
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #126: GFLOPs: 377.8879. Time: 123.3527 us. Best GFLOPs: 2452.3972
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #127: GFLOPs: 210.1380. Time: 221.8233 us. Best GFLOPs: 2452.3972
2024-04-29 02:03:04 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_conv2d_add_nn_relu_18] Trial #128: GFLOPs: 87.7541. Time: 531.1831 us. Best GFLOPs: 2452.3972
