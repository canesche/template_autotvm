2024-04-28 19:55:39 [INFO] [task_scheduler.cc:160] Initializing Task #125: "fused_nn_avg_pool2d"
2024-04-28 19:55:39 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-28 19:55:39 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-28 19:55:39 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                            v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(28))
                            v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                        v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(28))
                        v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-28 19:55:39 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(3584), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_0_fused // T.int64(28) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3)
                            v_rv0 = T.axis.reduce(T.int64(2), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) // T.int64(2))
                            v_rv1 = T.axis.reduce(T.int64(2), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) % T.int64(2))
                            T.where(ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1 < T.int64(4))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_0_fused // T.int64(28))
                        v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(28))
                        v_ax3 = T.axis.spatial(T.int64(28), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(64)) + ax3_1 < T.int64(28))
                        T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-28 22:43:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:43:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:43:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1f74d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc914b38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x96c4f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9453e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34d2a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa411fb8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xaf1c878)]: 0 failure(s)
2024-04-28 22:43:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:43:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1f74d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc914b38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x96c4f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9453e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34d2a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa411fb8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xaf1c878)]: 0 failure(s)
2024-04-28 22:43:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1f74d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc914b38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x96c4f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9453e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34d2a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa411fb8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xaf1c878)]: 0 failure(s)
2024-04-28 22:43:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1f74d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc914b38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x96c4f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9453e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34d2a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa411fb8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xaf1c878)]: 0 failure(s)
2024-04-28 22:43:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb1f74d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc914b38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x96c4f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9453e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x34d2a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa411fb8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xaf1c878)]: 0 failure(s)
2024-04-28 22:43:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9966  0.9878  0.9697  0.9689  0.9657  0.9566  0.9537  0.9482  0.9454  0.9389  0.9373  0.9360  0.9314  0.9255  0.9226  0.9213
[17 : 32]:	0.9177  0.9108  0.9107  0.9075  0.9069  0.9068  0.9046  0.9014  0.8985  0.8939  0.8934  0.8763  0.8637  0.8534  0.8487  0.8487
[33 : 48]:	0.8415  0.8374  0.8286  0.8271  0.8243  0.8231  0.8219  0.8217  0.8213  0.8193  0.8167  0.8141  0.8108  0.8102  0.8101  0.8092
[49 : 64]:	0.8023  0.7992  0.7819  0.7752  0.7623  0.7553  0.7530  0.7502  0.7498  0.7364  0.7310  0.7293  0.7234  0.7214  0.7130  0.7091
2024-04-28 22:43:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:43:54 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #1: GFLOPs: 390.1723. Time: 6.4300 us. Best GFLOPs: 390.1723
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #2: GFLOPs: 354.3409. Time: 7.0802 us. Best GFLOPs: 390.1723
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #3: GFLOPs: 249.5905. Time: 10.0517 us. Best GFLOPs: 390.1723
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #4: GFLOPs: 385.5783. Time: 6.5066 us. Best GFLOPs: 390.1723
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #5: GFLOPs: 345.9658. Time: 7.2516 us. Best GFLOPs: 390.1723
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #6: GFLOPs: 306.4228. Time: 8.1874 us. Best GFLOPs: 390.1723
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #7: GFLOPs: 391.9207. Time: 6.4013 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #8: GFLOPs: 324.5009. Time: 7.7313 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #9: GFLOPs: 306.4257. Time: 8.1873 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #10: GFLOPs: 372.1919. Time: 6.7406 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #11: GFLOPs: 241.5951. Time: 10.3843 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #12: GFLOPs: 367.8003. Time: 6.8211 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #13: GFLOPs: 355.0942. Time: 7.0652 us. Best GFLOPs: 391.9207
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #14: GFLOPs: 392.5969. Time: 6.3903 us. Best GFLOPs: 392.5969
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #15: GFLOPs: 355.8752. Time: 7.0497 us. Best GFLOPs: 392.5969
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #16: GFLOPs: 304.6809. Time: 8.2342 us. Best GFLOPs: 392.5969
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #17: GFLOPs: 348.6665. Time: 7.1954 us. Best GFLOPs: 392.5969
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #18: GFLOPs: 391.9286. Time: 6.4012 us. Best GFLOPs: 392.5969
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #19: GFLOPs: 301.9197. Time: 8.3095 us. Best GFLOPs: 392.5969
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #20: GFLOPs: 403.7270. Time: 6.2141 us. Best GFLOPs: 403.7270
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:121] [Task #125: fused_nn_avg_pool2d] Trial #21: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  44: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  43: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  42: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  41: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  40: tvm::transform::Pass::operator()(tvm::IRModule) const
  39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: _ZN3tvm7runtime13PackedFun
  34: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  33: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  32: _ZZN3tvm3tir11StmtFunctorI
  31: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  30: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  29: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  28: _ZZN3tvm3tir11StmtFunctorI
  27: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  26: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  25: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  24: _ZZN3tvm3tir11StmtFunctorI
  23: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  22: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  21: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  20: _ZZN3tvm3tir11StmtFunctorI
  19: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  18: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  17: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  16: _ZZN3tvm3tir11StmtFunctorI
  15: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  14: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  13: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  12: _ZZN3tvm3tir11StmtFunctorIFNS
  11: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  10: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  8: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  7: _ZZN3tvm3tir11StmtFunctorI
  6: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  5: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  4: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  3: _ZZN3tvm3tir11StmtFunctorIFNS
  2: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  1: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(25088), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_0_fused // T.int64(196) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(196) // T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(7) * T.int64(4) + ax3)
                        v_rv0 = T.axis.reduce(T.int64(2), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) // T.int64(2))
                        v_rv1 = T.axis.reduce(T.int64(2), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) % T.int64(2))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_0_fused // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(196) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(7) * T.int64(4) + ax3_1)
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #22: GFLOPs: 406.9866. Time: 6.1643 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #23: GFLOPs: 383.4105. Time: 6.5434 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #24: GFLOPs: 354.2348. Time: 7.0823 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #25: GFLOPs: 355.2036. Time: 7.0630 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #26: GFLOPs: 249.5888. Time: 10.0517 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #27: GFLOPs: 406.8680. Time: 6.1661 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #28: GFLOPs: 304.5323. Time: 8.2382 us. Best GFLOPs: 406.9866
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #29: GFLOPs: 409.9953. Time: 6.1191 us. Best GFLOPs: 409.9953
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:121] [Task #125: fused_nn_avg_pool2d] Trial #30: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  44: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  43: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  42: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  41: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  40: tvm::transform::Pass::operator()(tvm::IRModule) const
  39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: _ZN3tvm7runtime13PackedFun
  34: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  33: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  32: _ZZN3tvm3tir11StmtFunctorI
  31: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  30: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  29: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  28: _ZZN3tvm3tir11StmtFunctorI
  27: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  26: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  25: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  24: _ZZN3tvm3tir11StmtFunctorI
  23: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  22: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  21: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  20: _ZZN3tvm3tir11StmtFunctorI
  19: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  18: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  17: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  16: _ZZN3tvm3tir11StmtFunctorI
  15: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  14: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  13: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  12: _ZZN3tvm3tir11StmtFunctorIFNS
  11: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  10: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  8: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  7: _ZZN3tvm3tir11StmtFunctorI
  6: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  5: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  4: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  3: _ZZN3tvm3tir11StmtFunctorIFNS
  2: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  1: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(25088), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_0_fused // T.int64(196) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(196) // T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(7) * T.int64(4) + ax3)
                        v_rv0 = T.axis.reduce(T.int64(2), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) // T.int64(2))
                        v_rv1 = T.axis.reduce(T.int64(2), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) % T.int64(2))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_0_fused // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(196) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_0_fused % T.int64(7) * T.int64(4) + ax3_1)
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #31: GFLOPs: 304.5291. Time: 8.2383 us. Best GFLOPs: 409.9953
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #32: GFLOPs: 410.1520. Time: 6.1168 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #33: GFLOPs: 392.5506. Time: 6.3910 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #34: GFLOPs: 296.5714. Time: 8.4593 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #35: GFLOPs: 284.2078. Time: 8.8273 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #36: GFLOPs: 405.3984. Time: 6.1885 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #37: GFLOPs: 382.1551. Time: 6.5649 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #38: GFLOPs: 397.8373. Time: 6.3061 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #39: GFLOPs: 306.3702. Time: 8.1888 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #40: GFLOPs: 315.3644. Time: 7.9552 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #41: GFLOPs: 304.6590. Time: 8.2348 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #42: GFLOPs: 28.6720. Time: 87.4999 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #43: GFLOPs: 397.7116. Time: 6.3081 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #44: GFLOPs: 354.8171. Time: 7.0707 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #45: GFLOPs: 303.5036. Time: 8.2661 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #46: GFLOPs: 301.2337. Time: 8.3284 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #47: GFLOPs: 254.7948. Time: 9.8464 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #48: GFLOPs: 372.4728. Time: 6.7355 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #49: GFLOPs: 324.4449. Time: 7.7326 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #50: GFLOPs: 394.1465. Time: 6.3651 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #51: GFLOPs: 254.5064. Time: 9.8575 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #52: GFLOPs: 362.7123. Time: 6.9168 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #53: GFLOPs: 280.3580. Time: 8.9486 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #54: GFLOPs: 381.4276. Time: 6.5774 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #55: GFLOPs: 324.0442. Time: 7.7422 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #56: GFLOPs: 349.9000. Time: 7.1700 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #57: GFLOPs: 384.9848. Time: 6.5166 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #58: GFLOPs: 366.9313. Time: 6.8372 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #59: GFLOPs: 303.5341. Time: 8.2653 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #60: GFLOPs: 308.0767. Time: 8.1434 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #61: GFLOPs: 89.6104. Time: 27.9967 us. Best GFLOPs: 410.1520
2024-04-28 23:08:26 [INFO] [task_scheduler.cc:131] [Task #125: fused_nn_avg_pool2d] Trial #62: GFLOPs: 367.9012. Time: 6.8192 us. Best GFLOPs: 410.1520
