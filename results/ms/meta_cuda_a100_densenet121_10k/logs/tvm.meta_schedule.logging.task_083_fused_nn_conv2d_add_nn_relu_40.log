2024-04-28 19:55:26 [INFO] [task_scheduler.cc:160] Initializing Task #83: "fused_nn_conv2d_add_nn_relu_40"
2024-04-28 19:55:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(160), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(588)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0 * T.int64(3) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[160, 3, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(160), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(588)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[160, 3, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(160), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(588)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(3) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[160, 3, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 21:43:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:43:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:43:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 489 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-28 21:43:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-28 21:43:03 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 21:43:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-28 21:43:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-28 21:43:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-28 21:43:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-28 21:43:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9981  0.9980  0.9970  0.9969  0.9966  0.9958  0.9956  0.9947  0.9947  0.9941  0.9940  0.9939  0.9926  0.9920  0.9916
[17 : 32]:	0.9913  0.9900  0.9896  0.9894  0.9886  0.9874  0.9872  0.9857  0.9857  0.9849  0.9848  0.9844  0.9841  0.9835  0.9829  0.9819
[33 : 48]:	0.9804  0.9801  0.9800  0.9782  0.9775  0.9741  0.9738  0.9734  0.9732  0.9730  0.9723  0.9723  0.9723  0.9721  0.9720  0.9712
[49 : 64]:	0.9710  0.9704  0.9703  0.9701  0.9690  0.9689  0.9684  0.9682  0.9677  0.9671  0.9657  0.9657  0.9649  0.9635  0.9635  0.9631
2024-04-28 21:43:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:43:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #1: GFLOPs: 878.1631. Time: 109.9325 us. Best GFLOPs: 878.1631
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #2: GFLOPs: 23.6644. Time: 4079.4931 us. Best GFLOPs: 878.1631
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #3: GFLOPs: 1484.6069. Time: 65.0264 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #4: GFLOPs: 24.0992. Time: 4005.8880 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #5: GFLOPs: 678.7653. Time: 142.2268 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #6: GFLOPs: 1414.7391. Time: 68.2378 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #7: GFLOPs: 183.3590. Time: 526.5005 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #8: GFLOPs: 152.5127. Time: 632.9875 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #9: GFLOPs: 21.7636. Time: 4435.7900 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #10: GFLOPs: 16.1967. Time: 5960.4029 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #11: GFLOPs: 1191.1059. Time: 81.0496 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:121] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(240), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 32, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[240, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #13: GFLOPs: 179.5139. Time: 537.7781 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #14: GFLOPs: 1400.3237. Time: 68.9402 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #15: GFLOPs: 103.0518. Time: 936.7973 us. Best GFLOPs: 1484.6069
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #16: GFLOPs: 2797.1622. Time: 34.5131 us. Best GFLOPs: 2797.1622
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #17: GFLOPs: 649.9723. Time: 148.5273 us. Best GFLOPs: 2797.1622
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #18: GFLOPs: 46.1605. Time: 2091.3707 us. Best GFLOPs: 2797.1622
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #19: GFLOPs: 3334.8765. Time: 28.9482 us. Best GFLOPs: 3334.8765
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #20: GFLOPs: 3573.9183. Time: 27.0120 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #21: GFLOPs: 601.0121. Time: 160.6268 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #22: GFLOPs: 79.8623. Time: 1208.8135 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #23: GFLOPs: 145.8603. Time: 661.8565 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #24: GFLOPs: 392.9577. Time: 245.6718 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #25: GFLOPs: 374.8633. Time: 257.5302 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #26: GFLOPs: 1258.8931. Time: 76.6853 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #27: GFLOPs: 379.0068. Time: 254.7147 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #28: GFLOPs: 24.2204. Time: 3985.8413 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #29: GFLOPs: 42.3371. Time: 2280.2386 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:121] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #30: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(240), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 32, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 4, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[240, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #31: GFLOPs: 3139.4116. Time: 30.7505 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #32: GFLOPs: 11.4883. Time: 8403.2001 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #33: GFLOPs: 1596.2193. Time: 60.4796 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #34: GFLOPs: 1122.8336. Time: 85.9777 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #35: GFLOPs: 15.2481. Time: 6331.2001 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #36: GFLOPs: 190.4663. Time: 506.8542 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #37: GFLOPs: 285.5847. Time: 338.0386 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #38: GFLOPs: 904.4028. Time: 106.7430 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #39: GFLOPs: 392.9149. Time: 245.6986 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #40: GFLOPs: 36.4481. Time: 2648.6567 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #41: GFLOPs: 147.3053. Time: 655.3642 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #42: GFLOPs: 12.4386. Time: 7761.2111 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #43: GFLOPs: 2709.3588. Time: 35.6315 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #44: GFLOPs: 3058.5054. Time: 31.5640 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #45: GFLOPs: 2525.6817. Time: 38.2228 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #46: GFLOPs: 23.4948. Time: 4108.9435 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #47: GFLOPs: 972.9811. Time: 99.2194 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #48: GFLOPs: 1365.3813. Time: 70.7045 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #49: GFLOPs: 1156.9390. Time: 83.4431 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #50: GFLOPs: 816.7717. Time: 118.1954 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #51: GFLOPs: 1110.0170. Time: 86.9704 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #52: GFLOPs: 1404.3596. Time: 68.7421 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #53: GFLOPs: 215.2352. Time: 448.5263 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #54: GFLOPs: 367.0992. Time: 262.9769 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #55: GFLOPs: 173.8616. Time: 555.2614 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #56: GFLOPs: 605.3598. Time: 159.4731 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #57: GFLOPs: 1155.2887. Time: 83.5623 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #58: GFLOPs: 1360.3726. Time: 70.9648 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #59: GFLOPs: 993.3705. Time: 97.1829 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #60: GFLOPs: 223.4356. Time: 432.0647 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #61: GFLOPs: 25.6520. Time: 3763.3896 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #62: GFLOPs: 16.0890. Time: 6000.2786 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #63: GFLOPs: 143.2292. Time: 674.0148 us. Best GFLOPs: 3573.9183
2024-04-28 23:05:17 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #64: GFLOPs: 3200.6788. Time: 30.1619 us. Best GFLOPs: 3573.9183
2024-04-29 01:48:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:48:28 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 01:48:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 433 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 859 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 1285 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:34 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-04-29 01:48:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc83e78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x976c8e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa816128)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9429d98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xcc5e628)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac2edb8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x976cd58)]: 0 failure(s)
2024-04-29 01:48:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6829  1.5844  1.5412  1.5274  1.4873  1.4601  1.4553  1.4110  1.2939  1.2531  1.2399  1.2394  1.2392  1.2271  1.2232  1.2197
[17 : 32]:	1.2197  1.1911  1.1884  1.1866  1.1818  1.1813  1.1777  1.1765  1.1754  1.1692  1.1602  1.1600  1.1563  1.1530  1.1512  1.1439
[33 : 48]:	1.1410  1.1320  1.1298  1.1288  1.1261  1.1251  1.1207  1.1206  1.1148  1.1138  1.1115  1.1075  1.0992  1.0905  1.0880  1.0871
[49 : 64]:	1.0847  1.0829  1.0805  1.0743  1.0716  1.0689  1.0620  1.0620  1.0599  1.0587  1.0586  1.0550  1.0514  1.0507  1.0499  1.0482
2024-04-29 01:48:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:48:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #65: GFLOPs: 3400.7720. Time: 28.3873 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #66: GFLOPs: 3473.8746. Time: 27.7899 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #67: GFLOPs: 2817.5278. Time: 34.2636 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #68: GFLOPs: 3411.7671. Time: 28.2958 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #69: GFLOPs: 2835.8980. Time: 34.0416 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #70: GFLOPs: 2421.8287. Time: 39.8619 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #71: GFLOPs: 3003.5909. Time: 32.1411 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #72: GFLOPs: 2671.3582. Time: 36.1384 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #73: GFLOPs: 3263.8002. Time: 29.5786 us. Best GFLOPs: 3573.9183
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #74: GFLOPs: 3776.7536. Time: 25.5613 us. Best GFLOPs: 3776.7536
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #75: GFLOPs: 1965.2199. Time: 49.1236 us. Best GFLOPs: 3776.7536
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #76: GFLOPs: 2126.0236. Time: 45.4081 us. Best GFLOPs: 3776.7536
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #77: GFLOPs: 3133.9809. Time: 30.8038 us. Best GFLOPs: 3776.7536
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #78: GFLOPs: 3190.8940. Time: 30.2544 us. Best GFLOPs: 3776.7536
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #79: GFLOPs: 2739.4674. Time: 35.2399 us. Best GFLOPs: 3776.7536
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #80: GFLOPs: 3816.0235. Time: 25.2982 us. Best GFLOPs: 3816.0235
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #81: GFLOPs: 3735.3217. Time: 25.8448 us. Best GFLOPs: 3816.0235
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #82: GFLOPs: 2185.3208. Time: 44.1760 us. Best GFLOPs: 3816.0235
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #83: GFLOPs: 4390.1730. Time: 21.9897 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #84: GFLOPs: 2038.0386. Time: 47.3684 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #85: GFLOPs: 1412.9497. Time: 68.3242 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #86: GFLOPs: 3308.2085. Time: 29.1815 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #87: GFLOPs: 3563.9160. Time: 27.0878 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #88: GFLOPs: 3317.7518. Time: 29.0976 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #89: GFLOPs: 3598.8930. Time: 26.8245 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #90: GFLOPs: 2904.0159. Time: 33.2431 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #91: GFLOPs: 3489.4223. Time: 27.6661 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #92: GFLOPs: 2654.5915. Time: 36.3667 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #93: GFLOPs: 2667.8436. Time: 36.1860 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #94: GFLOPs: 4107.7130. Time: 23.5018 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #95: GFLOPs: 3242.3604. Time: 29.7742 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #96: GFLOPs: 3477.0978. Time: 27.7641 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #97: GFLOPs: 2451.3871. Time: 39.3812 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #98: GFLOPs: 2024.9732. Time: 47.6740 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #99: GFLOPs: 2048.0743. Time: 47.1363 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #100: GFLOPs: 1884.1548. Time: 51.2371 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #101: GFLOPs: 2724.5089. Time: 35.4334 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #102: GFLOPs: 2844.2011. Time: 33.9423 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #103: GFLOPs: 2869.3681. Time: 33.6446 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #104: GFLOPs: 2864.2126. Time: 33.7051 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #105: GFLOPs: 3465.7780. Time: 27.8548 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #106: GFLOPs: 3507.6561. Time: 27.5223 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #107: GFLOPs: 2724.9539. Time: 35.4276 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #108: GFLOPs: 3565.5934. Time: 27.0751 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #109: GFLOPs: 3465.8734. Time: 27.8541 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #110: GFLOPs: 3489.9478. Time: 27.6619 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #111: GFLOPs: 2587.4274. Time: 37.3107 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #112: GFLOPs: 2725.7565. Time: 35.4172 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #113: GFLOPs: 1357.5045. Time: 71.1148 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #114: GFLOPs: 3451.2312. Time: 27.9722 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #115: GFLOPs: 1229.0159. Time: 78.5495 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #116: GFLOPs: 3040.7721. Time: 31.7481 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #117: GFLOPs: 2768.2866. Time: 34.8731 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #118: GFLOPs: 2601.5717. Time: 37.1078 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #119: GFLOPs: 1059.0421. Time: 91.1565 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #120: GFLOPs: 1251.7073. Time: 77.1256 us. Best GFLOPs: 4390.1730
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #121: GFLOPs: 5113.6342. Time: 18.8787 us. Best GFLOPs: 5113.6342
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #122: GFLOPs: 5070.5009. Time: 19.0393 us. Best GFLOPs: 5113.6342
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #123: GFLOPs: 2460.6095. Time: 39.2336 us. Best GFLOPs: 5113.6342
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #124: GFLOPs: 5138.6188. Time: 18.7869 us. Best GFLOPs: 5138.6188
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #125: GFLOPs: 2461.3078. Time: 39.2225 us. Best GFLOPs: 5138.6188
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #126: GFLOPs: 146.0734. Time: 660.8913 us. Best GFLOPs: 5138.6188
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #127: GFLOPs: 385.0327. Time: 250.7284 us. Best GFLOPs: 5138.6188
2024-04-29 01:50:36 [INFO] [task_scheduler.cc:131] [Task #83: fused_nn_conv2d_add_nn_relu_40] Trial #128: GFLOPs: 1502.2119. Time: 64.2643 us. Best GFLOPs: 5138.6188
