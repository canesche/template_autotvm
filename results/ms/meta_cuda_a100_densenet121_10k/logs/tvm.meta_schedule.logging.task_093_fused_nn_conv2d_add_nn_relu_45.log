2024-04-28 19:55:29 [INFO] [task_scheduler.cc:160] Initializing Task #93: "fused_nn_conv2d_add_nn_relu_45"
2024-04-28 19:55:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(320), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(320), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(62720)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0 * T.int64(80) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5120)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(80))
                                    v1 = T.axis.spatial(T.int64(320), rc_0 * T.int64(80) + ax0_ax1_ax2_ax3_fused % T.int64(80))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0 * T.int64(80) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 5, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(62720)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(80) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5120)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(80))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(80) + ax0_ax1_ax2_ax3_fused % T.int64(80))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(80) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 5, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(62720)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(80) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5120)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(80))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(80) + ax0_ax1_ax2_ax3_fused % T.int64(80))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(80) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 5, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 21:57:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:57:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:57:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 478 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-28 21:57:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 961 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-28 21:57:51 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-28 21:57:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-28 21:57:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-28 21:57:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-28 21:58:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-28 21:58:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9990  0.9979  0.9976  0.9973  0.9958  0.9955  0.9951  0.9949  0.9941  0.9920  0.9915  0.9911  0.9890  0.9887  0.9883
[17 : 32]:	0.9882  0.9877  0.9877  0.9873  0.9853  0.9850  0.9848  0.9846  0.9843  0.9841  0.9834  0.9834  0.9833  0.9833  0.9832  0.9829
[33 : 48]:	0.9823  0.9821  0.9818  0.9810  0.9808  0.9779  0.9779  0.9768  0.9760  0.9759  0.9755  0.9743  0.9730  0.9726  0.9719  0.9711
[49 : 64]:	0.9708  0.9706  0.9701  0.9699  0.9697  0.9697  0.9689  0.9682  0.9675  0.9674  0.9665  0.9665  0.9664  0.9656  0.9656  0.9656
2024-04-28 21:58:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:58:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #1: GFLOPs: 17.3441. Time: 3714.5790 us. Best GFLOPs: 17.3441
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #2: GFLOPs: 642.4387. Time: 100.2835 us. Best GFLOPs: 642.4387
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #3: GFLOPs: 1563.0760. Time: 41.2174 us. Best GFLOPs: 1563.0760
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #4: GFLOPs: 1362.3911. Time: 47.2889 us. Best GFLOPs: 1563.0760
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #5: GFLOPs: 2185.8946. Time: 29.4735 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #6: GFLOPs: 5.9693. Time: 10792.8573 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #7: GFLOPs: 878.8836. Time: 73.3043 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #8: GFLOPs: 1702.8669. Time: 37.8338 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #9: GFLOPs: 982.2558. Time: 65.5898 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #10: GFLOPs: 276.9798. Time: 232.6018 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #11: GFLOPs: 21.8955. Time: 2942.4340 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #12: GFLOPs: 411.1517. Time: 156.6964 us. Best GFLOPs: 2185.8946
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #13: GFLOPs: 2191.2930. Time: 29.4009 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #14: GFLOPs: 1451.9378. Time: 44.3724 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #15: GFLOPs: 196.8823. Time: 327.2310 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #16: GFLOPs: 714.1043. Time: 90.2193 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #17: GFLOPs: 27.5568. Time: 2337.9348 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #18: GFLOPs: 1325.5718. Time: 48.6024 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #19: GFLOPs: 1370.8486. Time: 46.9972 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #20: GFLOPs: 414.8672. Time: 155.2930 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #21: GFLOPs: 33.0174. Time: 1951.2713 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #22: GFLOPs: 6.0503. Time: 10648.4733 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #23: GFLOPs: 23.0530. Time: 2794.6951 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #24: GFLOPs: 628.6831. Time: 102.4777 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #25: GFLOPs: 735.6601. Time: 87.5758 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #26: GFLOPs: 35.2090. Time: 1829.8136 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #27: GFLOPs: 70.0803. Time: 919.3171 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #28: GFLOPs: 53.2216. Time: 1210.5232 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #29: GFLOPs: 1786.2729. Time: 36.0673 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #30: GFLOPs: 1191.7035. Time: 54.0621 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #31: GFLOPs: 565.4615. Time: 113.9352 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #32: GFLOPs: 208.1698. Time: 309.4877 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #33: GFLOPs: 330.8862. Time: 194.7074 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #34: GFLOPs: 1188.0240. Time: 54.2295 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #35: GFLOPs: 220.3755. Time: 292.3464 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #36: GFLOPs: 16.9095. Time: 3810.0385 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #37: GFLOPs: 40.2836. Time: 1599.3092 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #38: GFLOPs: 152.7389. Time: 421.8047 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #39: GFLOPs: 13.1438. Time: 4901.6440 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #40: GFLOPs: 53.9214. Time: 1194.8130 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #41: GFLOPs: 822.8020. Time: 78.3007 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #42: GFLOPs: 559.2152. Time: 115.2079 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #43: GFLOPs: 199.6937. Time: 322.6240 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #44: GFLOPs: 514.3716. Time: 125.2518 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #45: GFLOPs: 570.6427. Time: 112.9007 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #46: GFLOPs: 626.2362. Time: 102.8781 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #47: GFLOPs: 873.6556. Time: 73.7430 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:121] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #48: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(49)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 16, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 2, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[80, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #49: GFLOPs: 49.2340. Time: 1308.5656 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #50: GFLOPs: 1745.3772. Time: 36.9124 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #51: GFLOPs: 845.4286. Time: 76.2051 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #52: GFLOPs: 34.8623. Time: 1848.0140 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #53: GFLOPs: 198.5481. Time: 324.4855 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #54: GFLOPs: 1104.5390. Time: 58.3284 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #55: GFLOPs: 30.5211. Time: 2110.8694 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #56: GFLOPs: 646.5015. Time: 99.6533 us. Best GFLOPs: 2191.2930
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #57: GFLOPs: 2285.2304. Time: 28.1923 us. Best GFLOPs: 2285.2304
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #58: GFLOPs: 80.9027. Time: 796.3388 us. Best GFLOPs: 2285.2304
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #59: GFLOPs: 40.3217. Time: 1597.7976 us. Best GFLOPs: 2285.2304
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #60: GFLOPs: 50.7714. Time: 1268.9434 us. Best GFLOPs: 2285.2304
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #61: GFLOPs: 1597.0739. Time: 40.3400 us. Best GFLOPs: 2285.2304
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #62: GFLOPs: 2300.3467. Time: 28.0071 us. Best GFLOPs: 2300.3467
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #63: GFLOPs: 204.7678. Time: 314.6295 us. Best GFLOPs: 2300.3467
2024-04-28 23:05:55 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #64: GFLOPs: 369.3620. Time: 174.4251 us. Best GFLOPs: 2300.3467
2024-04-29 01:34:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:34:51 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 01:34:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-29 01:34:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 847 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-29 01:34:55 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 01:34:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-29 01:35:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-29 01:35:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-29 01:35:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbb65778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x9d5fb38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9a3e948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa217188)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd2cfbf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac3aa68)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xc3b25e8)]: 0 failure(s)
2024-04-29 01:35:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8353  1.7205  1.7142  1.6567  1.6233  1.6196  1.6180  1.5755  1.5559  1.5322  1.5157  1.4537  1.4520  1.4474  1.4457  1.4373
[17 : 32]:	1.4043  1.3763  1.3692  1.3638  1.3548  1.3488  1.3141  1.3012  1.2929  1.2727  1.2698  1.2682  1.2646  1.2608  1.2606  1.2521
[33 : 48]:	1.2499  1.2499  1.2493  1.2343  1.2258  1.2242  1.2185  1.2178  1.2110  1.2104  1.2001  1.1917  1.1804  1.1706  1.1701  1.1692
[49 : 64]:	1.1669  1.1613  1.1603  1.1555  1.1420  1.1417  1.1408  1.1321  1.1261  1.1236  1.1198  1.1198  1.1193  1.1165  1.1089  1.0998
2024-04-29 01:35:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:35:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #65: GFLOPs: 1750.3204. Time: 36.8081 us. Best GFLOPs: 2300.3467
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #66: GFLOPs: 1788.7982. Time: 36.0164 us. Best GFLOPs: 2300.3467
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #67: GFLOPs: 1756.8219. Time: 36.6719 us. Best GFLOPs: 2300.3467
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #68: GFLOPs: 2476.0431. Time: 26.0197 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #69: GFLOPs: 1720.0879. Time: 37.4551 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #70: GFLOPs: 1384.6263. Time: 46.5295 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #71: GFLOPs: 1381.5073. Time: 46.6346 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #72: GFLOPs: 1686.3479. Time: 38.2044 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #73: GFLOPs: 2448.3478. Time: 26.3141 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #74: GFLOPs: 2216.8876. Time: 29.0615 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #75: GFLOPs: 1678.1405. Time: 38.3913 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #76: GFLOPs: 1928.0380. Time: 33.4153 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #77: GFLOPs: 1883.6994. Time: 34.2018 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #78: GFLOPs: 1894.1217. Time: 34.0136 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #79: GFLOPs: 1887.8542. Time: 34.1266 us. Best GFLOPs: 2476.0431
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #80: GFLOPs: 2528.7655. Time: 25.4772 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #81: GFLOPs: 1887.1606. Time: 34.1391 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #82: GFLOPs: 1904.9061. Time: 33.8211 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #83: GFLOPs: 1920.8239. Time: 33.5408 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #84: GFLOPs: 630.3068. Time: 102.2137 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #85: GFLOPs: 1831.7138. Time: 35.1725 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #86: GFLOPs: 2215.4171. Time: 29.0807 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #87: GFLOPs: 2282.7020. Time: 28.2236 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #88: GFLOPs: 1961.1189. Time: 32.8516 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #89: GFLOPs: 1589.3889. Time: 40.5351 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #90: GFLOPs: 1933.3495. Time: 33.3235 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #91: GFLOPs: 1543.4357. Time: 41.7419 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #92: GFLOPs: 1778.9053. Time: 36.2166 us. Best GFLOPs: 2528.7655
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #93: GFLOPs: 3425.6887. Time: 18.8067 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #94: GFLOPs: 1362.5511. Time: 47.2834 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #95: GFLOPs: 1737.8294. Time: 37.0727 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #96: GFLOPs: 952.8919. Time: 67.6110 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #97: GFLOPs: 1729.8773. Time: 37.2431 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #98: GFLOPs: 1729.8123. Time: 37.2445 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #99: GFLOPs: 808.4672. Time: 79.6891 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #100: GFLOPs: 2708.4508. Time: 23.7870 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #101: GFLOPs: 952.7560. Time: 67.6207 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #102: GFLOPs: 2902.3954. Time: 22.1975 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #103: GFLOPs: 2021.4453. Time: 31.8712 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #104: GFLOPs: 2016.3229. Time: 31.9522 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #105: GFLOPs: 2035.5213. Time: 31.6509 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #106: GFLOPs: 2030.1010. Time: 31.7354 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #107: GFLOPs: 1567.7927. Time: 41.0934 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #108: GFLOPs: 2700.8563. Time: 23.8539 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #109: GFLOPs: 2043.1613. Time: 31.5325 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #110: GFLOPs: 2569.1881. Time: 25.0764 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #111: GFLOPs: 2569.4841. Time: 25.0735 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #112: GFLOPs: 1626.2950. Time: 39.6152 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #113: GFLOPs: 2567.5933. Time: 25.0920 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #114: GFLOPs: 1448.6032. Time: 44.4746 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #115: GFLOPs: 1804.5922. Time: 35.7011 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #116: GFLOPs: 2700.0894. Time: 23.8607 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #117: GFLOPs: 2413.7638. Time: 26.6911 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #118: GFLOPs: 1802.7607. Time: 35.7374 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #119: GFLOPs: 956.8845. Time: 67.3289 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #120: GFLOPs: 1458.7744. Time: 44.1645 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #121: GFLOPs: 1821.1549. Time: 35.3764 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #122: GFLOPs: 2710.2435. Time: 23.7713 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #123: GFLOPs: 956.0567. Time: 67.3872 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #124: GFLOPs: 1329.9338. Time: 48.4430 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #125: GFLOPs: 1085.9720. Time: 59.3256 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #126: GFLOPs: 935.1822. Time: 68.8914 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #127: GFLOPs: 2361.8215. Time: 27.2781 us. Best GFLOPs: 3425.6887
2024-04-29 01:37:09 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_conv2d_add_nn_relu_45] Trial #128: GFLOPs: 1041.0015. Time: 61.8885 us. Best GFLOPs: 3425.6887
