2024-04-28 19:55:10 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_concatenate_multiply_add_nn_relu_17"
2024-04-28 19:55:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p20: T.Buffer((T.int64(1), T.int64(864), T.int64(1), T.int64(1)), "float32"), p21: T.Buffer((T.int64(1), T.int64(864), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(864), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(864), T.int64(14), T.int64(14)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(864), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(864), T.int64(14), T.int64(14)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(864), T.int64(14), T.int64(14)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p19[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(832) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], T.if_then_else(T.int64(800) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], T.if_then_else(T.int64(768) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], T.if_then_else(T.int64(736) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(640) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], T.if_then_else(T.int64(608) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], T.if_then_else(T.int64(576) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], T.if_then_else(T.int64(544) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], T.if_then_else(T.int64(512) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], T.if_then_else(T.int64(480) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(864), T.int64(14), T.int64(14)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p20[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p20[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(864), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p21[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p21[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(864), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:10 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-28 19:55:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p20: T.Buffer((T.int64(1), T.int64(864), T.int64(1), T.int64(1)), "float32"), p21: T.Buffer((T.int64(1), T.int64(864), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(864), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(331), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(864), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(169344))
                    T.reads(p19[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p20[v_ax0, v_ax1, T.int64(0), T.int64(0)], p21[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(832) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], T.if_then_else(T.int64(800) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], T.if_then_else(T.int64(768) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], T.if_then_else(T.int64(736) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(640) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], T.if_then_else(T.int64(608) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], T.if_then_else(T.int64(576) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], T.if_then_else(T.int64(544) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], T.if_then_else(T.int64(512) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], T.if_then_else(T.int64(480) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))))))) * p20[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p21[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-28 20:50:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:50:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:50:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x444dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa840bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa8411d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6bb3168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xca2c6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb9a88b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94c6cd8)]: 0 failure(s)
2024-04-28 20:50:10 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:50:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x444dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa840bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa8411d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6bb3168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xca2c6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb9a88b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94c6cd8)]: 0 failure(s)
2024-04-28 20:50:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x444dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa840bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa8411d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6bb3168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xca2c6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb9a88b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94c6cd8)]: 0 failure(s)
2024-04-28 20:50:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x444dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa840bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa8411d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6bb3168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xca2c6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb9a88b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94c6cd8)]: 0 failure(s)
2024-04-28 20:50:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x444dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa840bc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa8411d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6bb3168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xca2c6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb9a88b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94c6cd8)]: 0 failure(s)
2024-04-28 20:50:14 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.9901  0.5753  0.5532  0.4525  0.4103  0.3584
2024-04-28 20:50:14 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-28 20:50:14 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-28 23:02:36 [INFO] [task_scheduler.cc:131] [Task #41: fused_concatenate_multiply_add_nn_relu_17] Trial #1: GFLOPs: 123.0383. Time: 4.1291 us. Best GFLOPs: 123.0383
2024-04-28 23:02:36 [INFO] [task_scheduler.cc:131] [Task #41: fused_concatenate_multiply_add_nn_relu_17] Trial #2: GFLOPs: 133.5221. Time: 3.8049 us. Best GFLOPs: 133.5221
2024-04-28 23:02:36 [INFO] [task_scheduler.cc:131] [Task #41: fused_concatenate_multiply_add_nn_relu_17] Trial #3: GFLOPs: 134.4977. Time: 3.7773 us. Best GFLOPs: 134.4977
2024-04-28 23:02:36 [INFO] [task_scheduler.cc:131] [Task #41: fused_concatenate_multiply_add_nn_relu_17] Trial #4: GFLOPs: 137.7201. Time: 3.6889 us. Best GFLOPs: 137.7201
2024-04-28 23:02:36 [INFO] [task_scheduler.cc:131] [Task #41: fused_concatenate_multiply_add_nn_relu_17] Trial #5: GFLOPs: 71.9372. Time: 7.0622 us. Best GFLOPs: 137.7201
2024-04-28 23:02:36 [INFO] [task_scheduler.cc:131] [Task #41: fused_concatenate_multiply_add_nn_relu_17] Trial #6: GFLOPs: 105.7518. Time: 4.8040 us. Best GFLOPs: 137.7201
