2024-04-28 19:55:42 [INFO] [task_scheduler.cc:160] Initializing Task #135: "fused_nn_global_avg_pool2d"
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1024), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-28 19:55:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(64)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-28 22:54:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:54:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:54:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75ab898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd0df0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbe0cb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d60658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x81916b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd43c7d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbe0cf18)]: 0 failure(s)
2024-04-28 22:54:55 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:54:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75ab898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd0df0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbe0cb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d60658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x81916b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd43c7d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbe0cf18)]: 0 failure(s)
2024-04-28 22:54:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75ab898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd0df0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbe0cb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d60658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x81916b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd43c7d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbe0cf18)]: 0 failure(s)
2024-04-28 22:54:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75ab898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd0df0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbe0cb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d60658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x81916b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd43c7d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbe0cf18)]: 0 failure(s)
2024-04-28 22:54:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x75ab898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd0df0e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xbe0cb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d60658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x81916b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd43c7d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xbe0cf18)]: 0 failure(s)
2024-04-28 22:54:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9968  0.9919  0.9894  0.9887  0.9872  0.9847  0.9737  0.9631  0.9553  0.9511  0.9473  0.9463  0.9409  0.9333  0.9323  0.9193
[17 : 32]:	0.9183  0.9183  0.9058  0.9052  0.8979  0.8958  0.8948  0.8918  0.8917  0.8882  0.8810  0.8629  0.8600  0.8510  0.8487  0.8479
[33 : 48]:	0.8461  0.8436  0.8415  0.8388  0.8362  0.8304  0.8196  0.8179  0.8114  0.8094  0.8048  0.8032  0.8030  0.8029  0.7941  0.7915
[49 : 64]:	0.7900  0.7853  0.7781  0.7721  0.7624  0.7608  0.7442  0.7432  0.7427  0.7409  0.7338  0.7328  0.7309  0.7232  0.7212  0.7140
2024-04-28 22:54:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:54:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 6.1793. Time: 8.2857 us. Best GFLOPs: 6.1793
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 7.6654. Time: 6.6794 us. Best GFLOPs: 7.6654
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 6.1351. Time: 8.3454 us. Best GFLOPs: 7.6654
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 13.1056. Time: 3.9067 us. Best GFLOPs: 13.1056
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 8.2076. Time: 6.2381 us. Best GFLOPs: 13.1056
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 8.2074. Time: 6.2383 us. Best GFLOPs: 13.1056
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 8.2074. Time: 6.2383 us. Best GFLOPs: 13.1056
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 4.5259. Time: 11.3127 us. Best GFLOPs: 13.1056
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 14.2285. Time: 3.5984 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 7.6685. Time: 6.6767 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 4.5271. Time: 11.3097 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 4.5262. Time: 11.3119 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 2.9136. Time: 17.5725 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 2.9270. Time: 17.4926 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 7.6682. Time: 6.6769 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 8.2072. Time: 6.2385 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 8.9050. Time: 5.7496 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 9.0315. Time: 5.6691 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 2.9054. Time: 17.6224 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 9.0310. Time: 5.6694 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 6.1802. Time: 8.2845 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 8.2072. Time: 6.2384 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 12.3631. Time: 4.1414 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 8.2076. Time: 6.2381 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 9.9241. Time: 5.1591 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 14.2272. Time: 3.5987 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 6.1528. Time: 8.3215 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 9.0313. Time: 5.6692 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 7.4915. Time: 6.8344 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 14.1688. Time: 3.6136 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 7.6687. Time: 6.6765 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 4.4997. Time: 11.3785 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 2.9053. Time: 17.6232 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 4.5257. Time: 11.3131 us. Best GFLOPs: 14.2285
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 14.2374. Time: 3.5962 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 9.9251. Time: 5.1586 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 8.0996. Time: 6.3213 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 4.5059. Time: 11.3629 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 12.3621. Time: 4.1417 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 2.9142. Time: 17.5690 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 6.2012. Time: 8.2564 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 7.5625. Time: 6.7702 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 8.0207. Time: 6.3835 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 8.1300. Time: 6.2977 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 2.9134. Time: 17.5738 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 6.1854. Time: 8.2776 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 7.9727. Time: 6.4219 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 6.1836. Time: 8.2799 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 14.2341. Time: 3.5970 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 8.1771. Time: 6.2614 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 2.9062. Time: 17.6178 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 6.1948. Time: 8.2650 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 13.9890. Time: 3.6600 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 6.1348. Time: 8.3458 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.9063. Time: 17.6167 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 8.2638. Time: 6.1957 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 4.5266. Time: 11.3109 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 4.5240. Time: 11.3175 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 6.1370. Time: 8.3429 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 7.6629. Time: 6.6816 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 2.9141. Time: 17.5698 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 14.2360. Time: 3.5965 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 8.2593. Time: 6.1991 us. Best GFLOPs: 14.2374
2024-04-28 23:09:13 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 6.2028. Time: 8.2544 us. Best GFLOPs: 14.2374
