2024-04-28 19:55:06 [INFO] [task_scheduler.cc:160] Initializing Task #32: "fused_nn_contrib_conv2d_winograd_without_weight_transform"
2024-04-28 19:55:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(9), T.int64(9)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(9), T.int64(9)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(128), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(32), T.int64(16), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(16), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
2024-04-28 19:55:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(64) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 16, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 4, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 64, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-04-28 19:55:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(64) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 16, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 4, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 64, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-04-28 19:55:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(64) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 16, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 4, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 64, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-04-28 20:36:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:36:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:36:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 20:36:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 20:36:56 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 20:37:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 20:37:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 20:37:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 20:37:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 20:37:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9973  0.9965  0.9965  0.9963  0.9944  0.9935  0.9929  0.9926  0.9923  0.9921  0.9917  0.9912  0.9909  0.9909  0.9908
[17 : 32]:	0.9904  0.9904  0.9902  0.9880  0.9871  0.9861  0.9855  0.9843  0.9841  0.9833  0.9826  0.9821  0.9819  0.9815  0.9813  0.9802
[33 : 48]:	0.9800  0.9796  0.9773  0.9768  0.9759  0.9753  0.9748  0.9742  0.9741  0.9735  0.9731  0.9707  0.9699  0.9678  0.9673  0.9671
[49 : 64]:	0.9653  0.9647  0.9641  0.9641  0.9619  0.9617  0.9613  0.9596  0.9591  0.9589  0.9589  0.9587  0.9579  0.9573  0.9568  0.9559
2024-04-28 20:37:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:37:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #1: GFLOPs: 247.5623. Time: 15.2217 us. Best GFLOPs: 247.5623
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #2: GFLOPs: 81.4852. Time: 46.2455 us. Best GFLOPs: 247.5623
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #3: GFLOPs: 81.4468. Time: 46.2672 us. Best GFLOPs: 247.5623
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #4: GFLOPs: 51.2621. Time: 73.5109 us. Best GFLOPs: 247.5623
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #5: GFLOPs: 88.7211. Time: 42.4738 us. Best GFLOPs: 247.5623
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #6: GFLOPs: 87.0236. Time: 43.3023 us. Best GFLOPs: 247.5623
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #7: GFLOPs: 277.8762. Time: 13.5611 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #8: GFLOPs: 62.9687. Time: 59.8443 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #9: GFLOPs: 74.1664. Time: 50.8090 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #10: GFLOPs: 19.7126. Time: 191.1628 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #11: GFLOPs: 39.3847. Time: 95.6798 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #12: GFLOPs: 118.8138. Time: 31.7162 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #13: GFLOPs: 55.7633. Time: 67.5771 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #14: GFLOPs: 66.7730. Time: 56.4348 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #15: GFLOPs: 53.7141. Time: 70.1552 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #16: GFLOPs: 60.5675. Time: 62.2168 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #17: GFLOPs: 53.6771. Time: 70.2034 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #18: GFLOPs: 17.3739. Time: 216.8956 us. Best GFLOPs: 277.8762
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #19: GFLOPs: 279.0979. Time: 13.5018 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #20: GFLOPs: 150.5063. Time: 25.0376 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #21: GFLOPs: 184.0241. Time: 20.4773 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #22: GFLOPs: 54.2468. Time: 69.4662 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #23: GFLOPs: 249.6475. Time: 15.0946 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #24: GFLOPs: 191.8201. Time: 19.6451 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #25: GFLOPs: 43.2029. Time: 87.2237 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #26: GFLOPs: 98.2689. Time: 38.3470 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #27: GFLOPs: 101.5135. Time: 37.1214 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #28: GFLOPs: 67.4539. Time: 55.8651 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #29: GFLOPs: 57.4381. Time: 65.6066 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #30: GFLOPs: 188.5948. Time: 19.9810 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #31: GFLOPs: 52.4015. Time: 71.9124 us. Best GFLOPs: 279.0979
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #32: GFLOPs: 282.2638. Time: 13.3503 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #33: GFLOPs: 50.3460. Time: 74.8485 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #34: GFLOPs: 69.5463. Time: 54.1843 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #35: GFLOPs: 107.4700. Time: 35.0639 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #36: GFLOPs: 51.5766. Time: 73.0626 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #37: GFLOPs: 64.1500. Time: 58.7424 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #38: GFLOPs: 175.3988. Time: 21.4843 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #39: GFLOPs: 278.7334. Time: 13.5194 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #40: GFLOPs: 18.5708. Time: 202.9165 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #41: GFLOPs: 253.7804. Time: 14.8487 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #42: GFLOPs: 258.3657. Time: 14.5852 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #43: GFLOPs: 72.3323. Time: 52.0973 us. Best GFLOPs: 282.2638
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #44: GFLOPs: 292.1712. Time: 12.8976 us. Best GFLOPs: 292.1712
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #45: GFLOPs: 93.3316. Time: 40.3756 us. Best GFLOPs: 292.1712
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #46: GFLOPs: 334.5131. Time: 11.2651 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #47: GFLOPs: 117.7914. Time: 31.9915 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #48: GFLOPs: 126.1295. Time: 29.8766 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #49: GFLOPs: 98.3154. Time: 38.3289 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #50: GFLOPs: 37.3312. Time: 100.9429 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #51: GFLOPs: 66.3417. Time: 56.8017 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #52: GFLOPs: 55.8764. Time: 67.4403 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:121] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #53: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  279: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  278: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  277: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  276: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  275: tvm::transform::Pass::operator()(tvm::IRModule) const
  274: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  273: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: _ZN3tvm7runtime13PackedFun
  269: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  268: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  267: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorI
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorI
  170: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorI
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  161: _ZZN3tvm3tir11StmtFunctorI
  160: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  159: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorI
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  155: _ZZN3tvm3tir11StmtFunctorI
  154: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorI
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorI
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  126: _ZZN3tvm3tir11StmtFunctorIFNS
  125: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  124: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorI
  96: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  95: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS
  93: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  92: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorI
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS
  58: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  57: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init * T.int64(4) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + ax0)
                            v1 = T.axis.spatial(T.int64(4), ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 4, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 2, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #54: GFLOPs: 133.9040. Time: 28.1420 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #55: GFLOPs: 219.2505. Time: 17.1873 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #56: GFLOPs: 74.1262. Time: 50.8365 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #57: GFLOPs: 76.4292. Time: 49.3047 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #58: GFLOPs: 90.7806. Time: 41.5102 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #59: GFLOPs: 109.2554. Time: 34.4909 us. Best GFLOPs: 334.5131
2024-04-28 23:02:13 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #60: GFLOPs: 101.4636. Time: 37.1396 us. Best GFLOPs: 334.5131
2024-04-28 23:02:14 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #61: GFLOPs: 93.5199. Time: 40.2943 us. Best GFLOPs: 334.5131
2024-04-28 23:02:14 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #62: GFLOPs: 70.1951. Time: 53.6835 us. Best GFLOPs: 334.5131
2024-04-28 23:02:14 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #63: GFLOPs: 54.0708. Time: 69.6923 us. Best GFLOPs: 334.5131
2024-04-28 23:02:14 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #64: GFLOPs: 283.2622. Time: 13.3033 us. Best GFLOPs: 334.5131
2024-04-28 23:23:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:23:37 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-28 23:23:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 422 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:23:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 847 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:23:45 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-28 23:23:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:24:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:24:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:24:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:24:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9631  1.9561  1.9149  1.8826  1.8793  1.8663  1.8648  1.8582  1.8492  1.8368  1.8335  1.8266  1.8225  1.8164  1.8159  1.8074
[17 : 32]:	1.8069  1.8051  1.8019  1.8013  1.7929  1.7911  1.7758  1.7757  1.7728  1.7692  1.7661  1.7602  1.7587  1.7558  1.7508  1.7383
[33 : 48]:	1.7369  1.7332  1.7245  1.7216  1.7036  1.6998  1.6997  1.6912  1.6901  1.6896  1.6810  1.6807  1.6744  1.6670  1.6647  1.6550
[49 : 64]:	1.6502  1.6405  1.6402  1.6272  1.6221  1.6151  1.5996  1.5972  1.5951  1.5944  1.5930  1.5918  1.5906  1.5888  1.5872  1.5868
2024-04-28 23:24:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:24:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #65: GFLOPs: 242.7304. Time: 15.5247 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #66: GFLOPs: 232.4881. Time: 16.2087 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #67: GFLOPs: 233.8593. Time: 16.1136 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #68: GFLOPs: 261.3222. Time: 14.4202 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #69: GFLOPs: 266.7154. Time: 14.1286 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #70: GFLOPs: 275.8115. Time: 13.6627 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #71: GFLOPs: 273.0960. Time: 13.7985 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #72: GFLOPs: 269.9738. Time: 13.9581 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #73: GFLOPs: 268.7206. Time: 14.0232 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #74: GFLOPs: 274.8769. Time: 13.7091 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #75: GFLOPs: 193.5430. Time: 19.4702 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #76: GFLOPs: 270.6645. Time: 13.9225 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #77: GFLOPs: 276.3194. Time: 13.6376 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #78: GFLOPs: 268.6199. Time: 14.0284 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #79: GFLOPs: 267.1642. Time: 14.1049 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #80: GFLOPs: 287.7077. Time: 13.0977 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #81: GFLOPs: 267.3522. Time: 14.0950 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #82: GFLOPs: 269.4550. Time: 13.9850 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #83: GFLOPs: 275.4487. Time: 13.6807 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #84: GFLOPs: 291.6177. Time: 12.9221 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #85: GFLOPs: 275.5036. Time: 13.6779 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #86: GFLOPs: 163.5386. Time: 23.0424 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #87: GFLOPs: 273.4012. Time: 13.7831 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #88: GFLOPs: 240.4407. Time: 15.6726 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #89: GFLOPs: 266.6945. Time: 14.1297 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #90: GFLOPs: 266.8598. Time: 14.1210 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #91: GFLOPs: 256.7987. Time: 14.6742 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #92: GFLOPs: 268.1396. Time: 14.0536 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #93: GFLOPs: 212.6337. Time: 17.7221 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #94: GFLOPs: 209.8702. Time: 17.9555 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #95: GFLOPs: 254.3727. Time: 14.8142 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #96: GFLOPs: 153.6182. Time: 24.5304 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #97: GFLOPs: 135.4096. Time: 27.8290 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #98: GFLOPs: 270.1397. Time: 13.9495 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #99: GFLOPs: 253.1872. Time: 14.8835 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #100: GFLOPs: 216.3597. Time: 17.4169 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #101: GFLOPs: 238.2238. Time: 15.8184 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #102: GFLOPs: 262.9964. Time: 14.3284 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #103: GFLOPs: 153.6173. Time: 24.5306 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #104: GFLOPs: 248.0315. Time: 15.1929 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #105: GFLOPs: 240.5248. Time: 15.6671 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #106: GFLOPs: 248.5311. Time: 15.1624 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #107: GFLOPs: 282.1189. Time: 13.3572 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #108: GFLOPs: 213.3826. Time: 17.6599 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #109: GFLOPs: 282.4847. Time: 13.3399 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #110: GFLOPs: 305.4736. Time: 12.3360 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #111: GFLOPs: 201.4764. Time: 18.7035 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #112: GFLOPs: 248.6576. Time: 15.1547 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #113: GFLOPs: 244.3830. Time: 15.4197 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #114: GFLOPs: 237.6915. Time: 15.8538 us. Best GFLOPs: 334.5131
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #115: GFLOPs: 345.4428. Time: 10.9087 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #116: GFLOPs: 257.0164. Time: 14.6618 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #117: GFLOPs: 177.4759. Time: 21.2329 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #118: GFLOPs: 261.9181. Time: 14.3874 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #119: GFLOPs: 271.3696. Time: 13.8863 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #120: GFLOPs: 262.9011. Time: 14.3336 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #121: GFLOPs: 270.1291. Time: 13.9501 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #122: GFLOPs: 265.7189. Time: 14.1816 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #123: GFLOPs: 266.5176. Time: 14.1391 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #124: GFLOPs: 258.3586. Time: 14.5856 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #125: GFLOPs: 291.3459. Time: 12.9342 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #126: GFLOPs: 93.1975. Time: 40.4337 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #127: GFLOPs: 135.3871. Time: 27.8337 us. Best GFLOPs: 345.4428
2024-04-28 23:27:11 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #128: GFLOPs: 117.4878. Time: 32.0741 us. Best GFLOPs: 345.4428
2024-04-28 23:36:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:36:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:36:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 385 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:36:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 769 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:36:51 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-28 23:37:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 153 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:37:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:37:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:37:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:37:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6012  1.4775  1.4638  1.3828  1.3731  1.3716  1.3606  1.3587  1.3031  1.2733  1.1955  1.1834  1.1821  1.1756  1.1625  1.1624
[17 : 32]:	1.1513  1.1504  1.1502  1.1461  1.1447  1.1443  1.1440  1.1438  1.1436  1.1436  1.1403  1.1367  1.1350  1.1314  1.1302  1.1292
[33 : 48]:	1.1280  1.1154  1.1145  1.1100  1.1064  1.1052  1.0984  1.0941  1.0862  1.0861  1.0854  1.0849  1.0848  1.0835  1.0803  1.0801
[49 : 64]:	1.0798  1.0789  1.0750  1.0717  1.0705  1.0691  1.0674  1.0664  1.0623  1.0621  1.0571  1.0516  1.0502  1.0451  1.0447  1.0424
2024-04-28 23:37:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:37:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #129: GFLOPs: 206.7925. Time: 18.2227 us. Best GFLOPs: 345.4428
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #130: GFLOPs: 349.2652. Time: 10.7893 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #131: GFLOPs: 322.6960. Time: 11.6776 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #132: GFLOPs: 205.2361. Time: 18.3609 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #133: GFLOPs: 340.8656. Time: 11.0551 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #134: GFLOPs: 338.7864. Time: 11.1230 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #135: GFLOPs: 347.5994. Time: 10.8410 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #136: GFLOPs: 340.9620. Time: 11.0520 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #137: GFLOPs: 239.9850. Time: 15.7023 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #138: GFLOPs: 244.2714. Time: 15.4268 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #139: GFLOPs: 277.2110. Time: 13.5937 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #140: GFLOPs: 186.1571. Time: 20.2427 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #141: GFLOPs: 188.4765. Time: 19.9936 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #142: GFLOPs: 261.6359. Time: 14.4029 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #143: GFLOPs: 186.2124. Time: 20.2367 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #144: GFLOPs: 271.6160. Time: 13.8737 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #145: GFLOPs: 261.9742. Time: 14.3843 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #146: GFLOPs: 346.6459. Time: 10.8708 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #147: GFLOPs: 261.6903. Time: 14.3999 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #148: GFLOPs: 186.1103. Time: 20.2478 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #149: GFLOPs: 193.2040. Time: 19.5044 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #150: GFLOPs: 197.0260. Time: 19.1260 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #151: GFLOPs: 345.5187. Time: 10.9063 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #152: GFLOPs: 274.3281. Time: 13.7365 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #153: GFLOPs: 210.7400. Time: 17.8814 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #154: GFLOPs: 210.9619. Time: 17.8626 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #155: GFLOPs: 261.7286. Time: 14.3978 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #156: GFLOPs: 153.6084. Time: 24.5320 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #157: GFLOPs: 267.7231. Time: 14.0754 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #158: GFLOPs: 275.3794. Time: 13.6841 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #159: GFLOPs: 270.1585. Time: 13.9486 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #160: GFLOPs: 275.4369. Time: 13.6812 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #161: GFLOPs: 270.4548. Time: 13.9333 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #162: GFLOPs: 270.6629. Time: 13.9226 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #163: GFLOPs: 276.5244. Time: 13.6274 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #164: GFLOPs: 323.4202. Time: 11.6515 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #165: GFLOPs: 303.5271. Time: 12.4151 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #166: GFLOPs: 318.7319. Time: 11.8229 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #167: GFLOPs: 268.8976. Time: 14.0140 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #168: GFLOPs: 262.0326. Time: 14.3811 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #169: GFLOPs: 309.1205. Time: 12.1905 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:121] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #170: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  279: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  278: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  277: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  276: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  275: tvm::transform::Pass::operator()(tvm::IRModule) const
  274: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  273: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: _ZN3tvm7runtime13PackedFun
  269: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  268: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  267: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorI
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorI
  170: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorI
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  161: _ZZN3tvm3tir11StmtFunctorI
  160: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  159: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorI
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  155: _ZZN3tvm3tir11StmtFunctorI
  154: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorI
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorI
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  126: _ZZN3tvm3tir11StmtFunctorIFNS
  125: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  124: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorI
  96: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  95: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS
  93: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  92: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorI
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS
  58: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  57: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(4) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(4) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(16) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(4)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(16) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(32) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(16) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[4, 32, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #171: GFLOPs: 153.7028. Time: 24.5169 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #172: GFLOPs: 287.7680. Time: 13.0950 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #173: GFLOPs: 337.5784. Time: 11.1628 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #174: GFLOPs: 335.1700. Time: 11.2430 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #175: GFLOPs: 304.0498. Time: 12.3938 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #176: GFLOPs: 337.6414. Time: 11.1607 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #177: GFLOPs: 201.6417. Time: 18.6882 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #178: GFLOPs: 229.4449. Time: 16.4236 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #179: GFLOPs: 192.0651. Time: 19.6200 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #180: GFLOPs: 195.7273. Time: 19.2529 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #181: GFLOPs: 188.2266. Time: 20.0201 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #182: GFLOPs: 293.6427. Time: 12.8330 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #183: GFLOPs: 335.1952. Time: 11.2422 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #184: GFLOPs: 311.1990. Time: 12.1090 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #185: GFLOPs: 337.5519. Time: 11.1637 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #186: GFLOPs: 149.7694. Time: 25.1608 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #187: GFLOPs: 207.4022. Time: 18.1691 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #188: GFLOPs: 199.0541. Time: 18.9311 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #189: GFLOPs: 304.9086. Time: 12.3589 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #190: GFLOPs: 92.6558. Time: 40.6701 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #191: GFLOPs: 185.9950. Time: 20.2603 us. Best GFLOPs: 349.2652
2024-04-28 23:39:03 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #192: GFLOPs: 171.4602. Time: 21.9778 us. Best GFLOPs: 349.2652
2024-04-28 23:58:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:58:31 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:58:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 381 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:58:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 768 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:58:38 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 23:58:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 167 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:59:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:59:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:59:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-28 23:59:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4680  1.4616  1.4254  1.3590  1.2568  1.2384  1.2214  1.2096  1.2074  1.1570  1.1494  1.1494  1.1487  1.1487  1.1486  1.1418
[17 : 32]:	1.1387  1.1363  1.1303  1.1303  1.1296  1.1296  1.1266  1.1185  1.1092  1.1049  1.1026  1.0898  1.0825  1.0819  1.0748  1.0681
[33 : 48]:	1.0662  1.0609  1.0548  1.0490  1.0432  1.0403  1.0386  1.0367  1.0354  1.0332  1.0282  1.0278  1.0266  1.0253  1.0244  1.0224
[49 : 64]:	1.0182  1.0143  1.0134  1.0102  1.0094  1.0078  1.0073  1.0073  1.0072  1.0040  1.0038  1.0031  1.0027  1.0023  1.0015  1.0008
2024-04-28 23:59:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:59:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #193: GFLOPs: 254.1427. Time: 14.8276 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #194: GFLOPs: 244.7262. Time: 15.3981 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #195: GFLOPs: 246.4406. Time: 15.2910 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #196: GFLOPs: 319.3886. Time: 11.7985 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #197: GFLOPs: 338.7357. Time: 11.1247 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #198: GFLOPs: 258.8628. Time: 14.5572 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #199: GFLOPs: 181.6655. Time: 20.7432 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #200: GFLOPs: 105.8093. Time: 35.6143 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #201: GFLOPs: 256.5095. Time: 14.6908 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #202: GFLOPs: 284.9165. Time: 13.2260 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #203: GFLOPs: 286.3117. Time: 13.1616 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #204: GFLOPs: 291.4513. Time: 12.9295 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #205: GFLOPs: 284.8537. Time: 13.2290 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #206: GFLOPs: 290.4103. Time: 12.9758 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #207: GFLOPs: 286.7000. Time: 13.1438 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #208: GFLOPs: 291.0648. Time: 12.9467 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #209: GFLOPs: 283.3126. Time: 13.3009 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #210: GFLOPs: 278.5621. Time: 13.5278 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #211: GFLOPs: 283.2650. Time: 13.3032 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #212: GFLOPs: 279.6140. Time: 13.4769 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #213: GFLOPs: 279.5351. Time: 13.4807 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #214: GFLOPs: 281.3573. Time: 13.3934 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #215: GFLOPs: 278.7470. Time: 13.5188 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #216: GFLOPs: 119.1129. Time: 31.6365 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #217: GFLOPs: 173.0981. Time: 21.7699 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #218: GFLOPs: 175.2205. Time: 21.5062 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #219: GFLOPs: 98.2102. Time: 38.3699 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #220: GFLOPs: 119.9744. Time: 31.4094 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #221: GFLOPs: 154.9869. Time: 24.3138 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:121] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #222: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  279: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  278: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  277: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  276: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  275: tvm::transform::Pass::operator()(tvm::IRModule) const
  274: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  273: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: _ZN3tvm7runtime13PackedFun
  269: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  268: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  267: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorI
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorI
  170: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorI
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  161: _ZZN3tvm3tir11StmtFunctorI
  160: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  159: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorI
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  155: _ZZN3tvm3tir11StmtFunctorI
  154: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorI
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorI
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  126: _ZZN3tvm3tir11StmtFunctorIFNS
  125: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  124: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorI
  96: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  95: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS
  93: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  92: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorI
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS
  58: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  57: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(4) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(4) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(128) // T.int64(32) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(16) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(2)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4096))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4096) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(128) // T.int64(32) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(16) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(128) // T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(16) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 64, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #223: GFLOPs: 198.1306. Time: 19.0194 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #224: GFLOPs: 275.2539. Time: 13.6903 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #225: GFLOPs: 307.1887. Time: 12.2671 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #226: GFLOPs: 256.3313. Time: 14.7010 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #227: GFLOPs: 196.5719. Time: 19.1702 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #228: GFLOPs: 223.2647. Time: 16.8783 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #229: GFLOPs: 275.1876. Time: 13.6936 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #230: GFLOPs: 275.1384. Time: 13.6961 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #231: GFLOPs: 275.0440. Time: 13.7008 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #232: GFLOPs: 174.3387. Time: 21.6149 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #233: GFLOPs: 346.1811. Time: 10.8854 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #234: GFLOPs: 277.7748. Time: 13.5661 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #235: GFLOPs: 241.4910. Time: 15.6044 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #236: GFLOPs: 345.3212. Time: 10.9125 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #237: GFLOPs: 249.6597. Time: 15.0938 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #238: GFLOPs: 345.1898. Time: 10.9167 us. Best GFLOPs: 349.2652
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #239: GFLOPs: 354.3509. Time: 10.6344 us. Best GFLOPs: 354.3509
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #240: GFLOPs: 243.6851. Time: 15.4639 us. Best GFLOPs: 354.3509
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #241: GFLOPs: 370.6786. Time: 10.1660 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #242: GFLOPs: 337.4918. Time: 11.1657 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #243: GFLOPs: 179.3467. Time: 21.0114 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #244: GFLOPs: 345.8594. Time: 10.8955 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #245: GFLOPs: 338.3764. Time: 11.1365 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #246: GFLOPs: 353.0612. Time: 10.6733 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #247: GFLOPs: 317.7185. Time: 11.8606 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #248: GFLOPs: 320.1289. Time: 11.7713 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #249: GFLOPs: 237.6301. Time: 15.8579 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #250: GFLOPs: 139.2719. Time: 27.0573 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #251: GFLOPs: 362.1895. Time: 10.4043 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #252: GFLOPs: 244.2926. Time: 15.4254 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #253: GFLOPs: 345.2521. Time: 10.9147 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #254: GFLOPs: 103.8726. Time: 36.2783 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #255: GFLOPs: 77.2486. Time: 48.7817 us. Best GFLOPs: 370.6786
2024-04-29 00:01:33 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #256: GFLOPs: 63.0607. Time: 59.7571 us. Best GFLOPs: 370.6786
2024-04-29 00:28:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:28:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:28:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 00:28:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 770 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 00:28:18 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 00:28:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 00:28:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 00:28:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 00:29:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 00:29:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7198  1.6985  1.5190  1.4550  1.3111  1.2731  1.2561  1.2258  1.2051  1.1910  1.1472  1.1400  1.1400  1.1366  1.1328  1.1152
[17 : 32]:	1.1116  1.1110  1.1077  1.1052  1.1034  1.1028  1.0991  1.0796  1.0761  1.0741  1.0691  1.0630  1.0613  1.0577  1.0456  1.0455
[33 : 48]:	1.0432  1.0342  1.0331  1.0312  1.0145  1.0132  1.0128  1.0114  1.0003  0.9966  0.9962  0.9957  0.9921  0.9911  0.9859  0.9840
[49 : 64]:	0.9830  0.9810  0.9791  0.9652  0.9647  0.9646  0.9628  0.9598  0.9590  0.9569  0.9566  0.9562  0.9552  0.9547  0.9537  0.9509
2024-04-29 00:29:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:29:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #257: GFLOPs: 177.6506. Time: 21.2120 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #258: GFLOPs: 256.2508. Time: 14.7056 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #259: GFLOPs: 307.0038. Time: 12.2745 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #260: GFLOPs: 181.8193. Time: 20.7256 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #261: GFLOPs: 183.9182. Time: 20.4891 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #262: GFLOPs: 290.6772. Time: 12.9639 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #263: GFLOPs: 188.5437. Time: 19.9865 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #264: GFLOPs: 188.5002. Time: 19.9911 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #265: GFLOPs: 188.7263. Time: 19.9671 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #266: GFLOPs: 309.8269. Time: 12.1627 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #267: GFLOPs: 364.4309. Time: 10.3403 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #268: GFLOPs: 362.5579. Time: 10.3937 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #269: GFLOPs: 132.4507. Time: 28.4507 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #270: GFLOPs: 239.2505. Time: 15.7505 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #271: GFLOPs: 363.5843. Time: 10.3644 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #272: GFLOPs: 156.3458. Time: 24.1025 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #273: GFLOPs: 365.6361. Time: 10.3062 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #274: GFLOPs: 109.7323. Time: 34.3410 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #275: GFLOPs: 177.2995. Time: 21.2540 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #276: GFLOPs: 315.8596. Time: 11.9304 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #277: GFLOPs: 169.6805. Time: 22.2083 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #278: GFLOPs: 171.5290. Time: 21.9690 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #279: GFLOPs: 309.4041. Time: 12.1793 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #280: GFLOPs: 330.9513. Time: 11.3863 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #281: GFLOPs: 181.2332. Time: 20.7927 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #282: GFLOPs: 178.5936. Time: 21.1000 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #283: GFLOPs: 329.6171. Time: 11.4324 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #284: GFLOPs: 323.5464. Time: 11.6469 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #285: GFLOPs: 323.5819. Time: 11.6456 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #286: GFLOPs: 315.5130. Time: 11.9435 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #287: GFLOPs: 349.7054. Time: 10.7757 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #288: GFLOPs: 353.0543. Time: 10.6735 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #289: GFLOPs: 349.4094. Time: 10.7848 us. Best GFLOPs: 370.6786
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #290: GFLOPs: 371.3924. Time: 10.1465 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #291: GFLOPs: 189.5713. Time: 19.8781 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #292: GFLOPs: 161.9749. Time: 23.2648 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #293: GFLOPs: 339.4765. Time: 11.1004 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #294: GFLOPs: 170.0812. Time: 22.1560 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #295: GFLOPs: 202.5355. Time: 18.6057 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #296: GFLOPs: 192.0924. Time: 19.6172 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #297: GFLOPs: 336.7897. Time: 11.1889 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #298: GFLOPs: 184.3251. Time: 20.4439 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #299: GFLOPs: 23.9148. Time: 157.5730 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #300: GFLOPs: 21.6356. Time: 174.1723 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #301: GFLOPs: 241.2113. Time: 15.6225 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #302: GFLOPs: 240.4999. Time: 15.6687 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #303: GFLOPs: 21.4836. Time: 175.4046 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #304: GFLOPs: 347.0604. Time: 10.8578 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #305: GFLOPs: 363.3382. Time: 10.3714 us. Best GFLOPs: 371.3924
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #306: GFLOPs: 372.3731. Time: 10.1197 us. Best GFLOPs: 372.3731
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #307: GFLOPs: 379.8377. Time: 9.9209 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #308: GFLOPs: 353.4238. Time: 10.6623 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #309: GFLOPs: 345.1105. Time: 10.9192 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #310: GFLOPs: 210.1243. Time: 17.9338 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #311: GFLOPs: 327.6156. Time: 11.5023 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #312: GFLOPs: 323.2183. Time: 11.6587 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #313: GFLOPs: 352.3022. Time: 10.6963 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #314: GFLOPs: 353.3926. Time: 10.6633 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #315: GFLOPs: 364.9964. Time: 10.3243 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #316: GFLOPs: 363.5282. Time: 10.3660 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #317: GFLOPs: 362.6201. Time: 10.3919 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #318: GFLOPs: 202.5493. Time: 18.6045 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #319: GFLOPs: 114.6987. Time: 32.8541 us. Best GFLOPs: 379.8377
2024-04-29 00:31:32 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #320: GFLOPs: 141.3043. Time: 26.6681 us. Best GFLOPs: 379.8377
2024-04-29 01:05:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:05:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:05:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 385 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:05:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 769 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:05:51 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 01:06:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:06:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:06:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:06:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:06:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4857  1.4590  1.4535  1.4535  1.4343  1.4043  1.3303  1.3126  1.2952  1.2918  1.2802  1.2783  1.2650  1.2532  1.2485  1.2445
[17 : 32]:	1.2434  1.2422  1.2265  1.2248  1.2129  1.2096  1.2096  1.1830  1.1805  1.1784  1.1782  1.1757  1.1757  1.1735  1.1704  1.1666
[33 : 48]:	1.1649  1.1369  1.1305  1.1039  1.1005  1.0986  1.0977  1.0972  1.0949  1.0901  1.0870  1.0850  1.0789  1.0762  1.0740  1.0725
[49 : 64]:	1.0714  1.0581  1.0460  1.0457  1.0408  1.0311  1.0247  1.0211  1.0187  1.0164  1.0164  1.0161  1.0123  1.0121  1.0100  1.0097
2024-04-29 01:06:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:06:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #321: GFLOPs: 177.9502. Time: 21.1763 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #322: GFLOPs: 177.2161. Time: 21.2640 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #323: GFLOPs: 171.9212. Time: 21.9189 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #324: GFLOPs: 176.9831. Time: 21.2920 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #325: GFLOPs: 154.7695. Time: 24.3479 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #326: GFLOPs: 158.4762. Time: 23.7785 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #327: GFLOPs: 294.9251. Time: 12.7772 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #328: GFLOPs: 283.9543. Time: 13.2709 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #329: GFLOPs: 278.5087. Time: 13.5304 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #330: GFLOPs: 278.1727. Time: 13.5467 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #331: GFLOPs: 316.1923. Time: 11.9178 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #332: GFLOPs: 241.2126. Time: 15.6224 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #333: GFLOPs: 279.8362. Time: 13.4662 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #334: GFLOPs: 260.0582. Time: 14.4903 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #335: GFLOPs: 308.1056. Time: 12.2306 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #336: GFLOPs: 310.2222. Time: 12.1472 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #337: GFLOPs: 296.4983. Time: 12.7094 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #338: GFLOPs: 237.8636. Time: 15.8424 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #339: GFLOPs: 208.0106. Time: 18.1160 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #340: GFLOPs: 274.1484. Time: 13.7455 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #341: GFLOPs: 288.3207. Time: 13.0699 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #342: GFLOPs: 249.0054. Time: 15.1335 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #343: GFLOPs: 303.7547. Time: 12.4058 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #344: GFLOPs: 328.6760. Time: 11.4652 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #345: GFLOPs: 96.1654. Time: 39.1858 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #346: GFLOPs: 65.5930. Time: 57.4500 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #347: GFLOPs: 323.6172. Time: 11.6444 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #348: GFLOPs: 291.1105. Time: 12.9446 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #349: GFLOPs: 198.1470. Time: 19.0178 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #350: GFLOPs: 222.4981. Time: 16.9364 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #351: GFLOPs: 242.7004. Time: 15.5266 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #352: GFLOPs: 323.6353. Time: 11.6437 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #353: GFLOPs: 328.6663. Time: 11.4655 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #354: GFLOPs: 236.9656. Time: 15.9024 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #355: GFLOPs: 66.8500. Time: 56.3698 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #356: GFLOPs: 244.7959. Time: 15.3937 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #357: GFLOPs: 265.5611. Time: 14.1900 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #358: GFLOPs: 202.9312. Time: 18.5694 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #359: GFLOPs: 203.1272. Time: 18.5515 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #360: GFLOPs: 270.4232. Time: 13.9349 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #361: GFLOPs: 232.1798. Time: 16.2302 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #362: GFLOPs: 254.2853. Time: 14.8193 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #363: GFLOPs: 178.1747. Time: 21.1496 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #364: GFLOPs: 266.0717. Time: 14.1628 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #365: GFLOPs: 202.3601. Time: 18.6219 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #366: GFLOPs: 263.1751. Time: 14.3187 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #367: GFLOPs: 285.9872. Time: 13.1765 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #368: GFLOPs: 203.7177. Time: 18.4978 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #369: GFLOPs: 329.6397. Time: 11.4316 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #370: GFLOPs: 320.6997. Time: 11.7503 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #371: GFLOPs: 343.5051. Time: 10.9702 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #372: GFLOPs: 231.9344. Time: 16.2474 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #373: GFLOPs: 67.0516. Time: 56.2003 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #374: GFLOPs: 260.7876. Time: 14.4498 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #375: GFLOPs: 295.4282. Time: 12.7555 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #376: GFLOPs: 317.5624. Time: 11.8664 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #377: GFLOPs: 217.4203. Time: 17.3320 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #378: GFLOPs: 229.2869. Time: 16.4350 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #379: GFLOPs: 259.7474. Time: 14.5076 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #380: GFLOPs: 259.7045. Time: 14.5100 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #381: GFLOPs: 245.8387. Time: 15.3284 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #382: GFLOPs: 216.5557. Time: 17.4012 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #383: GFLOPs: 43.7348. Time: 86.1630 us. Best GFLOPs: 379.8377
2024-04-29 01:08:55 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #384: GFLOPs: 220.5797. Time: 17.0837 us. Best GFLOPs: 379.8377
2024-04-29 01:37:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:37:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:37:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:37:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 779 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:37:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 1161 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:37:23 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-04-29 01:37:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:37:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:37:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:38:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 01:38:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2355  1.1477  1.1300  1.1289  1.1286  1.1179  1.1132  1.1030  1.1004  1.1002  1.0983  1.0978  1.0967  1.0943  1.0918  1.0783
[17 : 32]:	1.0757  1.0657  1.0577  1.0551  1.0550  1.0220  1.0185  1.0175  1.0163  1.0110  1.0039  1.0011  0.9959  0.9931  0.9875  0.9870
[33 : 48]:	0.9866  0.9866  0.9853  0.9852  0.9848  0.9836  0.9785  0.9784  0.9782  0.9760  0.9759  0.9717  0.9707  0.9704  0.9694  0.9687
[49 : 64]:	0.9685  0.9663  0.9659  0.9655  0.9655  0.9651  0.9639  0.9628  0.9624  0.9624  0.9617  0.9616  0.9611  0.9604  0.9601  0.9597
2024-04-29 01:38:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:38:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #385: GFLOPs: 300.3877. Time: 12.5449 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #386: GFLOPs: 260.6378. Time: 14.4581 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #387: GFLOPs: 295.6062. Time: 12.7478 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #388: GFLOPs: 279.1606. Time: 13.4988 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #389: GFLOPs: 278.0654. Time: 13.5519 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #390: GFLOPs: 244.6843. Time: 15.4007 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #391: GFLOPs: 278.5182. Time: 13.5299 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #392: GFLOPs: 288.4677. Time: 13.0632 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #393: GFLOPs: 278.8662. Time: 13.5130 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #394: GFLOPs: 294.4112. Time: 12.7995 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #395: GFLOPs: 149.7506. Time: 25.1640 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #396: GFLOPs: 294.9646. Time: 12.7755 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #397: GFLOPs: 327.8166. Time: 11.4952 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #398: GFLOPs: 289.5838. Time: 13.0129 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #399: GFLOPs: 289.7585. Time: 13.0050 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #400: GFLOPs: 151.7790. Time: 24.8277 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #401: GFLOPs: 162.9715. Time: 23.1226 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #402: GFLOPs: 151.8453. Time: 24.8168 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #403: GFLOPs: 151.8488. Time: 24.8163 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #404: GFLOPs: 331.2060. Time: 11.3776 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #405: GFLOPs: 151.7511. Time: 24.8322 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #406: GFLOPs: 360.4827. Time: 10.4535 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #407: GFLOPs: 303.6511. Time: 12.4100 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #408: GFLOPs: 286.4855. Time: 13.1536 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #409: GFLOPs: 363.2098. Time: 10.3751 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #410: GFLOPs: 360.4840. Time: 10.4535 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #411: GFLOPs: 299.5553. Time: 12.5797 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #412: GFLOPs: 210.9700. Time: 17.8619 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #413: GFLOPs: 265.0933. Time: 14.2151 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #414: GFLOPs: 334.6289. Time: 11.2612 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #415: GFLOPs: 279.1105. Time: 13.5012 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #416: GFLOPs: 342.6879. Time: 10.9964 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #417: GFLOPs: 324.3175. Time: 11.6192 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #418: GFLOPs: 322.7556. Time: 11.6755 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #419: GFLOPs: 356.3052. Time: 10.5761 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #420: GFLOPs: 309.8188. Time: 12.1630 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #421: GFLOPs: 328.9039. Time: 11.4572 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #422: GFLOPs: 363.1035. Time: 10.3781 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #423: GFLOPs: 366.4258. Time: 10.2840 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #424: GFLOPs: 286.6542. Time: 13.1459 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #425: GFLOPs: 378.2629. Time: 9.9622 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #426: GFLOPs: 376.4843. Time: 10.0092 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #427: GFLOPs: 311.8912. Time: 12.0822 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #428: GFLOPs: 363.5798. Time: 10.3645 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #429: GFLOPs: 359.3153. Time: 10.4875 us. Best GFLOPs: 379.8377
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #430: GFLOPs: 385.0397. Time: 9.7868 us. Best GFLOPs: 385.0397
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #431: GFLOPs: 353.8755. Time: 10.6487 us. Best GFLOPs: 385.0397
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #432: GFLOPs: 385.9396. Time: 9.7640 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #433: GFLOPs: 307.4210. Time: 12.2578 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #434: GFLOPs: 371.6203. Time: 10.1402 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #435: GFLOPs: 315.2380. Time: 11.9539 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #436: GFLOPs: 362.5674. Time: 10.3934 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #437: GFLOPs: 361.2659. Time: 10.4309 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #438: GFLOPs: 327.7510. Time: 11.4975 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #439: GFLOPs: 320.4552. Time: 11.7593 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #440: GFLOPs: 337.0800. Time: 11.1793 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #441: GFLOPs: 306.7117. Time: 12.2862 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #442: GFLOPs: 313.9021. Time: 12.0048 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #443: GFLOPs: 350.5501. Time: 10.7497 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #444: GFLOPs: 314.9495. Time: 11.9648 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #445: GFLOPs: 370.0849. Time: 10.1823 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #446: GFLOPs: 106.6444. Time: 35.3354 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #447: GFLOPs: 144.0529. Time: 26.1593 us. Best GFLOPs: 385.9396
2024-04-29 01:39:39 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #448: GFLOPs: 182.8284. Time: 20.6112 us. Best GFLOPs: 385.9396
2024-04-29 02:19:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:19:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:19:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 387 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 02:19:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 768 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 02:19:34 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 02:19:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 02:19:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 02:20:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 02:20:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6b48028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbe30a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd7826e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcabe328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x94e0ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xa681268)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xcf75448)]: 0 failure(s)
2024-04-29 02:20:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3145  1.2888  1.2273  1.2244  1.2189  1.1588  1.1552  1.1478  1.1473  1.1460  1.1431  1.1301  1.1280  1.1139  1.1075  1.1020
[17 : 32]:	1.1007  1.0937  1.0905  1.0893  1.0881  1.0870  1.0812  1.0493  1.0459  1.0414  1.0397  1.0387  1.0385  1.0374  1.0323  1.0261
[33 : 48]:	1.0235  1.0226  1.0210  1.0205  1.0184  1.0158  1.0158  1.0077  1.0052  0.9986  0.9825  0.9822  0.9809  0.9806  0.9785  0.9783
[49 : 64]:	0.9771  0.9731  0.9723  0.9688  0.9684  0.9681  0.9670  0.9666  0.9653  0.9649  0.9645  0.9644  0.9642  0.9637  0.9628  0.9609
2024-04-29 02:20:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:20:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #449: GFLOPs: 261.7052. Time: 14.3991 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #450: GFLOPs: 242.6037. Time: 15.5328 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:121] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #451: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  279: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  278: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  277: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  276: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  275: tvm::transform::Pass::operator()(tvm::IRModule) const
  274: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  273: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: _ZN3tvm7runtime13PackedFun
  269: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  268: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  267: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorI
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorI
  170: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorI
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  161: _ZZN3tvm3tir11StmtFunctorI
  160: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  159: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorI
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  155: _ZZN3tvm3tir11StmtFunctorI
  154: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorI
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorI
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  126: _ZZN3tvm3tir11StmtFunctorIFNS
  125: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  124: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorI
  96: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  95: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS
  93: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  92: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorI
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS
  58: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  57: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(256), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 1, 16])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:121] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #452: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  279: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  278: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  277: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  276: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  275: tvm::transform::Pass::operator()(tvm::IRModule) const
  274: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  273: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: _ZN3tvm7runtime13PackedFun
  269: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  268: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  267: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorI
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  238: _ZZN3tvm3tir11StmtFunctorI
  237: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorI
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  222: _ZZN3tvm3tir11StmtFunctorI
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  205: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorI
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorI
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  180: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  179: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorI
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorI
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorI
  170: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorI
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  161: _ZZN3tvm3tir11StmtFunctorI
  160: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  159: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorI
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  155: _ZZN3tvm3tir11StmtFunctorI
  154: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorI
  150: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorI
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorI
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  126: _ZZN3tvm3tir11StmtFunctorIFNS
  125: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  124: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorI
  96: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  95: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS
  93: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  92: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorI
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS
  58: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  57: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(256), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(64) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(64) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 1, 16])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135 = sch.split(loop=l133, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b149)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b151)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b153)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #453: GFLOPs: 321.1839. Time: 11.7326 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #454: GFLOPs: 302.6001. Time: 12.4531 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #455: GFLOPs: 214.7225. Time: 17.5497 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #456: GFLOPs: 243.8363. Time: 15.4543 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #457: GFLOPs: 304.2057. Time: 12.3874 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #458: GFLOPs: 306.7372. Time: 12.2852 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #459: GFLOPs: 337.5229. Time: 11.1646 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #460: GFLOPs: 368.0607. Time: 10.2383 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #461: GFLOPs: 368.0288. Time: 10.2392 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #462: GFLOPs: 307.0106. Time: 12.2742 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #463: GFLOPs: 238.7992. Time: 15.7803 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #464: GFLOPs: 301.3185. Time: 12.5061 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #465: GFLOPs: 300.1582. Time: 12.5544 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #466: GFLOPs: 308.5800. Time: 12.2118 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #467: GFLOPs: 308.3627. Time: 12.2204 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #468: GFLOPs: 265.8417. Time: 14.1751 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #469: GFLOPs: 308.5261. Time: 12.2139 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #470: GFLOPs: 297.0893. Time: 12.6841 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #471: GFLOPs: 296.5181. Time: 12.7086 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #472: GFLOPs: 315.2845. Time: 11.9521 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #473: GFLOPs: 278.6035. Time: 13.5257 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #474: GFLOPs: 319.1804. Time: 11.8062 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #475: GFLOPs: 343.1944. Time: 10.9801 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #476: GFLOPs: 367.5690. Time: 10.2520 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #477: GFLOPs: 272.6727. Time: 13.8199 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #478: GFLOPs: 348.8848. Time: 10.8010 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #479: GFLOPs: 350.8190. Time: 10.7415 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #480: GFLOPs: 283.6947. Time: 13.2830 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #481: GFLOPs: 361.3659. Time: 10.4280 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #482: GFLOPs: 369.2357. Time: 10.2057 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #483: GFLOPs: 351.2247. Time: 10.7291 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #484: GFLOPs: 345.3270. Time: 10.9123 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #485: GFLOPs: 296.8988. Time: 12.6923 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #486: GFLOPs: 352.3682. Time: 10.6943 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #487: GFLOPs: 347.6586. Time: 10.8391 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #488: GFLOPs: 272.5760. Time: 13.8248 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #489: GFLOPs: 272.6804. Time: 13.8195 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #490: GFLOPs: 370.0164. Time: 10.1842 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #491: GFLOPs: 351.4313. Time: 10.7228 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #492: GFLOPs: 379.7949. Time: 9.9220 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #493: GFLOPs: 377.5624. Time: 9.9807 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #494: GFLOPs: 379.6693. Time: 9.9253 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #495: GFLOPs: 337.0948. Time: 11.1788 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #496: GFLOPs: 343.9378. Time: 10.9564 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #497: GFLOPs: 370.7858. Time: 10.1631 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #498: GFLOPs: 372.7724. Time: 10.1089 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #499: GFLOPs: 372.1045. Time: 10.1270 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #500: GFLOPs: 287.8346. Time: 13.0920 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #501: GFLOPs: 381.0471. Time: 9.8894 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #502: GFLOPs: 363.1898. Time: 10.3756 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #503: GFLOPs: 370.2789. Time: 10.1770 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #504: GFLOPs: 378.4323. Time: 9.9577 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #505: GFLOPs: 376.5143. Time: 10.0084 us. Best GFLOPs: 385.9396
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #506: GFLOPs: 387.6582. Time: 9.7207 us. Best GFLOPs: 387.6582
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #507: GFLOPs: 361.0846. Time: 10.4361 us. Best GFLOPs: 387.6582
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #508: GFLOPs: 375.0865. Time: 10.0465 us. Best GFLOPs: 387.6582
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #509: GFLOPs: 370.6559. Time: 10.1666 us. Best GFLOPs: 387.6582
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #510: GFLOPs: 77.6545. Time: 48.5267 us. Best GFLOPs: 387.6582
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #511: GFLOPs: 70.3555. Time: 53.5611 us. Best GFLOPs: 387.6582
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #512: GFLOPs: 57.4847. Time: 65.5534 us. Best GFLOPs: 387.6582
