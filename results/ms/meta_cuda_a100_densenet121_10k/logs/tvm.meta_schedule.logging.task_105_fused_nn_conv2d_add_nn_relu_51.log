2024-04-28 19:55:33 [INFO] [task_scheduler.cc:160] Initializing Task #105: "fused_nn_conv2d_add_nn_relu_51"
2024-04-28 19:55:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 * T.int64(64) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 2, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 8, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 2, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 8, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(196) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 2, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 8, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 22:16:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:16:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:16:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x77d8838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa963618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd0eae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbcc5398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x721c348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd0ea3d8)]: 474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94d1818)]: 0 failure(s)
2024-04-28 22:16:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x77d8838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa963618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd0eae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbcc5398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x721c348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd0ea3d8)]: 954 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94d1818)]: 0 failure(s)
2024-04-28 22:16:37 [INFO] [evolutionary_search.cc:723] Sampled 70 candidate(s)
2024-04-28 22:16:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x77d8838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa963618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd0eae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbcc5398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x721c348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd0ea3d8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94d1818)]: 0 failure(s)
2024-04-28 22:16:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x77d8838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa963618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd0eae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbcc5398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x721c348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd0ea3d8)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94d1818)]: 0 failure(s)
2024-04-28 22:16:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x77d8838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa963618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd0eae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbcc5398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x721c348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd0ea3d8)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94d1818)]: 0 failure(s)
2024-04-28 22:16:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x77d8838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xa963618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd0eae58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xbcc5398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x721c348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xd0ea3d8)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x94d1818)]: 0 failure(s)
2024-04-28 22:16:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9991  0.9988  0.9988  0.9984  0.9983  0.9980  0.9958  0.9952  0.9947  0.9931  0.9930  0.9929  0.9928  0.9919  0.9917
[17 : 32]:	0.9914  0.9913  0.9899  0.9879  0.9871  0.9861  0.9850  0.9848  0.9847  0.9845  0.9841  0.9838  0.9836  0.9835  0.9831  0.9818
[33 : 48]:	0.9801  0.9777  0.9771  0.9768  0.9766  0.9762  0.9753  0.9753  0.9752  0.9752  0.9747  0.9731  0.9730  0.9729  0.9726  0.9723
[49 : 64]:	0.9719  0.9711  0.9710  0.9709  0.9707  0.9705  0.9683  0.9678  0.9677  0.9668  0.9652  0.9651  0.9648  0.9641  0.9633  0.9632
2024-04-28 22:16:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:16:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #1: GFLOPs: 6.8725. Time: 3767.3340 us. Best GFLOPs: 6.8725
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #2: GFLOPs: 322.3267. Time: 80.3248 us. Best GFLOPs: 322.3267
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #3: GFLOPs: 1526.5478. Time: 16.9604 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #4: GFLOPs: 969.3471. Time: 26.7095 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #5: GFLOPs: 540.0616. Time: 47.9405 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #6: GFLOPs: 1174.9040. Time: 22.0365 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #7: GFLOPs: 11.0323. Time: 2346.8175 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #8: GFLOPs: 49.5252. Time: 522.7803 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #9: GFLOPs: 12.6439. Time: 2047.6865 us. Best GFLOPs: 1526.5478
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #10: GFLOPs: 2136.7477. Time: 12.1169 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #11: GFLOPs: 481.9485. Time: 53.7211 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #12: GFLOPs: 16.1825. Time: 1599.9269 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #13: GFLOPs: 58.9743. Time: 439.0183 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #14: GFLOPs: 609.4932. Time: 42.4793 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #15: GFLOPs: 631.9909. Time: 40.9671 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #16: GFLOPs: 314.5631. Time: 82.3072 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #17: GFLOPs: 130.4005. Time: 198.5485 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #18: GFLOPs: 53.7226. Time: 481.9350 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #19: GFLOPs: 128.1242. Time: 202.0759 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #20: GFLOPs: 656.4758. Time: 39.4391 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #21: GFLOPs: 624.3972. Time: 41.4653 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #22: GFLOPs: 497.3056. Time: 52.0622 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #23: GFLOPs: 788.8725. Time: 32.8200 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #24: GFLOPs: 1754.7531. Time: 14.7547 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #25: GFLOPs: 23.5022. Time: 1101.6327 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #26: GFLOPs: 18.3560. Time: 1410.4806 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #27: GFLOPs: 513.0067. Time: 50.4688 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #28: GFLOPs: 174.7233. Time: 148.1818 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #29: GFLOPs: 58.9122. Time: 439.4812 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #30: GFLOPs: 442.4162. Time: 58.5214 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #31: GFLOPs: 598.5446. Time: 43.2563 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #32: GFLOPs: 351.6562. Time: 73.6254 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #33: GFLOPs: 944.4232. Time: 27.4144 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #34: GFLOPs: 475.8812. Time: 54.4060 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #35: GFLOPs: 214.8999. Time: 120.4785 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #36: GFLOPs: 575.1367. Time: 45.0168 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #37: GFLOPs: 1533.8910. Time: 16.8792 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #38: GFLOPs: 33.9821. Time: 761.8948 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #39: GFLOPs: 40.6956. Time: 636.2064 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #40: GFLOPs: 503.0666. Time: 51.4660 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #41: GFLOPs: 801.4644. Time: 32.3044 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #42: GFLOPs: 591.8577. Time: 43.7450 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #43: GFLOPs: 71.9622. Time: 359.7838 us. Best GFLOPs: 2136.7477
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #44: GFLOPs: 2508.3333. Time: 10.3219 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #45: GFLOPs: 806.8278. Time: 32.0896 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #46: GFLOPs: 801.3837. Time: 32.3076 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #47: GFLOPs: 620.5560. Time: 41.7220 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #48: GFLOPs: 48.8348. Time: 530.1720 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #49: GFLOPs: 595.1643. Time: 43.5020 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #50: GFLOPs: 6.7396. Time: 3841.5929 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #51: GFLOPs: 1795.4428. Time: 14.4203 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #52: GFLOPs: 668.2272. Time: 38.7455 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #53: GFLOPs: 321.0985. Time: 80.6320 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #54: GFLOPs: 148.6228. Time: 174.2049 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #55: GFLOPs: 919.2281. Time: 28.1658 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #56: GFLOPs: 1395.5877. Time: 18.5519 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #57: GFLOPs: 464.2609. Time: 55.7678 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #58: GFLOPs: 147.8329. Time: 175.1357 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #59: GFLOPs: 1345.2483. Time: 19.2461 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #60: GFLOPs: 297.0928. Time: 87.1472 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #61: GFLOPs: 555.7400. Time: 46.5880 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #62: GFLOPs: 2506.1821. Time: 10.3308 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #63: GFLOPs: 219.6279. Time: 117.8849 us. Best GFLOPs: 2508.3333
2024-04-28 23:06:48 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #64: GFLOPs: 409.8691. Time: 63.1685 us. Best GFLOPs: 2508.3333
