2024-04-28 19:55:30 [INFO] [task_scheduler.cc:160] Initializing Task #97: "fused_nn_conv2d_add_nn_relu_47"
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(64) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(64) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 16, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 64, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(64) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 16, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 64, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(64) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 16, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 64, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 22:04:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:04:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:04:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 481 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-28 22:04:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 955 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-28 22:04:35 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-04-28 22:04:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-28 22:04:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-28 22:04:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-28 22:04:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-28 22:04:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9981  0.9979  0.9971  0.9968  0.9961  0.9949  0.9947  0.9925  0.9910  0.9909  0.9900  0.9877  0.9872  0.9866  0.9863  0.9856
[17 : 32]:	0.9831  0.9828  0.9817  0.9815  0.9797  0.9795  0.9792  0.9786  0.9786  0.9769  0.9768  0.9766  0.9756  0.9755  0.9738  0.9735
[33 : 48]:	0.9734  0.9729  0.9727  0.9721  0.9707  0.9700  0.9692  0.9691  0.9683  0.9682  0.9674  0.9670  0.9665  0.9644  0.9642  0.9639
[49 : 64]:	0.9639  0.9633  0.9632  0.9624  0.9611  0.9604  0.9595  0.9590  0.9586  0.9574  0.9544  0.9542  0.9535  0.9521  0.9513  0.9500
2024-04-28 22:04:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:04:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #1: GFLOPs: 1181.2471. Time: 43.6665 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #2: GFLOPs: 45.4685. Time: 1134.4310 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #3: GFLOPs: 33.6183. Time: 1534.3088 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #4: GFLOPs: 1178.3610. Time: 43.7735 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #5: GFLOPs: 707.8142. Time: 72.8735 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #6: GFLOPs: 567.0164. Time: 90.9690 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #7: GFLOPs: 744.6362. Time: 69.2700 us. Best GFLOPs: 1181.2471
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #8: GFLOPs: 1361.4818. Time: 37.8859 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #9: GFLOPs: 37.8183. Time: 1363.9159 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #10: GFLOPs: 722.9695. Time: 71.3459 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #11: GFLOPs: 710.4712. Time: 72.6010 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #12: GFLOPs: 809.6022. Time: 63.7115 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #13: GFLOPs: 620.8499. Time: 83.0812 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #14: GFLOPs: 791.4192. Time: 65.1752 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #15: GFLOPs: 15.0048. Time: 3437.6363 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #16: GFLOPs: 1016.7435. Time: 50.7315 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #17: GFLOPs: 17.8668. Time: 2886.9779 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #18: GFLOPs: 510.0903. Time: 101.1212 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #19: GFLOPs: 75.1572. Time: 686.3075 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #20: GFLOPs: 781.3095. Time: 66.0186 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #21: GFLOPs: 617.4749. Time: 83.5353 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #22: GFLOPs: 840.5604. Time: 61.3649 us. Best GFLOPs: 1361.4818
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #23: GFLOPs: 2538.4670. Time: 20.3197 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #24: GFLOPs: 560.5336. Time: 92.0211 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #25: GFLOPs: 409.8117. Time: 125.8650 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #26: GFLOPs: 1163.9751. Time: 44.3145 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #27: GFLOPs: 990.1623. Time: 52.0934 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #28: GFLOPs: 628.4181. Time: 82.0806 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #29: GFLOPs: 1183.6372. Time: 43.5783 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #30: GFLOPs: 42.8643. Time: 1203.3529 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #31: GFLOPs: 163.5927. Time: 315.3009 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #32: GFLOPs: 143.7701. Time: 358.7736 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #33: GFLOPs: 425.3938. Time: 121.2545 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #34: GFLOPs: 813.6620. Time: 63.3936 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #35: GFLOPs: 330.3619. Time: 156.1346 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #36: GFLOPs: 173.8236. Time: 296.7430 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #37: GFLOPs: 77.5784. Time: 664.8879 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #38: GFLOPs: 567.1174. Time: 90.9528 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #39: GFLOPs: 13.8185. Time: 3732.7454 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #40: GFLOPs: 606.5789. Time: 85.0358 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #41: GFLOPs: 554.5682. Time: 93.0110 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #42: GFLOPs: 223.5857. Time: 230.6987 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #43: GFLOPs: 430.4426. Time: 119.8323 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #44: GFLOPs: 1147.5196. Time: 44.9499 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:121] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #45: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  337: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  336: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  335: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  334: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  333: tvm::transform::Pass::operator()(tvm::IRModule) const
  332: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  331: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  330: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  329: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  328: _ZN3tvm7runtime13PackedFun
  327: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  326: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  325: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  324: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  323: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  322: _ZZN3tvm3tir11StmtFunctorI
  321: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  320: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  319: _ZZN3tvm3tir11StmtFunctorI
  318: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  317: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  316: _ZZN3tvm3tir11StmtFunctorI
  315: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  314: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  313: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  312: _ZZN3tvm3tir11StmtFunctorI
  311: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  310: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  309: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  308: _ZZN3tvm3tir11StmtFunctorI
  307: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  306: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  305: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  304: _ZZN3tvm3tir11StmtFunctorI
  303: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  302: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  301: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  300: _ZZN3tvm3tir11StmtFunctorI
  299: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  298: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  297: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  296: _ZZN3tvm3tir11StmtFunctorI
  295: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  294: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  293: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  292: _ZZN3tvm3tir11StmtFunctorI
  291: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  290: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  289: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  288: _ZZN3tvm3tir11StmtFunctorI
  287: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  286: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  285: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  284: _ZZN3tvm3tir11StmtFunctorI
  283: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  282: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  281: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  280: _ZZN3tvm3tir11StmtFunctorI
  279: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  276: _ZZN3tvm3tir11StmtFunctorI
  275: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  274: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  273: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorI
  271: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  270: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  269: _ZZN3tvm3tir11StmtFunctorI
  268: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  265: _ZZN3tvm3tir11StmtFunctorI
  264: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  263: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  262: _ZZN3tvm3tir11StmtFunctorI
  261: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  244: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  243: _ZZN3tvm3tir11StmtFunctorI
  242: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  241: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  240: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorI
  238: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  237: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  236: _ZZN3tvm3tir11StmtFunctorI
  235: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  234: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  233: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  232: _ZZN3tvm3tir11StmtFunctorI
  231: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  228: _ZZN3tvm3tir11StmtFunctorI
  227: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  226: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  225: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  224: _ZZN3tvm3tir11StmtFunctorI
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorI
  220: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  219: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  218: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorI
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorI
  213: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  212: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  211: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorI
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  206: _ZZN3tvm3tir11StmtFunctorI
  205: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  204: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  203: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  202: _ZZN3tvm3tir11StmtFunctorI
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorI
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorI
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorI
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  184: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  183: _ZZN3tvm3tir11StmtFunctorI
  182: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  181: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorI
  179: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  178: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  177: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorI
  175: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  174: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  173: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorI
  171: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  170: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  169: _ZZN3tvm3tir11StmtFunctorI
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorI
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorI
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorI
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorI
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorI
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorIFNS
  150: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  149: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorI
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorI
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorI
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorI
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorI
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorI
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorI
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorI
  124: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  123: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  122: _ZZN3tvm3tir11StmtFunctorI
  121: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  120: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  119: _ZZN3tvm3tir11StmtFunctorIFNS
  118: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  117: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorI
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorI
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorI
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorI
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorI
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorI
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorI
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorI
  92: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  91: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorI
  89: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  88: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  87: _ZZN3tvm3tir11StmtFunctorI
  86: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  85: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  84: _ZZN3tvm3tir11StmtFunctorIFNS
  83: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  82: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorI
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorI
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorI
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorI
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorI
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorI
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorI
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorI
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  55: _ZZN3tvm3tir11StmtFunctorI
  54: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  53: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  52: _ZZN3tvm3tir11StmtFunctorI
  51: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  50: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  49: _ZZN3tvm3tir11StmtFunctorIFNS
  48: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  47: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorI
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorI
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorI
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorI
  34: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  33: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  32: _ZZN3tvm3tir11StmtFunctorI
  31: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  30: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  29: _ZZN3tvm3tir11StmtFunctorI
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorI
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS
  22: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  21: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorI
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorI
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorI
  9: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(392))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 32, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #46: GFLOPs: 732.0837. Time: 70.4577 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #47: GFLOPs: 1501.9785. Time: 34.3420 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #48: GFLOPs: 304.2020. Time: 169.5615 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #49: GFLOPs: 141.1421. Time: 365.4540 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #50: GFLOPs: 1217.7435. Time: 42.3578 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #51: GFLOPs: 57.1315. Time: 902.8451 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #52: GFLOPs: 15.0484. Time: 3427.6693 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #53: GFLOPs: 869.2795. Time: 59.3376 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #54: GFLOPs: 1417.8905. Time: 36.3786 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #55: GFLOPs: 370.5265. Time: 139.2098 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #56: GFLOPs: 2.6849. Time: 19211.4347 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #57: GFLOPs: 64.6908. Time: 797.3462 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #58: GFLOPs: 297.8389. Time: 173.1840 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #59: GFLOPs: 720.0604. Time: 71.6342 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #60: GFLOPs: 53.3438. Time: 966.9521 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #61: GFLOPs: 196.4854. Time: 262.5179 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #62: GFLOPs: 53.2789. Time: 968.1303 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #63: GFLOPs: 1609.3006. Time: 32.0518 us. Best GFLOPs: 2538.4670
2024-04-28 23:06:15 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #64: GFLOPs: 551.2040. Time: 93.5787 us. Best GFLOPs: 2538.4670
2024-04-29 02:44:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:44:54 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 02:44:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 419 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-29 02:44:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 832 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-29 02:44:58 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-29 02:45:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-29 02:45:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-29 02:45:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-29 02:45:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa71b088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xce0edb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4ac3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xc9102f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3371028)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xcf77428)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa8208a8)]: 0 failure(s)
2024-04-29 02:45:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7827  1.7564  1.7322  1.6674  1.6674  1.6619  1.5599  1.5563  1.5482  1.5475  1.5406  1.5393  1.5108  1.5072  1.4931  1.4845
[17 : 32]:	1.4828  1.4781  1.4731  1.4676  1.4619  1.4492  1.4432  1.4314  1.4308  1.4165  1.4009  1.3825  1.3674  1.3609  1.3435  1.3412
[33 : 48]:	1.3350  1.3319  1.3197  1.3056  1.3032  1.3002  1.2964  1.2962  1.2896  1.2892  1.2810  1.2726  1.2586  1.2584  1.2489  1.2449
[49 : 64]:	1.2449  1.2421  1.2266  1.2208  1.2187  1.2181  1.2136  1.2122  1.2082  1.2078  1.1997  1.1986  1.1909  1.1825  1.1802  1.1758
2024-04-29 02:45:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:45:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #65: GFLOPs: 3514.0457. Time: 14.6785 us. Best GFLOPs: 3514.0457
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #66: GFLOPs: 3678.0812. Time: 14.0239 us. Best GFLOPs: 3678.0812
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #67: GFLOPs: 3734.2782. Time: 13.8128 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #68: GFLOPs: 3048.8466. Time: 16.9182 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #69: GFLOPs: 3048.7316. Time: 16.9188 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #70: GFLOPs: 3074.1455. Time: 16.7789 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #71: GFLOPs: 3565.4844. Time: 14.4667 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #72: GFLOPs: 3572.8257. Time: 14.4370 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #73: GFLOPs: 3500.2632. Time: 14.7363 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #74: GFLOPs: 3512.0062. Time: 14.6870 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #75: GFLOPs: 2836.1684. Time: 18.1868 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #76: GFLOPs: 1791.7148. Time: 28.7886 us. Best GFLOPs: 3734.2782
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #77: GFLOPs: 3749.3083. Time: 13.7575 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #78: GFLOPs: 1185.8775. Time: 43.4960 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #79: GFLOPs: 1331.8177. Time: 38.7297 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #80: GFLOPs: 1654.3417. Time: 31.1791 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #81: GFLOPs: 2227.4469. Time: 23.1570 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #82: GFLOPs: 1604.0645. Time: 32.1564 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #83: GFLOPs: 2453.0534. Time: 21.0272 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #84: GFLOPs: 2194.2363. Time: 23.5075 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #85: GFLOPs: 1861.5926. Time: 27.7080 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #86: GFLOPs: 963.3715. Time: 53.5421 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #87: GFLOPs: 965.9247. Time: 53.4006 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #88: GFLOPs: 2020.9075. Time: 25.5236 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #89: GFLOPs: 2425.8375. Time: 21.2631 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #90: GFLOPs: 1647.9891. Time: 31.2993 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #91: GFLOPs: 825.0179. Time: 62.5210 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #92: GFLOPs: 1950.2134. Time: 26.4489 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #93: GFLOPs: 784.4004. Time: 65.7584 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #94: GFLOPs: 1918.4317. Time: 26.8870 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #95: GFLOPs: 1920.5612. Time: 26.8572 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #96: GFLOPs: 3533.2303. Time: 14.5988 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #97: GFLOPs: 3492.3811. Time: 14.7696 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #98: GFLOPs: 3563.0096. Time: 14.4768 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #99: GFLOPs: 2837.8429. Time: 18.1761 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #100: GFLOPs: 2753.9428. Time: 18.7298 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #101: GFLOPs: 2440.3247. Time: 21.1369 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #102: GFLOPs: 1465.2162. Time: 35.2036 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #103: GFLOPs: 2028.6053. Time: 25.4268 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #104: GFLOPs: 3733.1483. Time: 13.8170 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #105: GFLOPs: 3480.1234. Time: 14.8216 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #106: GFLOPs: 2055.3155. Time: 25.0964 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #107: GFLOPs: 3453.1118. Time: 14.9375 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #108: GFLOPs: 2332.3867. Time: 22.1151 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #109: GFLOPs: 3665.4450. Time: 14.0722 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #110: GFLOPs: 3138.8846. Time: 16.4329 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #111: GFLOPs: 3131.7511. Time: 16.4703 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #112: GFLOPs: 3661.6615. Time: 14.0868 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #113: GFLOPs: 2130.3184. Time: 24.2128 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #114: GFLOPs: 3511.3128. Time: 14.6899 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #115: GFLOPs: 2033.6079. Time: 25.3642 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #116: GFLOPs: 2254.7816. Time: 22.8762 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #117: GFLOPs: 2163.8180. Time: 23.8379 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #118: GFLOPs: 1554.1796. Time: 33.1885 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #119: GFLOPs: 1191.5126. Time: 43.2903 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #120: GFLOPs: 3546.1456. Time: 14.5456 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #121: GFLOPs: 2931.9970. Time: 17.5924 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #122: GFLOPs: 2141.6529. Time: 24.0846 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #123: GFLOPs: 2290.2451. Time: 22.5220 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #124: GFLOPs: 2534.6383. Time: 20.3504 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #125: GFLOPs: 2448.7529. Time: 21.0642 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #126: GFLOPs: 1187.5835. Time: 43.4335 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #127: GFLOPs: 210.7602. Time: 244.7376 us. Best GFLOPs: 3749.3083
2024-04-29 02:46:36 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #128: GFLOPs: 348.1490. Time: 148.1576 us. Best GFLOPs: 3749.3083
