2024-04-28 19:55:30 [INFO] [task_scheduler.cc:160] Initializing Task #95: "fused_nn_conv2d_add_nn_relu_46"
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(288), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(24), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9408)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0 * T.int64(12) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[24, 1, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(24), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9408)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[24, 1, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(24), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9408)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[24, 1, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 22:02:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:02:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:02:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-28 22:02:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 964 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-28 22:02:21 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-28 22:02:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-28 22:02:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-28 22:02:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-28 22:02:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-28 22:02:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9980  0.9975  0.9974  0.9958  0.9955  0.9947  0.9946  0.9933  0.9926  0.9925  0.9923  0.9921  0.9908  0.9892  0.9880
[17 : 32]:	0.9874  0.9870  0.9864  0.9864  0.9863  0.9857  0.9856  0.9855  0.9833  0.9832  0.9827  0.9824  0.9810  0.9800  0.9795  0.9791
[33 : 48]:	0.9788  0.9788  0.9786  0.9783  0.9780  0.9777  0.9774  0.9771  0.9768  0.9761  0.9757  0.9749  0.9730  0.9724  0.9711  0.9707
[49 : 64]:	0.9693  0.9676  0.9671  0.9640  0.9631  0.9621  0.9621  0.9618  0.9606  0.9601  0.9597  0.9596  0.9595  0.9594  0.9593  0.9591
2024-04-28 22:02:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:02:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #1: GFLOPs: 790.4768. Time: 73.3778 us. Best GFLOPs: 790.4768
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #2: GFLOPs: 7.6393. Time: 7592.7407 us. Best GFLOPs: 790.4768
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #3: GFLOPs: 71.1673. Time: 815.0290 us. Best GFLOPs: 790.4768
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #4: GFLOPs: 180.1139. Time: 322.0377 us. Best GFLOPs: 790.4768
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #5: GFLOPs: 16.1032. Time: 3601.9930 us. Best GFLOPs: 790.4768
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #6: GFLOPs: 460.5352. Time: 125.9479 us. Best GFLOPs: 790.4768
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #7: GFLOPs: 1239.2063. Time: 46.8069 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #8: GFLOPs: 679.4125. Time: 85.3730 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #9: GFLOPs: 65.7341. Time: 882.3954 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #10: GFLOPs: 433.0262. Time: 133.9491 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #11: GFLOPs: 61.0357. Time: 950.3204 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #12: GFLOPs: 31.4648. Time: 1843.4420 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #13: GFLOPs: 246.1595. Time: 235.6336 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #14: GFLOPs: 66.4978. Time: 872.2610 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #15: GFLOPs: 13.0459. Time: 4446.1189 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #16: GFLOPs: 435.0202. Time: 133.3351 us. Best GFLOPs: 1239.2063
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #17: GFLOPs: 1673.4667. Time: 34.6607 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #18: GFLOPs: 19.1298. Time: 3032.0950 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #19: GFLOPs: 41.1867. Time: 1408.3054 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #20: GFLOPs: 23.7329. Time: 2444.0133 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #21: GFLOPs: 6.7827. Time: 8551.6802 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #22: GFLOPs: 48.7296. Time: 1190.3128 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #23: GFLOPs: 998.4695. Time: 58.0924 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #24: GFLOPs: 16.3558. Time: 3546.3591 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #25: GFLOPs: 68.0208. Time: 852.7317 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #26: GFLOPs: 39.5481. Time: 1466.6566 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #27: GFLOPs: 21.1060. Time: 2748.1945 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #28: GFLOPs: 167.4689. Time: 346.3536 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #29: GFLOPs: 428.3148. Time: 135.4225 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #30: GFLOPs: 359.9826. Time: 161.1285 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #31: GFLOPs: 24.4670. Time: 2370.6791 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #32: GFLOPs: 1111.0197. Time: 52.2074 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #33: GFLOPs: 1562.6210. Time: 37.1193 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #34: GFLOPs: 399.6545. Time: 145.1340 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #35: GFLOPs: 27.8721. Time: 2081.0606 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #36: GFLOPs: 428.0320. Time: 135.5120 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:121] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(72), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 2, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[72, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #38: GFLOPs: 1351.4679. Time: 42.9189 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #39: GFLOPs: 769.1360. Time: 75.4138 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #40: GFLOPs: 218.6061. Time: 265.3332 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #41: GFLOPs: 357.0377. Time: 162.4575 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #42: GFLOPs: 13.9275. Time: 4164.6620 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #43: GFLOPs: 913.0316. Time: 63.5284 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #44: GFLOPs: 181.5699. Time: 319.4552 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #45: GFLOPs: 1321.9601. Time: 43.8769 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #46: GFLOPs: 1505.5796. Time: 38.5257 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #47: GFLOPs: 216.8612. Time: 267.4681 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #48: GFLOPs: 17.3126. Time: 3350.3573 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #49: GFLOPs: 9.6052. Time: 6038.7689 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #50: GFLOPs: 36.9618. Time: 1569.2800 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #51: GFLOPs: 90.7503. Time: 639.1548 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #52: GFLOPs: 39.5955. Time: 1464.8988 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #53: GFLOPs: 552.2576. Time: 105.0297 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #54: GFLOPs: 436.9458. Time: 132.7475 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #55: GFLOPs: 440.8669. Time: 131.5668 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #56: GFLOPs: 41.1948. Time: 1408.0270 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #57: GFLOPs: 38.0765. Time: 1523.3396 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #58: GFLOPs: 46.4643. Time: 1248.3433 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #59: GFLOPs: 6.1905. Time: 9369.6934 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #60: GFLOPs: 934.0392. Time: 62.0996 us. Best GFLOPs: 1673.4667
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #61: GFLOPs: 2233.1379. Time: 25.9740 us. Best GFLOPs: 2233.1379
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #62: GFLOPs: 177.3711. Time: 327.0175 us. Best GFLOPs: 2233.1379
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #63: GFLOPs: 37.2784. Time: 1555.9531 us. Best GFLOPs: 2233.1379
2024-04-28 23:06:05 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #64: GFLOPs: 440.1469. Time: 131.7820 us. Best GFLOPs: 2233.1379
2024-04-29 01:52:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:52:48 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 01:52:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:52:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 852 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:52:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 1286 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:52:54 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 01:52:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:53:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:53:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:53:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc36ab08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd238ae8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xce0f058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8e62b78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3d283f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xce0ef38)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd2389e8)]: 0 failure(s)
2024-04-29 01:53:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4919  1.4877  1.4877  1.4694  1.4613  1.4604  1.4558  1.4427  1.4263  1.4214  1.4134  1.3748  1.3682  1.3635  1.3635  1.3606
[17 : 32]:	1.3582  1.3572  1.3572  1.3544  1.3403  1.3198  1.3165  1.3031  1.2917  1.2638  1.2456  1.2433  1.2428  1.2164  1.2141  1.2025
[33 : 48]:	1.1927  1.1887  1.1881  1.1728  1.1688  1.1602  1.1599  1.1587  1.1573  1.1558  1.1496  1.1449  1.1423  1.1386  1.1304  1.1243
[49 : 64]:	1.1226  1.1222  1.1120  1.1091  1.1071  1.0995  1.0972  1.0925  1.0835  1.0826  1.0811  1.0743  1.0677  1.0595  1.0520  1.0511
2024-04-29 01:53:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:53:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #65: GFLOPs: 2086.8270. Time: 27.7950 us. Best GFLOPs: 2233.1379
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #66: GFLOPs: 1921.5511. Time: 30.1857 us. Best GFLOPs: 2233.1379
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #67: GFLOPs: 1921.7611. Time: 30.1824 us. Best GFLOPs: 2233.1379
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #68: GFLOPs: 2043.6677. Time: 28.3820 us. Best GFLOPs: 2233.1379
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #69: GFLOPs: 2428.2343. Time: 23.8871 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #70: GFLOPs: 2172.0432. Time: 26.7046 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #71: GFLOPs: 1700.6610. Time: 34.1064 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #72: GFLOPs: 2068.3535. Time: 28.0433 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #73: GFLOPs: 1904.0405. Time: 30.4634 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #74: GFLOPs: 2156.5941. Time: 26.8959 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #75: GFLOPs: 2163.1157. Time: 26.8148 us. Best GFLOPs: 2428.2343
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #76: GFLOPs: 3057.2589. Time: 18.9724 us. Best GFLOPs: 3057.2589
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #77: GFLOPs: 2018.7289. Time: 28.7327 us. Best GFLOPs: 3057.2589
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #78: GFLOPs: 2145.5934. Time: 27.0338 us. Best GFLOPs: 3057.2589
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #79: GFLOPs: 2145.3832. Time: 27.0364 us. Best GFLOPs: 3057.2589
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #80: GFLOPs: 1953.0897. Time: 29.6983 us. Best GFLOPs: 3057.2589
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #81: GFLOPs: 3396.6966. Time: 17.0764 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #82: GFLOPs: 2504.9789. Time: 23.1553 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #83: GFLOPs: 1976.7913. Time: 29.3422 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #84: GFLOPs: 1936.9612. Time: 29.9456 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #85: GFLOPs: 2232.3286. Time: 25.9834 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #86: GFLOPs: 2354.2238. Time: 24.6380 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #87: GFLOPs: 3029.4606. Time: 19.1465 us. Best GFLOPs: 3396.6966
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #88: GFLOPs: 3725.0735. Time: 15.5711 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #89: GFLOPs: 1974.0282. Time: 29.3833 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #90: GFLOPs: 3384.0519. Time: 17.1402 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #91: GFLOPs: 1378.5768. Time: 42.0749 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #92: GFLOPs: 1853.9779. Time: 31.2859 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #93: GFLOPs: 1782.8450. Time: 32.5342 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #94: GFLOPs: 1939.4279. Time: 29.9075 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #95: GFLOPs: 1363.7907. Time: 42.5311 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #96: GFLOPs: 2628.9747. Time: 22.0631 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #97: GFLOPs: 1557.1022. Time: 37.2509 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #98: GFLOPs: 1557.9006. Time: 37.2318 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #99: GFLOPs: 1733.0422. Time: 33.4692 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #100: GFLOPs: 1598.9855. Time: 36.2752 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #101: GFLOPs: 2508.4500. Time: 23.1232 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #102: GFLOPs: 1917.6856. Time: 30.2466 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #103: GFLOPs: 3409.5610. Time: 17.0120 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #104: GFLOPs: 2233.6832. Time: 25.9676 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #105: GFLOPs: 1850.6270. Time: 31.3426 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #106: GFLOPs: 1792.9021. Time: 32.3517 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #107: GFLOPs: 1685.4268. Time: 34.4147 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #108: GFLOPs: 2390.7001. Time: 24.2621 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #109: GFLOPs: 1451.9514. Time: 39.9486 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #110: GFLOPs: 1924.9932. Time: 30.1318 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #111: GFLOPs: 3512.3236. Time: 16.5143 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #112: GFLOPs: 2090.8019. Time: 27.7422 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #113: GFLOPs: 2406.4015. Time: 24.1038 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #114: GFLOPs: 1353.1342. Time: 42.8660 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #115: GFLOPs: 2060.6665. Time: 28.1479 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #116: GFLOPs: 3364.5173. Time: 17.2398 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #117: GFLOPs: 2459.9130. Time: 23.5795 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #118: GFLOPs: 1776.5870. Time: 32.6488 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #119: GFLOPs: 2417.5701. Time: 23.9925 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #120: GFLOPs: 3452.5094. Time: 16.8004 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #121: GFLOPs: 2090.0514. Time: 27.7522 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #122: GFLOPs: 2033.6424. Time: 28.5220 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #123: GFLOPs: 3246.4023. Time: 17.8670 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #124: GFLOPs: 3424.5735. Time: 16.9374 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #125: GFLOPs: 2169.0762. Time: 26.7411 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #126: GFLOPs: 28.1069. Time: 2063.6735 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #127: GFLOPs: 376.2498. Time: 154.1621 us. Best GFLOPs: 3725.0735
2024-04-29 01:55:07 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_conv2d_add_nn_relu_46] Trial #128: GFLOPs: 293.0348. Time: 197.9405 us. Best GFLOPs: 3725.0735
