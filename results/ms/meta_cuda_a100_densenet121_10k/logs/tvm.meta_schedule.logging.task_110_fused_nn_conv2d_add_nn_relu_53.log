2024-04-28 19:55:35 [INFO] [task_scheduler.cc:160] Initializing Task #110: "fused_nn_conv2d_add_nn_relu_53"
2024-04-28 19:55:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:55:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:55:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(6), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 16, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:55:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 16, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 16, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 22:24:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:24:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:24:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-28 22:24:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 969 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-28 22:24:42 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-28 22:24:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-28 22:24:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-28 22:24:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-28 22:24:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-28 22:24:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  1.0000  0.9992  0.9991  0.9988  0.9984  0.9981  0.9977  0.9966  0.9965  0.9964  0.9962  0.9961  0.9954  0.9953  0.9919
[17 : 32]:	0.9915  0.9913  0.9904  0.9898  0.9896  0.9884  0.9879  0.9875  0.9864  0.9861  0.9858  0.9855  0.9837  0.9825  0.9817  0.9810
[33 : 48]:	0.9800  0.9796  0.9790  0.9789  0.9787  0.9784  0.9783  0.9777  0.9754  0.9754  0.9737  0.9709  0.9698  0.9690  0.9682  0.9674
[49 : 64]:	0.9670  0.9662  0.9648  0.9643  0.9641  0.9640  0.9638  0.9635  0.9631  0.9630  0.9630  0.9625  0.9624  0.9620  0.9612  0.9607
2024-04-28 22:24:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:24:52 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #1: GFLOPs: 2316.1945. Time: 66.8957 us. Best GFLOPs: 2316.1945
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #2: GFLOPs: 129.7112. Time: 1194.5266 us. Best GFLOPs: 2316.1945
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #3: GFLOPs: 2866.7867. Time: 54.0478 us. Best GFLOPs: 2866.7867
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #4: GFLOPs: 69.2032. Time: 2238.9647 us. Best GFLOPs: 2866.7867
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #5: GFLOPs: 41.7344. Time: 3712.6069 us. Best GFLOPs: 2866.7867
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #6: GFLOPs: 2140.9250. Time: 72.3722 us. Best GFLOPs: 2866.7867
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #7: GFLOPs: 271.7156. Time: 570.2414 us. Best GFLOPs: 2866.7867
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #8: GFLOPs: 5021.7927. Time: 30.8542 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #9: GFLOPs: 2435.3184. Time: 63.6235 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #10: GFLOPs: 131.3861. Time: 1179.2987 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:121] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(16) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + xx_3_init * T.int64(4) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(48), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1568))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1568) // T.int64(56))
                                        v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(512))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(4)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 4, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[48, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #12: GFLOPs: 2040.2682. Time: 75.9427 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #13: GFLOPs: 2506.4160. Time: 61.8187 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #14: GFLOPs: 38.7074. Time: 4002.9388 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #15: GFLOPs: 1361.1097. Time: 113.8361 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #16: GFLOPs: 1730.2404. Time: 89.5503 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #17: GFLOPs: 1891.1915. Time: 81.9290 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #18: GFLOPs: 2726.2454. Time: 56.8340 us. Best GFLOPs: 5021.7927
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #19: GFLOPs: 5151.9671. Time: 30.0746 us. Best GFLOPs: 5151.9671
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #20: GFLOPs: 628.6292. Time: 246.4784 us. Best GFLOPs: 5151.9671
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #21: GFLOPs: 36.6074. Time: 4232.5760 us. Best GFLOPs: 5151.9671
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #22: GFLOPs: 1095.0014. Time: 141.5007 us. Best GFLOPs: 5151.9671
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #23: GFLOPs: 3646.9898. Time: 42.4853 us. Best GFLOPs: 5151.9671
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #24: GFLOPs: 14.8033. Time: 10466.8159 us. Best GFLOPs: 5151.9671
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #25: GFLOPs: 5709.5068. Time: 27.1378 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #26: GFLOPs: 20.6551. Time: 7501.4583 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #27: GFLOPs: 28.4061. Time: 5454.5786 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #28: GFLOPs: 19.8695. Time: 7798.0752 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #29: GFLOPs: 2943.7463. Time: 52.6348 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #30: GFLOPs: 7.8726. Time: 19681.2795 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #31: GFLOPs: 1732.6572. Time: 89.4254 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #32: GFLOPs: 704.8062. Time: 219.8384 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #33: GFLOPs: 45.1282. Time: 3433.4038 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #34: GFLOPs: 192.1703. Time: 806.2823 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #35: GFLOPs: 4870.8000. Time: 31.8107 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #36: GFLOPs: 2982.5316. Time: 51.9503 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #37: GFLOPs: 317.8196. Time: 487.5202 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #38: GFLOPs: 2470.5057. Time: 62.7173 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #39: GFLOPs: 825.9625. Time: 187.5914 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #40: GFLOPs: 1074.6134. Time: 144.1853 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #41: GFLOPs: 224.1362. Time: 691.2918 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #42: GFLOPs: 2788.3231. Time: 55.5687 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #43: GFLOPs: 2803.4993. Time: 55.2679 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #44: GFLOPs: 1798.1160. Time: 86.1699 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #45: GFLOPs: 459.4669. Time: 337.2245 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #46: GFLOPs: 739.9431. Time: 209.3992 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #47: GFLOPs: 1949.2226. Time: 79.4899 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #48: GFLOPs: 551.4511. Time: 280.9741 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #49: GFLOPs: 4175.7029. Time: 37.1060 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #50: GFLOPs: 711.4573. Time: 217.7833 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #51: GFLOPs: 2.0648. Time: 75040.4253 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #52: GFLOPs: 36.2149. Time: 4278.4427 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #53: GFLOPs: 2168.0978. Time: 71.4652 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #54: GFLOPs: 2432.5376. Time: 63.6962 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #55: GFLOPs: 46.3252. Time: 3344.6912 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #56: GFLOPs: 208.6657. Time: 742.5441 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #57: GFLOPs: 41.5097. Time: 3732.7075 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #58: GFLOPs: 1141.9922. Time: 135.6782 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #59: GFLOPs: 1872.5473. Time: 82.7448 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #60: GFLOPs: 581.8985. Time: 266.2724 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #61: GFLOPs: 116.9823. Time: 1324.5035 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #62: GFLOPs: 98.6720. Time: 1570.2879 us. Best GFLOPs: 5709.5068
2024-04-28 23:07:11 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #63: GFLOPs: 58.2240. Time: 2661.1605 us. Best GFLOPs: 5709.5068
2024-04-29 01:45:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:45:49 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 01:45:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:45:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 864 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:45:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 1293 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:45:54 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-29 01:45:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:46:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:46:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:46:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa0b4628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xbf8a3f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc91fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xabcaf18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb4f5568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xbe108e8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa4154e8)]: 0 failure(s)
2024-04-29 01:46:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2705  1.7144  1.7037  1.6213  1.6069  1.5980  1.5886  1.5722  1.5513  1.5413  1.4367  1.4206  1.3910  1.3904  1.3871  1.3839
[17 : 32]:	1.3835  1.3831  1.3816  1.3768  1.3743  1.3634  1.3596  1.3507  1.3466  1.3464  1.3399  1.3345  1.3345  1.3335  1.3322  1.3248
[33 : 48]:	1.3232  1.3216  1.3208  1.3130  1.3049  1.2930  1.2903  1.2892  1.2833  1.2833  1.2801  1.2766  1.2744  1.2657  1.2632  1.2592
[49 : 64]:	1.2561  1.2555  1.2542  1.2539  1.2538  1.2423  1.2412  1.2390  1.2383  1.2372  1.2327  1.2308  1.2277  1.2272  1.2228  1.2165
2024-04-29 01:46:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:46:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #64: GFLOPs: 3242.5274. Time: 47.7848 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #65: GFLOPs: 3273.3287. Time: 47.3351 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #66: GFLOPs: 1675.6831. Time: 92.4659 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #67: GFLOPs: 3849.8265. Time: 40.2469 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #68: GFLOPs: 3549.1356. Time: 43.6567 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #69: GFLOPs: 2972.0486. Time: 52.1336 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #70: GFLOPs: 3024.2703. Time: 51.2333 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #71: GFLOPs: 5385.7544. Time: 28.7691 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #72: GFLOPs: 5391.9890. Time: 28.7359 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #73: GFLOPs: 5333.6696. Time: 29.0501 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #74: GFLOPs: 5293.9349. Time: 29.2681 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #75: GFLOPs: 5249.2344. Time: 29.5174 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #76: GFLOPs: 3546.9545. Time: 43.6835 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #77: GFLOPs: 3554.1842. Time: 43.5947 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #78: GFLOPs: 4985.0053. Time: 31.0819 us. Best GFLOPs: 5709.5068
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #79: GFLOPs: 7189.0782. Time: 21.5526 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #80: GFLOPs: 3687.0367. Time: 42.0239 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #81: GFLOPs: 3393.3745. Time: 45.6606 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #82: GFLOPs: 2957.4670. Time: 52.3906 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #83: GFLOPs: 1670.8047. Time: 92.7358 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #84: GFLOPs: 3018.1604. Time: 51.3371 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #85: GFLOPs: 3178.2356. Time: 48.7514 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #86: GFLOPs: 6820.3836. Time: 22.7177 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #87: GFLOPs: 7172.4098. Time: 21.6027 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #88: GFLOPs: 4909.4749. Time: 31.5601 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #89: GFLOPs: 3964.2350. Time: 39.0853 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #90: GFLOPs: 6755.0363. Time: 22.9375 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #91: GFLOPs: 3828.5960. Time: 40.4701 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #92: GFLOPs: 3971.7916. Time: 39.0110 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #93: GFLOPs: 3815.4700. Time: 40.6093 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #94: GFLOPs: 2356.0538. Time: 65.7640 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #95: GFLOPs: 4043.9933. Time: 38.3145 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #96: GFLOPs: 7107.1038. Time: 21.8012 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #97: GFLOPs: 3868.9453. Time: 40.0480 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #98: GFLOPs: 7112.8411. Time: 21.7836 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #99: GFLOPs: 3765.6877. Time: 41.1461 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #100: GFLOPs: 3876.5448. Time: 39.9695 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #101: GFLOPs: 3907.7728. Time: 39.6501 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #102: GFLOPs: 5298.4970. Time: 29.2429 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #103: GFLOPs: 6906.0103. Time: 22.4360 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #104: GFLOPs: 3752.3466. Time: 41.2924 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #105: GFLOPs: 3693.0950. Time: 41.9549 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #106: GFLOPs: 3952.8025. Time: 39.1984 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #107: GFLOPs: 4566.8769. Time: 33.9277 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #108: GFLOPs: 5262.3313. Time: 29.4439 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #109: GFLOPs: 3974.3962. Time: 38.9854 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #110: GFLOPs: 5353.1257. Time: 28.9445 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #111: GFLOPs: 4411.5664. Time: 35.1221 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #112: GFLOPs: 3673.8662. Time: 42.1745 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #113: GFLOPs: 3606.5676. Time: 42.9615 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #114: GFLOPs: 3729.4400. Time: 41.5460 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #115: GFLOPs: 3581.7206. Time: 43.2595 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #116: GFLOPs: 3610.1924. Time: 42.9183 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #117: GFLOPs: 3992.4351. Time: 38.8093 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #118: GFLOPs: 5454.1545. Time: 28.4083 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #119: GFLOPs: 5060.8650. Time: 30.6160 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #120: GFLOPs: 3507.5831. Time: 44.1739 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #121: GFLOPs: 7032.8484. Time: 22.0314 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #122: GFLOPs: 4997.9095. Time: 31.0017 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #123: GFLOPs: 4118.0805. Time: 37.6252 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #124: GFLOPs: 3555.0824. Time: 43.5837 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #125: GFLOPs: 542.4992. Time: 285.6105 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #126: GFLOPs: 1915.4536. Time: 80.8913 us. Best GFLOPs: 7189.0782
2024-04-29 01:48:27 [INFO] [task_scheduler.cc:131] [Task #110: fused_nn_conv2d_add_nn_relu_53] Trial #127: GFLOPs: 2746.3368. Time: 56.4182 us. Best GFLOPs: 7189.0782
