2024-04-29 17:13:47 [INFO] [task_scheduler.cc:160] Initializing Task #28: "fused_nn_softmax"
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(4)):
                    for k_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(256) + k_1)
                            T.where(k_0 * T.int64(256) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(2)):
                    for ax1_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(512) + ax1_1)
                            T.where(ax1_0 * T.int64(512) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(2)):
                    for i1_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(512) + i1_1)
                            T.where(i1_0 * T.int64(512) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(2)):
                    for ax1_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(512) + ax1_1)
                            T.where(ax1_0 * T.int64(512) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(2)):
                    for ax1_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(512) + ax1_1)
                            T.where(ax1_0 * T.int64(512) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(2)):
                    for i1_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(512) + i1_1)
                            T.where(i1_0 * T.int64(512) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-29 18:03:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:03:25 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 18:03:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x490d6d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7659318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x76598f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0bec48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x95e2aa8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d87698)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7658618)]: 0 failure(s)
2024-04-29 18:03:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 18:03:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x490d6d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7659318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x76598f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0bec48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x95e2aa8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d87698)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7658618)]: 0 failure(s)
2024-04-29 18:03:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x490d6d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7659318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x76598f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0bec48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x95e2aa8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d87698)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7658618)]: 0 failure(s)
2024-04-29 18:03:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x490d6d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7659318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x76598f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0bec48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x95e2aa8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d87698)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7658618)]: 0 failure(s)
2024-04-29 18:03:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x490d6d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7659318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x76598f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0bec48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x95e2aa8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d87698)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7658618)]: 0 failure(s)
2024-04-29 18:03:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9960  0.9918  0.9852  0.9821  0.9811  0.9752  0.9713  0.9666  0.9663  0.9624  0.9607  0.9582  0.9578  0.9560  0.9514  0.9462
[17 : 32]:	0.9432  0.9402  0.9324  0.9306  0.9253  0.9183  0.9169  0.9162  0.9144  0.9129  0.9059  0.9040  0.9022  0.9020  0.9019  0.8996
[33 : 48]:	0.8969  0.8927  0.8896  0.8832  0.8739  0.8731  0.8724  0.8665  0.8617  0.8587  0.8507  0.8502  0.8490  0.8473  0.8440  0.8377
[49 : 64]:	0.8375  0.8350  0.8308  0.8203  0.8189  0.8185  0.8150  0.8126  0.8116  0.8048  0.7968  0.7968  0.7949  0.7870  0.7780  0.7772
2024-04-29 18:03:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:03:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #1: GFLOPs: 0.2228. Time: 17.9522 us. Best GFLOPs: 0.2228
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #2: GFLOPs: 1.1454. Time: 3.4922 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #3: GFLOPs: 0.1086. Time: 36.8466 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #4: GFLOPs: 0.1058. Time: 37.8179 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #5: GFLOPs: 0.0867. Time: 46.1142 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #6: GFLOPs: 0.1063. Time: 37.6251 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #7: GFLOPs: 0.1081. Time: 37.0085 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #8: GFLOPs: 0.2607. Time: 15.3405 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #9: GFLOPs: 0.1095. Time: 36.5429 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #10: GFLOPs: 0.2029. Time: 19.7175 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #11: GFLOPs: 0.1083. Time: 36.9513 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #12: GFLOPs: 0.1061. Time: 37.7053 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #13: GFLOPs: 0.0967. Time: 41.3784 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #14: GFLOPs: 0.0962. Time: 41.5846 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #15: GFLOPs: 0.0964. Time: 41.4757 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #16: GFLOPs: 0.1090. Time: 36.6818 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #17: GFLOPs: 0.1066. Time: 37.5192 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #18: GFLOPs: 0.1089. Time: 36.7261 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #19: GFLOPs: 0.0871. Time: 45.9272 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #20: GFLOPs: 0.1061. Time: 37.6861 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #21: GFLOPs: 0.1093. Time: 36.6113 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #22: GFLOPs: 0.1570. Time: 25.4738 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #23: GFLOPs: 0.1058. Time: 37.8184 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #24: GFLOPs: 0.1526. Time: 26.2184 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #25: GFLOPs: 0.1095. Time: 36.5183 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #26: GFLOPs: 0.1095. Time: 36.5334 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #27: GFLOPs: 0.1551. Time: 25.7872 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #28: GFLOPs: 0.1353. Time: 29.5718 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #29: GFLOPs: 0.1072. Time: 37.3246 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #30: GFLOPs: 0.0866. Time: 46.1646 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #31: GFLOPs: 0.1095. Time: 36.5165 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #32: GFLOPs: 0.1087. Time: 36.7882 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #33: GFLOPs: 0.1093. Time: 36.6036 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #34: GFLOPs: 0.0861. Time: 46.4576 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #35: GFLOPs: 1.0252. Time: 3.9016 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #36: GFLOPs: 0.3588. Time: 11.1479 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #37: GFLOPs: 0.1064. Time: 37.6112 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #38: GFLOPs: 0.1095. Time: 36.5205 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #39: GFLOPs: 0.1100. Time: 36.3529 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #40: GFLOPs: 0.0871. Time: 45.9269 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #41: GFLOPs: 0.2292. Time: 17.4532 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #42: GFLOPs: 0.0903. Time: 44.2809 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #43: GFLOPs: 0.1555. Time: 25.7308 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #44: GFLOPs: 0.1087. Time: 36.7859 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #45: GFLOPs: 0.0866. Time: 46.1662 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #46: GFLOPs: 0.1081. Time: 37.0027 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #47: GFLOPs: 0.1066. Time: 37.5101 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #48: GFLOPs: 1.1307. Time: 3.5375 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #49: GFLOPs: 0.1870. Time: 21.3900 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #50: GFLOPs: 0.1539. Time: 25.9989 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #51: GFLOPs: 0.1511. Time: 26.4750 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #52: GFLOPs: 0.1561. Time: 25.6209 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #53: GFLOPs: 0.1093. Time: 36.5840 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #54: GFLOPs: 0.1357. Time: 29.4862 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #55: GFLOPs: 0.1083. Time: 36.9501 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #56: GFLOPs: 0.1087. Time: 36.7832 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #57: GFLOPs: 0.1093. Time: 36.6077 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #58: GFLOPs: 0.0870. Time: 45.9885 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #59: GFLOPs: 0.1072. Time: 37.3078 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #60: GFLOPs: 0.1234. Time: 32.4094 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #61: GFLOPs: 0.1559. Time: 25.6586 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #62: GFLOPs: 0.1451. Time: 27.5638 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #63: GFLOPs: 0.1080. Time: 37.0339 us. Best GFLOPs: 1.1454
2024-04-29 18:05:16 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #64: GFLOPs: 0.1095. Time: 36.5167 us. Best GFLOPs: 1.1454
