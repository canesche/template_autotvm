2024-04-29 17:13:46 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3"
2024-04-29 17:13:46 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(9), T.int64(9)))
        input_tile = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(9), T.int64(9)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(512), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(512), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(512), T.int64(16), T.int64(512)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(512), T.int64(16), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 17:13:46 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 17:13:46 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(512), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(524288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(131072))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(131072) // T.int64(65536))
                                    v2 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(65536) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(512), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + co_3 * T.int64(32) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(512), ci_0 * T.int64(512) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(128), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 32])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 512, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-29 17:13:46 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(512), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(524288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(131072))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(131072) // T.int64(65536))
                                    v2 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(65536) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(512), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + co_3 * T.int64(32) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(512), ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(128), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 32])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 512, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 17:13:46 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(512), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(524288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(131072))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(131072) // T.int64(65536))
                                    v2 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(65536) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(512), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + co_3 * T.int64(32) + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(512), ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(128), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 32])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 1, 4, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 512, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 17:56:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:56:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:56:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:56:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:56:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1497 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:56:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:56:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2504 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:56:54 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 17:57:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:57:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:57:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:57:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 17:57:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9977  0.9976  0.9964  0.9957  0.9954  0.9947  0.9944  0.9941  0.9918  0.9907  0.9887  0.9884  0.9880  0.9877  0.9869
[17 : 32]:	0.9860  0.9860  0.9851  0.9842  0.9841  0.9839  0.9838  0.9837  0.9836  0.9818  0.9817  0.9805  0.9801  0.9787  0.9781  0.9770
[33 : 48]:	0.9765  0.9754  0.9753  0.9751  0.9747  0.9735  0.9730  0.9724  0.9711  0.9696  0.9696  0.9689  0.9675  0.9669  0.9664  0.9658
[49 : 64]:	0.9656  0.9651  0.9637  0.9633  0.9625  0.9622  0.9613  0.9608  0.9604  0.9597  0.9588  0.9588  0.9582  0.9578  0.9576  0.9575
2024-04-29 17:57:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:57:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1: GFLOPs: 383.8669. Time: 370.2644 us. Best GFLOPs: 383.8669
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #2: GFLOPs: 560.8300. Time: 253.4319 us. Best GFLOPs: 560.8300
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #3: GFLOPs: 95.8026. Time: 1483.5953 us. Best GFLOPs: 560.8300
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #4: GFLOPs: 561.3246. Time: 253.2086 us. Best GFLOPs: 561.3246
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #5: GFLOPs: 9.8055. Time: 14495.1586 us. Best GFLOPs: 561.3246
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #6: GFLOPs: 20.0796. Time: 7078.4342 us. Best GFLOPs: 561.3246
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #7: GFLOPs: 103.9982. Time: 1366.6802 us. Best GFLOPs: 561.3246
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #8: GFLOPs: 114.6589. Time: 1239.6089 us. Best GFLOPs: 561.3246
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #9: GFLOPs: 2223.7978. Time: 63.9142 us. Best GFLOPs: 2223.7978
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #10: GFLOPs: 751.5215. Time: 189.1259 us. Best GFLOPs: 2223.7978
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #11: GFLOPs: 1024.5317. Time: 138.7290 us. Best GFLOPs: 2223.7978
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #12: GFLOPs: 2261.5216. Time: 62.8481 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #13: GFLOPs: 687.6500. Time: 206.6927 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #14: GFLOPs: 165.5070. Time: 858.7684 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #15: GFLOPs: 627.5936. Time: 226.4718 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #16: GFLOPs: 1040.6507. Time: 136.5801 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #17: GFLOPs: 140.2817. Time: 1013.1911 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #18: GFLOPs: 255.0239. Time: 557.3291 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #19: GFLOPs: 1305.9342. Time: 108.8357 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #20: GFLOPs: 1454.9334. Time: 97.6898 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #21: GFLOPs: 317.7678. Time: 447.2832 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #22: GFLOPs: 750.5146. Time: 189.3797 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #23: GFLOPs: 552.3944. Time: 257.3021 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #24: GFLOPs: 1133.8081. Time: 125.3583 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #25: GFLOPs: 147.0469. Time: 966.5772 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #26: GFLOPs: 894.9592. Time: 158.8142 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #27: GFLOPs: 587.0422. Time: 242.1158 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #28: GFLOPs: 2099.2058. Time: 67.7076 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #29: GFLOPs: 1429.4286. Time: 99.4329 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #30: GFLOPs: 783.5661. Time: 181.3915 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #31: GFLOPs: 243.8114. Time: 582.9596 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #32: GFLOPs: 411.1718. Time: 345.6760 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #33: GFLOPs: 160.5211. Time: 885.4428 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #34: GFLOPs: 1592.4661. Time: 89.2529 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #35: GFLOPs: 519.5660. Time: 273.5595 us. Best GFLOPs: 2261.5216
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #36: GFLOPs: 2315.6863. Time: 61.3780 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #37: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  350: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  349: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  348: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  347: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  346: tvm::transform::Pass::operator()(tvm::IRModule) const
  345: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  344: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  343: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  342: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  341: _ZN3tvm7runtime13PackedFun
  340: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  339: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  338: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  337: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  336: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  335: _ZZN3tvm3tir11StmtFunctorI
  334: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  333: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  332: _ZZN3tvm3tir11StmtFunctorI
  331: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  330: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  329: _ZZN3tvm3tir11StmtFunctorI
  328: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  327: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  326: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  325: _ZZN3tvm3tir11StmtFunctorI
  324: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  323: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  322: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  321: _ZZN3tvm3tir11StmtFunctorI
  320: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  319: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  318: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  317: _ZZN3tvm3tir11StmtFunctorI
  316: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  315: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  314: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  313: _ZZN3tvm3tir11StmtFunctorI
  312: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  311: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  310: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  309: _ZZN3tvm3tir11StmtFunctorI
  308: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  307: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  306: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  305: _ZZN3tvm3tir11StmtFunctorI
  304: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  303: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  302: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  301: _ZZN3tvm3tir11StmtFunctorI
  300: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  299: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  298: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  297: _ZZN3tvm3tir11StmtFunctorI
  296: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  295: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  294: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  293: _ZZN3tvm3tir11StmtFunctorI
  292: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  291: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  290: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  289: _ZZN3tvm3tir11StmtFunctorI
  288: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  287: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  286: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  285: _ZZN3tvm3tir11StmtFunctorI
  284: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  283: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  282: _ZZN3tvm3tir11StmtFunctorI
  281: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  280: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  279: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  278: _ZZN3tvm3tir11StmtFunctorI
  277: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  276: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  275: _ZZN3tvm3tir11StmtFunctorI
  274: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  273: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  272: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  271: _ZZN3tvm3tir11StmtFunctorI
  270: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  269: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  268: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  267: _ZZN3tvm3tir11StmtFunctorI
  266: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  265: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  264: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorI
  262: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  261: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  260: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  259: _ZZN3tvm3tir11StmtFunctorI
  258: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  257: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  256: _ZZN3tvm3tir11StmtFunctorI
  255: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  254: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  253: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  252: _ZZN3tvm3tir11StmtFunctorI
  251: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  250: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  249: _ZZN3tvm3tir11StmtFunctorI
  248: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  247: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  246: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorI
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  241: _ZZN3tvm3tir11StmtFunctorI
  240: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  239: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  238: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  237: _ZZN3tvm3tir11StmtFunctorI
  236: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  235: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorI
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  230: _ZZN3tvm3tir11StmtFunctorI
  229: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  228: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  227: _ZZN3tvm3tir11StmtFunctorI
  226: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  225: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  224: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  223: _ZZN3tvm3tir11StmtFunctorI
  222: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  219: _ZZN3tvm3tir11StmtFunctorI
  218: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  217: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  216: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorI
  214: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  213: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorI
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  209: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorI
  207: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  206: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  205: _ZZN3tvm3tir11StmtFunctorI
  204: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  203: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  202: _ZZN3tvm3tir11StmtFunctorI
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorI
  198: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  197: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorI
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  193: _ZZN3tvm3tir11StmtFunctorI
  192: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorI
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  180: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  179: _ZZN3tvm3tir11StmtFunctorI
  178: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  177: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorI
  175: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  174: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  173: _ZZN3tvm3tir11StmtFunctorI
  172: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  171: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  170: _ZZN3tvm3tir11StmtFunctorI
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorI
  166: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  165: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorIFNS
  163: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  162: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  159: _ZZN3tvm3tir11StmtFunctorI
  158: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  157: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorI
  155: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  154: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  153: _ZZN3tvm3tir11StmtFunctorI
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorI
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorI
  146: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  145: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorI
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  141: _ZZN3tvm3tir11StmtFunctorI
  140: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  139: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorI
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  135: _ZZN3tvm3tir11StmtFunctorI
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorIFNS
  131: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  130: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  129: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  128: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorI
  126: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  125: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  124: _ZZN3tvm3tir11StmtFunctorI
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorI
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorI
  111: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  110: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorI
  108: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  107: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorI
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorI
  102: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  101: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorI
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  97: _ZZN3tvm3tir11StmtFunctorIFNS
  96: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  95: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  94: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  93: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  92: _ZZN3tvm3tir11StmtFunctorI
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorI
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorI
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  74: _ZZN3tvm3tir11StmtFunctorI
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorI
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  68: _ZZN3tvm3tir11StmtFunctorI
  67: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  66: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorI
  64: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  63: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorIFNS
  61: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  60: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  59: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  58: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  57: _ZZN3tvm3tir11StmtFunctorI
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorI
  44: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  43: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorI
  41: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  40: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorI
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  36: _ZZN3tvm3tir11StmtFunctorIFNS
  35: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  34: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorI
  26: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorI
  22: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorI
  18: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorI
  14: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  13: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(512), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(512), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(512), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(512) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(512) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(512) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(512), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(512) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(512), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(512) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(512) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(512) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(512), ci_0_fused * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(512) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(512) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[256, 1, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 4, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #38: GFLOPs: 717.9621. Time: 197.9662 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #39: GFLOPs: 499.9928. Time: 284.2685 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #40: GFLOPs: 968.7408. Time: 146.7185 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #41: GFLOPs: 626.7650. Time: 226.7712 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #42: GFLOPs: 732.4311. Time: 194.0554 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #43: GFLOPs: 1611.6150. Time: 88.1924 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #44: GFLOPs: 68.5790. Time: 2072.5342 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #45: GFLOPs: 96.8673. Time: 1467.2881 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #46: GFLOPs: 625.7512. Time: 227.1385 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #47: GFLOPs: 853.6913. Time: 166.4914 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #48: GFLOPs: 61.3904. Time: 2315.2174 us. Best GFLOPs: 2315.6863
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #49: GFLOPs: 2394.5314. Time: 59.3570 us. Best GFLOPs: 2394.5314
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #50: GFLOPs: 959.5295. Time: 148.1270 us. Best GFLOPs: 2394.5314
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #51: GFLOPs: 552.3944. Time: 257.3021 us. Best GFLOPs: 2394.5314
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #52: GFLOPs: 855.7202. Time: 166.0966 us. Best GFLOPs: 2394.5314
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #53: GFLOPs: 1405.5347. Time: 101.1232 us. Best GFLOPs: 2394.5314
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #54: GFLOPs: 506.3830. Time: 280.6813 us. Best GFLOPs: 2394.5314
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #55: GFLOPs: 3150.3783. Time: 45.1159 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #56: GFLOPs: 1183.3783. Time: 120.1072 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #57: GFLOPs: 940.7338. Time: 151.0865 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #58: GFLOPs: 41.3377. Time: 3438.3189 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #59: GFLOPs: 195.1061. Time: 728.4869 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #60: GFLOPs: 914.7654. Time: 155.3756 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #61: GFLOPs: 170.1809. Time: 835.1830 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #62: GFLOPs: 708.2500. Time: 200.6809 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #63: GFLOPs: 869.9677. Time: 163.3764 us. Best GFLOPs: 3150.3783
2024-04-29 18:05:07 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #64: GFLOPs: 748.0389. Time: 190.0065 us. Best GFLOPs: 3150.3783
2024-04-29 18:27:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:27:57 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 18:28:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 439 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:28:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 877 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:28:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1314 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:28:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1743 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:28:25 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 18:28:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:29:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:29:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:29:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 18:29:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9336  1.9326  1.9238  1.9028  1.8665  1.8579  1.8532  1.8471  1.8447  1.8432  1.8259  1.8118  1.7902  1.7792  1.7680  1.7569
[17 : 32]:	1.7412  1.7412  1.7220  1.7208  1.7184  1.6895  1.6595  1.6562  1.6443  1.6391  1.6379  1.6358  1.6358  1.6327  1.6310  1.6293
[33 : 48]:	1.6293  1.6292  1.6285  1.6285  1.6285  1.6281  1.6151  1.6126  1.6092  1.5853  1.5840  1.5732  1.5722  1.5679  1.5485  1.5476
[49 : 64]:	1.5388  1.5368  1.5359  1.5322  1.5115  1.4944  1.4782  1.4747  1.4677  1.4642  1.4570  1.4507  1.4453  1.4374  1.4318  1.4299
2024-04-29 18:29:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:29:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #65: GFLOPs: 731.9099. Time: 194.1936 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #66: GFLOPs: 759.7204. Time: 187.0849 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #67: GFLOPs: 763.5628. Time: 186.1435 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #68: GFLOPs: 1172.9087. Time: 121.1793 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #69: GFLOPs: 615.4057. Time: 230.9569 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #70: GFLOPs: 825.3855. Time: 172.2010 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #71: GFLOPs: 1017.8835. Time: 139.6351 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #72: GFLOPs: 1172.2967. Time: 121.2425 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #73: GFLOPs: 638.9283. Time: 222.4541 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #74: GFLOPs: 1183.0839. Time: 120.1371 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #75: GFLOPs: 797.1425. Time: 178.3022 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #76: GFLOPs: 752.2441. Time: 188.9443 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #77: GFLOPs: 681.4976. Time: 208.5587 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #78: GFLOPs: 759.7204. Time: 187.0849 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #79: GFLOPs: 681.4846. Time: 208.5626 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #80: GFLOPs: 2051.0523. Time: 69.2972 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #81: GFLOPs: 755.9119. Time: 188.0275 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #82: GFLOPs: 735.4504. Time: 193.2588 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #83: GFLOPs: 1976.9451. Time: 71.8949 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #84: GFLOPs: 758.2280. Time: 187.4532 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #85: GFLOPs: 1969.1822. Time: 72.1783 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #86: GFLOPs: 858.1343. Time: 165.6294 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #87: GFLOPs: 564.4181. Time: 251.8208 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #88: GFLOPs: 969.9892. Time: 146.5297 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #89: GFLOPs: 861.9149. Time: 164.9029 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #90: GFLOPs: 1436.2899. Time: 98.9579 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #91: GFLOPs: 1789.2123. Time: 79.4384 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #92: GFLOPs: 1809.3675. Time: 78.5535 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #93: GFLOPs: 874.5657. Time: 162.5175 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #94: GFLOPs: 268.8114. Time: 528.7433 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #95: GFLOPs: 1779.5687. Time: 79.8689 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #96: GFLOPs: 940.6199. Time: 151.1048 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #97: GFLOPs: 960.5175. Time: 147.9746 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #98: GFLOPs: 963.4157. Time: 147.5295 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #99: GFLOPs: 960.8561. Time: 147.9225 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #100: GFLOPs: 963.8343. Time: 147.4654 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #101: GFLOPs: 940.3717. Time: 151.1447 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #102: GFLOPs: 1573.3493. Time: 90.3374 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #103: GFLOPs: 1171.9416. Time: 121.2793 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #104: GFLOPs: 1894.6326. Time: 75.0184 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #105: GFLOPs: 952.3755. Time: 149.2397 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #106: GFLOPs: 1463.3738. Time: 97.1264 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #107: GFLOPs: 843.8770. Time: 168.4276 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #108: GFLOPs: 984.4294. Time: 144.3803 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #109: GFLOPs: 1034.2160. Time: 137.4299 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #110: GFLOPs: 1242.3104. Time: 114.4096 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #111: GFLOPs: 724.5694. Time: 196.1609 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #112: GFLOPs: 767.7604. Time: 185.1257 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #113: GFLOPs: 742.2845. Time: 191.4795 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #114: GFLOPs: 729.4888. Time: 194.8381 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #115: GFLOPs: 768.8191. Time: 184.8708 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #116: GFLOPs: 1744.8753. Time: 81.4570 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #117: GFLOPs: 3096.8987. Time: 45.8950 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #118: GFLOPs: 1174.4993. Time: 121.0152 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #119: GFLOPs: 1042.7898. Time: 136.3000 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #120: GFLOPs: 1173.3966. Time: 121.1289 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #121: GFLOPs: 457.8184. Time: 310.4555 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #122: GFLOPs: 273.0725. Time: 520.4926 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #123: GFLOPs: 1867.2659. Time: 76.1178 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #124: GFLOPs: 1977.6310. Time: 71.8699 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #125: GFLOPs: 1855.8337. Time: 76.5867 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #126: GFLOPs: 277.5826. Time: 512.0357 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #127: GFLOPs: 362.0036. Time: 392.6266 us. Best GFLOPs: 3150.3783
2024-04-29 18:31:02 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #128: GFLOPs: 728.8915. Time: 194.9978 us. Best GFLOPs: 3150.3783
2024-04-29 19:04:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:04:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 19:04:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:04:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:05:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:05:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:05:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2006 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:05:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:05:23 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-29 19:05:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:06:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:06:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:06:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:06:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0371  2.0220  1.9638  1.9504  1.9105  1.7911  1.7768  1.7727  1.7572  1.7489  1.7457  1.7375  1.7350  1.7148  1.7112  1.7055
[17 : 32]:	1.7031  1.6960  1.6955  1.6902  1.6719  1.6644  1.6595  1.6536  1.6524  1.6515  1.6477  1.6364  1.6282  1.6206  1.6206  1.6121
[33 : 48]:	1.6083  1.5928  1.5925  1.5909  1.5877  1.5812  1.5654  1.5626  1.5597  1.5558  1.5558  1.5368  1.5309  1.5307  1.5274  1.5249
[49 : 64]:	1.5181  1.5114  1.5063  1.4956  1.4914  1.4909  1.4893  1.4800  1.4696  1.4689  1.4595  1.4564  1.4508  1.4425  1.4422  1.4326
2024-04-29 19:06:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:06:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #129: GFLOPs: 161.7512. Time: 878.7088 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #130: GFLOPs: 196.1149. Time: 724.7397 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #131: GFLOPs: 52.8718. Time: 2688.2424 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #132: GFLOPs: 163.9154. Time: 867.1073 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #133: GFLOPs: 152.3689. Time: 932.8166 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #134: GFLOPs: 601.6834. Time: 236.2243 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #135: GFLOPs: 642.0828. Time: 221.3612 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #136: GFLOPs: 1308.2193. Time: 108.6456 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #137: GFLOPs: 1211.0477. Time: 117.3630 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #138: GFLOPs: 348.7418. Time: 407.5572 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #139: GFLOPs: 1051.4279. Time: 135.1802 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #140: GFLOPs: 69.7485. Time: 2037.7804 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #141: GFLOPs: 1124.0710. Time: 126.4442 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #142: GFLOPs: 58.4554. Time: 2431.4637 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #143: GFLOPs: 127.9524. Time: 1110.8211 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #144: GFLOPs: 118.6140. Time: 1198.2751 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #145: GFLOPs: 1122.5690. Time: 126.6134 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #146: GFLOPs: 974.7137. Time: 145.8195 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #147: GFLOPs: 1398.1109. Time: 101.6602 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #148: GFLOPs: 2884.1907. Time: 49.2798 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #149: GFLOPs: 115.3978. Time: 1231.6722 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #150: GFLOPs: 1372.6788. Time: 103.5437 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #151: GFLOPs: 1373.9661. Time: 103.4467 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #152: GFLOPs: 325.0774. Time: 437.2258 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #153: GFLOPs: 648.2685. Time: 219.2490 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #154: GFLOPs: 161.7777. Time: 878.5651 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #155: GFLOPs: 1334.3677. Time: 106.5165 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #156: GFLOPs: 196.1169. Time: 724.7323 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #157: GFLOPs: 1322.7558. Time: 107.4516 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #158: GFLOPs: 1208.3456. Time: 117.6255 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #159: GFLOPs: 1251.2367. Time: 113.5934 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #160: GFLOPs: 642.0813. Time: 221.3617 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #161: GFLOPs: 325.0857. Time: 437.2146 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #162: GFLOPs: 325.0816. Time: 437.2202 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #163: GFLOPs: 350.7813. Time: 405.1875 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #164: GFLOPs: 58.8175. Time: 2416.4937 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #165: GFLOPs: 58.8478. Time: 2415.2503 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #166: GFLOPs: 327.2094. Time: 434.3770 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #167: GFLOPs: 74.1152. Time: 1917.7201 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #168: GFLOPs: 52.1994. Time: 2722.8713 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #169: GFLOPs: 993.1711. Time: 143.1095 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #170: GFLOPs: 994.3439. Time: 142.9407 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #171: GFLOPs: 181.3596. Time: 783.7040 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #172: GFLOPs: 761.3863. Time: 186.6756 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #173: GFLOPs: 680.3406. Time: 208.9133 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #174: GFLOPs: 641.9995. Time: 221.3899 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #175: GFLOPs: 655.4227. Time: 216.8558 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #176: GFLOPs: 152.3689. Time: 932.8166 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #177: GFLOPs: 641.9481. Time: 221.4076 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #178: GFLOPs: 702.1496. Time: 202.4244 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #179: GFLOPs: 75.3095. Time: 1887.3092 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #180: GFLOPs: 680.6838. Time: 208.8080 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #181: GFLOPs: 76.9896. Time: 1846.1230 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #182: GFLOPs: 136.9417. Time: 1037.9031 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #183: GFLOPs: 703.4252. Time: 202.0573 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #184: GFLOPs: 103.4095. Time: 1374.4605 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #185: GFLOPs: 372.2921. Time: 381.7761 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #186: GFLOPs: 69.8813. Time: 2033.9097 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #187: GFLOPs: 1208.4931. Time: 117.6111 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #188: GFLOPs: 60.5184. Time: 2348.5797 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #189: GFLOPs: 1304.8513. Time: 108.9260 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #190: GFLOPs: 212.3227. Time: 669.4161 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #191: GFLOPs: 792.1348. Time: 179.4293 us. Best GFLOPs: 3150.3783
2024-04-29 19:08:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #192: GFLOPs: 1323.1983. Time: 107.4157 us. Best GFLOPs: 3150.3783
2024-04-29 19:45:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:45:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 19:45:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:45:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:45:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:45:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:45:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:45:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:45:43 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-29 19:46:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:46:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:46:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:46:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 19:47:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1957  1.1906  1.1906  1.0958  1.0877  1.0666  1.0661  1.0446  1.0404  1.0402  1.0392  1.0372  1.0365  1.0291  1.0269  1.0219
[17 : 32]:	1.0194  1.0180  1.0135  1.0126  1.0067  1.0066  1.0066  1.0059  1.0034  1.0025  0.9993  0.9979  0.9972  0.9944  0.9934  0.9911
[33 : 48]:	0.9883  0.9847  0.9826  0.9812  0.9803  0.9799  0.9787  0.9751  0.9745  0.9737  0.9714  0.9712  0.9640  0.9576  0.9559  0.9539
[49 : 64]:	0.9499  0.9468  0.9454  0.9438  0.9432  0.9429  0.9414  0.9410  0.9402  0.9396  0.9394  0.9392  0.9388  0.9384  0.9378  0.9369
2024-04-29 19:47:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:47:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #193: GFLOPs: 1880.1381. Time: 75.5967 us. Best GFLOPs: 3150.3783
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #194: GFLOPs: 3993.4241. Time: 35.5916 us. Best GFLOPs: 3993.4241
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #195: GFLOPs: 903.9760. Time: 157.2301 us. Best GFLOPs: 3993.4241
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #196: GFLOPs: 4187.3039. Time: 33.9436 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #197: GFLOPs: 4186.0590. Time: 33.9537 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #198: GFLOPs: 2376.7786. Time: 59.8004 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #199: GFLOPs: 2376.1180. Time: 59.8170 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #200: GFLOPs: 2593.2628. Time: 54.8083 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #201: GFLOPs: 2281.3738. Time: 62.3012 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #202: GFLOPs: 3171.9809. Time: 44.8087 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #203: GFLOPs: 3469.3217. Time: 40.9683 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #204: GFLOPs: 2844.2754. Time: 49.9713 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #205: GFLOPs: 2881.8092. Time: 49.3205 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #206: GFLOPs: 3211.8763. Time: 44.2521 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #207: GFLOPs: 1244.4092. Time: 114.2166 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #208: GFLOPs: 3434.6787. Time: 41.3815 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #209: GFLOPs: 3259.2416. Time: 43.6090 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #210: GFLOPs: 2844.9034. Time: 49.9603 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #211: GFLOPs: 2845.1644. Time: 49.9557 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #212: GFLOPs: 2844.9140. Time: 49.9601 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #213: GFLOPs: 2735.4592. Time: 51.9592 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #214: GFLOPs: 3610.9060. Time: 39.3619 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #215: GFLOPs: 1284.8406. Time: 110.6225 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #216: GFLOPs: 3551.3942. Time: 40.0215 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #217: GFLOPs: 1917.6967. Time: 74.1161 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #218: GFLOPs: 2727.9753. Time: 52.1017 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #219: GFLOPs: 3126.7842. Time: 45.4564 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #220: GFLOPs: 3247.5740. Time: 43.7657 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #221: GFLOPs: 2860.9494. Time: 49.6801 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #222: GFLOPs: 2895.4959. Time: 49.0874 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #223: GFLOPs: 3227.1570. Time: 44.0426 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #224: GFLOPs: 2870.3948. Time: 49.5166 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #225: GFLOPs: 3247.9338. Time: 43.7608 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #226: GFLOPs: 1208.7556. Time: 117.5856 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #227: GFLOPs: 2669.8873. Time: 53.2353 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #228: GFLOPs: 1045.2697. Time: 135.9766 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #229: GFLOPs: 3252.9785. Time: 43.6929 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #230: GFLOPs: 1919.1924. Time: 74.0584 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #231: GFLOPs: 2875.2117. Time: 49.4337 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #232: GFLOPs: 3677.8602. Time: 38.6454 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #233: GFLOPs: 2735.5271. Time: 51.9579 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #234: GFLOPs: 3213.7960. Time: 44.2257 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #235: GFLOPs: 2881.3496. Time: 49.3284 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #236: GFLOPs: 745.4916. Time: 190.6557 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #237: GFLOPs: 3213.7335. Time: 44.2265 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #238: GFLOPs: 2145.6172. Time: 66.2430 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #239: GFLOPs: 2770.5675. Time: 51.3008 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #240: GFLOPs: 747.0157. Time: 190.2667 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #241: GFLOPs: 887.5456. Time: 160.1407 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #242: GFLOPs: 2828.2434. Time: 50.2546 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #243: GFLOPs: 3232.7082. Time: 43.9669 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #244: GFLOPs: 2359.8153. Time: 60.2302 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #245: GFLOPs: 3141.6088. Time: 45.2419 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #246: GFLOPs: 3053.3359. Time: 46.5498 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #247: GFLOPs: 2891.0062. Time: 49.1636 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #248: GFLOPs: 2827.9314. Time: 50.2601 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #249: GFLOPs: 2828.0542. Time: 50.2580 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #250: GFLOPs: 2856.9519. Time: 49.7496 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #251: GFLOPs: 2861.4529. Time: 49.6713 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #252: GFLOPs: 3093.3521. Time: 45.9476 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #253: GFLOPs: 2857.0735. Time: 49.7475 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #254: GFLOPs: 812.4203. Time: 174.9491 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #255: GFLOPs: 27.4704. Time: 5174.0161 us. Best GFLOPs: 4187.3039
2024-04-29 19:48:26 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #256: GFLOPs: 491.4155. Time: 289.2303 us. Best GFLOPs: 4187.3039
2024-04-29 20:41:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:41:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 20:41:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:41:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 807 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:41:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1206 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:41:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1609 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:41:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:41:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:41:41 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-29 20:41:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:42:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:42:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:42:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 20:42:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3377  1.3331  1.2816  1.2223  1.1735  1.1524  1.1176  1.1014  1.1007  1.1004  1.0864  1.0777  1.0718  1.0706  1.0679  1.0532
[17 : 32]:	1.0234  1.0221  1.0203  1.0156  1.0142  1.0099  1.0083  0.9897  0.9892  0.9889  0.9879  0.9858  0.9846  0.9825  0.9819  0.9813
[33 : 48]:	0.9800  0.9771  0.9725  0.9720  0.9715  0.9686  0.9682  0.9679  0.9659  0.9640  0.9632  0.9606  0.9568  0.9491  0.9490  0.9489
[49 : 64]:	0.9464  0.9443  0.9433  0.9430  0.9410  0.9399  0.9386  0.9385  0.9358  0.9357  0.9352  0.9339  0.9293  0.9291  0.9290  0.9267
2024-04-29 20:42:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:42:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #257: GFLOPs: 2364.8886. Time: 60.1010 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #258: GFLOPs: 3172.3908. Time: 44.8029 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #259: GFLOPs: 2382.4481. Time: 59.6581 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #260: GFLOPs: 2376.2134. Time: 59.8146 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #261: GFLOPs: 1686.9231. Time: 84.2553 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #262: GFLOPs: 2382.6182. Time: 59.6538 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #263: GFLOPs: 3021.3399. Time: 47.0428 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #264: GFLOPs: 2794.2394. Time: 50.8662 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #265: GFLOPs: 1477.3837. Time: 96.2054 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #266: GFLOPs: 1988.1937. Time: 71.4881 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #267: GFLOPs: 3879.1220. Time: 36.6403 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #268: GFLOPs: 2745.3092. Time: 51.7728 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #269: GFLOPs: 3800.9921. Time: 37.3935 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #270: GFLOPs: 4114.3672. Time: 34.5453 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #271: GFLOPs: 2044.1698. Time: 69.5305 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #272: GFLOPs: 1993.0456. Time: 71.3141 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #273: GFLOPs: 3617.2158. Time: 39.2933 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #274: GFLOPs: 4086.0370. Time: 34.7849 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #275: GFLOPs: 4094.9056. Time: 34.7095 us. Best GFLOPs: 4187.3039
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #276: GFLOPs: 4580.1024. Time: 31.0325 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #277: GFLOPs: 2986.7042. Time: 47.5883 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #278: GFLOPs: 3581.8034. Time: 39.6817 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #279: GFLOPs: 3617.4187. Time: 39.2911 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #280: GFLOPs: 4140.9917. Time: 34.3232 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #281: GFLOPs: 3334.8913. Time: 42.6197 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #282: GFLOPs: 3150.9386. Time: 45.1079 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #283: GFLOPs: 4149.9027. Time: 34.2495 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #284: GFLOPs: 2766.1915. Time: 51.3819 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #285: GFLOPs: 4068.2284. Time: 34.9371 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #286: GFLOPs: 3119.0022. Time: 45.5698 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #287: GFLOPs: 3913.3408. Time: 36.3199 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #288: GFLOPs: 3988.0378. Time: 35.6396 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #289: GFLOPs: 3987.9088. Time: 35.6408 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #290: GFLOPs: 2962.0189. Time: 47.9849 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #291: GFLOPs: 3863.2720. Time: 36.7906 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #292: GFLOPs: 3068.9468. Time: 46.3130 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #293: GFLOPs: 3209.1884. Time: 44.2891 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #294: GFLOPs: 3667.2780. Time: 38.7569 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #295: GFLOPs: 3003.1787. Time: 47.3273 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #296: GFLOPs: 2883.0059. Time: 49.3000 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #297: GFLOPs: 4030.7188. Time: 35.2623 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #298: GFLOPs: 3422.7947. Time: 41.5252 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #299: GFLOPs: 4371.7949. Time: 32.5112 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #300: GFLOPs: 2739.1282. Time: 51.8896 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #301: GFLOPs: 3118.5406. Time: 45.5765 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #302: GFLOPs: 2418.1825. Time: 58.7765 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #303: GFLOPs: 1865.8715. Time: 76.1747 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #304: GFLOPs: 3542.1952. Time: 40.1255 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #305: GFLOPs: 2807.5325. Time: 50.6253 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #306: GFLOPs: 3325.4633. Time: 42.7406 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #307: GFLOPs: 3542.0091. Time: 40.1276 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #308: GFLOPs: 1049.3023. Time: 135.4540 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #309: GFLOPs: 3989.8459. Time: 35.6235 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #310: GFLOPs: 3642.4443. Time: 39.0211 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #311: GFLOPs: 4109.9048. Time: 34.5829 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #312: GFLOPs: 2760.4445. Time: 51.4889 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #313: GFLOPs: 4373.7774. Time: 32.4964 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #314: GFLOPs: 3965.5106. Time: 35.8421 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #315: GFLOPs: 3170.3246. Time: 44.8321 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #316: GFLOPs: 3628.2781. Time: 39.1735 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #317: GFLOPs: 2346.5608. Time: 60.5704 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #318: GFLOPs: 202.4205. Time: 702.1633 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #319: GFLOPs: 172.7361. Time: 822.8286 us. Best GFLOPs: 4580.1024
2024-04-29 20:44:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #320: GFLOPs: 21.2724. Time: 6681.5317 us. Best GFLOPs: 4580.1024
2024-04-29 21:30:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:30:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:30:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:30:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:30:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:30:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1595 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:30:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1998 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:30:50 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 21:31:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:31:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:31:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 57 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:32:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 21:32:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4593  1.4389  1.4299  1.3824  1.3773  1.3501  1.3475  1.3376  1.3114  1.3075  1.2578  1.2577  1.2526  1.2489  1.2409  1.2371
[17 : 32]:	1.2335  1.2315  1.2298  1.2264  1.2257  1.2220  1.2195  1.2187  1.2174  1.2101  1.2009  1.2009  1.1971  1.1955  1.1948  1.1914
[33 : 48]:	1.1833  1.1807  1.1742  1.1738  1.1711  1.1679  1.1661  1.1598  1.1552  1.1549  1.1546  1.1538  1.1505  1.1494  1.1469  1.1461
[49 : 64]:	1.1443  1.1426  1.1362  1.1359  1.1327  1.1293  1.1187  1.1051  1.0963  1.0956  1.0929  1.0890  1.0863  1.0817  1.0768  1.0757
2024-04-29 21:32:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:32:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #321: GFLOPs: 3504.9639. Time: 40.5517 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #322: GFLOPs: 3424.6209. Time: 41.5031 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #323: GFLOPs: 3464.1577. Time: 41.0294 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #324: GFLOPs: 3787.4670. Time: 37.5270 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #325: GFLOPs: 3798.8873. Time: 37.4142 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #326: GFLOPs: 3505.7044. Time: 40.5431 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #327: GFLOPs: 3560.4912. Time: 39.9193 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #328: GFLOPs: 2337.1040. Time: 60.8155 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #329: GFLOPs: 3415.8552. Time: 41.6096 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #330: GFLOPs: 3470.7679. Time: 40.9512 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #331: GFLOPs: 4127.5810. Time: 34.4348 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #332: GFLOPs: 4127.8257. Time: 34.4327 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #333: GFLOPs: 4059.3155. Time: 35.0138 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #334: GFLOPs: 4442.5557. Time: 31.9933 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #335: GFLOPs: 4117.8984. Time: 34.5157 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #336: GFLOPs: 3871.6990. Time: 36.7106 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #337: GFLOPs: 3774.3663. Time: 37.6572 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #338: GFLOPs: 3829.3143. Time: 37.1169 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #339: GFLOPs: 3415.4085. Time: 41.6150 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #340: GFLOPs: 3701.5515. Time: 38.3980 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #341: GFLOPs: 3848.8632. Time: 36.9284 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #342: GFLOPs: 3908.2270. Time: 36.3674 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #343: GFLOPs: 4425.3323. Time: 32.1179 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #344: GFLOPs: 3031.9797. Time: 46.8777 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #345: GFLOPs: 2120.1782. Time: 67.0379 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #346: GFLOPs: 2848.7482. Time: 49.8929 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #347: GFLOPs: 2344.1258. Time: 60.6334 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #348: GFLOPs: 3991.8612. Time: 35.6055 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #349: GFLOPs: 1667.4482. Time: 85.2394 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #350: GFLOPs: 3722.3104. Time: 38.1839 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #351: GFLOPs: 3798.0665. Time: 37.4223 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #352: GFLOPs: 3760.7485. Time: 37.7936 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #353: GFLOPs: 3908.2779. Time: 36.3670 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #354: GFLOPs: 3662.5867. Time: 38.8065 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #355: GFLOPs: 3811.4525. Time: 37.2908 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #356: GFLOPs: 3723.0160. Time: 38.1766 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #357: GFLOPs: 4246.6796. Time: 33.4690 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #358: GFLOPs: 2837.3866. Time: 50.0927 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #359: GFLOPs: 2954.6258. Time: 48.1050 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #360: GFLOPs: 3393.3072. Time: 41.8860 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #361: GFLOPs: 3612.7378. Time: 39.3420 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #362: GFLOPs: 3593.2326. Time: 39.5555 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #363: GFLOPs: 3687.0100. Time: 38.5495 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #364: GFLOPs: 3786.2612. Time: 37.5389 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #365: GFLOPs: 3142.5493. Time: 45.2283 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #366: GFLOPs: 2986.8765. Time: 47.5856 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #367: GFLOPs: 2803.4161. Time: 50.6997 us. Best GFLOPs: 4580.1024
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #368: GFLOPs: 4592.3211. Time: 30.9500 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #369: GFLOPs: 2436.0152. Time: 58.3462 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #370: GFLOPs: 3019.6977. Time: 47.0684 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #371: GFLOPs: 3612.0054. Time: 39.3499 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #372: GFLOPs: 4048.9715. Time: 35.1033 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #373: GFLOPs: 3515.0486. Time: 40.4354 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #374: GFLOPs: 3922.4992. Time: 36.2351 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #375: GFLOPs: 3408.0782. Time: 41.7045 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #376: GFLOPs: 3558.0686. Time: 39.9465 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #377: GFLOPs: 3484.1050. Time: 40.7945 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #378: GFLOPs: 2778.8903. Time: 51.1471 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #379: GFLOPs: 2631.3411. Time: 54.0151 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #380: GFLOPs: 2741.5523. Time: 51.8437 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #381: GFLOPs: 2627.5763. Time: 54.0925 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #382: GFLOPs: 147.2164. Time: 965.4646 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #383: GFLOPs: 2387.8334. Time: 59.5235 us. Best GFLOPs: 4592.3211
2024-04-29 21:33:32 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #384: GFLOPs: 101.5412. Time: 1399.7495 us. Best GFLOPs: 4592.3211
2024-04-29 22:02:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:02:46 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:02:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 1608 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2014 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2412 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 2806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:03:32 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-04-29 22:03:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:04:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:04:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:04:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a24a08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd1ca288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd1ca868)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7a4b5e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9eeb88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d95408)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd0ba158)]: 0 failure(s)
2024-04-29 22:04:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0358  2.0097  2.0086  2.0086  1.9985  1.9124  1.9034  1.6884  1.6586  1.6581  1.6553  1.6533  1.6463  1.6219  1.5891  1.5444
[17 : 32]:	1.5411  1.5396  1.5350  1.5228  1.5115  1.5058  1.5019  1.5006  1.4951  1.4950  1.4773  1.4672  1.4409  1.3918  1.3833  1.3404
[33 : 48]:	1.3394  1.3391  1.3348  1.3335  1.3257  1.3068  1.3012  1.2854  1.2815  1.2787  1.2728  1.2646  1.2484  1.2439  1.2340  1.2328
[49 : 64]:	1.2279  1.2154  1.2145  1.2123  1.2000  1.1909  1.1894  1.1773  1.1759  1.1743  1.1736  1.1715  1.1707  1.1690  1.1667  1.1622
2024-04-29 22:04:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:04:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #385: GFLOPs: 3876.7659. Time: 36.6626 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #386: GFLOPs: 3847.0800. Time: 36.9455 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #387: GFLOPs: 3866.9758. Time: 36.7554 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #388: GFLOPs: 3864.6679. Time: 36.7773 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #389: GFLOPs: 3855.3771. Time: 36.8660 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #390: GFLOPs: 3865.5141. Time: 36.7693 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #391: GFLOPs: 3759.1746. Time: 37.8094 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #392: GFLOPs: 3991.2053. Time: 35.6114 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #393: GFLOPs: 3672.7608. Time: 38.6990 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #394: GFLOPs: 3385.5910. Time: 41.9815 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #395: GFLOPs: 3800.5703. Time: 37.3976 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #396: GFLOPs: 3788.2639. Time: 37.5191 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #397: GFLOPs: 3775.3045. Time: 37.6479 us. Best GFLOPs: 4592.3211
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #398: GFLOPs: 4836.9743. Time: 29.3845 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #399: GFLOPs: 4275.6119. Time: 33.2425 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #400: GFLOPs: 2776.1662. Time: 51.1973 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #401: GFLOPs: 2679.2256. Time: 53.0497 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #402: GFLOPs: 3871.9246. Time: 36.7084 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #403: GFLOPs: 3564.4353. Time: 39.8751 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #404: GFLOPs: 3994.0837. Time: 35.5857 us. Best GFLOPs: 4836.9743
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #405: GFLOPs: 4867.5168. Time: 29.2002 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #406: GFLOPs: 3508.7635. Time: 40.5078 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #407: GFLOPs: 3561.0509. Time: 39.9130 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #408: GFLOPs: 4459.4587. Time: 31.8721 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #409: GFLOPs: 3968.1672. Time: 35.8181 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #410: GFLOPs: 3687.4175. Time: 38.5452 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #411: GFLOPs: 3561.7970. Time: 39.9046 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #412: GFLOPs: 3554.8015. Time: 39.9832 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #413: GFLOPs: 2756.3229. Time: 51.5659 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #414: GFLOPs: 3103.3993. Time: 45.7989 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #415: GFLOPs: 3842.3176. Time: 36.9913 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #416: GFLOPs: 3528.2436. Time: 40.2841 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #417: GFLOPs: 3965.2998. Time: 35.8440 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #418: GFLOPs: 4370.5813. Time: 32.5202 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #419: GFLOPs: 4446.9936. Time: 31.9614 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #420: GFLOPs: 4413.4341. Time: 32.2045 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #421: GFLOPs: 1914.6997. Time: 74.2321 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #422: GFLOPs: 4343.8605. Time: 32.7203 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #423: GFLOPs: 3318.6283. Time: 42.8286 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #424: GFLOPs: 3234.6211. Time: 43.9409 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #425: GFLOPs: 2582.8919. Time: 55.0283 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #426: GFLOPs: 3313.8434. Time: 42.8904 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #427: GFLOPs: 3720.5255. Time: 38.2022 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #428: GFLOPs: 3239.2584. Time: 43.8780 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #429: GFLOPs: 3252.0237. Time: 43.7058 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #430: GFLOPs: 2914.5015. Time: 48.7672 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #431: GFLOPs: 3660.2629. Time: 38.8312 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #432: GFLOPs: 3599.5769. Time: 39.4858 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #433: GFLOPs: 3655.8672. Time: 38.8778 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #434: GFLOPs: 3094.0344. Time: 45.9375 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #435: GFLOPs: 3125.3960. Time: 45.4765 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #436: GFLOPs: 4276.0846. Time: 33.2389 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #437: GFLOPs: 2831.5510. Time: 50.1959 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #438: GFLOPs: 4138.4842. Time: 34.3440 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #439: GFLOPs: 3113.2680. Time: 45.6537 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #440: GFLOPs: 2304.0698. Time: 61.6875 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #441: GFLOPs: 4621.1704. Time: 30.7568 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #442: GFLOPs: 2859.2187. Time: 49.7102 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #443: GFLOPs: 4139.2345. Time: 34.3378 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #444: GFLOPs: 3240.8841. Time: 43.8560 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #445: GFLOPs: 4307.3729. Time: 32.9974 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #446: GFLOPs: 1236.6127. Time: 114.9367 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #447: GFLOPs: 117.0210. Time: 1214.5874 us. Best GFLOPs: 4867.5168
2024-04-29 22:06:14 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #448: GFLOPs: 1278.9979. Time: 111.1278 us. Best GFLOPs: 4867.5168
