2024-04-29 17:13:41 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_conv2d_add_nn_relu_5"
2024-04-29 17:13:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 17:13:41 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 17:13:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(128)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(16) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 17:13:41 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(128)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(16) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 17:13:41 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(128)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(16) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 17:35:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:35:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:35:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 17:35:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 964 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 17:35:20 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-29 17:35:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 17:35:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 17:35:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 17:35:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 17:35:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9989  0.9982  0.9975  0.9974  0.9973  0.9972  0.9964  0.9931  0.9915  0.9908  0.9900  0.9881  0.9878  0.9878  0.9859
[17 : 32]:	0.9858  0.9847  0.9846  0.9845  0.9827  0.9824  0.9815  0.9814  0.9813  0.9810  0.9807  0.9807  0.9800  0.9775  0.9775  0.9774
[33 : 48]:	0.9758  0.9755  0.9748  0.9732  0.9730  0.9727  0.9726  0.9724  0.9724  0.9714  0.9709  0.9698  0.9680  0.9675  0.9670  0.9668
[49 : 64]:	0.9666  0.9665  0.9661  0.9656  0.9655  0.9648  0.9624  0.9619  0.9619  0.9605  0.9597  0.9588  0.9582  0.9546  0.9546  0.9541
2024-04-29 17:35:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:35:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 4, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(32) + ff_3_init * T.int64(32) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(256), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[256, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 196, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(196), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(98) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(98) // T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(98) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(98) // T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(98) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(98) // T.int64(14) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 2, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[256, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 8, 2, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(512), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(512), rc_0)
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(28))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(512), rc_0)
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(512), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 16, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 2, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[512, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 224, 4], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #6: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(128)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(64) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 4, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 16, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #7: GFLOPs: 16.6911. Time: 6168.6361 us. Best GFLOPs: 16.6911
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #8: GFLOPs: 1887.7636. Time: 54.5413 us. Best GFLOPs: 1887.7636
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #9: GFLOPs: 33.3325. Time: 3088.9116 us. Best GFLOPs: 1887.7636
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #10: GFLOPs: 2479.7459. Time: 41.5208 us. Best GFLOPs: 2479.7459
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #11: GFLOPs: 2085.7508. Time: 49.3641 us. Best GFLOPs: 2479.7459
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #12: GFLOPs: 3987.9223. Time: 25.8182 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #13: GFLOPs: 18.5699. Time: 5544.5287 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #14: GFLOPs: 26.2918. Time: 3916.0910 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #15: GFLOPs: 246.7947. Time: 417.1936 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #16: GFLOPs: 302.0263. Time: 340.9013 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #17: GFLOPs: 1954.0112. Time: 52.6922 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #18: GFLOPs: 33.3295. Time: 3089.1908 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #19: GFLOPs: 1715.8450. Time: 60.0061 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #20: GFLOPs: 9.7963. Time: 10510.2333 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #21: GFLOPs: 555.9449. Time: 185.2003 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #22: GFLOPs: 1406.6658. Time: 73.1952 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #23: GFLOPs: 3226.5968. Time: 31.9101 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #24: GFLOPs: 2504.2997. Time: 41.1138 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #25: GFLOPs: 11.2046. Time: 9189.1895 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #26: GFLOPs: 1834.8508. Time: 56.1142 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #27: GFLOPs: 660.3516. Time: 155.9187 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #28: GFLOPs: 3570.0962. Time: 28.8399 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #29: GFLOPs: 1190.2391. Time: 86.5046 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #30: GFLOPs: 241.8927. Time: 425.6481 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #31: GFLOPs: 20.7991. Time: 4950.2600 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #32: GFLOPs: 555.5706. Time: 185.3250 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #33: GFLOPs: 682.1229. Time: 150.9422 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #34: GFLOPs: 93.1654. Time: 1105.1435 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #35: GFLOPs: 576.2559. Time: 178.6726 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #36: GFLOPs: 646.8305. Time: 159.1779 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #37: GFLOPs: 394.4038. Time: 261.0552 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #38: GFLOPs: 227.5331. Time: 452.5107 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #39: GFLOPs: 1681.8283. Time: 61.2198 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #40: GFLOPs: 1677.6990. Time: 61.3705 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #41: GFLOPs: 462.8592. Time: 222.4459 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #42: GFLOPs: 1111.2707. Time: 92.6517 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #43: GFLOPs: 243.3076. Time: 423.1727 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #44: GFLOPs: 1.1119. Time: 92602.7117 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #45: GFLOPs: 558.5289. Time: 184.3435 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #46: GFLOPs: 106.8719. Time: 963.4068 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #47: GFLOPs: 3104.1002. Time: 33.1694 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #48: GFLOPs: 133.7252. Time: 769.9456 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #49: GFLOPs: 686.7057. Time: 149.9349 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #50: GFLOPs: 2133.3313. Time: 48.2631 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #51: GFLOPs: 3570.2650. Time: 28.8385 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #52: GFLOPs: 1780.9526. Time: 57.8124 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #53: GFLOPs: 514.9804. Time: 199.9322 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #54: GFLOPs: 1543.7009. Time: 66.6976 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #55: GFLOPs: 647.2127. Time: 159.0840 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #56: GFLOPs: 1002.2792. Time: 102.7270 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #57: GFLOPs: 254.5826. Time: 404.4312 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #58: GFLOPs: 483.0399. Time: 213.1525 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #59: GFLOPs: 609.5065. Time: 168.9254 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #60: GFLOPs: 158.5168. Time: 649.5285 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #61: GFLOPs: 15.4530. Time: 6662.8479 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #62: GFLOPs: 2189.7980. Time: 47.0186 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #63: GFLOPs: 574.5196. Time: 179.2126 us. Best GFLOPs: 3987.9223
2024-04-29 18:04:44 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #64: GFLOPs: 695.3735. Time: 148.0660 us. Best GFLOPs: 3987.9223
2024-04-29 18:34:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:34:25 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 18:34:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 422 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 18:34:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 856 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 18:34:29 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 18:34:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 18:34:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 18:34:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 18:34:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 18:34:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9046  1.7106  1.5894  1.5796  1.5738  1.5730  1.5698  1.5632  1.5471  1.5286  1.5238  1.5207  1.5203  1.5192  1.5192  1.5163
[17 : 32]:	1.5117  1.5117  1.5114  1.5109  1.4964  1.4950  1.4926  1.4809  1.4785  1.4777  1.4774  1.4749  1.4741  1.4737  1.4731  1.4726
[33 : 48]:	1.4686  1.4667  1.4652  1.4647  1.4614  1.4584  1.4544  1.4536  1.4531  1.4517  1.4503  1.4495  1.4491  1.4489  1.4473  1.4458
[49 : 64]:	1.4441  1.4429  1.4417  1.4404  1.4392  1.4249  1.4194  1.4192  1.4152  1.4133  1.4133  1.4131  1.4107  1.4025  1.3981  1.3971
2024-04-29 18:34:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:34:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #65: GFLOPs: 4260.2137. Time: 24.1681 us. Best GFLOPs: 4260.2137
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #66: GFLOPs: 3649.7745. Time: 28.2103 us. Best GFLOPs: 4260.2137
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #67: GFLOPs: 1450.7510. Time: 70.9709 us. Best GFLOPs: 4260.2137
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #68: GFLOPs: 4688.5982. Time: 21.9599 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #69: GFLOPs: 1710.8688. Time: 60.1806 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #70: GFLOPs: 1820.0782. Time: 56.5696 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #71: GFLOPs: 1541.8480. Time: 66.7778 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #72: GFLOPs: 1347.7710. Time: 76.3937 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #73: GFLOPs: 1560.9599. Time: 65.9602 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #74: GFLOPs: 1691.4355. Time: 60.8721 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #75: GFLOPs: 1757.4332. Time: 58.5861 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #76: GFLOPs: 1820.2941. Time: 56.5629 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #77: GFLOPs: 1720.9216. Time: 59.8291 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #78: GFLOPs: 1854.8856. Time: 55.5081 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #79: GFLOPs: 1851.1087. Time: 55.6213 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #80: GFLOPs: 1333.2023. Time: 77.2285 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #81: GFLOPs: 1760.0671. Time: 58.4984 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #82: GFLOPs: 1760.1473. Time: 58.4958 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #83: GFLOPs: 1355.2947. Time: 75.9696 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #84: GFLOPs: 1654.8305. Time: 62.2185 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #85: GFLOPs: 1756.6643. Time: 58.6117 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #86: GFLOPs: 1364.6970. Time: 75.4462 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #87: GFLOPs: 1756.6529. Time: 58.6121 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #88: GFLOPs: 1362.8651. Time: 75.5476 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #89: GFLOPs: 1485.2445. Time: 69.3227 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #90: GFLOPs: 1265.3217. Time: 81.3715 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #91: GFLOPs: 1772.0072. Time: 58.1043 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #92: GFLOPs: 1380.7239. Time: 74.5704 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #93: GFLOPs: 1438.5436. Time: 71.5732 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #94: GFLOPs: 1353.6955. Time: 76.0593 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #95: GFLOPs: 1364.6106. Time: 75.4509 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #96: GFLOPs: 3445.9701. Time: 29.8787 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #97: GFLOPs: 1684.8095. Time: 61.1115 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #98: GFLOPs: 1760.4952. Time: 58.4842 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #99: GFLOPs: 1369.2196. Time: 75.1970 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #100: GFLOPs: 1743.4405. Time: 59.0563 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #101: GFLOPs: 1352.9592. Time: 76.1007 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #102: GFLOPs: 1380.7684. Time: 74.5680 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #103: GFLOPs: 1756.2069. Time: 58.6270 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #104: GFLOPs: 1819.6373. Time: 56.5833 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #105: GFLOPs: 1724.3573. Time: 59.7099 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #106: GFLOPs: 1722.0549. Time: 59.7897 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #107: GFLOPs: 1707.1584. Time: 60.3114 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #108: GFLOPs: 1821.8630. Time: 56.5142 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #109: GFLOPs: 1724.3979. Time: 59.7085 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #110: GFLOPs: 3446.0545. Time: 29.8780 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #111: GFLOPs: 1333.9669. Time: 77.1842 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #112: GFLOPs: 3395.8269. Time: 30.3199 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #113: GFLOPs: 1780.5131. Time: 57.8267 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #114: GFLOPs: 3376.6816. Time: 30.4918 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #115: GFLOPs: 3376.1450. Time: 30.4967 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #116: GFLOPs: 1358.9406. Time: 75.7657 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #117: GFLOPs: 1326.9141. Time: 77.5944 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #118: GFLOPs: 1766.0923. Time: 58.2988 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #119: GFLOPs: 1772.2754. Time: 58.0955 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #120: GFLOPs: 3366.1959. Time: 30.5868 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #121: GFLOPs: 1897.4540. Time: 54.2628 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #122: GFLOPs: 1705.7710. Time: 60.3605 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #123: GFLOPs: 1705.7267. Time: 60.3620 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #124: GFLOPs: 3433.8308. Time: 29.9843 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #125: GFLOPs: 1712.0256. Time: 60.1400 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #126: GFLOPs: 90.4976. Time: 1137.7222 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #127: GFLOPs: 1495.2679. Time: 68.8580 us. Best GFLOPs: 4688.5982
2024-04-29 18:36:00 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #128: GFLOPs: 1563.1679. Time: 65.8670 us. Best GFLOPs: 4688.5982
2024-04-29 19:32:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:32:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 19:32:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 389 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:32:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 774 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:32:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 1169 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:32:47 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 19:32:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:32:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:33:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:33:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 19:33:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5012  1.4993  1.4580  1.4238  1.4069  1.4066  1.3966  1.3801  1.3450  1.3399  1.3369  1.3338  1.3312  1.3293  1.3231  1.3169
[17 : 32]:	1.3131  1.3054  1.3011  1.2995  1.2953  1.2916  1.2677  1.2598  1.2569  1.2532  1.2532  1.2529  1.2504  1.2453  1.2427  1.2411
[33 : 48]:	1.2386  1.2354  1.2252  1.2037  1.2037  1.1989  1.1989  1.1987  1.1861  1.1848  1.1808  1.1698  1.1657  1.1618  1.1616  1.1604
[49 : 64]:	1.1597  1.1556  1.1509  1.1472  1.1447  1.1422  1.1351  1.1318  1.1276  1.1266  1.1236  1.1217  1.1011  1.1011  1.0895  1.0895
2024-04-29 19:33:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:33:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #129: GFLOPs: 2785.1709. Time: 36.9676 us. Best GFLOPs: 4688.5982
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #130: GFLOPs: 2810.1987. Time: 36.6384 us. Best GFLOPs: 4688.5982
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #131: GFLOPs: 1379.5565. Time: 74.6335 us. Best GFLOPs: 4688.5982
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #132: GFLOPs: 3552.3626. Time: 28.9839 us. Best GFLOPs: 4688.5982
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #133: GFLOPs: 593.6338. Time: 173.4422 us. Best GFLOPs: 4688.5982
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #134: GFLOPs: 5358.8696. Time: 19.2132 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #135: GFLOPs: 4115.4880. Time: 25.0180 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #136: GFLOPs: 4191.5160. Time: 24.5642 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #137: GFLOPs: 2302.2106. Time: 44.7227 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #138: GFLOPs: 2877.1078. Time: 35.7863 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #139: GFLOPs: 711.4915. Time: 144.7117 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #140: GFLOPs: 2852.6291. Time: 36.0934 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #141: GFLOPs: 2184.8305. Time: 47.1255 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #142: GFLOPs: 2089.7752. Time: 49.2690 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #143: GFLOPs: 3005.6555. Time: 34.2558 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #144: GFLOPs: 2427.2826. Time: 42.4183 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #145: GFLOPs: 1163.2879. Time: 88.5087 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #146: GFLOPs: 3030.1108. Time: 33.9793 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #147: GFLOPs: 3328.5244. Time: 30.9330 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #148: GFLOPs: 1163.2739. Time: 88.5098 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #149: GFLOPs: 3291.7343. Time: 31.2787 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #150: GFLOPs: 3000.3514. Time: 34.3164 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #151: GFLOPs: 2112.7715. Time: 48.7327 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #152: GFLOPs: 3235.6209. Time: 31.8211 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #153: GFLOPs: 3490.7602. Time: 29.4953 us. Best GFLOPs: 5358.8696
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #154: GFLOPs: 5507.1895. Time: 18.6958 us. Best GFLOPs: 5507.1895
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #155: GFLOPs: 5593.3163. Time: 18.4079 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #156: GFLOPs: 2518.0993. Time: 40.8884 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #157: GFLOPs: 2457.6907. Time: 41.8935 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #158: GFLOPs: 2491.4866. Time: 41.3252 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #159: GFLOPs: 2505.2793. Time: 41.0977 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #160: GFLOPs: 1923.7798. Time: 53.5202 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #161: GFLOPs: 5412.7317. Time: 19.0220 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #162: GFLOPs: 2407.8262. Time: 42.7610 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #163: GFLOPs: 2503.8431. Time: 41.1212 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #164: GFLOPs: 659.0611. Time: 156.2240 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #165: GFLOPs: 591.9687. Time: 173.9301 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #166: GFLOPs: 1119.9653. Time: 91.9324 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #167: GFLOPs: 1118.8231. Time: 92.0263 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #168: GFLOPs: 1118.8676. Time: 92.0226 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #169: GFLOPs: 1111.6404. Time: 92.6209 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #170: GFLOPs: 4024.8980. Time: 25.5811 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #171: GFLOPs: 1118.6168. Time: 92.0433 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #172: GFLOPs: 3431.8291. Time: 30.0018 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #173: GFLOPs: 1527.4573. Time: 67.4069 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #174: GFLOPs: 716.8511. Time: 143.6298 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #175: GFLOPs: 2266.6581. Time: 45.4242 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #176: GFLOPs: 1195.9008. Time: 86.0951 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #177: GFLOPs: 1113.5757. Time: 92.4600 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #178: GFLOPs: 3649.7178. Time: 28.2107 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #179: GFLOPs: 1174.8790. Time: 87.6355 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #180: GFLOPs: 1092.6070. Time: 94.2344 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #181: GFLOPs: 2225.3940. Time: 46.2665 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #182: GFLOPs: 1179.9230. Time: 87.2609 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #183: GFLOPs: 4988.9143. Time: 20.6380 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #184: GFLOPs: 4877.7646. Time: 21.1083 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #185: GFLOPs: 1526.2195. Time: 67.4616 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #186: GFLOPs: 4162.0015. Time: 24.7384 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #187: GFLOPs: 388.7939. Time: 264.8219 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #188: GFLOPs: 388.8039. Time: 264.8152 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #189: GFLOPs: 2819.3311. Time: 36.5197 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #190: GFLOPs: 1062.9369. Time: 96.8648 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #191: GFLOPs: 1899.9253. Time: 54.1922 us. Best GFLOPs: 5593.3163
2024-04-29 19:34:30 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #192: GFLOPs: 65.3964. Time: 1574.4160 us. Best GFLOPs: 5593.3163
2024-04-29 20:50:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:50:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 20:50:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:50:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 788 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:50:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 1176 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:50:50 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 20:50:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:51:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:51:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:51:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 20:51:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2460  1.2296  1.1599  1.1505  1.1406  1.1277  1.1066  1.0989  1.0977  1.0972  1.0892  1.0773  1.0769  1.0648  1.0554  1.0545
[17 : 32]:	1.0514  1.0422  1.0403  1.0342  1.0312  1.0287  1.0168  1.0108  1.0078  1.0072  1.0061  1.0028  0.9990  0.9990  0.9966  0.9951
[33 : 48]:	0.9892  0.9886  0.9881  0.9841  0.9831  0.9796  0.9779  0.9779  0.9758  0.9738  0.9714  0.9700  0.9695  0.9694  0.9692  0.9687
[49 : 64]:	0.9684  0.9634  0.9607  0.9550  0.9543  0.9494  0.9494  0.9482  0.9470  0.9452  0.9430  0.9423  0.9373  0.9360  0.9337  0.9326
2024-04-29 20:51:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:51:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #193: GFLOPs: 720.5380. Time: 142.8948 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #194: GFLOPs: 734.9416. Time: 140.0943 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #195: GFLOPs: 511.1582. Time: 201.4272 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #196: GFLOPs: 2513.9155. Time: 40.9565 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #197: GFLOPs: 2004.6008. Time: 51.3624 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #198: GFLOPs: 2689.6772. Time: 38.2801 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #199: GFLOPs: 3292.2837. Time: 31.2735 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #200: GFLOPs: 3284.5955. Time: 31.3467 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #201: GFLOPs: 3291.7818. Time: 31.2782 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #202: GFLOPs: 3454.6628. Time: 29.8035 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #203: GFLOPs: 3571.4895. Time: 28.8286 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #204: GFLOPs: 3267.6411. Time: 31.5093 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #205: GFLOPs: 3518.9308. Time: 29.2592 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #206: GFLOPs: 1238.7641. Time: 83.1160 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #207: GFLOPs: 3636.4607. Time: 28.3136 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #208: GFLOPs: 673.7666. Time: 152.8143 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #209: GFLOPs: 2046.8516. Time: 50.3022 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #210: GFLOPs: 3323.3778. Time: 30.9809 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #211: GFLOPs: 3290.7942. Time: 31.2876 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #212: GFLOPs: 2054.4508. Time: 50.1161 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #213: GFLOPs: 3516.3276. Time: 29.2809 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #214: GFLOPs: 3656.2780. Time: 28.1601 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #215: GFLOPs: 5413.5062. Time: 19.0193 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #216: GFLOPs: 2039.8123. Time: 50.4758 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #217: GFLOPs: 2124.3045. Time: 48.4682 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #218: GFLOPs: 2124.1752. Time: 48.4711 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #219: GFLOPs: 3853.1970. Time: 26.7210 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #220: GFLOPs: 5484.1080. Time: 18.7745 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #221: GFLOPs: 5552.6009. Time: 18.5429 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #222: GFLOPs: 5553.2350. Time: 18.5408 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #223: GFLOPs: 2182.4628. Time: 47.1766 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #224: GFLOPs: 3621.2256. Time: 28.4327 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #225: GFLOPs: 3292.2150. Time: 31.2741 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #226: GFLOPs: 3583.4249. Time: 28.7326 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #227: GFLOPs: 5479.1515. Time: 18.7914 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #228: GFLOPs: 3439.9406. Time: 29.9311 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #229: GFLOPs: 3398.8930. Time: 30.2926 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #230: GFLOPs: 5455.1420. Time: 18.8741 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #231: GFLOPs: 2889.8599. Time: 35.6284 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #232: GFLOPs: 2882.6541. Time: 35.7175 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #233: GFLOPs: 5333.0611. Time: 19.3062 us. Best GFLOPs: 5593.3163
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #234: GFLOPs: 5631.7795. Time: 18.2822 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #235: GFLOPs: 3324.2474. Time: 30.9728 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #236: GFLOPs: 1570.2470. Time: 65.5700 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #237: GFLOPs: 3589.1949. Time: 28.6864 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #238: GFLOPs: 3421.0428. Time: 30.0964 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #239: GFLOPs: 5327.2871. Time: 19.3271 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #240: GFLOPs: 3702.4062. Time: 27.8093 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #241: GFLOPs: 3610.5324. Time: 28.5169 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #242: GFLOPs: 5057.4088. Time: 20.3585 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #243: GFLOPs: 3380.9396. Time: 30.4534 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #244: GFLOPs: 5390.7649. Time: 19.0995 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #245: GFLOPs: 2779.1859. Time: 37.0472 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #246: GFLOPs: 3420.7604. Time: 30.0989 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #247: GFLOPs: 528.9705. Time: 194.6444 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #248: GFLOPs: 3062.4127. Time: 33.6209 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #249: GFLOPs: 3501.0330. Time: 29.4088 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #250: GFLOPs: 1997.4379. Time: 51.5466 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #251: GFLOPs: 3588.5378. Time: 28.6917 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #252: GFLOPs: 2045.3797. Time: 50.3384 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #253: GFLOPs: 5471.1810. Time: 18.8188 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #254: GFLOPs: 7.6356. Time: 13484.4160 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #255: GFLOPs: 282.2387. Time: 364.8017 us. Best GFLOPs: 5631.7795
2024-04-29 20:52:32 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #256: GFLOPs: 726.6783. Time: 141.6874 us. Best GFLOPs: 5631.7795
2024-04-29 21:10:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:10:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:10:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 782 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 1172 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:02 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 21:11:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 21:11:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1574  1.1024  1.0741  1.0461  1.0410  1.0309  1.0270  1.0243  1.0237  1.0229  1.0219  1.0206  1.0190  1.0169  1.0145  1.0144
[17 : 32]:	1.0092  1.0001  0.9957  0.9956  0.9953  0.9949  0.9942  0.9854  0.9814  0.9812  0.9809  0.9795  0.9777  0.9777  0.9772  0.9771
[33 : 48]:	0.9749  0.9740  0.9735  0.9730  0.9728  0.9720  0.9717  0.9713  0.9702  0.9701  0.9700  0.9699  0.9699  0.9684  0.9673  0.9666
[49 : 64]:	0.9666  0.9664  0.9658  0.9657  0.9647  0.9641  0.9637  0.9637  0.9636  0.9618  0.9612  0.9599  0.9598  0.9596  0.9595  0.9575
2024-04-29 21:11:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:11:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #257: GFLOPs: 596.3541. Time: 172.6510 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #258: GFLOPs: 3913.7372. Time: 26.3076 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #259: GFLOPs: 3334.5756. Time: 30.8768 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #260: GFLOPs: 1551.6808. Time: 66.3546 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #261: GFLOPs: 1067.1468. Time: 96.4827 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #262: GFLOPs: 864.0839. Time: 119.1564 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #263: GFLOPs: 3174.2696. Time: 32.4362 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #264: GFLOPs: 2120.8023. Time: 48.5482 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #265: GFLOPs: 3931.3516. Time: 26.1898 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #266: GFLOPs: 4233.0010. Time: 24.3234 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #267: GFLOPs: 2909.1729. Time: 35.3919 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #268: GFLOPs: 1055.7221. Time: 97.5268 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #269: GFLOPs: 2115.6093. Time: 48.6674 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #270: GFLOPs: 2488.3896. Time: 41.3766 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #271: GFLOPs: 2194.7812. Time: 46.9118 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #272: GFLOPs: 924.6859. Time: 111.3472 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #273: GFLOPs: 2194.7584. Time: 46.9123 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #274: GFLOPs: 1130.5292. Time: 91.0734 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #275: GFLOPs: 3349.2057. Time: 30.7420 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #276: GFLOPs: 1377.9533. Time: 74.7204 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #277: GFLOPs: 4136.5831. Time: 24.8904 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #278: GFLOPs: 5495.0844. Time: 18.7370 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #279: GFLOPs: 1686.1294. Time: 61.0636 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #280: GFLOPs: 4186.2811. Time: 24.5949 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #281: GFLOPs: 4186.5075. Time: 24.5936 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #282: GFLOPs: 5524.6452. Time: 18.6367 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #283: GFLOPs: 5411.9574. Time: 19.0248 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #284: GFLOPs: 5412.4491. Time: 19.0230 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #285: GFLOPs: 5587.5840. Time: 18.4268 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #286: GFLOPs: 5554.0267. Time: 18.5381 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #287: GFLOPs: 5554.3645. Time: 18.5370 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #288: GFLOPs: 5469.6449. Time: 18.8241 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #289: GFLOPs: 5478.9402. Time: 18.7922 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #290: GFLOPs: 5479.1540. Time: 18.7914 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #291: GFLOPs: 5502.6375. Time: 18.7112 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #292: GFLOPs: 5479.6370. Time: 18.7898 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #293: GFLOPs: 1699.3264. Time: 60.5894 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #294: GFLOPs: 5507.8731. Time: 18.6935 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #295: GFLOPs: 5479.0486. Time: 18.7918 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #296: GFLOPs: 4180.5716. Time: 24.6285 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #297: GFLOPs: 5405.2306. Time: 19.0484 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #298: GFLOPs: 5404.1212. Time: 19.0523 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #299: GFLOPs: 5479.2325. Time: 18.7912 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #300: GFLOPs: 5501.0225. Time: 18.7167 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #301: GFLOPs: 5507.0982. Time: 18.6961 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #302: GFLOPs: 168.5495. Time: 610.8659 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #303: GFLOPs: 1814.0957. Time: 56.7562 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #304: GFLOPs: 5397.3332. Time: 19.0763 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #305: GFLOPs: 5397.2971. Time: 19.0764 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #306: GFLOPs: 5340.4141. Time: 19.2796 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #307: GFLOPs: 5428.4892. Time: 18.9668 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #308: GFLOPs: 5554.3223. Time: 18.5371 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #309: GFLOPs: 5396.7201. Time: 19.0785 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #310: GFLOPs: 164.4419. Time: 626.1248 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #311: GFLOPs: 5517.1538. Time: 18.6620 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #312: GFLOPs: 5497.7044. Time: 18.7280 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #313: GFLOPs: 5488.0506. Time: 18.7610 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #314: GFLOPs: 162.5975. Time: 633.2273 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #315: GFLOPs: 5586.9112. Time: 18.4290 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #316: GFLOPs: 5354.3375. Time: 19.2295 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #317: GFLOPs: 5586.7089. Time: 18.4297 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #318: GFLOPs: 147.1580. Time: 699.6641 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #319: GFLOPs: 11.3446. Time: 9075.7973 us. Best GFLOPs: 5631.7795
2024-04-29 21:12:54 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #320: GFLOPs: 129.8301. Time: 793.0451 us. Best GFLOPs: 5631.7795
2024-04-29 22:11:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:11:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:11:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 22:11:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 768 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 22:11:57 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 22:12:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 22:12:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 40 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 22:12:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 54 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 22:12:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x693e358)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7696cf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93eb448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7212138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x53d6208)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7d6be68)]: 64 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x93eb198)]: 0 failure(s)
2024-04-29 22:12:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2992  1.2573  1.2549  1.2451  1.1010  1.0625  1.0362  1.0307  1.0092  1.0070  0.9937  0.9912  0.9905  0.9900  0.9899  0.9898
[17 : 32]:	0.9896  0.9890  0.9888  0.9888  0.9884  0.9884  0.9878  0.9878  0.9875  0.9873  0.9860  0.9860  0.9855  0.9850  0.9850  0.9848
[33 : 48]:	0.9839  0.9834  0.9831  0.9815  0.9812  0.9812  0.9806  0.9795  0.9792  0.9790  0.9788  0.9786  0.9779  0.9772  0.9762  0.9754
[49 : 64]:	0.9751  0.9748  0.9742  0.9739  0.9739  0.9734  0.9734  0.9729  0.9726  0.9720  0.9716  0.9705  0.9700  0.9697  0.9692  0.9690
2024-04-29 22:12:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:12:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #321: GFLOPs: 4092.1842. Time: 25.1604 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #322: GFLOPs: 3606.6380. Time: 28.5477 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #323: GFLOPs: 3633.0522. Time: 28.3401 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #324: GFLOPs: 2158.6843. Time: 47.6963 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #325: GFLOPs: 1876.2586. Time: 54.8758 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #326: GFLOPs: 3299.4638. Time: 31.2054 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #327: GFLOPs: 2706.2105. Time: 38.0462 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #328: GFLOPs: 3964.0284. Time: 25.9739 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #329: GFLOPs: 3743.8296. Time: 27.5016 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #330: GFLOPs: 4022.3488. Time: 25.5973 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #331: GFLOPs: 4028.3645. Time: 25.5590 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #332: GFLOPs: 5474.8092. Time: 18.8063 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #333: GFLOPs: 5474.2818. Time: 18.8082 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #334: GFLOPs: 5535.7711. Time: 18.5992 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #335: GFLOPs: 5568.9610. Time: 18.4884 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #336: GFLOPs: 5402.0563. Time: 19.0596 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #337: GFLOPs: 5512.8135. Time: 18.6767 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #338: GFLOPs: 5473.4366. Time: 18.8111 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #339: GFLOPs: 5598.7541. Time: 18.3900 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #340: GFLOPs: 5596.4985. Time: 18.3974 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #341: GFLOPs: 5411.6516. Time: 19.0258 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #342: GFLOPs: 5475.1061. Time: 18.8053 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #343: GFLOPs: 5472.2134. Time: 18.8153 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #344: GFLOPs: 5491.3339. Time: 18.7498 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #345: GFLOPs: 5478.0293. Time: 18.7953 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #346: GFLOPs: 5415.8898. Time: 19.0109 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #347: GFLOPs: 5386.9860. Time: 19.1129 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #348: GFLOPs: 5587.5306. Time: 18.4270 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #349: GFLOPs: 5402.7917. Time: 19.0570 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #350: GFLOPs: 5394.9138. Time: 19.0849 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #351: GFLOPs: 5520.8600. Time: 18.6495 us. Best GFLOPs: 5631.7795
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #352: GFLOPs: 5671.9276. Time: 18.1528 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #353: GFLOPs: 5482.3390. Time: 18.7805 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #354: GFLOPs: 5371.0812. Time: 19.1695 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #355: GFLOPs: 5492.2413. Time: 18.7467 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #356: GFLOPs: 5413.0296. Time: 19.0210 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #357: GFLOPs: 5470.8507. Time: 18.8200 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #358: GFLOPs: 5492.8305. Time: 18.7446 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #359: GFLOPs: 5323.5622. Time: 19.3406 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #360: GFLOPs: 5480.9140. Time: 18.7854 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #361: GFLOPs: 5475.3266. Time: 18.8046 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #362: GFLOPs: 5354.9684. Time: 19.2272 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #363: GFLOPs: 5453.8143. Time: 18.8787 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #364: GFLOPs: 3744.6205. Time: 27.4958 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #365: GFLOPs: 5429.4940. Time: 18.9633 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #366: GFLOPs: 5476.7766. Time: 18.7996 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #367: GFLOPs: 5408.4888. Time: 19.0370 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #368: GFLOPs: 5379.6784. Time: 19.1389 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #369: GFLOPs: 5481.0568. Time: 18.7849 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #370: GFLOPs: 933.4411. Time: 110.3028 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #371: GFLOPs: 5477.3335. Time: 18.7977 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #372: GFLOPs: 5471.2444. Time: 18.8186 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #373: GFLOPs: 5507.5278. Time: 18.6946 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #374: GFLOPs: 5476.0712. Time: 18.8020 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #375: GFLOPs: 5481.7193. Time: 18.7826 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #376: GFLOPs: 5488.3490. Time: 18.7599 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #377: GFLOPs: 5511.5823. Time: 18.6809 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #378: GFLOPs: 5525.4621. Time: 18.6339 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #379: GFLOPs: 5439.7538. Time: 18.9275 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #380: GFLOPs: 5412.4491. Time: 19.0230 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #381: GFLOPs: 5411.3437. Time: 19.0269 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #382: GFLOPs: 1946.9359. Time: 52.8837 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #383: GFLOPs: 1206.2772. Time: 85.3545 us. Best GFLOPs: 5671.9276
2024-04-29 22:13:50 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_5] Trial #384: GFLOPs: 185.9196. Time: 553.7940 us. Best GFLOPs: 5671.9276
