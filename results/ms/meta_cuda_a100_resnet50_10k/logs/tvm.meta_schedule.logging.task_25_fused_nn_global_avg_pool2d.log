2024-04-29 17:13:47 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_global_avg_pool2d"
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 17:13:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(16)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 18:00:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:00:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 18:00:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a94818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x93afb18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93aef58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x80e8fa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7a2b348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x93eb878)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7d87198)]: 0 failure(s)
2024-04-29 18:00:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 18:00:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a94818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x93afb18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93aef58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x80e8fa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7a2b348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x93eb878)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7d87198)]: 0 failure(s)
2024-04-29 18:00:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a94818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x93afb18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93aef58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x80e8fa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7a2b348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x93eb878)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7d87198)]: 0 failure(s)
2024-04-29 18:00:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a94818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x93afb18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93aef58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x80e8fa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7a2b348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x93eb878)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7d87198)]: 0 failure(s)
2024-04-29 18:00:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7a94818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x93afb18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x93aef58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x80e8fa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7a2b348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x93eb878)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7d87198)]: 0 failure(s)
2024-04-29 18:00:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9981  0.9970  0.9961  0.9924  0.9900  0.9893  0.9829  0.9669  0.9627  0.9602  0.9487  0.9409  0.9384  0.9380  0.9282  0.9268
[17 : 32]:	0.9240  0.9239  0.9235  0.9212  0.9199  0.9143  0.9080  0.9032  0.9014  0.8968  0.8954  0.8923  0.8842  0.8838  0.8774  0.8745
[33 : 48]:	0.8598  0.8575  0.8546  0.8486  0.8458  0.8326  0.8193  0.8188  0.8161  0.8156  0.8153  0.8114  0.8053  0.8007  0.7983  0.7906
[49 : 64]:	0.7877  0.7830  0.7786  0.7701  0.7696  0.7685  0.7650  0.7616  0.7586  0.7538  0.7510  0.7477  0.7461  0.7420  0.7339  0.7215
2024-04-29 18:00:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:00:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_global_avg_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 12.3766. Time: 8.2737 us. Best GFLOPs: 12.3766
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 5.8410. Time: 17.5313 us. Best GFLOPs: 12.3766
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 16.6897. Time: 6.1355 us. Best GFLOPs: 16.6897
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 9.0329. Time: 11.3363 us. Best GFLOPs: 16.6897
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 12.4204. Time: 8.2445 us. Best GFLOPs: 16.6897
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 15.0106. Time: 6.8219 us. Best GFLOPs: 16.6897
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 16.5693. Time: 6.1801 us. Best GFLOPs: 16.6897
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 5.8380. Time: 17.5402 us. Best GFLOPs: 16.6897
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 21.9274. Time: 4.6700 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 16.5830. Time: 6.1750 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 9.0197. Time: 11.3529 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 14.9599. Time: 6.8450 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 15.0067. Time: 6.8236 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 9.0925. Time: 11.2620 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 9.0348. Time: 11.3339 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 9.0147. Time: 11.3592 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 9.0315. Time: 11.3381 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 12.3803. Time: 8.2712 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 5.8320. Time: 17.5583 us. Best GFLOPs: 21.9274
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 23.1922. Time: 4.4153 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 16.6923. Time: 6.1346 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 14.9411. Time: 6.8536 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 5.8316. Time: 17.5595 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 17.8270. Time: 5.7441 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 17.8152. Time: 5.7479 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 16.6853. Time: 6.1372 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 21.9247. Time: 4.6705 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 12.4071. Time: 8.2534 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 23.1880. Time: 4.4161 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 9.0474. Time: 11.3182 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 5.8311. Time: 17.5610 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 17.7691. Time: 5.7628 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 16.2032. Time: 6.3197 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 9.0469. Time: 11.3188 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 16.6789. Time: 6.1395 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 5.7909. Time: 17.6830 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 9.0925. Time: 11.2621 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 9.0923. Time: 11.2623 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 12.4014. Time: 8.2571 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 15.0325. Time: 6.8119 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 17.7555. Time: 5.7672 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 9.0310. Time: 11.3387 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 5.7905. Time: 17.6842 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 19.7757. Time: 5.1781 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 14.9977. Time: 6.8277 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 23.0279. Time: 4.4468 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 16.6987. Time: 6.1322 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 16.2030. Time: 6.3198 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 17.8149. Time: 5.7480 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 16.4171. Time: 6.2374 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 19.7806. Time: 5.1768 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 16.4943. Time: 6.2082 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 5.8219. Time: 17.5889 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 16.4699. Time: 6.2174 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 9.0282. Time: 11.3422 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 12.3877. Time: 8.2663 us. Best GFLOPs: 23.1922
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 23.2862. Time: 4.3974 us. Best GFLOPs: 23.2862
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 17.8065. Time: 5.7507 us. Best GFLOPs: 23.2862
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 15.0414. Time: 6.8079 us. Best GFLOPs: 23.2862
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 15.0544. Time: 6.8020 us. Best GFLOPs: 23.2862
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 23.2244. Time: 4.4092 us. Best GFLOPs: 23.2862
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 23.1806. Time: 4.4175 us. Best GFLOPs: 23.2862
2024-04-29 18:05:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 23.1950. Time: 4.4147 us. Best GFLOPs: 23.2862
