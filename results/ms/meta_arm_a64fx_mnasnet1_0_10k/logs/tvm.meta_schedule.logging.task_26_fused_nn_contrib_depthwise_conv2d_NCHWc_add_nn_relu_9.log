2024-04-29 02:10:32 [INFO] [task_scheduler.cc:160] Initializing Task #26: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9"
2024-04-29 02:10:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4), T.int64(5), T.int64(5)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:10:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:10:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0 in T.grid(T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(36), T.int64(17), T.int64(17), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), ax2)
                        v_i3 = T.axis.spatial(T.int64(18), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(9), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 9, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-29 02:10:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(9)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(17), T.int64(5), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + oco_1 * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), ax2)
                        v_i3 = T.axis.spatial(T.int64(18), ow_0 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for oh_1, ow_1, oci_1 in T.grid(T.int64(7), T.int64(1), T.int64(1)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + oco_1 * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 9, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:10:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(36), T.int64(17), T.int64(5), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), ax2)
                        v_i3 = T.axis.spatial(T.int64(18), ow_0 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for oci_0 in range(T.int64(1)):
                    for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(9), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(36), T.int64(7), T.int64(1), T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(144), oco_0 * T.int64(36) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 9, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:53:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:53:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:53:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 02:53:41 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:53:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 02:53:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 02:54:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 02:54:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 02:54:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9988  0.9984  0.9975  0.9970  0.9969  0.9964  0.9964  0.9951  0.9942  0.9942  0.9935  0.9933  0.9929  0.9920  0.9916
[17 : 32]:	0.9912  0.9909  0.9899  0.9880  0.9862  0.9848  0.9848  0.9844  0.9839  0.9834  0.9831  0.9818  0.9812  0.9806  0.9799  0.9799
[33 : 48]:	0.9797  0.9796  0.9796  0.9792  0.9788  0.9785  0.9780  0.9771  0.9767  0.9760  0.9752  0.9742  0.9740  0.9736  0.9733  0.9731
[49 : 64]:	0.9729  0.9725  0.9708  0.9690  0.9677  0.9670  0.9662  0.9652  0.9636  0.9635  0.9635  0.9627  0.9626  0.9626  0.9624  0.9622
2024-04-29 02:54:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:54:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #1: GFLOPs: 10.7783. Time: 136.1664 us. Best GFLOPs: 10.7783
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #2: GFLOPs: 8.0033. Time: 183.3794 us. Best GFLOPs: 10.7783
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #3: GFLOPs: 6.8236. Time: 215.0837 us. Best GFLOPs: 10.7783
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #4: GFLOPs: 34.1409. Time: 42.9880 us. Best GFLOPs: 34.1409
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #5: GFLOPs: 14.4503. Time: 101.5654 us. Best GFLOPs: 34.1409
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #6: GFLOPs: 7.5730. Time: 193.7998 us. Best GFLOPs: 34.1409
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #7: GFLOPs: 10.2535. Time: 143.1359 us. Best GFLOPs: 34.1409
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #8: GFLOPs: 1.5673. Time: 936.4122 us. Best GFLOPs: 34.1409
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #9: GFLOPs: 13.1751. Time: 111.3954 us. Best GFLOPs: 34.1409
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #10: GFLOPs: 35.4711. Time: 41.3758 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #11: GFLOPs: 7.4476. Time: 197.0632 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #12: GFLOPs: 4.0093. Time: 366.0592 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #13: GFLOPs: 14.4152. Time: 101.8127 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #14: GFLOPs: 5.6884. Time: 258.0054 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(7), T.int64(1)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused * T.int64(24) + oco_2_init * T.int64(3) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0 in range(T.int64(5)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(13), T.int64(17)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused * T.int64(24) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused * T.int64(24) + oco_2 * T.int64(3) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b63)
l82 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b64)
l99 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l99)
l100 = sch.fuse(l98, preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.annotate(block_or_loop=l99, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l99, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b108)
b124 = sch.decompose_reduction(block=b108, loop=l110)
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(17), T.int64(17)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused * T.int64(72) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), ax2)
                        v_i3 = T.axis.spatial(T.int64(18), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(7), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(12), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused * T.int64(72) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused * T.int64(72) + oco_2 * T.int64(12) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(72), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused * T.int64(72) + ax1)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ow_1, ax3_ax4_fused])
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 6, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b63)
l78 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b109)
b128 = sch.decompose_reduction(block=b109, loop=l114)
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #17: GFLOPs: 1.4752. Time: 994.8893 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #18: GFLOPs: 6.2612. Time: 234.4035 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #19: GFLOPs: 8.2460. Time: 177.9823 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #20: GFLOPs: 14.3272. Time: 102.4378 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #21: GFLOPs: 2.5253. Time: 581.1814 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #22: GFLOPs: 0.4637. Time: 3165.3623 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(18), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(17)):
                    for ax3_ax4_fused in T.vectorized(T.int64(20)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(72) + oco_1 * T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), ax2)
                            v_i3 = T.axis.spatial(T.int64(18), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for oci_1 in range(T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(72) + oco_1 * T.int64(4) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(72) + oco_1 * T.int64(4) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(72), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(72) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 18, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l78, l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b65)
l109 = sch.fuse(l107, l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b110)
b131 = sch.decompose_reduction(block=b110, loop=l117)
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #24: GFLOPs: 16.2294. Time: 90.4315 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #25: GFLOPs: 15.9237. Time: 92.1675 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #26: GFLOPs: 1.5257. Time: 961.9458 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #27: GFLOPs: 19.8604. Time: 73.8981 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #28: GFLOPs: 17.5016. Time: 83.8577 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #29: GFLOPs: 26.5742. Time: 55.2283 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #30: GFLOPs: 7.5550. Time: 194.2607 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #31: GFLOPs: 16.9813. Time: 86.4274 us. Best GFLOPs: 35.4711
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #32: GFLOPs: 44.6628. Time: 32.8606 us. Best GFLOPs: 44.6628
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #33: GFLOPs: 17.2634. Time: 85.0152 us. Best GFLOPs: 44.6628
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #34: GFLOPs: 28.4695. Time: 51.5515 us. Best GFLOPs: 44.6628
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #35: GFLOPs: 61.2656. Time: 23.9555 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(84), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(28) * T.int64(48) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) * T.int64(12) + oco_2_init * T.int64(3) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(28) // T.int64(4) + ow_2_init + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(28) * T.int64(48) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) * T.int64(12) + oco_2 * T.int64(3) + oco_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(28) // T.int64(4) + ow_2 + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(16) and T.int64(2) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(441)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(144), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 4, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l88)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93 = sch.get_loops(block=b63)
l94 = sch.fuse(l89, l90, l91, l92, l93, preserve_unit_iters=True)
l95, l96 = sch.split(loop=l94, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b97)
b113 = sch.decompose_reduction(block=b97, loop=l99)
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #37: GFLOPs: 2.9703. Time: 494.1136 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #38: GFLOPs: 12.1009. Time: 121.2844 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #39: GFLOPs: 7.7442. Time: 189.5168 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #40: GFLOPs: 7.3164. Time: 200.5958 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #41: GFLOPs: 15.3144. Time: 95.8348 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #42: GFLOPs: 1.0166. Time: 1443.6578 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #43: GFLOPs: 21.2013. Time: 69.2243 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(72) + oco_1 * T.int64(72) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(13), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(72) + oco_2 * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + kh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), kw_1 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(72) + oco_1 * T.int64(72) + oco_2 * T.int64(12) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(72) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 6, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=18)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b63)
l90 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l90)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b64)
l111 = sch.fuse(l91, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b65)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b119)
b140 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #45: GFLOPs: 4.2205. Time: 347.7388 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #46: GFLOPs: 4.1815. Time: 350.9851 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #47: GFLOPs: 12.1333. Time: 120.9601 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #48: GFLOPs: 9.6460. Time: 152.1513 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #49: GFLOPs: 4.5251. Time: 324.3373 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #50: GFLOPs: 20.2841. Time: 72.3546 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #51: GFLOPs: 27.2100. Time: 53.9378 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #52: GFLOPs: 19.8800. Time: 73.8254 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #53: GFLOPs: 31.7207. Time: 46.2678 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #54: GFLOPs: 16.2949. Time: 90.0680 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #55: GFLOPs: 14.7687. Time: 99.3757 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #56: GFLOPs: 5.0034. Time: 293.3274 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #57: GFLOPs: 13.2641. Time: 110.6479 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #58: GFLOPs: 22.0646. Time: 66.5160 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #59: GFLOPs: 11.9815. Time: 122.4928 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #60: GFLOPs: 8.7585. Time: 167.5691 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #61: GFLOPs: 22.4049. Time: 65.5058 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #62: GFLOPs: 20.5978. Time: 71.2527 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #63: GFLOPs: 14.6775. Time: 99.9927 us. Best GFLOPs: 61.2656
2024-04-29 03:12:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #64: GFLOPs: 22.7445. Time: 64.5277 us. Best GFLOPs: 61.2656
2024-04-29 06:29:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:29:09 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 06:29:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 06:29:15 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 06:29:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 06:29:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 06:29:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 06:30:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4cee7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5004b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e13938)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5d39858)]: 0 failure(s)
2024-04-29 06:30:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0492  1.0492  1.0408  1.0298  1.0298  1.0207  0.9885  0.9885  0.9885  0.9853  0.9835  0.9785  0.9730  0.9650  0.9618  0.9587
[17 : 32]:	0.9570  0.9570  0.9570  0.9570  0.9570  0.9520  0.9295  0.9295  0.9278  0.9225  0.9209  0.9209  0.9135  0.9117  0.9117  0.9117
[33 : 48]:	0.9117  0.9117  0.9117  0.9117  0.9049  0.9043  0.8938  0.8911  0.8768  0.8768  0.8644  0.8604  0.8604  0.8586  0.8483  0.8425
[49 : 64]:	0.8422  0.8410  0.8337  0.8326  0.8279  0.8247  0.8247  0.8222  0.8216  0.8215  0.8215  0.8193  0.8154  0.8137  0.8099  0.8073
2024-04-29 06:30:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:30:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #65: GFLOPs: 77.4621. Time: 18.9467 us. Best GFLOPs: 77.4621
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #66: GFLOPs: 79.6136. Time: 18.4346 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #67: GFLOPs: 77.3855. Time: 18.9654 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #68: GFLOPs: 68.7891. Time: 21.3355 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #69: GFLOPs: 71.2442. Time: 20.6003 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #70: GFLOPs: 73.8872. Time: 19.8634 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #71: GFLOPs: 40.5665. Time: 36.1788 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #72: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(72), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oco_1 * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(16) and T.int64(2) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[72, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b98)
b119 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #73: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(72), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oco_1 * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(16) and T.int64(2) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[72, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b98)
b119 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #74: GFLOPs: 72.1612. Time: 20.3385 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #75: GFLOPs: 75.7216. Time: 19.3822 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #76: GFLOPs: 59.1725. Time: 24.8029 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #77: GFLOPs: 56.8778. Time: 25.8035 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #78: GFLOPs: 32.7717. Time: 44.7840 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #79: GFLOPs: 67.2887. Time: 21.8112 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #80: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(36), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(17), T.int64(17)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), ax2)
                        v_i3 = T.axis.spatial(T.int64(18), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + oco_1 * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[36, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b65)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b115)
b139 = sch.decompose_reduction(block=b115, loop=l125)
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #81: GFLOPs: 71.1534. Time: 20.6265 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #82: GFLOPs: 69.4264. Time: 21.1396 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #83: GFLOPs: 70.4354. Time: 20.8368 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #84: GFLOPs: 71.0669. Time: 20.6516 us. Best GFLOPs: 79.6136
2024-04-29 06:31:40 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #85: GFLOPs: 69.4751. Time: 21.1248 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #86: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(36), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(17), T.int64(17)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(18), ax2)
                        v_i3 = T.axis.spatial(T.int64(18), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + oco_1 * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_fused_fused * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[36, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b65)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b115)
b139 = sch.decompose_reduction(block=b115, loop=l125)
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #87: GFLOPs: 54.3248. Time: 27.0162 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(72), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oco_1 * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(16) and T.int64(2) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(2), v_ow * T.int64(2) + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[72, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b98)
b119 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #89: GFLOPs: 60.8415. Time: 24.1225 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #90: GFLOPs: 58.0746. Time: 25.2718 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #91: GFLOPs: 51.1245. Time: 28.7073 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #92: GFLOPs: 56.5761. Time: 25.9411 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #93: GFLOPs: 68.8539. Time: 21.3154 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #94: GFLOPs: 40.7417. Time: 36.0233 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #95: GFLOPs: 42.7227. Time: 34.3529 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #96: GFLOPs: 39.2296. Time: 37.4118 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #97: GFLOPs: 40.0811. Time: 36.6170 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #98: GFLOPs: 40.9160. Time: 35.8698 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #99: GFLOPs: 40.3031. Time: 36.4153 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #100: GFLOPs: 31.4996. Time: 46.5926 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #101: GFLOPs: 58.1661. Time: 25.2320 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #102: GFLOPs: 79.3324. Time: 18.5000 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #103: GFLOPs: 65.1259. Time: 22.5356 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #104: GFLOPs: 68.0066. Time: 21.5810 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #105: GFLOPs: 43.7942. Time: 33.5124 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #106: GFLOPs: 50.9323. Time: 28.8157 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #107: GFLOPs: 70.7529. Time: 20.7433 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #108: GFLOPs: 68.5093. Time: 21.4226 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #109: GFLOPs: 72.0752. Time: 20.3627 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #110: GFLOPs: 63.7573. Time: 23.0193 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #111: GFLOPs: 68.5026. Time: 21.4247 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #112: GFLOPs: 42.8945. Time: 34.2153 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #113: GFLOPs: 39.8053. Time: 36.8707 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #114: GFLOPs: 40.1102. Time: 36.5904 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #115: GFLOPs: 46.2274. Time: 31.7484 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #116: GFLOPs: 47.3104. Time: 31.0217 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #117: GFLOPs: 47.3848. Time: 30.9730 us. Best GFLOPs: 79.6136
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #118: GFLOPs: 82.1058. Time: 17.8751 us. Best GFLOPs: 82.1058
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #119: GFLOPs: 80.1602. Time: 18.3089 us. Best GFLOPs: 82.1058
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #120: GFLOPs: 53.4526. Time: 27.4570 us. Best GFLOPs: 82.1058
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #121: GFLOPs: 55.8512. Time: 26.2778 us. Best GFLOPs: 82.1058
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #122: GFLOPs: 85.4508. Time: 17.1753 us. Best GFLOPs: 85.4508
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #123: GFLOPs: 82.5534. Time: 17.7782 us. Best GFLOPs: 85.4508
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #124: GFLOPs: 92.1657. Time: 15.9240 us. Best GFLOPs: 92.1657
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #125: GFLOPs: 59.9954. Time: 24.4627 us. Best GFLOPs: 92.1657
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #126: GFLOPs: 20.9781. Time: 69.9610 us. Best GFLOPs: 92.1657
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #127: GFLOPs: 6.3610. Time: 230.7259 us. Best GFLOPs: 92.1657
2024-04-29 06:31:41 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_9] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(144), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(36), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(14) * T.int64(72) + oco_2_init * T.int64(36) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(14) // T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0 in T.grid(T.int64(5), T.int64(5)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(1), T.int64(13)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(14) * T.int64(72) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(36), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(144), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(14) * T.int64(72) + oco_2 * T.int64(36) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(14) // T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(441)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(144), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 36])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b62)
l82 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b63)
l99 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l99)
sch.annotate(block_or_loop=l99, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l99, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l100, l101, l102, l103, l104, preserve_unit_iters=True)
l106, l107 = sch.split(loop=l105, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b108)
b124 = sch.decompose_reduction(block=b108, loop=l110)
