2024-04-29 02:08:51 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu"
2024-04-29 02:08:51 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:08:51 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:08:51 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d"):
                    v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(8), oco_0 * T.int64(8) + oco_1 * T.int64(8) + oco_2 * T.int64(4) + oco_3)
                    v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(16) + oh_1 * T.int64(16) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(113) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(113), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 16, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-29 02:08:51 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)):
                with T.block("PaddedInput"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_0 * T.int64(8) + oco_1 * T.int64(8) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(16) + oh_1 * T.int64(16) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(16), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 16, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:08:51 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)):
                with T.block("PaddedInput"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_0 * T.int64(8) + oco_1 * T.int64(8) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(16) + oh_1 * T.int64(16) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(16), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 16, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:13:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:13:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:13:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 02:13:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:13:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 02:13:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 02:13:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 02:13:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 02:13:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9994  0.9981  0.9963  0.9962  0.9958  0.9950  0.9946  0.9935  0.9934  0.9934  0.9932  0.9930  0.9922  0.9910  0.9908
[17 : 32]:	0.9900  0.9899  0.9895  0.9889  0.9888  0.9886  0.9881  0.9879  0.9878  0.9877  0.9876  0.9873  0.9872  0.9867  0.9859  0.9858
[33 : 48]:	0.9856  0.9849  0.9844  0.9841  0.9841  0.9840  0.9831  0.9828  0.9825  0.9824  0.9823  0.9809  0.9808  0.9803  0.9803  0.9801
[49 : 64]:	0.9799  0.9794  0.9791  0.9784  0.9780  0.9776  0.9771  0.9761  0.9757  0.9743  0.9738  0.9729  0.9725  0.9716  0.9715  0.9710
2024-04-29 02:13:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:13:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oci_1 in range(T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), oco_2_init * T.int64(8) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0 in range(T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(3)):
                        for ax4_fused in T.vectorized(T.int64(2)):
                            with T.block("PaddedInput"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(114), kh_0 + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + ax3)
                                v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(8), oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(8), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(50176))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(50176) // T.int64(448))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(448) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[56, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b62)
l81 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b63)
l99 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l99)
sch.annotate(block_or_loop=l99, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l99, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l100, l101, l102, l103, l104, preserve_unit_iters=True)
l106, l107 = sch.split(loop=l105, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b108)
b125 = sch.decompose_reduction(block=b108, loop=l111)
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #2: GFLOPs: 15.4478. Time: 519.6968 us. Best GFLOPs: 15.4478
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(58), T.int64(18)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(28) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(16) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) * T.int64(2) + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(28) * T.int64(56) + oh_1 * T.int64(56) + oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(16) + ow_1 * T.int64(8) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(4) * T.int64(2) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(28) * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(16) + ow_1 * T.int64(8) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(8), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(50176))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(50176) // T.int64(448))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(448) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 28])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 8, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b62)
l77 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78 = sch.fuse(l76, preserve_unit_iters=True)
sch.vectorize(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102 = sch.get_loops(block=b64)
l103 = sch.fuse(l98, l99, l100, l101, l102, preserve_unit_iters=True)
l104, l105 = sch.split(loop=l103, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b106)
b125 = sch.decompose_reduction(block=b106, loop=l111)
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #4: GFLOPs: 17.8429. Time: 449.9364 us. Best GFLOPs: 17.8429
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #5: GFLOPs: 39.8810. Time: 201.3030 us. Best GFLOPs: 39.8810
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #6: GFLOPs: 35.7706. Time: 224.4344 us. Best GFLOPs: 39.8810
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #7: GFLOPs: 53.0699. Time: 151.2751 us. Best GFLOPs: 53.0699
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #8: GFLOPs: 5.5714. Time: 1440.9601 us. Best GFLOPs: 53.0699
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #9: GFLOPs: 1.9508. Time: 4115.4162 us. Best GFLOPs: 53.0699
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #10: GFLOPs: 59.8502. Time: 134.1376 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #11: GFLOPs: 2.2756. Time: 3527.8930 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #12: GFLOPs: 14.7186. Time: 545.4429 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #13: GFLOPs: 27.1161. Time: 296.0657 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #14: GFLOPs: 25.3697. Time: 316.4473 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #15: GFLOPs: 48.3256. Time: 166.1265 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #16: GFLOPs: 20.7633. Time: 386.6522 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #17: GFLOPs: 5.4276. Time: 1479.1236 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #18: GFLOPs: 18.1964. Time: 441.1944 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #19: GFLOPs: 13.6755. Time: 587.0469 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #20: GFLOPs: 28.8497. Time: 278.2754 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #21: GFLOPs: 10.5894. Time: 758.1300 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #22: GFLOPs: 46.1351. Time: 174.0142 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #23: GFLOPs: 4.2904. Time: 1871.1959 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #24: GFLOPs: 42.7732. Time: 187.6915 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #25: GFLOPs: 1.9067. Time: 4210.5943 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(114), T.int64(4), T.int64(1)):
                with T.block("PaddedInput"):
                    v_i0 = T.axis.spatial(T.int64(1), ax0)
                    v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(224) * T.int64(4) + ax1)
                    v_i2 = T.axis.spatial(T.int64(114), ax2)
                    v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(224) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(224) * T.int64(4) + oco_1 * T.int64(2) + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(112) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(224) // T.int64(4) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(224) * T.int64(4) + oco_1 * T.int64(2) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(112) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(224) // T.int64(4) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(8), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(50176))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(50176) // T.int64(448))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(448) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 112, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[56, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b62)
l75 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b105)
b126 = sch.decompose_reduction(block=b105, loop=l112)
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #27: GFLOPs: 42.1655. Time: 190.3963 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #28: GFLOPs: 11.2564. Time: 713.2099 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #29: GFLOPs: 4.3941. Time: 1827.0160 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #30: GFLOPs: 28.8924. Time: 277.8642 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #31: GFLOPs: 7.0291. Time: 1142.1334 us. Best GFLOPs: 59.8502
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #32: GFLOPs: 84.3803. Time: 95.1425 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #33: GFLOPs: 9.0915. Time: 883.0396 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #34: GFLOPs: 46.5203. Time: 172.5734 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #35: GFLOPs: 28.8625. Time: 278.1516 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #36: GFLOPs: 44.5552. Time: 180.1848 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #37: GFLOPs: 2.6147. Time: 3070.4335 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #38: GFLOPs: 39.3581. Time: 203.9775 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #39: GFLOPs: 25.9210. Time: 309.7163 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #40: GFLOPs: 23.7627. Time: 337.8467 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #41: GFLOPs: 52.1361. Time: 153.9847 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #42: GFLOPs: 31.5644. Time: 254.3426 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #43: GFLOPs: 17.5091. Time: 458.5123 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(114), T.int64(114)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_fused_fused * T.int64(4) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(14), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(8), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        for oci_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_fused_fused * T.int64(4) + oco_1 * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        for oci_3_fused in T.vectorized(T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_fused_fused * T.int64(4) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                                v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(112) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(8) + ow_1 + ow_2 + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(112)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(8), b_0_oco_0_fused_fused * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(8) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 8, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b65)
l109 = sch.fuse(l107, l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b110)
b134 = sch.decompose_reduction(block=b110, loop=l120)
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #45: GFLOPs: 2.0540. Time: 3908.5334 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #46: GFLOPs: 4.0234. Time: 1995.3519 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #47: GFLOPs: 17.9152. Time: 448.1193 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #48: GFLOPs: 26.0687. Time: 307.9622 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #49: GFLOPs: 32.1304. Time: 249.8617 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #50: GFLOPs: 75.3733. Time: 106.5120 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #51: GFLOPs: 35.4373. Time: 226.5456 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #52: GFLOPs: 7.7567. Time: 1034.9945 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #53: GFLOPs: 26.6934. Time: 300.7544 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #54: GFLOPs: 59.9290. Time: 133.9613 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #55: GFLOPs: 20.6774. Time: 388.2577 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #56: GFLOPs: 2.8027. Time: 2864.4533 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #57: GFLOPs: 6.0986. Time: 1316.3947 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #58: GFLOPs: 2.1727. Time: 3694.9638 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #59: GFLOPs: 39.2064. Time: 204.7665 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #60: GFLOPs: 29.7540. Time: 269.8176 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #61: GFLOPs: 12.1066. Time: 663.1207 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #62: GFLOPs: 33.3391. Time: 240.8034 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #63: GFLOPs: 38.8279. Time: 206.7628 us. Best GFLOPs: 84.3803
2024-04-29 03:11:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #64: GFLOPs: 5.5237. Time: 1453.4028 us. Best GFLOPs: 84.3803
2024-04-29 03:55:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:55:30 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 03:55:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 03:55:35 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 03:55:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 03:56:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 03:56:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 03:56:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 03:56:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0227  1.0112  0.9962  0.9700  0.9448  0.9333  0.9319  0.9089  0.8828  0.8828  0.8794  0.8793  0.8750  0.8750  0.8710  0.8666
[17 : 32]:	0.8649  0.8649  0.8578  0.8578  0.8451  0.8415  0.8415  0.8385  0.8322  0.8253  0.8199  0.8115  0.8047  0.8030  0.8000  0.8000
[33 : 48]:	0.7999  0.7999  0.7982  0.7982  0.7974  0.7937  0.7921  0.7919  0.7895  0.7856  0.7823  0.7771  0.7771  0.7765  0.7759  0.7714
[49 : 64]:	0.7690  0.7684  0.7680  0.7679  0.7679  0.7678  0.7671  0.7644  0.7642  0.7637  0.7633  0.7632  0.7618  0.7618  0.7618  0.7618
2024-04-29 03:56:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:56:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #65: GFLOPs: 42.7633. Time: 187.7350 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #66: GFLOPs: 30.3827. Time: 264.2342 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #67: GFLOPs: 47.4150. Time: 169.3170 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #68: GFLOPs: 14.5965. Time: 550.0064 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #69: GFLOPs: 20.7672. Time: 386.5781 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #70: GFLOPs: 32.6453. Time: 245.9205 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #71: GFLOPs: 40.3898. Time: 198.7669 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #72: GFLOPs: 39.6517. Time: 202.4669 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #73: GFLOPs: 25.4280. Time: 315.7213 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #74: GFLOPs: 26.8517. Time: 298.9818 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #75: GFLOPs: 40.6427. Time: 197.5304 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #76: GFLOPs: 42.3776. Time: 189.4433 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #77: GFLOPs: 74.1370. Time: 108.2881 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #78: GFLOPs: 65.8551. Time: 121.9065 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #79: GFLOPs: 47.2202. Time: 170.0153 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #80: GFLOPs: 62.3068. Time: 128.8489 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #81: GFLOPs: 48.1046. Time: 166.8897 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #82: GFLOPs: 74.7963. Time: 107.3336 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #83: GFLOPs: 36.1947. Time: 221.8051 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #84: GFLOPs: 30.1922. Time: 265.9022 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #85: GFLOPs: 68.2702. Time: 117.5940 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #86: GFLOPs: 62.5729. Time: 128.3009 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #87: GFLOPs: 50.4373. Time: 159.1711 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #88: GFLOPs: 29.6506. Time: 270.7589 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #89: GFLOPs: 44.7021. Time: 179.5926 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #90: GFLOPs: 34.4927. Time: 232.7494 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #91: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(912)):
            for i3 in range(T.int64(114)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(8), i0_i1_i2_fused // T.int64(114))
                        v_i2 = T.axis.spatial(T.int64(114), i0_i1_i2_fused % T.int64(114))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(4) + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + oh_1 * T.int64(8) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(4) + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + oh_1 * T.int64(8) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=448)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70 = sch.get_loops(block=b63)
l71 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b65)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l113)
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #92: GFLOPs: 54.6547. Time: 146.8888 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #93: GFLOPs: 28.0247. Time: 286.4678 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #94: GFLOPs: 83.0073. Time: 96.7164 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #95: GFLOPs: 42.0654. Time: 190.8495 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #96: GFLOPs: 46.6640. Time: 172.0417 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #97: GFLOPs: 61.8892. Time: 129.7183 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #98: GFLOPs: 44.1165. Time: 181.9765 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #99: GFLOPs: 52.8802. Time: 151.8178 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #100: GFLOPs: 34.2140. Time: 234.6455 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #101: GFLOPs: 60.5203. Time: 132.6523 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #102: GFLOPs: 61.5365. Time: 130.4618 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #103: GFLOPs: 49.9430. Time: 160.7465 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #104: GFLOPs: 30.5993. Time: 262.3642 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #105: GFLOPs: 83.1780. Time: 96.5178 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #106: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(912)):
            for i3 in range(T.int64(114)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(8), i0_i1_i2_fused // T.int64(114))
                        v_i2 = T.axis.spatial(T.int64(114), i0_i1_i2_fused % T.int64(114))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(2) + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + oh_1 * T.int64(8) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(2) + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + oh_1 * T.int64(8) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70 = sch.get_loops(block=b63)
l71 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b65)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l113)
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #107: GFLOPs: 57.5558. Time: 139.4849 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #108: GFLOPs: 52.1545. Time: 153.9302 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #109: GFLOPs: 80.2725. Time: 100.0113 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #110: GFLOPs: 43.0103. Time: 186.6569 us. Best GFLOPs: 84.3803
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #111: GFLOPs: 94.4721. Time: 84.9792 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #112: GFLOPs: 79.7494. Time: 100.6673 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #113: GFLOPs: 45.7990. Time: 175.2911 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #114: GFLOPs: 46.0911. Time: 174.1803 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #115: GFLOPs: 72.2867. Time: 111.0601 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #116: GFLOPs: 53.3820. Time: 150.3906 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #117: GFLOPs: 36.3183. Time: 221.0500 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #118: GFLOPs: 32.7347. Time: 245.2489 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #119: GFLOPs: 39.4239. Time: 203.6371 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #120: GFLOPs: 60.2367. Time: 133.2769 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #121: GFLOPs: 72.3160. Time: 111.0150 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #122: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(912)):
            for i3 in range(T.int64(114)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(8), i0_i1_i2_fused // T.int64(114))
                        v_i2 = T.axis.spatial(T.int64(114), i0_i1_i2_fused % T.int64(114))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(4) + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + oh_1 * T.int64(16) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(4) + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + oh_1 * T.int64(16) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(56) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(56) // T.int64(8) * T.int64(16) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(8) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 8, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=448)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70 = sch.get_loops(block=b63)
l71 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b65)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b106)
b127 = sch.decompose_reduction(block=b106, loop=l113)
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #123: GFLOPs: 55.7385. Time: 144.0325 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #124: GFLOPs: 43.0693. Time: 186.4011 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #125: GFLOPs: 13.1390. Time: 611.0195 us. Best GFLOPs: 94.4721
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(56), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(8) * T.int64(8) + oh_2_init * T.int64(8) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ow_2_init * T.int64(56) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0 in T.grid(T.int64(3), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(56)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), kh_0 + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(8) * T.int64(8) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), kw_0 + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(56), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(8) * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ow_2 * T.int64(56) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(2) * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(8), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(50176))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(50176) // T.int64(448))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(448) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 8])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 56])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b62)
l82 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b63)
l99 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l99)
sch.annotate(block_or_loop=l99, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l99, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104 = sch.get_loops(block=b64)
l105 = sch.fuse(l100, l101, l102, l103, l104, preserve_unit_iters=True)
l106, l107 = sch.split(loop=l105, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b108)
b124 = sch.decompose_reduction(block=b108, loop=l110)
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(18), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(4) * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_1 in range(T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(4) * T.int64(16) + oh_2_init * T.int64(8) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(4) * T.int64(16) + oh_2 * T.int64(8) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(16), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(4) * T.int64(16) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(4) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 8])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b63)
l80 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b107)
b124 = sch.decompose_reduction(block=b107, loop=l110)
2024-04-29 03:58:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #128: GFLOPs: 22.6288. Time: 354.7770 us. Best GFLOPs: 94.4721
2024-04-29 04:57:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:57:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 04:57:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 04:57:43 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 04:57:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 04:58:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 04:58:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 04:58:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 04:58:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0235  1.0235  1.0206  1.0128  1.0077  1.0027  0.9940  0.9934  0.9905  0.9905  0.9867  0.9833  0.9366  0.9313  0.8941  0.8659
[17 : 32]:	0.8516  0.8332  0.8217  0.8212  0.8212  0.8060  0.8012  0.7985  0.7976  0.7972  0.7960  0.7821  0.7821  0.7753  0.7744  0.7736
[33 : 48]:	0.7705  0.7705  0.7673  0.7638  0.7638  0.7619  0.7619  0.7601  0.7580  0.7579  0.7566  0.7552  0.7531  0.7530  0.7522  0.7442
[49 : 64]:	0.7422  0.7402  0.7396  0.7381  0.7379  0.7358  0.7344  0.7326  0.7317  0.7313  0.7297  0.7266  0.7240  0.7236  0.7236  0.7215
2024-04-29 04:58:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:58:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #129: GFLOPs: 138.3774. Time: 58.0164 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #130: GFLOPs: 93.5923. Time: 85.7780 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #131: GFLOPs: 66.1905. Time: 121.2887 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #132: GFLOPs: 66.9751. Time: 119.8678 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #133: GFLOPs: 54.9217. Time: 146.1746 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #134: GFLOPs: 53.7158. Time: 149.4562 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #135: GFLOPs: 90.1323. Time: 89.0708 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #136: GFLOPs: 56.9794. Time: 140.8958 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #137: GFLOPs: 119.1987. Time: 67.3511 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #138: GFLOPs: 73.6453. Time: 109.0111 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #139: GFLOPs: 74.0722. Time: 108.3830 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #140: GFLOPs: 74.9434. Time: 107.1230 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #141: GFLOPs: 122.5240. Time: 65.5232 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #142: GFLOPs: 68.4312. Time: 117.3172 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #143: GFLOPs: 70.3366. Time: 114.1392 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #144: GFLOPs: 53.3281. Time: 150.5429 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #145: GFLOPs: 117.4533. Time: 68.3519 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #146: GFLOPs: 72.1438. Time: 111.2799 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #147: GFLOPs: 42.2152. Time: 190.1723 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #148: GFLOPs: 38.6136. Time: 207.9103 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #149: GFLOPs: 54.9465. Time: 146.1085 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #150: GFLOPs: 49.0342. Time: 163.7257 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #151: GFLOPs: 65.8903. Time: 121.8413 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #152: GFLOPs: 58.8301. Time: 136.4636 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #153: GFLOPs: 107.8930. Time: 74.4085 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #154: GFLOPs: 47.6663. Time: 168.4241 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #155: GFLOPs: 58.6476. Time: 136.8881 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #156: GFLOPs: 50.0790. Time: 160.3098 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #157: GFLOPs: 77.4957. Time: 103.5949 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #158: GFLOPs: 36.6569. Time: 219.0084 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #159: GFLOPs: 31.5550. Time: 254.4182 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #160: GFLOPs: 40.8813. Time: 196.3775 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #161: GFLOPs: 74.0011. Time: 108.4871 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #162: GFLOPs: 49.2268. Time: 163.0851 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #163: GFLOPs: 50.8837. Time: 157.7748 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #164: GFLOPs: 60.7064. Time: 132.2456 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #165: GFLOPs: 91.1615. Time: 88.0652 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #166: GFLOPs: 48.9610. Time: 163.9706 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #167: GFLOPs: 52.0422. Time: 154.2626 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #168: GFLOPs: 63.0621. Time: 127.3055 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #169: GFLOPs: 85.8368. Time: 93.5282 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #170: GFLOPs: 50.4111. Time: 159.2539 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #171: GFLOPs: 44.9236. Time: 178.7068 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #172: GFLOPs: 54.0502. Time: 148.5316 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #173: GFLOPs: 67.0152. Time: 119.7961 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #174: GFLOPs: 47.9299. Time: 167.4981 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #175: GFLOPs: 49.1468. Time: 163.3507 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #176: GFLOPs: 30.2822. Time: 265.1119 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #177: GFLOPs: 48.7000. Time: 164.8494 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #178: GFLOPs: 49.7246. Time: 161.4524 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #179: GFLOPs: 43.8390. Time: 183.1283 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #180: GFLOPs: 49.4768. Time: 162.2609 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #181: GFLOPs: 41.2999. Time: 194.3869 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #182: GFLOPs: 41.9304. Time: 191.4640 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #183: GFLOPs: 49.9181. Time: 160.8266 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #184: GFLOPs: 48.9283. Time: 164.0800 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #185: GFLOPs: 49.0819. Time: 163.5665 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #186: GFLOPs: 70.9149. Time: 113.2084 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #187: GFLOPs: 46.7143. Time: 171.8567 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #188: GFLOPs: 60.2183. Time: 133.3176 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #189: GFLOPs: 62.8568. Time: 127.7214 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #190: GFLOPs: 5.7247. Time: 1402.3791 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #191: GFLOPs: 32.5838. Time: 246.3851 us. Best GFLOPs: 138.3774
2024-04-29 05:00:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #192: GFLOPs: 5.0872. Time: 1578.1019 us. Best GFLOPs: 138.3774
2024-04-29 07:12:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:12:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:12:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 07:12:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 07:13:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 07:13:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 07:13:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 07:13:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4eb1488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4512e78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x44fd1c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x501c008)]: 0 failure(s)
2024-04-29 07:13:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9453  0.9327  0.8871  0.8871  0.8871  0.8687  0.8426  0.8426  0.8426  0.8426  0.8288  0.8219  0.8143  0.8143  0.8143  0.8143
[17 : 32]:	0.8143  0.8143  0.8143  0.8128  0.8128  0.8056  0.7982  0.7840  0.7840  0.7801  0.7801  0.7709  0.7656  0.7642  0.7609  0.7585
[33 : 48]:	0.7583  0.7575  0.7562  0.7562  0.7562  0.7537  0.7482  0.7411  0.7310  0.7288  0.7272  0.7137  0.7137  0.6996  0.6996  0.6905
[49 : 64]:	0.6869  0.6855  0.6852  0.6852  0.6852  0.6827  0.6826  0.6826  0.6826  0.6825  0.6825  0.6777  0.6777  0.6777  0.6667  0.6667
2024-04-29 07:13:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:13:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #193: GFLOPs: 131.6394. Time: 60.9860 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #194: GFLOPs: 95.5832. Time: 83.9913 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #195: GFLOPs: 70.7157. Time: 113.5272 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #196: GFLOPs: 59.7485. Time: 134.3660 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #197: GFLOPs: 70.7804. Time: 113.4235 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #198: GFLOPs: 91.9603. Time: 87.3003 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #199: GFLOPs: 93.1273. Time: 86.2063 us. Best GFLOPs: 138.3774
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #200: GFLOPs: 138.4514. Time: 57.9854 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #201: GFLOPs: 95.6646. Time: 83.9199 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #202: GFLOPs: 95.1098. Time: 84.4094 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #203: GFLOPs: 93.9136. Time: 85.4845 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #204: GFLOPs: 96.8174. Time: 82.9206 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #205: GFLOPs: 69.7494. Time: 115.1001 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #206: GFLOPs: 81.4222. Time: 98.5992 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #207: GFLOPs: 82.9529. Time: 96.7797 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #208: GFLOPs: 117.9641. Time: 68.0560 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #209: GFLOPs: 53.2006. Time: 150.9037 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #210: GFLOPs: 71.4345. Time: 112.3850 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #211: GFLOPs: 82.9605. Time: 96.7709 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #212: GFLOPs: 131.1706. Time: 61.2039 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #213: GFLOPs: 88.5896. Time: 90.6219 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #214: GFLOPs: 90.8141. Time: 88.4021 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #215: GFLOPs: 95.2873. Time: 84.2521 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #216: GFLOPs: 115.1559. Time: 69.7156 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #217: GFLOPs: 70.6644. Time: 113.6098 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #218: GFLOPs: 82.1050. Time: 97.7792 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #219: GFLOPs: 82.7639. Time: 97.0007 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #220: GFLOPs: 115.3598. Time: 69.5924 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #221: GFLOPs: 40.1607. Time: 199.9008 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #222: GFLOPs: 83.3926. Time: 96.2694 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #223: GFLOPs: 55.0725. Time: 145.7743 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #224: GFLOPs: 117.0162. Time: 68.6072 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #225: GFLOPs: 33.2164. Time: 241.6927 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #226: GFLOPs: 45.7721. Time: 175.3940 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #227: GFLOPs: 54.3116. Time: 147.8168 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #228: GFLOPs: 77.6982. Time: 103.3249 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #229: GFLOPs: 54.1204. Time: 148.3389 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #230: GFLOPs: 83.7337. Time: 95.8773 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #231: GFLOPs: 55.2681. Time: 145.2586 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #232: GFLOPs: 120.2173. Time: 66.7804 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #233: GFLOPs: 60.7773. Time: 132.0913 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #234: GFLOPs: 60.2184. Time: 133.3174 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #235: GFLOPs: 93.5494. Time: 85.8173 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #236: GFLOPs: 93.2853. Time: 86.0603 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #237: GFLOPs: 71.5072. Time: 112.2707 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #238: GFLOPs: 55.6434. Time: 144.2788 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #239: GFLOPs: 55.2205. Time: 145.3836 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #240: GFLOPs: 97.1479. Time: 82.6385 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #241: GFLOPs: 56.2622. Time: 142.6918 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #242: GFLOPs: 72.1585. Time: 111.2573 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #243: GFLOPs: 78.7279. Time: 101.9735 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #244: GFLOPs: 102.3286. Time: 78.4547 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #245: GFLOPs: 78.3719. Time: 102.4368 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #246: GFLOPs: 88.5469. Time: 90.6656 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #247: GFLOPs: 75.8870. Time: 105.7910 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #248: GFLOPs: 102.3372. Time: 78.4481 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #249: GFLOPs: 78.6565. Time: 102.0661 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #250: GFLOPs: 53.0357. Time: 151.3727 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #251: GFLOPs: 52.5740. Time: 152.7020 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #252: GFLOPs: 59.8150. Time: 134.2166 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #253: GFLOPs: 75.6796. Time: 106.0809 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #254: GFLOPs: 6.7576. Time: 1188.0170 us. Best GFLOPs: 138.4514
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #255: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(112), T.int64(112), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(114), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(4) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(2) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(4), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(8), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(4) + oco_2_init * T.int64(4) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(2) * T.int64(56) + ow_1 * T.int64(56) + ow_2_init * T.int64(8) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(4), T.int64(8), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(4) + oco_2 * T.int64(4) + oco_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(2) * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(8) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(56)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(8), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(2) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), oh_1 * T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(2) * T.int64(56) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 7, 4])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 8])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b63)
l78 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b109)
b128 = sch.decompose_reduction(block=b109, loop=l114)
2024-04-29 07:15:48 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu] Trial #256: GFLOPs: 41.2867. Time: 194.4489 us. Best GFLOPs: 138.4514
