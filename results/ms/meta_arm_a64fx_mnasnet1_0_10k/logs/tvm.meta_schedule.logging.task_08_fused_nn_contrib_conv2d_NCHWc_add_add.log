2024-04-29 02:09:16 [INFO] [task_scheduler.cc:160] Initializing Task #8: "fused_nn_contrib_conv2d_NCHWc_add_add"
2024-04-29 02:09:16 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(72), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
2024-04-29 02:09:16 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:09:16 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(1), T.int64(6), T.int64(7), T.int64(2), T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_0 * T.int64(6) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_add_1"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[36, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:09:16 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(1), T.int64(6), T.int64(7), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(36), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_0 * T.int64(6) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                    with T.block("T_add_1"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(6), oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[36, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:09:16 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(6), T.int64(7), T.int64(2), T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_0 * T.int64(6) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(2), T.int64(2)):
                    with T.block("T_add_1"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[36, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:23:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:23:25 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:23:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 02:23:28 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:23:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 02:23:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 02:23:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 02:23:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 02:23:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9997  0.9994  0.9989  0.9987  0.9985  0.9980  0.9974  0.9972  0.9962  0.9958  0.9957  0.9955  0.9954  0.9954  0.9943
[17 : 32]:	0.9943  0.9936  0.9935  0.9934  0.9932  0.9929  0.9924  0.9923  0.9916  0.9915  0.9911  0.9911  0.9911  0.9898  0.9889  0.9888
[33 : 48]:	0.9884  0.9881  0.9877  0.9867  0.9856  0.9846  0.9841  0.9840  0.9838  0.9837  0.9836  0.9829  0.9824  0.9823  0.9812  0.9809
[49 : 64]:	0.9807  0.9807  0.9800  0.9799  0.9793  0.9784  0.9779  0.9775  0.9751  0.9749  0.9739  0.9730  0.9719  0.9713  0.9712  0.9708
2024-04-29 02:23:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:23:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #1: GFLOPs: 93.9449. Time: 116.9680 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #2: GFLOPs: 48.6703. Time: 225.7754 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #3: GFLOPs: 59.5656. Time: 184.4780 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #4: GFLOPs: 25.0147. Time: 439.2839 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #5: GFLOPs: 16.7616. Time: 655.5775 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #6: GFLOPs: 64.7139. Time: 169.8020 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #7: GFLOPs: 6.8996. Time: 1592.6341 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #8: GFLOPs: 12.1331. Time: 905.6675 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #9: GFLOPs: 60.4054. Time: 181.9133 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #10: GFLOPs: 10.6882. Time: 1028.1002 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #11: GFLOPs: 35.1685. Time: 312.4545 us. Best GFLOPs: 93.9449
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #12: GFLOPs: 96.9409. Time: 113.3530 us. Best GFLOPs: 96.9409
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #13: GFLOPs: 4.4083. Time: 2492.6750 us. Best GFLOPs: 96.9409
2024-04-29 03:11:19 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #14: GFLOPs: 24.7939. Time: 443.1953 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(9) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 9])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #16: GFLOPs: 46.6470. Time: 235.5682 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #17: GFLOPs: 20.2551. Time: 542.5068 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #18: GFLOPs: 49.3220. Time: 222.7921 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(14), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(3) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(3) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(24) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add_1"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(3) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #20: GFLOPs: 88.1732. Time: 124.6246 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(3) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(3) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(3), T.int64(56)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_add_1"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(3) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[9, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #22: GFLOPs: 91.8397. Time: 119.6491 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #23: GFLOPs: 60.9244. Time: 180.3637 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #24: GFLOPs: 8.3190. Time: 1320.8960 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #25: GFLOPs: 14.9713. Time: 733.9729 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #26: GFLOPs: 41.6157. Time: 264.0482 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #27: GFLOPs: 30.7208. Time: 357.6907 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #28: GFLOPs: 41.9660. Time: 261.8440 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(2), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(24) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add_1"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(3) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #30: GFLOPs: 1.8666. Time: 5887.0174 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #31: GFLOPs: 53.8599. Time: 204.0208 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #32: GFLOPs: 13.9358. Time: 788.5127 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #33: GFLOPs: 71.7444. Time: 153.1623 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #34: GFLOPs: 8.6147. Time: 1275.5584 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #35: GFLOPs: 58.7886. Time: 186.9162 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #36: GFLOPs: 60.3391. Time: 182.1131 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #37: GFLOPs: 55.0524. Time: 199.6017 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #38: GFLOPs: 26.5617. Time: 413.6981 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #39: GFLOPs: 5.9315. Time: 1852.5688 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #40: GFLOPs: 9.3377. Time: 1176.7929 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #41: GFLOPs: 96.6633. Time: 113.6785 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #42: GFLOPs: 9.0296. Time: 1216.9491 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #43: GFLOPs: 44.4721. Time: 247.0885 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #44: GFLOPs: 8.7587. Time: 1254.5918 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #45: GFLOPs: 64.2585. Time: 171.0053 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #46: GFLOPs: 50.5951. Time: 217.1858 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(9) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 9])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #48: GFLOPs: 91.6584. Time: 119.8859 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #49: GFLOPs: 1.5283. Time: 7190.0444 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #50: GFLOPs: 37.3202. Time: 294.4399 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #51: GFLOPs: 80.5627. Time: 136.3974 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #52: GFLOPs: 1.3361. Time: 8224.3842 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(56), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(56) * T.int64(3) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(56) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(56), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(56) * T.int64(3) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(56) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=8)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b102)
b121 = sch.decompose_reduction(block=b102, loop=l105)
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #54: GFLOPs: 15.3437. Time: 716.1619 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #55: GFLOPs: 14.4429. Time: 760.8271 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #56: GFLOPs: 56.9247. Time: 193.0365 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #57: GFLOPs: 62.6668. Time: 175.3488 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #58: GFLOPs: 7.4486. Time: 1475.2501 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #59: GFLOPs: 58.0285. Time: 189.3644 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #60: GFLOPs: 2.2550. Time: 4872.9217 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #61: GFLOPs: 5.2545. Time: 2091.2700 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #62: GFLOPs: 68.9619. Time: 159.3423 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #63: GFLOPs: 54.8054. Time: 200.5009 us. Best GFLOPs: 96.9409
2024-04-29 03:11:20 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #64: GFLOPs: 94.6397. Time: 116.1092 us. Best GFLOPs: 96.9409
2024-04-29 03:21:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:21:16 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 03:21:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 03:21:18 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 03:21:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 03:21:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 03:21:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 03:21:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 03:21:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9798  0.9798  0.9732  0.9533  0.9533  0.9518  0.9371  0.9325  0.9307  0.9286  0.9243  0.9204  0.9204  0.9164  0.9149  0.9144
[17 : 32]:	0.9141  0.9119  0.9107  0.9089  0.9036  0.8963  0.8953  0.8953  0.8919  0.8915  0.8906  0.8905  0.8905  0.8893  0.8891  0.8882
[33 : 48]:	0.8875  0.8859  0.8859  0.8857  0.8844  0.8844  0.8823  0.8813  0.8809  0.8801  0.8798  0.8778  0.8753  0.8752  0.8751  0.8750
[49 : 64]:	0.8750  0.8749  0.8733  0.8728  0.8720  0.8716  0.8712  0.8711  0.8683  0.8678  0.8678  0.8661  0.8661  0.8661  0.8661  0.8634
2024-04-29 03:21:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:21:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #65: GFLOPs: 56.8250. Time: 193.3753 us. Best GFLOPs: 96.9409
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #66: GFLOPs: 80.8090. Time: 135.9817 us. Best GFLOPs: 96.9409
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #67: GFLOPs: 110.8242. Time: 99.1529 us. Best GFLOPs: 110.8242
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #68: GFLOPs: 103.1279. Time: 106.5526 us. Best GFLOPs: 110.8242
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #69: GFLOPs: 92.6198. Time: 118.6414 us. Best GFLOPs: 110.8242
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #70: GFLOPs: 78.7108. Time: 139.6066 us. Best GFLOPs: 110.8242
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #71: GFLOPs: 81.6617. Time: 134.5619 us. Best GFLOPs: 110.8242
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #72: GFLOPs: 119.4703. Time: 91.9772 us. Best GFLOPs: 119.4703
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #73: GFLOPs: 90.1111. Time: 121.9444 us. Best GFLOPs: 119.4703
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #74: GFLOPs: 122.6774. Time: 89.5727 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #75: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #76: GFLOPs: 82.3847. Time: 133.3809 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #77: GFLOPs: 80.9470. Time: 135.7498 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #78: GFLOPs: 106.1108. Time: 103.5572 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #79: GFLOPs: 92.4148. Time: 118.9045 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #80: GFLOPs: 79.9428. Time: 137.4550 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #81: GFLOPs: 74.4235. Time: 147.6488 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #82: GFLOPs: 73.4351. Time: 149.6362 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #83: GFLOPs: 108.3527. Time: 101.4146 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #84: GFLOPs: 72.0288. Time: 152.5576 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #85: GFLOPs: 66.4120. Time: 165.4602 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #86: GFLOPs: 81.7365. Time: 134.4387 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #87: GFLOPs: 88.2826. Time: 124.4701 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #88: GFLOPs: 71.3644. Time: 153.9778 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #89: GFLOPs: 80.8193. Time: 135.9644 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #90: GFLOPs: 76.4395. Time: 143.7547 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #91: GFLOPs: 57.2384. Time: 191.9786 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #92: GFLOPs: 65.6955. Time: 167.2647 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #93: GFLOPs: 65.8362. Time: 166.9074 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #94: GFLOPs: 102.6779. Time: 107.0196 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #95: GFLOPs: 112.0432. Time: 98.0742 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #96: GFLOPs: 101.2457. Time: 108.5335 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #97: GFLOPs: 60.2275. Time: 182.4505 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #98: GFLOPs: 101.4626. Time: 108.3014 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #99: GFLOPs: 91.1947. Time: 120.4954 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #100: GFLOPs: 63.7880. Time: 172.2666 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #101: GFLOPs: 55.6291. Time: 197.5324 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #102: GFLOPs: 80.5788. Time: 136.3702 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #103: GFLOPs: 92.9803. Time: 118.1814 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #104: GFLOPs: 82.3875. Time: 133.3764 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #105: GFLOPs: 106.2235. Time: 103.4474 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #106: GFLOPs: 111.0863. Time: 98.9190 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #107: GFLOPs: 88.6263. Time: 123.9874 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #108: GFLOPs: 63.5288. Time: 172.9696 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #109: GFLOPs: 52.9377. Time: 207.5751 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #110: GFLOPs: 62.3493. Time: 176.2417 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #111: GFLOPs: 77.1611. Time: 142.4104 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #112: GFLOPs: 86.2368. Time: 127.4229 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #113: GFLOPs: 100.5289. Time: 109.3073 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #114: GFLOPs: 78.4024. Time: 140.1557 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #115: GFLOPs: 23.5493. Time: 466.6188 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #116: GFLOPs: 70.2639. Time: 156.3896 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #117: GFLOPs: 32.8759. Time: 334.2433 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #118: GFLOPs: 36.0647. Time: 304.6899 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #119: GFLOPs: 76.2465. Time: 144.1186 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #120: GFLOPs: 66.4900. Time: 165.2662 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #121: GFLOPs: 70.7604. Time: 155.2922 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #122: GFLOPs: 75.4991. Time: 145.5454 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #123: GFLOPs: 59.0604. Time: 186.0561 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #124: GFLOPs: 89.0051. Time: 123.4597 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #125: GFLOPs: 62.2418. Time: 176.5461 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #126: GFLOPs: 6.5429. Time: 1679.4705 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #127: GFLOPs: 10.0217. Time: 1096.4710 us. Best GFLOPs: 122.6774
2024-04-29 03:23:17 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #128: GFLOPs: 53.0385. Time: 207.1806 us. Best GFLOPs: 122.6774
2024-04-29 03:59:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:59:51 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:59:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 03:59:53 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 03:59:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:00:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:00:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:00:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:00:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9902  0.8917  0.8839  0.8759  0.8716  0.8707  0.8475  0.8321  0.8302  0.8183  0.8063  0.8063  0.8063  0.8034  0.8029  0.7989
[17 : 32]:	0.7957  0.7957  0.7942  0.7938  0.7886  0.7870  0.7799  0.7799  0.7789  0.7768  0.7733  0.7725  0.7699  0.7634  0.7633  0.7622
[33 : 48]:	0.7599  0.7596  0.7553  0.7545  0.7543  0.7527  0.7500  0.7497  0.7480  0.7480  0.7480  0.7476  0.7414  0.7384  0.7365  0.7362
[49 : 64]:	0.7342  0.7340  0.7275  0.7271  0.7233  0.7157  0.7145  0.7132  0.7120  0.7119  0.7102  0.7102  0.7094  0.7092  0.7076  0.7058
2024-04-29 04:00:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:00:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #129: GFLOPs: 61.4349. Time: 178.8648 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #130: GFLOPs: 59.4096. Time: 184.9624 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #131: GFLOPs: 50.4692. Time: 217.7278 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #132: GFLOPs: 116.1944. Time: 94.5703 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #133: GFLOPs: 115.1729. Time: 95.4091 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #134: GFLOPs: 112.2658. Time: 97.8797 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #135: GFLOPs: 89.3672. Time: 122.9594 us. Best GFLOPs: 122.6774
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #136: GFLOPs: 126.5599. Time: 86.8248 us. Best GFLOPs: 126.5599
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #137: GFLOPs: 113.7953. Time: 96.5641 us. Best GFLOPs: 126.5599
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #138: GFLOPs: 89.2927. Time: 123.0621 us. Best GFLOPs: 126.5599
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #139: GFLOPs: 113.3802. Time: 96.9177 us. Best GFLOPs: 126.5599
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #140: GFLOPs: 127.9814. Time: 85.8605 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #141: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(36), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[36, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #142: GFLOPs: 119.9994. Time: 91.5717 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #143: GFLOPs: 102.1180. Time: 107.6063 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #144: GFLOPs: 97.8546. Time: 112.2946 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #145: GFLOPs: 85.2163. Time: 128.9488 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #146: GFLOPs: 78.0365. Time: 140.8128 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #147: GFLOPs: 95.7499. Time: 114.7630 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #148: GFLOPs: 112.2834. Time: 97.8644 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #149: GFLOPs: 72.7909. Time: 150.9604 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #150: GFLOPs: 120.8224. Time: 90.9479 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #151: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[18, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #152: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(84) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(84) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(28) * T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(28) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(84) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[18, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #153: GFLOPs: 69.7371. Time: 157.5711 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #154: GFLOPs: 101.7387. Time: 108.0076 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #155: GFLOPs: 68.0872. Time: 161.3892 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #156: GFLOPs: 88.0354. Time: 124.8196 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #157: GFLOPs: 96.0157. Time: 114.4453 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #158: GFLOPs: 60.1099. Time: 182.8076 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #159: GFLOPs: 120.9913. Time: 90.8210 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #160: GFLOPs: 116.5161. Time: 94.3093 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #161: GFLOPs: 105.3470. Time: 104.3081 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #162: GFLOPs: 125.2100. Time: 87.7609 us. Best GFLOPs: 127.9814
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #163: GFLOPs: 131.7231. Time: 83.4215 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #164: GFLOPs: 117.7738. Time: 93.3021 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #165: GFLOPs: 123.2325. Time: 89.1692 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #166: GFLOPs: 79.2888. Time: 138.5888 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #167: GFLOPs: 85.2851. Time: 128.8448 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #168: GFLOPs: 103.0918. Time: 106.5899 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #169: GFLOPs: 65.8782. Time: 166.8009 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #170: GFLOPs: 80.0251. Time: 137.3137 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #171: GFLOPs: 75.8453. Time: 144.8809 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #172: GFLOPs: 107.8982. Time: 101.8418 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #173: GFLOPs: 91.6824. Time: 119.8545 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #174: GFLOPs: 51.9277. Time: 211.6125 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #175: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("T_add_1"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(168) // T.int64(56) * T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(168) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #176: GFLOPs: 67.6109. Time: 162.5261 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #177: GFLOPs: 118.3387. Time: 92.8568 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #178: GFLOPs: 82.5534. Time: 133.1084 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #179: GFLOPs: 62.4868. Time: 175.8538 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #180: GFLOPs: 122.6087. Time: 89.6229 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #181: GFLOPs: 104.0751. Time: 105.5828 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #182: GFLOPs: 81.7350. Time: 134.4411 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #183: GFLOPs: 126.4331. Time: 86.9119 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #184: GFLOPs: 121.1153. Time: 90.7280 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #185: GFLOPs: 74.8429. Time: 146.8215 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #186: GFLOPs: 93.7945. Time: 117.1556 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #187: GFLOPs: 59.7558. Time: 183.8908 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #188: GFLOPs: 66.1483. Time: 166.1199 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #189: GFLOPs: 85.9972. Time: 127.7779 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #190: GFLOPs: 78.8650. Time: 139.3336 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #191: GFLOPs: 9.7380. Time: 1128.4235 us. Best GFLOPs: 131.7231
2024-04-29 04:01:54 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #192: GFLOPs: 60.1065. Time: 182.8178 us. Best GFLOPs: 131.7231
2024-04-29 04:33:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:33:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 04:33:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:33:37 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 04:33:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:33:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:33:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:34:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 04:34:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9766  0.9405  0.9248  0.9240  0.9179  0.9133  0.9083  0.9047  0.9043  0.9021  0.8954  0.8930  0.8906  0.8904  0.8883  0.8865
[17 : 32]:	0.8821  0.8819  0.8814  0.8802  0.8801  0.8795  0.8795  0.8790  0.8788  0.8786  0.8758  0.8750  0.8730  0.8708  0.8688  0.8676
[33 : 48]:	0.8674  0.8655  0.8634  0.8609  0.8603  0.8593  0.8575  0.8575  0.8556  0.8514  0.8448  0.8443  0.8413  0.8407  0.8395  0.8370
[49 : 64]:	0.8367  0.8352  0.8348  0.8334  0.8322  0.8311  0.8305  0.8292  0.8251  0.8240  0.8235  0.8209  0.8186  0.8169  0.8166  0.8152
2024-04-29 04:34:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:34:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #193: GFLOPs: 123.3742. Time: 89.0668 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #194: GFLOPs: 50.8182. Time: 216.2326 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #195: GFLOPs: 53.5623. Time: 205.1544 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #196: GFLOPs: 56.8155. Time: 193.4075 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #197: GFLOPs: 51.0183. Time: 215.3846 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #198: GFLOPs: 54.0833. Time: 203.1783 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #199: GFLOPs: 103.4219. Time: 106.2497 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #200: GFLOPs: 112.0866. Time: 98.0362 us. Best GFLOPs: 131.7231
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #201: GFLOPs: 133.8109. Time: 82.1200 us. Best GFLOPs: 133.8109
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #202: GFLOPs: 132.3451. Time: 83.0295 us. Best GFLOPs: 133.8109
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #203: GFLOPs: 117.7338. Time: 93.3338 us. Best GFLOPs: 133.8109
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #204: GFLOPs: 124.3543. Time: 88.3648 us. Best GFLOPs: 133.8109
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #205: GFLOPs: 141.0189. Time: 77.9225 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #206: GFLOPs: 85.4231. Time: 128.6367 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #207: GFLOPs: 137.3438. Time: 80.0076 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #208: GFLOPs: 123.5065. Time: 88.9714 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #209: GFLOPs: 136.7660. Time: 80.3456 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #210: GFLOPs: 105.4031. Time: 104.2525 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #211: GFLOPs: 47.4313. Time: 231.6730 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #212: GFLOPs: 125.6633. Time: 87.4443 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #213: GFLOPs: 131.3785. Time: 83.6404 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #214: GFLOPs: 109.0022. Time: 100.8102 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #215: GFLOPs: 116.8821. Time: 94.0139 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #216: GFLOPs: 119.6133. Time: 91.8672 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #217: GFLOPs: 103.3221. Time: 106.3523 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #218: GFLOPs: 104.6863. Time: 104.9664 us. Best GFLOPs: 141.0189
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #219: GFLOPs: 203.1163. Time: 54.0998 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #220: GFLOPs: 138.0979. Time: 79.5707 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #221: GFLOPs: 116.4011. Time: 94.4024 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #222: GFLOPs: 93.9526. Time: 116.9584 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #223: GFLOPs: 115.8941. Time: 94.8154 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #224: GFLOPs: 109.4838. Time: 100.3668 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #225: GFLOPs: 104.2122. Time: 105.4440 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #226: GFLOPs: 73.8505. Time: 148.7944 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #227: GFLOPs: 129.1214. Time: 85.1024 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #228: GFLOPs: 95.1811. Time: 115.4488 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #229: GFLOPs: 105.6665. Time: 103.9927 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #230: GFLOPs: 125.6508. Time: 87.4530 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #231: GFLOPs: 73.4550. Time: 149.5956 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #232: GFLOPs: 67.5714. Time: 162.6212 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #233: GFLOPs: 131.6956. Time: 83.4390 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #234: GFLOPs: 87.8225. Time: 125.1222 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #235: GFLOPs: 114.8641. Time: 95.6656 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #236: GFLOPs: 118.0454. Time: 93.0874 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #237: GFLOPs: 73.3011. Time: 149.9096 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #238: GFLOPs: 130.0608. Time: 84.4878 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #239: GFLOPs: 123.0937. Time: 89.2697 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #240: GFLOPs: 172.9406. Time: 63.5394 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #241: GFLOPs: 145.5228. Time: 75.5108 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #242: GFLOPs: 125.8157. Time: 87.3384 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #243: GFLOPs: 134.6950. Time: 81.5810 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #244: GFLOPs: 127.2555. Time: 86.3503 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #245: GFLOPs: 101.9059. Time: 107.8303 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #246: GFLOPs: 109.7576. Time: 100.1165 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #247: GFLOPs: 111.5165. Time: 98.5374 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #248: GFLOPs: 121.7109. Time: 90.2839 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #249: GFLOPs: 81.5048. Time: 134.8209 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #250: GFLOPs: 79.4822. Time: 138.2516 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #251: GFLOPs: 196.8113. Time: 55.8329 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #252: GFLOPs: 100.6247. Time: 109.2033 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #253: GFLOPs: 97.4009. Time: 112.8176 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #254: GFLOPs: 43.8484. Time: 250.6033 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #255: GFLOPs: 62.5322. Time: 175.7262 us. Best GFLOPs: 203.1163
2024-04-29 04:35:18 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #256: GFLOPs: 69.0234. Time: 159.2004 us. Best GFLOPs: 203.1163
2024-04-29 05:13:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:13:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:13:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 05:13:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 05:14:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 05:14:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 05:14:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 05:14:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 05:14:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8616  0.8542  0.8290  0.8216  0.8187  0.8152  0.8043  0.7770  0.7750  0.7748  0.7731  0.7726  0.7475  0.7348  0.7326  0.7243
[17 : 32]:	0.7150  0.7088  0.7043  0.7010  0.7003  0.6911  0.6815  0.6767  0.6693  0.6693  0.6683  0.6657  0.6653  0.6633  0.6632  0.6626
[33 : 48]:	0.6592  0.6589  0.6564  0.6540  0.6526  0.6522  0.6520  0.6520  0.6516  0.6507  0.6445  0.6440  0.6426  0.6415  0.6404  0.6376
[49 : 64]:	0.6375  0.6357  0.6357  0.6354  0.6346  0.6341  0.6328  0.6315  0.6315  0.6301  0.6291  0.6243  0.6236  0.6225  0.6225  0.6219
2024-04-29 05:14:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:14:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #257: GFLOPs: 208.6879. Time: 52.6554 us. Best GFLOPs: 208.6879
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #258: GFLOPs: 228.2026. Time: 48.1526 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #259: GFLOPs: 212.0442. Time: 51.8220 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #260: GFLOPs: 201.7763. Time: 54.4591 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #261: GFLOPs: 115.5392. Time: 95.1066 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #262: GFLOPs: 219.2917. Time: 50.1092 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #263: GFLOPs: 191.8515. Time: 57.2763 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #264: GFLOPs: 136.0280. Time: 80.7815 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #265: GFLOPs: 166.6457. Time: 65.9396 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #266: GFLOPs: 141.9977. Time: 77.3854 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #267: GFLOPs: 124.9471. Time: 87.9456 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #268: GFLOPs: 123.9674. Time: 88.6406 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #269: GFLOPs: 124.6124. Time: 88.1818 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #270: GFLOPs: 143.2732. Time: 76.6964 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #271: GFLOPs: 144.8804. Time: 75.8456 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #272: GFLOPs: 146.3411. Time: 75.0886 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #273: GFLOPs: 132.6612. Time: 82.8316 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #274: GFLOPs: 126.3299. Time: 86.9829 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #275: GFLOPs: 135.2328. Time: 81.2565 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #276: GFLOPs: 137.8880. Time: 79.6918 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #277: GFLOPs: 128.7271. Time: 85.3631 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #278: GFLOPs: 52.8908. Time: 207.7591 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #279: GFLOPs: 128.5354. Time: 85.4904 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #280: GFLOPs: 135.2138. Time: 81.2679 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #281: GFLOPs: 139.1456. Time: 78.9716 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #282: GFLOPs: 137.2353. Time: 80.0708 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #283: GFLOPs: 152.4265. Time: 72.0908 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #284: GFLOPs: 106.3547. Time: 103.3198 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #285: GFLOPs: 143.6465. Time: 76.4971 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #286: GFLOPs: 145.3504. Time: 75.6004 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #287: GFLOPs: 139.2173. Time: 78.9309 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #288: GFLOPs: 129.0275. Time: 85.1644 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #289: GFLOPs: 103.1629. Time: 106.5164 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #290: GFLOPs: 111.7162. Time: 98.3612 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #291: GFLOPs: 105.8799. Time: 103.7831 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #292: GFLOPs: 111.5714. Time: 98.4889 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #293: GFLOPs: 134.1072. Time: 81.9385 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #294: GFLOPs: 114.3851. Time: 96.0663 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #295: GFLOPs: 140.2538. Time: 78.3476 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #296: GFLOPs: 139.4970. Time: 78.7726 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #297: GFLOPs: 54.3910. Time: 202.0289 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #298: GFLOPs: 122.3296. Time: 89.8273 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #299: GFLOPs: 142.3289. Time: 77.2053 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #300: GFLOPs: 156.4869. Time: 70.2202 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #301: GFLOPs: 138.0420. Time: 79.6029 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #302: GFLOPs: 125.2180. Time: 87.7553 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #303: GFLOPs: 133.3987. Time: 82.3737 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #304: GFLOPs: 111.5177. Time: 98.5363 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #305: GFLOPs: 152.0913. Time: 72.2497 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #306: GFLOPs: 123.6876. Time: 88.8411 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #307: GFLOPs: 122.3808. Time: 89.7898 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #308: GFLOPs: 147.5515. Time: 74.4726 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #309: GFLOPs: 133.7102. Time: 82.1818 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #310: GFLOPs: 123.3375. Time: 89.0933 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #311: GFLOPs: 187.6306. Time: 58.5648 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #312: GFLOPs: 121.7674. Time: 90.2421 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #313: GFLOPs: 151.7826. Time: 72.3966 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #314: GFLOPs: 69.0169. Time: 159.2152 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #315: GFLOPs: 137.7344. Time: 79.7807 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #316: GFLOPs: 111.0134. Time: 98.9839 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #317: GFLOPs: 71.4327. Time: 153.8307 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #318: GFLOPs: 45.4141. Time: 241.9633 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #319: GFLOPs: 31.7482. Time: 346.1153 us. Best GFLOPs: 228.2026
2024-04-29 05:15:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #320: GFLOPs: 45.1081. Time: 243.6044 us. Best GFLOPs: 228.2026
2024-04-29 06:15:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:15:17 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:15:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:15:19 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 06:15:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:15:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:15:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:15:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:15:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9241  0.8997  0.8662  0.8432  0.8432  0.8412  0.8412  0.8383  0.8291  0.8286  0.7554  0.7316  0.7285  0.7167  0.7048  0.7041
[17 : 32]:	0.7025  0.6961  0.6955  0.6925  0.6911  0.6757  0.6696  0.6648  0.6612  0.6572  0.6515  0.6477  0.6430  0.6387  0.6344  0.6333
[33 : 48]:	0.6296  0.6285  0.6259  0.6255  0.6239  0.6239  0.6238  0.6236  0.6210  0.6209  0.6197  0.6195  0.6157  0.6146  0.6138  0.6121
[49 : 64]:	0.6121  0.6097  0.6086  0.6086  0.6079  0.6079  0.6073  0.6071  0.6069  0.6057  0.6048  0.6046  0.6018  0.6013  0.6009  0.6006
2024-04-29 06:15:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:15:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #321: GFLOPs: 110.2816. Time: 99.6408 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #322: GFLOPs: 108.5138. Time: 101.2640 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #323: GFLOPs: 97.6723. Time: 112.5042 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #324: GFLOPs: 79.7394. Time: 137.8056 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #325: GFLOPs: 166.6452. Time: 65.9398 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #326: GFLOPs: 121.6803. Time: 90.3067 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #327: GFLOPs: 127.3240. Time: 86.3038 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #328: GFLOPs: 210.2739. Time: 52.2583 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #329: GFLOPs: 165.4368. Time: 66.4214 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #330: GFLOPs: 121.8149. Time: 90.2069 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #331: GFLOPs: 118.1345. Time: 93.0172 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #332: GFLOPs: 80.9814. Time: 135.6922 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #333: GFLOPs: 160.7357. Time: 68.3641 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #334: GFLOPs: 132.3926. Time: 82.9997 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #335: GFLOPs: 176.0928. Time: 62.4020 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #336: GFLOPs: 110.6451. Time: 99.3134 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #337: GFLOPs: 166.0420. Time: 66.1793 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #338: GFLOPs: 171.4398. Time: 64.0957 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #339: GFLOPs: 204.6443. Time: 53.6958 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #340: GFLOPs: 172.4561. Time: 63.7179 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #341: GFLOPs: 106.7621. Time: 102.9255 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #342: GFLOPs: 159.4352. Time: 68.9217 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #343: GFLOPs: 140.8762. Time: 78.0014 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #344: GFLOPs: 133.2846. Time: 82.4442 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #345: GFLOPs: 132.7063. Time: 82.8035 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #346: GFLOPs: 141.9964. Time: 77.3861 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #347: GFLOPs: 140.8324. Time: 78.0257 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #348: GFLOPs: 139.2716. Time: 78.9001 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #349: GFLOPs: 141.3896. Time: 77.7182 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #350: GFLOPs: 120.1982. Time: 91.4202 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #351: GFLOPs: 64.4149. Time: 170.5901 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #352: GFLOPs: 128.5788. Time: 85.4615 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #353: GFLOPs: 144.8998. Time: 75.8355 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #354: GFLOPs: 127.6851. Time: 86.0597 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #355: GFLOPs: 133.8255. Time: 82.1110 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #356: GFLOPs: 137.9592. Time: 79.6507 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #357: GFLOPs: 115.8213. Time: 94.8750 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #358: GFLOPs: 128.8103. Time: 85.3080 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #359: GFLOPs: 138.6049. Time: 79.2796 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #360: GFLOPs: 98.7663. Time: 111.2580 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #361: GFLOPs: 111.1379. Time: 98.8731 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #362: GFLOPs: 108.7836. Time: 101.0129 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #363: GFLOPs: 131.4780. Time: 83.5770 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #364: GFLOPs: 158.7115. Time: 69.2359 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #365: GFLOPs: 147.4994. Time: 74.4989 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #366: GFLOPs: 136.0976. Time: 80.7402 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #367: GFLOPs: 152.8142. Time: 71.9079 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #368: GFLOPs: 145.6420. Time: 75.4490 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #369: GFLOPs: 140.3386. Time: 78.3002 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #370: GFLOPs: 128.4373. Time: 85.5557 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #371: GFLOPs: 99.0280. Time: 110.9640 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #372: GFLOPs: 88.4759. Time: 124.1982 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #373: GFLOPs: 66.4056. Time: 165.4762 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #374: GFLOPs: 61.4688. Time: 178.7662 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #375: GFLOPs: 122.0874. Time: 90.0056 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #376: GFLOPs: 116.6196. Time: 94.2255 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #377: GFLOPs: 139.5383. Time: 78.7493 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #378: GFLOPs: 140.3966. Time: 78.2679 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #379: GFLOPs: 148.5773. Time: 73.9584 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #380: GFLOPs: 135.9434. Time: 80.8318 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #381: GFLOPs: 139.0970. Time: 78.9991 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #382: GFLOPs: 55.3624. Time: 198.4839 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #383: GFLOPs: 67.8882. Time: 161.8623 us. Best GFLOPs: 228.2026
2024-04-29 06:17:13 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #384: GFLOPs: 40.2954. Time: 272.6996 us. Best GFLOPs: 228.2026
2024-04-29 06:54:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:54:22 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:54:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:54:24 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 06:54:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:54:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:54:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:54:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x50cba78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x60a0438)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5571cf8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56b2158)]: 0 failure(s)
2024-04-29 06:54:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8263  0.8152  0.8152  0.8094  0.8089  0.8072  0.7610  0.7590  0.7392  0.7187  0.7103  0.7025  0.6936  0.6930  0.6894  0.6868
[17 : 32]:	0.6848  0.6818  0.6807  0.6804  0.6751  0.6746  0.6693  0.6640  0.6588  0.6583  0.6557  0.6516  0.6507  0.6500  0.6496  0.6492
[33 : 48]:	0.6482  0.6460  0.6451  0.6396  0.6382  0.6376  0.6373  0.6323  0.6293  0.6281  0.6278  0.6278  0.6276  0.6263  0.6263  0.6259
[49 : 64]:	0.6256  0.6250  0.6217  0.6191  0.6191  0.6190  0.6189  0.6175  0.6171  0.6170  0.6160  0.6160  0.6154  0.6154  0.6154  0.6131
2024-04-29 06:54:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:54:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #385: GFLOPs: 208.8435. Time: 52.6162 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #386: GFLOPs: 142.2661. Time: 77.2394 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #387: GFLOPs: 210.3236. Time: 52.2459 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #388: GFLOPs: 191.6910. Time: 57.3243 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #389: GFLOPs: 209.0979. Time: 52.5522 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #390: GFLOPs: 201.3934. Time: 54.5626 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #391: GFLOPs: 132.8835. Time: 82.6930 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #392: GFLOPs: 139.6880. Time: 78.6649 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #393: GFLOPs: 128.6707. Time: 85.4005 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #394: GFLOPs: 147.1813. Time: 74.6599 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #395: GFLOPs: 169.1709. Time: 64.9553 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #396: GFLOPs: 164.6855. Time: 66.7244 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #397: GFLOPs: 190.4706. Time: 57.6916 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #398: GFLOPs: 197.9200. Time: 55.5201 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #399: GFLOPs: 148.9299. Time: 73.7833 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #400: GFLOPs: 103.4266. Time: 106.2448 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #401: GFLOPs: 94.4572. Time: 116.3335 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #402: GFLOPs: 126.7626. Time: 86.6860 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #403: GFLOPs: 114.4803. Time: 95.9863 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #404: GFLOPs: 168.1471. Time: 65.3508 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #405: GFLOPs: 164.4982. Time: 66.8004 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #406: GFLOPs: 148.9615. Time: 73.7677 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #407: GFLOPs: 148.8007. Time: 73.8474 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #408: GFLOPs: 120.7849. Time: 90.9762 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #409: GFLOPs: 138.6447. Time: 79.2568 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #410: GFLOPs: 143.5920. Time: 76.5261 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #411: GFLOPs: 190.4338. Time: 57.7027 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #412: GFLOPs: 170.8831. Time: 64.3045 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #413: GFLOPs: 146.9273. Time: 74.7890 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #414: GFLOPs: 145.4672. Time: 75.5397 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #415: GFLOPs: 122.3056. Time: 89.8450 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #416: GFLOPs: 223.0455. Time: 49.2659 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #417: GFLOPs: 134.7899. Time: 81.5235 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #418: GFLOPs: 146.7809. Time: 74.8636 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #419: GFLOPs: 139.0975. Time: 78.9989 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #420: GFLOPs: 117.5360. Time: 93.4909 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #421: GFLOPs: 137.0761. Time: 80.1638 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #422: GFLOPs: 120.0758. Time: 91.5134 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #423: GFLOPs: 147.3303. Time: 74.5844 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #424: GFLOPs: 144.1017. Time: 76.2555 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #425: GFLOPs: 117.8770. Time: 93.2204 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #426: GFLOPs: 130.8476. Time: 83.9797 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #427: GFLOPs: 142.2002. Time: 77.2752 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #428: GFLOPs: 143.7646. Time: 76.4343 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #429: GFLOPs: 110.0173. Time: 99.8801 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #430: GFLOPs: 89.3127. Time: 123.0346 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #431: GFLOPs: 129.6263. Time: 84.7709 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #432: GFLOPs: 125.6307. Time: 87.4670 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #433: GFLOPs: 97.2538. Time: 112.9884 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #434: GFLOPs: 107.7024. Time: 102.0269 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #435: GFLOPs: 133.4279. Time: 82.3557 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #436: GFLOPs: 121.9198. Time: 90.1292 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #437: GFLOPs: 161.2836. Time: 68.1318 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #438: GFLOPs: 86.8110. Time: 126.5801 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #439: GFLOPs: 146.0501. Time: 75.2382 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #440: GFLOPs: 186.9279. Time: 58.7849 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #441: GFLOPs: 107.5614. Time: 102.1607 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #442: GFLOPs: 149.3171. Time: 73.5920 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #443: GFLOPs: 66.2051. Time: 165.9772 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #444: GFLOPs: 101.3181. Time: 108.4559 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #445: GFLOPs: 122.6681. Time: 89.5795 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #446: GFLOPs: 5.6038. Time: 1960.9246 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #447: GFLOPs: 99.6715. Time: 110.2476 us. Best GFLOPs: 228.2026
2024-04-29 06:56:37 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_add] Trial #448: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(18), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), p3: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(28), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(36), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(28), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(72), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add_1"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[36, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
