2024-04-29 02:09:37 [INFO] [task_scheduler.cc:160] Initializing Task #13: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4"
2024-04-29 02:09:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4), T.int64(5), T.int64(5)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:09:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:09:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(15), T.int64(6), T.int64(32), T.int64(1)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), oco_1 * T.int64(15) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), oh_0 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(32), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_0 + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(15), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(30), oco_0 * T.int64(30) + oco_1 * T.int64(15) + oco_2 * T.int64(15) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 15])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
            for b_0, oco_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(14)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(30), T.int64(6), T.int64(32), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(32), oh_0 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(15), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), oco_0 * T.int64(30) + oco_1 * T.int64(15) + oco_2 * T.int64(15) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(15), T.int64(2), T.int64(28), T.int64(1)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), oco_1 * T.int64(15) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_0 + ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 15])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
            for b_0, oco_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(14)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(30), T.int64(6), T.int64(32), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(32), oh_0 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for ow_0, oci_0 in T.grid(T.int64(1), T.int64(4)):
                    for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(15), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), oco_0 * T.int64(30) + oco_1 * T.int64(15) + oco_2 * T.int64(15) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(30), T.int64(2), T.int64(28), T.int64(1)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_0 + ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 15])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:31:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:31:44 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:31:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 02:31:50 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:31:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 02:32:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 02:32:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 02:32:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 02:32:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9991  0.9987  0.9987  0.9985  0.9973  0.9973  0.9972  0.9964  0.9958  0.9951  0.9949  0.9941  0.9941  0.9925
[17 : 32]:	0.9923  0.9915  0.9906  0.9902  0.9900  0.9899  0.9897  0.9896  0.9893  0.9893  0.9887  0.9880  0.9878  0.9878  0.9875  0.9869
[33 : 48]:	0.9856  0.9849  0.9842  0.9841  0.9826  0.9825  0.9819  0.9814  0.9811  0.9811  0.9807  0.9806  0.9805  0.9795  0.9785  0.9771
[49 : 64]:	0.9771  0.9763  0.9763  0.9762  0.9755  0.9755  0.9740  0.9736  0.9726  0.9722  0.9721  0.9719  0.9715  0.9704  0.9703  0.9699
2024-04-29 02:32:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:32:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #1: GFLOPs: 67.8416. Time: 72.1115 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #2: GFLOPs: 10.4142. Time: 469.7584 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #3: GFLOPs: 3.9458. Time: 1239.8432 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #4: GFLOPs: 43.9501. Time: 111.3116 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #5: GFLOPs: 31.7493. Time: 154.0873 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #6: GFLOPs: 34.3490. Time: 142.4249 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #7: GFLOPs: 4.9831. Time: 981.7478 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #8: GFLOPs: 54.0922. Time: 90.4412 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #9: GFLOPs: 49.6893. Time: 98.4550 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #10: GFLOPs: 40.9789. Time: 119.3826 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #11: GFLOPs: 57.5074. Time: 85.0700 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(32)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(30), i0_i1_i2_fused // T.int64(32))
                        v_i2 = T.axis.spatial(T.int64(32), i0_i1_i2_fused % T.int64(32))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused in T.parallel(T.int64(1960), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oci_1 in range(T.int64(4)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(35) // T.int64(7) * T.int64(6) + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused // T.int64(70) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(70) // T.int64(35) * T.int64(14) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(35) // T.int64(7) * T.int64(6) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused // T.int64(70) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(70) // T.int64(35) * T.int64(14) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(35) // T.int64(7) * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused // T.int64(70) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(70) // T.int64(35) * T.int64(14) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 6, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70 = sch.get_loops(block=b63)
l71 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b65)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b105)
b122 = sch.decompose_reduction(block=b105, loop=l108)
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #13: GFLOPs: 10.7304. Time: 455.9155 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #14: GFLOPs: 59.6452. Time: 82.0210 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #15: GFLOPs: 5.8345. Time: 838.4857 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #16: GFLOPs: 5.7358. Time: 852.9149 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #17: GFLOPs: 4.0509. Time: 1207.6677 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #18: GFLOPs: 12.1220. Time: 403.5785 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #19: GFLOPs: 48.2216. Time: 101.4516 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #20: GFLOPs: 50.9776. Time: 95.9668 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #21: GFLOPs: 51.8201. Time: 94.4066 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #22: GFLOPs: 7.1654. Time: 682.7451 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #23: GFLOPs: 37.5190. Time: 130.3917 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #24: GFLOPs: 8.8829. Time: 550.7392 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #25: GFLOPs: 14.3577. Time: 340.7332 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #26: GFLOPs: 4.7119. Time: 1038.2513 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #27: GFLOPs: 22.6357. Time: 216.1255 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #28: GFLOPs: 57.4515. Time: 85.1528 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #29: GFLOPs: 49.2769. Time: 99.2789 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #30: GFLOPs: 35.7918. Time: 136.6839 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #31: GFLOPs: 5.2673. Time: 928.7810 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #32: GFLOPs: 6.8511. Time: 714.0738 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #33: GFLOPs: 10.1908. Time: 480.0579 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #34: GFLOPs: 2.8838. Time: 1696.4554 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #35: GFLOPs: 29.5464. Time: 165.5752 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #36: GFLOPs: 3.9700. Time: 1232.2735 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #37: GFLOPs: 10.2625. Time: 476.7014 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #38: GFLOPs: 4.0083. Time: 1220.4981 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #39: GFLOPs: 6.6340. Time: 737.4415 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #40: GFLOPs: 16.0642. Time: 304.5376 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #41: GFLOPs: 1.8916. Time: 2586.2262 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #42: GFLOPs: 39.7836. Time: 122.9694 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #43: GFLOPs: 37.9717. Time: 128.8368 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #44: GFLOPs: 28.1396. Time: 173.8533 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #45: GFLOPs: 9.7046. Time: 504.1086 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #46: GFLOPs: 61.2650. Time: 79.8524 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #47: GFLOPs: 51.8930. Time: 94.2740 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #48: GFLOPs: 4.9199. Time: 994.3705 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #49: GFLOPs: 2.7262. Time: 1794.4688 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #50: GFLOPs: 40.3349. Time: 121.2886 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #51: GFLOPs: 25.9825. Time: 188.2868 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #52: GFLOPs: 32.9354. Time: 148.5383 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #53: GFLOPs: 49.2001. Time: 99.4340 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #54: GFLOPs: 25.4801. Time: 191.9994 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(5), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(32), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_fused_fused * T.int64(6) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_fused_fused * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(3) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(3), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_fused_fused * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(3) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_fused_fused * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
b113 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b113)
b137 = sch.decompose_reduction(block=b113, loop=l123)
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #56: GFLOPs: 13.4925. Time: 362.5842 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #57: GFLOPs: 13.2886. Time: 368.1460 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #58: GFLOPs: 7.3528. Time: 665.3447 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #59: GFLOPs: 15.6794. Time: 312.0113 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #60: GFLOPs: 35.8032. Time: 136.6402 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #61: GFLOPs: 47.5034. Time: 102.9855 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #62: GFLOPs: 16.4688. Time: 297.0562 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #63: GFLOPs: 47.1912. Time: 103.6669 us. Best GFLOPs: 67.8416
2024-04-29 03:11:34 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #64: GFLOPs: 4.3143. Time: 1133.9399 us. Best GFLOPs: 67.8416
2024-04-29 03:34:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:34:33 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 03:34:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 03:34:39 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 03:34:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 03:35:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 03:35:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 03:35:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 03:35:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9865  0.9665  0.9665  0.9632  0.9616  0.9588  0.9433  0.9433  0.9433  0.9339  0.9124  0.9097  0.9097  0.9095  0.9095  0.9058
[17 : 32]:	0.9056  0.9056  0.9056  0.9012  0.8959  0.8894  0.8784  0.8784  0.8735  0.8703  0.8685  0.8642  0.8585  0.8546  0.8503  0.8491
[33 : 48]:	0.8455  0.8419  0.8419  0.8418  0.8411  0.8342  0.8342  0.8320  0.8320  0.8313  0.8313  0.8311  0.8294  0.8292  0.8259  0.8230
[49 : 64]:	0.8229  0.8229  0.8225  0.8224  0.8224  0.8224  0.8213  0.8187  0.8166  0.8165  0.8157  0.8156  0.8152  0.8114  0.8114  0.8106
2024-04-29 03:35:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:35:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #65: GFLOPs: 27.8564. Time: 175.6206 us. Best GFLOPs: 67.8416
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #66: GFLOPs: 36.1792. Time: 135.2201 us. Best GFLOPs: 67.8416
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #67: GFLOPs: 42.0351. Time: 116.3828 us. Best GFLOPs: 67.8416
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #68: GFLOPs: 50.4679. Time: 96.9361 us. Best GFLOPs: 67.8416
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #69: GFLOPs: 62.9512. Time: 77.7136 us. Best GFLOPs: 67.8416
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #70: GFLOPs: 40.5863. Time: 120.5371 us. Best GFLOPs: 67.8416
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #71: GFLOPs: 93.9812. Time: 52.0546 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #72: GFLOPs: 65.9944. Time: 74.1299 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #73: GFLOPs: 73.1913. Time: 66.8407 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #74: GFLOPs: 74.4877. Time: 65.6774 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #75: GFLOPs: 40.0835. Time: 122.0491 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #76: GFLOPs: 74.1888. Time: 65.9420 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #77: GFLOPs: 76.3488. Time: 64.0764 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #78: GFLOPs: 27.5936. Time: 177.2932 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #79: GFLOPs: 44.1342. Time: 110.8474 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #80: GFLOPs: 89.4647. Time: 54.6826 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #81: GFLOPs: 55.0852. Time: 88.8108 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #82: GFLOPs: 64.0462. Time: 76.3849 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #83: GFLOPs: 54.0074. Time: 90.5831 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #84: GFLOPs: 54.0724. Time: 90.4743 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #85: GFLOPs: 56.5160. Time: 86.5623 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #86: GFLOPs: 46.9436. Time: 104.2135 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #87: GFLOPs: 46.7718. Time: 104.5963 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #88: GFLOPs: 47.2976. Time: 103.4336 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #89: GFLOPs: 70.3401. Time: 69.5501 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #90: GFLOPs: 40.6750. Time: 120.2745 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #91: GFLOPs: 87.7683. Time: 55.7395 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #92: GFLOPs: 34.6360. Time: 141.2448 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #93: GFLOPs: 84.9330. Time: 57.6002 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #94: GFLOPs: 25.5616. Time: 191.3874 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #95: GFLOPs: 77.3520. Time: 63.2454 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #96: GFLOPs: 59.0168. Time: 82.8944 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #97: GFLOPs: 41.9707. Time: 116.5614 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #98: GFLOPs: 44.4689. Time: 110.0130 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #99: GFLOPs: 62.0106. Time: 78.8923 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #100: GFLOPs: 82.7619. Time: 59.1113 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #101: GFLOPs: 41.2341. Time: 118.6437 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #102: GFLOPs: 60.7020. Time: 80.5931 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #103: GFLOPs: 56.4744. Time: 86.6261 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #104: GFLOPs: 39.5863. Time: 123.5822 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #105: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0 in T.grid(T.int64(1), T.int64(4)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(6) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(6) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(4), T.int64(28), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oci_0 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b107)
b130 = sch.decompose_reduction(block=b107, loop=l116)
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #106: GFLOPs: 54.4206. Time: 89.8953 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #107: GFLOPs: 47.5177. Time: 102.9545 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #108: GFLOPs: 58.1234. Time: 84.1685 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #109: GFLOPs: 70.3610. Time: 69.5295 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #110: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1)
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #111: GFLOPs: 69.3521. Time: 70.5409 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #112: GFLOPs: 44.4973. Time: 109.9428 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #113: GFLOPs: 66.4171. Time: 73.6581 us. Best GFLOPs: 93.9812
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #114: GFLOPs: 105.3829. Time: 46.4227 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #115: GFLOPs: 75.7830. Time: 64.5548 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #116: GFLOPs: 82.6515. Time: 59.1902 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #117: GFLOPs: 79.7117. Time: 61.3732 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #118: GFLOPs: 66.2347. Time: 73.8609 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #119: GFLOPs: 49.1319. Time: 99.5719 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #120: GFLOPs: 63.7138. Time: 76.7834 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #121: GFLOPs: 45.9405. Time: 106.4890 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #122: GFLOPs: 83.1294. Time: 58.8499 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #123: GFLOPs: 67.1224. Time: 72.8842 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #124: GFLOPs: 24.6833. Time: 198.1970 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #125: GFLOPs: 64.8753. Time: 75.4086 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #126: GFLOPs: 2.4535. Time: 1993.9227 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #127: GFLOPs: 7.3082. Time: 669.4057 us. Best GFLOPs: 105.3829
2024-04-29 03:37:05 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #128: GFLOPs: 4.1625. Time: 1175.2964 us. Best GFLOPs: 105.3829
2024-04-29 04:50:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:50:14 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 04:50:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 04:50:18 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 04:50:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 04:50:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 04:50:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 04:51:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 04:51:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9489  0.9128  0.8760  0.8496  0.8436  0.8235  0.8125  0.8060  0.8052  0.8026  0.7968  0.7923  0.7922  0.7907  0.7840  0.7816
[17 : 32]:	0.7798  0.7714  0.7684  0.7656  0.7656  0.7597  0.7590  0.7582  0.7582  0.7582  0.7562  0.7562  0.7562  0.7554  0.7554  0.7554
[33 : 48]:	0.7554  0.7531  0.7531  0.7531  0.7531  0.7530  0.7526  0.7520  0.7495  0.7495  0.7495  0.7495  0.7492  0.7481  0.7481  0.7473
[49 : 64]:	0.7473  0.7465  0.7441  0.7441  0.7430  0.7420  0.7388  0.7387  0.7386  0.7368  0.7365  0.7361  0.7361  0.7361  0.7360  0.7360
2024-04-29 04:51:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:51:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #129: GFLOPs: 93.6895. Time: 52.2168 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #130: GFLOPs: 68.7282. Time: 71.1813 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #131: GFLOPs: 53.6563. Time: 91.1759 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #132: GFLOPs: 103.4581. Time: 47.2864 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #133: GFLOPs: 90.6313. Time: 53.9787 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #134: GFLOPs: 87.1426. Time: 56.1397 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #135: GFLOPs: 103.3313. Time: 47.3444 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #136: GFLOPs: 58.4901. Time: 83.6408 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #137: GFLOPs: 103.2516. Time: 47.3810 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #138: GFLOPs: 85.6064. Time: 57.1471 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #139: GFLOPs: 90.9960. Time: 53.7624 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #140: GFLOPs: 63.7516. Time: 76.7379 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #141: GFLOPs: 92.6908. Time: 52.7794 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #142: GFLOPs: 81.9729. Time: 59.6802 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #143: GFLOPs: 41.6332. Time: 117.5061 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #144: GFLOPs: 73.4537. Time: 66.6020 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #145: GFLOPs: 54.0098. Time: 90.5792 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #146: GFLOPs: 104.1294. Time: 46.9816 us. Best GFLOPs: 105.3829
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #147: GFLOPs: 116.7725. Time: 41.8948 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #148: GFLOPs: 78.2470. Time: 62.5220 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #149: GFLOPs: 80.1173. Time: 61.0625 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #150: GFLOPs: 51.7666. Time: 94.5042 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #151: GFLOPs: 69.8516. Time: 70.0364 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #152: GFLOPs: 54.5625. Time: 89.6616 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #153: GFLOPs: 49.1475. Time: 99.5404 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #154: GFLOPs: 79.0448. Time: 61.8910 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #155: GFLOPs: 70.3794. Time: 69.5113 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #156: GFLOPs: 80.9974. Time: 60.3990 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #157: GFLOPs: 82.0638. Time: 59.6141 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #158: GFLOPs: 52.9019. Time: 92.4760 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #159: GFLOPs: 56.7993. Time: 86.1306 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #160: GFLOPs: 56.8760. Time: 86.0145 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #161: GFLOPs: 46.3876. Time: 105.4626 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #162: GFLOPs: 51.4373. Time: 95.1092 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #163: GFLOPs: 56.4639. Time: 86.6422 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #164: GFLOPs: 58.7540. Time: 83.2651 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #165: GFLOPs: 57.3839. Time: 85.2533 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #166: GFLOPs: 46.2316. Time: 105.8184 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #167: GFLOPs: 91.0884. Time: 53.7078 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #168: GFLOPs: 92.2893. Time: 53.0090 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #169: GFLOPs: 57.6389. Time: 84.8759 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #170: GFLOPs: 58.1127. Time: 84.1840 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #171: GFLOPs: 58.5610. Time: 83.5396 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #172: GFLOPs: 57.6049. Time: 84.9261 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #173: GFLOPs: 71.5056. Time: 68.4164 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #174: GFLOPs: 57.9641. Time: 84.3999 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #175: GFLOPs: 58.9851. Time: 82.9389 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #176: GFLOPs: 56.0786. Time: 87.2375 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #177: GFLOPs: 55.5336. Time: 88.0937 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #178: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #179: GFLOPs: 51.3260. Time: 95.3154 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #180: GFLOPs: 47.8538. Time: 102.2315 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #181: GFLOPs: 87.9411. Time: 55.6300 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #182: GFLOPs: 58.3256. Time: 83.8767 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #183: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #184: GFLOPs: 108.2568. Time: 45.1903 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #185: GFLOPs: 58.7018. Time: 83.3392 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #186: GFLOPs: 58.6986. Time: 83.3437 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #187: GFLOPs: 69.3387. Time: 70.5545 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #188: GFLOPs: 58.9382. Time: 83.0049 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #189: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #190: GFLOPs: 3.7556. Time: 1302.6155 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #191: GFLOPs: 3.5439. Time: 1380.4371 us. Best GFLOPs: 116.7725
2024-04-29 04:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #192: GFLOPs: 3.0233. Time: 1618.1399 us. Best GFLOPs: 116.7725
2024-04-29 06:04:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:04:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:05:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 06:05:00 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 06:05:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 06:05:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 06:05:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 06:05:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 06:06:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9734  0.9137  0.8863  0.8819  0.8819  0.8680  0.8680  0.8680  0.8485  0.8485  0.8338  0.8213  0.8213  0.8213  0.8148  0.8014
[17 : 32]:	0.8014  0.8001  0.7952  0.7940  0.7865  0.7854  0.7854  0.7822  0.7822  0.7819  0.7800  0.7672  0.7672  0.7653  0.7624  0.7608
[33 : 48]:	0.7608  0.7608  0.7418  0.7416  0.7318  0.7317  0.7308  0.7293  0.7292  0.7292  0.7275  0.7258  0.7250  0.7229  0.7225  0.7149
[49 : 64]:	0.7116  0.7080  0.7068  0.7064  0.7040  0.7029  0.7028  0.7028  0.6997  0.6997  0.6978  0.6978  0.6978  0.6950  0.6950  0.6928
2024-04-29 06:06:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:06:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #193: GFLOPs: 77.1160. Time: 63.4390 us. Best GFLOPs: 116.7725
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #194: GFLOPs: 122.4153. Time: 39.9636 us. Best GFLOPs: 122.4153
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #195: GFLOPs: 192.3077. Time: 25.4392 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #196: GFLOPs: 105.8641. Time: 46.2117 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #197: GFLOPs: 148.2895. Time: 32.9906 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #198: GFLOPs: 109.0591. Time: 44.8579 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #199: GFLOPs: 86.5579. Time: 56.5189 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #200: GFLOPs: 107.1016. Time: 45.6778 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #201: GFLOPs: 98.7383. Time: 49.5467 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #202: GFLOPs: 133.6417. Time: 36.6065 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #203: GFLOPs: 121.9194. Time: 40.1262 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #204: GFLOPs: 175.4045. Time: 27.8907 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #205: GFLOPs: 130.3912. Time: 37.5191 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #206: GFLOPs: 121.4890. Time: 40.2683 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #207: GFLOPs: 120.5457. Time: 40.5834 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #208: GFLOPs: 90.0056. Time: 54.3539 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #209: GFLOPs: 105.5910. Time: 46.3312 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #210: GFLOPs: 97.9727. Time: 49.9339 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #211: GFLOPs: 149.0443. Time: 32.8235 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #212: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 + ow_1 + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + oco_1 * T.int64(6) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused // T.int64(7) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ow_0, ax3_ax4_fused])
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b65)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b114)
b137 = sch.decompose_reduction(block=b114, loop=l123)
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #213: GFLOPs: 99.8759. Time: 48.9824 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #214: GFLOPs: 83.2142. Time: 58.7900 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #215: GFLOPs: 106.5495. Time: 45.9144 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #216: GFLOPs: 98.5109. Time: 49.6611 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #217: GFLOPs: 119.8694. Time: 40.8124 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #218: GFLOPs: 87.3951. Time: 55.9775 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #219: GFLOPs: 84.6970. Time: 57.7607 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #220: GFLOPs: 91.3049. Time: 53.5805 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #221: GFLOPs: 59.3199. Time: 82.4707 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #222: GFLOPs: 79.1558. Time: 61.8042 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #223: GFLOPs: 93.5956. Time: 52.2691 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #224: GFLOPs: 156.9456. Time: 31.1711 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #225: GFLOPs: 89.7532. Time: 54.5068 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #226: GFLOPs: 85.5999. Time: 57.1515 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #227: GFLOPs: 91.2720. Time: 53.5998 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #228: GFLOPs: 87.0580. Time: 56.1943 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #229: GFLOPs: 106.2399. Time: 46.0483 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #230: GFLOPs: 102.2223. Time: 47.8581 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #231: GFLOPs: 50.5334. Time: 96.8103 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #232: GFLOPs: 70.1873. Time: 69.7015 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #233: GFLOPs: 89.3725. Time: 54.7390 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #234: GFLOPs: 130.9476. Time: 37.3597 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #235: GFLOPs: 53.9698. Time: 90.6463 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #236: GFLOPs: 75.9709. Time: 64.3952 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #237: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(30), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(32), T.int64(32), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(30), T.int64(28), T.int64(28), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(32)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(5) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(32), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(5) * T.int64(4) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(5) * T.int64(6) + oco_2_init * T.int64(6) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(5) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(5) * T.int64(6) + oco_2 * T.int64(6) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(5) * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused % T.int64(5) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_fused_fused // T.int64(5) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 5, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b63)
l78 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b65)
l109 = sch.fuse(l107, l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b110)
b129 = sch.decompose_reduction(block=b110, loop=l115)
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #238: GFLOPs: 87.7342. Time: 55.7612 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #239: GFLOPs: 73.9717. Time: 66.1355 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #240: GFLOPs: 188.4555. Time: 25.9592 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #241: GFLOPs: 85.2753. Time: 57.3690 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #242: GFLOPs: 97.8050. Time: 50.0195 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #243: GFLOPs: 86.5145. Time: 56.5473 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #244: GFLOPs: 91.2481. Time: 53.6138 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #245: GFLOPs: 102.8109. Time: 47.5841 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #246: GFLOPs: 82.5363. Time: 59.2729 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #247: GFLOPs: 93.3052. Time: 52.4318 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #248: GFLOPs: 85.0777. Time: 57.5022 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #249: GFLOPs: 82.4569. Time: 59.3299 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #250: GFLOPs: 86.5130. Time: 56.5483 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #251: GFLOPs: 74.6338. Time: 65.5488 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #252: GFLOPs: 99.1492. Time: 49.3414 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #253: GFLOPs: 79.9776. Time: 61.1691 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #254: GFLOPs: 7.4054. Time: 660.6236 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #255: GFLOPs: 57.2577. Time: 85.4410 us. Best GFLOPs: 192.3077
2024-04-29 06:07:42 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #256: GFLOPs: 22.4724. Time: 217.6960 us. Best GFLOPs: 192.3077
2024-04-29 07:01:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:01:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:01:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 07:01:14 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 07:01:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 07:01:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 07:01:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 07:02:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4dbe2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50eb478)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4656228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x50de568)]: 0 failure(s)
2024-04-29 07:02:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9502  0.9502  0.8843  0.8692  0.8450  0.8423  0.8417  0.8417  0.8242  0.8114  0.8114  0.8114  0.8114  0.7803  0.7626  0.7533
[17 : 32]:	0.7375  0.7375  0.7375  0.7375  0.7375  0.7321  0.7187  0.6952  0.6814  0.6787  0.6783  0.6744  0.6739  0.6727  0.6727  0.6727
[33 : 48]:	0.6727  0.6621  0.6593  0.6536  0.6524  0.6524  0.6518  0.6477  0.6358  0.6358  0.6351  0.6341  0.6336  0.6336  0.6333  0.6286
[49 : 64]:	0.6245  0.6245  0.6243  0.6199  0.6167  0.6058  0.6039  0.6032  0.6030  0.6011  0.5992  0.5988  0.5977  0.5916  0.5913  0.5890
2024-04-29 07:02:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:02:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #257: GFLOPs: 90.6912. Time: 53.9431 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #258: GFLOPs: 91.0420. Time: 53.7352 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #259: GFLOPs: 97.1094. Time: 50.3778 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #260: GFLOPs: 129.0935. Time: 37.8963 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #261: GFLOPs: 83.2494. Time: 58.7651 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #262: GFLOPs: 130.8926. Time: 37.3754 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #263: GFLOPs: 97.7510. Time: 50.0472 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #264: GFLOPs: 174.4561. Time: 28.0423 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #265: GFLOPs: 90.2877. Time: 54.1841 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #266: GFLOPs: 120.9974. Time: 40.4320 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #267: GFLOPs: 76.1222. Time: 64.2672 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #268: GFLOPs: 119.9427. Time: 40.7875 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #269: GFLOPs: 76.0765. Time: 64.3058 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #270: GFLOPs: 131.4860. Time: 37.2067 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #271: GFLOPs: 95.7582. Time: 51.0887 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #272: GFLOPs: 171.8725. Time: 28.4639 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #273: GFLOPs: 49.7920. Time: 98.2520 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #274: GFLOPs: 118.4755. Time: 41.2926 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #275: GFLOPs: 85.9544. Time: 56.9158 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #276: GFLOPs: 146.5323. Time: 33.3862 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #277: GFLOPs: 38.1887. Time: 128.1050 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #278: GFLOPs: 154.2330. Time: 31.7193 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #279: GFLOPs: 95.7602. Time: 51.0876 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #280: GFLOPs: 21.5863. Time: 226.6321 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #281: GFLOPs: 87.2618. Time: 56.0631 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #282: GFLOPs: 116.7392. Time: 41.9068 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #283: GFLOPs: 81.8575. Time: 59.7644 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #284: GFLOPs: 88.1890. Time: 55.4736 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #285: GFLOPs: 54.5147. Time: 89.7402 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #286: GFLOPs: 169.4955. Time: 28.8631 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #287: GFLOPs: 83.4794. Time: 58.6032 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #288: GFLOPs: 167.2689. Time: 29.2473 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #289: GFLOPs: 99.7726. Time: 49.0331 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #290: GFLOPs: 145.0120. Time: 33.7362 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #291: GFLOPs: 67.8853. Time: 72.0651 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #292: GFLOPs: 167.3646. Time: 29.2306 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #293: GFLOPs: 92.1307. Time: 53.1002 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #294: GFLOPs: 190.7389. Time: 25.6485 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #295: GFLOPs: 85.4042. Time: 57.2824 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #296: GFLOPs: 91.3746. Time: 53.5396 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #297: GFLOPs: 90.5751. Time: 54.0122 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #298: GFLOPs: 181.6679. Time: 26.9291 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #299: GFLOPs: 86.2682. Time: 56.7087 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #300: GFLOPs: 167.7058. Time: 29.1711 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #301: GFLOPs: 82.5371. Time: 59.2722 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #302: GFLOPs: 149.8019. Time: 32.6575 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #303: GFLOPs: 87.5743. Time: 55.8630 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #304: GFLOPs: 148.9034. Time: 32.8546 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #305: GFLOPs: 84.9174. Time: 57.6108 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #306: GFLOPs: 50.5697. Time: 96.7410 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #307: GFLOPs: 100.9649. Time: 48.4541 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #308: GFLOPs: 169.3568. Time: 28.8867 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #309: GFLOPs: 51.0080. Time: 95.9096 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #310: GFLOPs: 185.6377. Time: 26.3533 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #311: GFLOPs: 75.9035. Time: 64.4524 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #312: GFLOPs: 44.9850. Time: 108.7509 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #313: GFLOPs: 23.6038. Time: 207.2614 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #314: GFLOPs: 106.4276. Time: 45.9670 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #315: GFLOPs: 88.0696. Time: 55.5488 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #316: GFLOPs: 179.8643. Time: 27.1992 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #317: GFLOPs: 55.3037. Time: 88.4599 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #318: GFLOPs: 1.7964. Time: 2723.3728 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #319: GFLOPs: 10.3531. Time: 472.5289 us. Best GFLOPs: 192.3077
2024-04-29 07:03:39 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_4] Trial #320: GFLOPs: 6.7483. Time: 724.9484 us. Best GFLOPs: 192.3077
