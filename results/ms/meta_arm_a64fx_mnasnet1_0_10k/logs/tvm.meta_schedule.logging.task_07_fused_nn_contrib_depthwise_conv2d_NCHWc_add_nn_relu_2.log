2024-04-29 02:09:11 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2"
2024-04-29 02:09:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:09:11 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:09:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(2), T.int64(2), T.int64(3), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), oh_1 * T.int64(14) + kh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(28) + kw_0 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(2)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(30), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), oh_1 * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_1 in range(T.int64(2)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(2)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(14) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(3), T.int64(4)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(58), T.int64(4)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), oh_1 * T.int64(14) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(2)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(18), oco_0 * T.int64(6) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:21:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:21:34 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:21:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 02:21:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:21:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 02:21:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 02:22:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 02:22:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 02:22:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9995  0.9989  0.9982  0.9976  0.9965  0.9962  0.9961  0.9959  0.9956  0.9955  0.9954  0.9952  0.9951  0.9950
[17 : 32]:	0.9947  0.9946  0.9944  0.9937  0.9937  0.9930  0.9930  0.9915  0.9915  0.9910  0.9907  0.9906  0.9901  0.9894  0.9885  0.9885
[33 : 48]:	0.9879  0.9875  0.9875  0.9871  0.9865  0.9865  0.9864  0.9861  0.9854  0.9836  0.9834  0.9832  0.9823  0.9820  0.9795  0.9791
[49 : 64]:	0.9789  0.9789  0.9768  0.9764  0.9761  0.9755  0.9739  0.9739  0.9725  0.9714  0.9711  0.9702  0.9697  0.9688  0.9678  0.9676
2024-04-29 02:22:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:22:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #1: GFLOPs: 24.9448. Time: 181.0333 us. Best GFLOPs: 24.9448
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #2: GFLOPs: 27.8531. Time: 162.1307 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #3: GFLOPs: 20.5950. Time: 219.2684 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #4: GFLOPs: 4.6015. Time: 981.3807 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #5: GFLOPs: 4.8692. Time: 927.4314 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #6: GFLOPs: 10.7676. Time: 419.3920 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #7: GFLOPs: 4.1635. Time: 1084.6158 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #8: GFLOPs: 19.6872. Time: 229.3799 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(18), T.int64(14), T.int64(1)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(18), oco_2_init * T.int64(18) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(112) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(28) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0 in T.grid(T.int64(1), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(18), T.int64(30), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(112) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(28) + kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(18), T.int64(14), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), oco_2 * T.int64(18) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(112) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(28) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(18), T.int64(28), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused // T.int64(112) * T.int64(28) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 18])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b63)
l83 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b64)
l100 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l100)
l101 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l101)
sch.annotate(block_or_loop=l100, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l100, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
b125 = sch.decompose_reduction(block=b109, loop=l111)
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #10: GFLOPs: 9.6018. Time: 470.3107 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #11: GFLOPs: 6.9996. Time: 645.1526 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #12: GFLOPs: 6.4199. Time: 703.4141 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #13: GFLOPs: 11.0976. Time: 406.9191 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(58), T.int64(3)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(6) // T.int64(2) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(12) * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(12) // T.int64(6) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_1 in range(T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(6) // T.int64(2) * T.int64(6) + oco_2_init * T.int64(2) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(12) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(12) // T.int64(6) * T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(6) // T.int64(2) * T.int64(6) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused // T.int64(12) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_fused_fused % T.int64(12) // T.int64(6) * T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(3528)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b62)
l79 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102 = sch.get_loops(block=b64)
l103 = sch.fuse(l98, l99, l100, l101, l102, preserve_unit_iters=True)
l104, l105 = sch.split(loop=l103, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b106)
b123 = sch.decompose_reduction(block=b106, loop=l109)
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #15: GFLOPs: 10.2903. Time: 438.8433 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #16: GFLOPs: 24.6293. Time: 183.3520 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #17: GFLOPs: 4.9280. Time: 916.3621 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #18: GFLOPs: 14.4576. Time: 312.3499 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #19: GFLOPs: 5.1924. Time: 869.7065 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #20: GFLOPs: 7.2590. Time: 622.0983 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #21: GFLOPs: 7.7110. Time: 585.6391 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #22: GFLOPs: 5.8197. Time: 775.9576 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #23: GFLOPs: 12.8413. Time: 351.6663 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #24: GFLOPs: 5.8160. Time: 776.4506 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #25: GFLOPs: 23.8408. Time: 189.4163 us. Best GFLOPs: 27.8531
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #26: GFLOPs: 85.7159. Time: 52.6838 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #27: GFLOPs: 25.9707. Time: 173.8822 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(42), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(3), T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(30)):
                    for ax3_ax4_fused in T.vectorized(T.int64(24)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(6) + oco_1 * T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), oh_1 * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(6) + oco_1 * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(6) + oco_1 * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(56)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b64)
l101 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b109)
b130 = sch.decompose_reduction(block=b109, loop=l116)
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #29: GFLOPs: 49.7410. Time: 90.7871 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #30: GFLOPs: 44.2398. Time: 102.0764 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #31: GFLOPs: 48.7405. Time: 92.6507 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #32: GFLOPs: 1.7201. Time: 2625.3698 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #33: GFLOPs: 1.0363. Time: 4357.5604 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(58), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(18), b_0_oco_0_fused_fused * T.int64(3) + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_fused_fused * T.int64(3) + oco_1 * T.int64(3) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(3), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_fused_fused * T.int64(3) + oco_1 * T.int64(3) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(3), T.int64(56)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(18), b_0_oco_0_fused_fused * T.int64(3) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[6, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b63)
l73 = sch.fuse(l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b65)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b115)
b139 = sch.decompose_reduction(block=b115, loop=l125)
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #35: GFLOPs: 31.1453. Time: 144.9927 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #36: GFLOPs: 13.5113. Time: 334.2280 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #37: GFLOPs: 10.2793. Time: 439.3128 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #38: GFLOPs: 22.0180. Time: 205.0980 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #39: GFLOPs: 9.9096. Time: 455.7013 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #40: GFLOPs: 7.3508. Time: 614.3334 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #41: GFLOPs: 32.5158. Time: 138.8814 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #42: GFLOPs: 43.5220. Time: 103.7599 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #43: GFLOPs: 5.6175. Time: 803.8921 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #44: GFLOPs: 13.5204. Time: 334.0029 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #45: GFLOPs: 23.6057. Time: 191.3027 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #46: GFLOPs: 0.9807. Time: 4604.8810 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused in T.parallel(T.int64(18), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14)):
                for oci_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(14) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_2_init * T.int64(4) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0 in T.grid(T.int64(1), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(58), T.int64(56)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), ax2)
                            v_i3 = T.axis.spatial(T.int64(58), kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(14) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused_fused + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 18, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b63)
l83 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b64)
l100 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l100)
l101 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l101)
sch.annotate(block_or_loop=l100, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l100, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
b125 = sch.decompose_reduction(block=b109, loop=l111)
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #48: GFLOPs: 25.4187. Time: 177.6582 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #49: GFLOPs: 46.2468. Time: 97.6465 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #50: GFLOPs: 24.1176. Time: 187.2424 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #51: GFLOPs: 4.7484. Time: 951.0330 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #52: GFLOPs: 17.9650. Time: 251.3685 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #53: GFLOPs: 15.1968. Time: 297.1571 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #54: GFLOPs: 50.5473. Time: 89.3389 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #55: GFLOPs: 9.8082. Time: 460.4159 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #56: GFLOPs: 34.3815. Time: 131.3449 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #57: GFLOPs: 9.0739. Time: 497.6709 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #58: GFLOPs: 34.0519. Time: 132.6162 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #59: GFLOPs: 19.9636. Time: 226.2042 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #60: GFLOPs: 16.8076. Time: 268.6789 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #61: GFLOPs: 29.6350. Time: 152.3820 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #62: GFLOPs: 22.0553. Time: 204.7511 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #63: GFLOPs: 23.4528. Time: 192.5502 us. Best GFLOPs: 85.7159
2024-04-29 03:11:17 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #64: GFLOPs: 29.6838. Time: 152.1314 us. Best GFLOPs: 85.7159
2024-04-29 03:45:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:45:03 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 03:45:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 03:45:09 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 03:45:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 03:45:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 03:45:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 03:46:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 03:46:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9804  0.9804  0.9483  0.9483  0.9466  0.9156  0.9046  0.8736  0.8591  0.8591  0.8578  0.8565  0.8360  0.8319  0.8312  0.8295
[17 : 32]:	0.8246  0.8212  0.8104  0.8098  0.8098  0.7959  0.7952  0.7876  0.7876  0.7793  0.7746  0.7743  0.7700  0.7656  0.7651  0.7635
[33 : 48]:	0.7593  0.7572  0.7567  0.7541  0.7521  0.7478  0.7476  0.7436  0.7422  0.7418  0.7404  0.7400  0.7377  0.7355  0.7346  0.7342
[49 : 64]:	0.7308  0.7297  0.7294  0.7289  0.7245  0.7228  0.7223  0.7219  0.7205  0.7199  0.7195  0.7192  0.7189  0.7183  0.7173  0.7164
2024-04-29 03:46:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:46:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #65: GFLOPs: 38.4852. Time: 117.3396 us. Best GFLOPs: 85.7159
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #66: GFLOPs: 74.7586. Time: 60.4056 us. Best GFLOPs: 85.7159
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #67: GFLOPs: 83.1163. Time: 54.3316 us. Best GFLOPs: 85.7159
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #68: GFLOPs: 83.0028. Time: 54.4059 us. Best GFLOPs: 85.7159
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #69: GFLOPs: 128.8042. Time: 35.0597 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #70: GFLOPs: 100.6570. Time: 44.8637 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #71: GFLOPs: 89.9971. Time: 50.1776 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #72: GFLOPs: 105.5765. Time: 42.7731 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #73: GFLOPs: 100.3184. Time: 45.0151 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #74: GFLOPs: 113.0444. Time: 39.9475 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #75: GFLOPs: 71.7499. Time: 62.9386 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #76: GFLOPs: 107.5400. Time: 41.9922 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #77: GFLOPs: 117.9187. Time: 38.2962 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #78: GFLOPs: 35.4053. Time: 127.5471 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #79: GFLOPs: 84.6038. Time: 53.3763 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #80: GFLOPs: 45.1693. Time: 99.9758 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #81: GFLOPs: 79.0678. Time: 57.1135 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #82: GFLOPs: 84.5700. Time: 53.3977 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #83: GFLOPs: 100.9172. Time: 44.7480 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #84: GFLOPs: 79.4451. Time: 56.8423 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #85: GFLOPs: 78.8829. Time: 57.2474 us. Best GFLOPs: 128.8042
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #86: GFLOPs: 143.0890. Time: 31.5597 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #87: GFLOPs: 113.1142. Time: 39.9228 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #88: GFLOPs: 103.5576. Time: 43.6071 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #89: GFLOPs: 97.7516. Time: 46.1971 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #90: GFLOPs: 24.8646. Time: 181.6171 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #91: GFLOPs: 138.8721. Time: 32.5180 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #92: GFLOPs: 103.5841. Time: 43.5959 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #93: GFLOPs: 124.9225. Time: 36.1491 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #94: GFLOPs: 41.3493. Time: 109.2120 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #95: GFLOPs: 45.0191. Time: 100.3094 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #96: GFLOPs: 131.0474. Time: 34.4596 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #97: GFLOPs: 97.5133. Time: 46.3100 us. Best GFLOPs: 143.0890
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #98: GFLOPs: 145.4698. Time: 31.0431 us. Best GFLOPs: 145.4698
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #99: GFLOPs: 97.5070. Time: 46.3130 us. Best GFLOPs: 145.4698
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #100: GFLOPs: 33.6375. Time: 134.2501 us. Best GFLOPs: 145.4698
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #101: GFLOPs: 147.4812. Time: 30.6198 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #102: GFLOPs: 90.9409. Time: 49.6569 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #103: GFLOPs: 91.0520. Time: 49.5963 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #104: GFLOPs: 45.0735. Time: 100.1883 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #105: GFLOPs: 47.8053. Time: 94.4632 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #106: GFLOPs: 72.5040. Time: 62.2840 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #107: GFLOPs: 30.2763. Time: 149.1541 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #108: GFLOPs: 73.8018. Time: 61.1887 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #109: GFLOPs: 35.7174. Time: 126.4326 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #110: GFLOPs: 24.7775. Time: 182.2558 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #111: GFLOPs: 64.6066. Time: 69.8975 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #112: GFLOPs: 18.5726. Time: 243.1453 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #113: GFLOPs: 32.8541. Time: 137.4512 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #114: GFLOPs: 58.6708. Time: 76.9691 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #115: GFLOPs: 33.2905. Time: 135.6497 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #116: GFLOPs: 72.5340. Time: 62.2583 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #117: GFLOPs: 62.4775. Time: 72.2795 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #118: GFLOPs: 50.5591. Time: 89.3180 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #119: GFLOPs: 37.9420. Time: 119.0196 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #120: GFLOPs: 32.9071. Time: 137.2301 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #121: GFLOPs: 43.8231. Time: 103.0469 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #122: GFLOPs: 43.4965. Time: 103.8209 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #123: GFLOPs: 66.6225. Time: 67.7825 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #124: GFLOPs: 40.5306. Time: 111.4182 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #125: GFLOPs: 39.3876. Time: 114.6513 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #126: GFLOPs: 11.0875. Time: 407.2920 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #127: GFLOPs: 33.6799. Time: 134.0810 us. Best GFLOPs: 147.4812
2024-04-29 03:47:46 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(18), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(58), T.int64(58), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(18), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(12), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(58)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(6) + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0 in range(T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(6) + oco_1 * T.int64(2) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(6) + oco_1 * T.int64(2) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(56) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(56)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(6) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b65)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b107)
b129 = sch.decompose_reduction(block=b107, loop=l115)
2024-04-29 05:41:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:41:26 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:41:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 05:41:31 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 05:41:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 05:41:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 05:42:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 05:42:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x596eee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5206058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3274678)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8a78)]: 0 failure(s)
2024-04-29 05:42:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9895  0.9844  0.9765  0.9765  0.9691  0.9691  0.9671  0.9671  0.9600  0.9518  0.9518  0.8795  0.8709  0.8595  0.8498  0.8459
[17 : 32]:	0.8421  0.8421  0.8381  0.8268  0.8267  0.8245  0.8233  0.8207  0.7991  0.7939  0.7910  0.7910  0.7893  0.7811  0.7788  0.7743
[33 : 48]:	0.7741  0.7709  0.7700  0.7572  0.7473  0.7445  0.7431  0.7361  0.7318  0.7309  0.7309  0.7250  0.7250  0.7224  0.7224  0.7196
[49 : 64]:	0.7194  0.7175  0.7165  0.7123  0.7115  0.7097  0.7072  0.7072  0.7058  0.7058  0.7058  0.7015  0.7009  0.6985  0.6976  0.6969
2024-04-29 05:42:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:42:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #129: GFLOPs: 24.3376. Time: 185.5498 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #130: GFLOPs: 24.3667. Time: 185.3286 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #131: GFLOPs: 23.3983. Time: 192.9987 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #132: GFLOPs: 138.1426. Time: 32.6897 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #133: GFLOPs: 22.7610. Time: 198.4025 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #134: GFLOPs: 22.2323. Time: 203.1207 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #135: GFLOPs: 133.2700. Time: 33.8849 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #136: GFLOPs: 23.6561. Time: 190.8958 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #137: GFLOPs: 23.5919. Time: 191.4149 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #138: GFLOPs: 122.6094. Time: 36.8311 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #139: GFLOPs: 23.5590. Time: 191.6820 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #140: GFLOPs: 24.8188. Time: 181.9527 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #141: GFLOPs: 91.0673. Time: 49.5879 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #142: GFLOPs: 36.0222. Time: 125.3628 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #143: GFLOPs: 21.0760. Time: 214.2650 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #144: GFLOPs: 62.2940. Time: 72.4923 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #145: GFLOPs: 61.4549. Time: 73.4821 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #146: GFLOPs: 24.8160. Time: 181.9729 us. Best GFLOPs: 147.4812
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #147: GFLOPs: 152.5146. Time: 29.6092 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #148: GFLOPs: 63.9814. Time: 70.5805 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #149: GFLOPs: 62.6058. Time: 72.1313 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #150: GFLOPs: 128.7653. Time: 35.0703 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #151: GFLOPs: 24.1172. Time: 187.2459 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #152: GFLOPs: 23.6005. Time: 191.3448 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #153: GFLOPs: 115.4969. Time: 39.0992 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #154: GFLOPs: 24.3452. Time: 185.4922 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #155: GFLOPs: 22.9594. Time: 196.6884 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #156: GFLOPs: 67.8390. Time: 66.5670 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #157: GFLOPs: 23.7131. Time: 190.4365 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #158: GFLOPs: 23.6067. Time: 191.2947 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #159: GFLOPs: 126.2224. Time: 35.7769 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #160: GFLOPs: 66.5570. Time: 67.8492 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #161: GFLOPs: 18.7049. Time: 241.4256 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #162: GFLOPs: 116.1038. Time: 38.8948 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #163: GFLOPs: 45.3741. Time: 99.5247 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #164: GFLOPs: 63.4272. Time: 71.1972 us. Best GFLOPs: 152.5146
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #165: GFLOPs: 166.9861. Time: 27.0432 us. Best GFLOPs: 166.9861
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #166: GFLOPs: 22.8931. Time: 197.2576 us. Best GFLOPs: 166.9861
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #167: GFLOPs: 46.5388. Time: 97.0338 us. Best GFLOPs: 166.9861
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #168: GFLOPs: 187.8955. Time: 24.0338 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #169: GFLOPs: 28.6583. Time: 157.5755 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #170: GFLOPs: 11.9392. Time: 378.2370 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #171: GFLOPs: 63.1840. Time: 71.4713 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #172: GFLOPs: 56.3973. Time: 80.0720 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #173: GFLOPs: 66.1085. Time: 68.3095 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #174: GFLOPs: 67.6117. Time: 66.7908 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #175: GFLOPs: 22.8804. Time: 197.3672 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #176: GFLOPs: 23.0150. Time: 196.2131 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #177: GFLOPs: 84.6983. Time: 53.3168 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #178: GFLOPs: 30.8785. Time: 146.2455 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #179: GFLOPs: 11.5228. Time: 391.9038 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #180: GFLOPs: 128.6197. Time: 35.1100 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #181: GFLOPs: 30.7881. Time: 146.6749 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #182: GFLOPs: 53.2859. Time: 84.7473 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #183: GFLOPs: 90.2590. Time: 50.0320 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #184: GFLOPs: 76.3603. Time: 59.1386 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #185: GFLOPs: 51.8009. Time: 87.1769 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #186: GFLOPs: 77.9142. Time: 57.9591 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #187: GFLOPs: 68.8557. Time: 65.5841 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #188: GFLOPs: 69.3951. Time: 65.0743 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #189: GFLOPs: 77.4220. Time: 58.3276 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #190: GFLOPs: 16.0610. Time: 281.1680 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #191: GFLOPs: 9.8347. Time: 459.1756 us. Best GFLOPs: 187.8955
2024-04-29 05:44:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_2] Trial #192: GFLOPs: 52.4931. Time: 86.0273 us. Best GFLOPs: 187.8955
