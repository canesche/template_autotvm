2024-04-29 02:09:58 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6"
2024-04-29 02:09:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(5), T.int64(5)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:09:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:09:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(14)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(5), T.int64(18), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(18), oh_0 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(15), T.int64(1), T.int64(2), T.int64(4), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(120), oco_0 * T.int64(120) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 15, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(15), T.int64(1), T.int64(2), T.int64(4)):
                for kh_0 in range(T.int64(5)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(11), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(120), oco_1 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), oh_0 + kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), ow_1 * T.int64(7) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), oco_0 * T.int64(120) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), oco_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 15, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0 in T.grid(T.int64(1), T.int64(15), T.int64(1), T.int64(2), T.int64(4), T.int64(5)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(11), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(120), oco_1 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), oh_0 + kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), ow_1 * T.int64(7) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), oco_0 * T.int64(120) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(1), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 15, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:40:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:40:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:40:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 02:40:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:40:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 02:40:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 02:40:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 02:40:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 02:40:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9995  0.9987  0.9982  0.9980  0.9973  0.9972  0.9966  0.9962  0.9956  0.9953  0.9943  0.9943  0.9936  0.9928  0.9923
[17 : 32]:	0.9916  0.9911  0.9905  0.9898  0.9886  0.9882  0.9881  0.9881  0.9875  0.9871  0.9869  0.9863  0.9860  0.9849  0.9846  0.9845
[33 : 48]:	0.9845  0.9830  0.9829  0.9818  0.9801  0.9787  0.9780  0.9771  0.9771  0.9771  0.9765  0.9761  0.9759  0.9753  0.9748  0.9747
[49 : 64]:	0.9729  0.9726  0.9725  0.9713  0.9712  0.9710  0.9707  0.9705  0.9705  0.9703  0.9703  0.9702  0.9702  0.9698  0.9691  0.9690
2024-04-29 02:40:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:40:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #1: GFLOPs: 100.3517. Time: 48.7502 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #2: GFLOPs: 12.8328. Time: 381.2235 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #3: GFLOPs: 35.2227. Time: 138.8923 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #4: GFLOPs: 1.0501. Time: 4658.6726 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #5: GFLOPs: 36.2478. Time: 134.9644 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #6: GFLOPs: 7.4945. Time: 652.7689 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #7: GFLOPs: 65.8732. Time: 74.2663 us. Best GFLOPs: 100.3517
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(15), T.int64(18), T.int64(11), T.int64(1)):
                with T.block("PaddedInput"):
                    v_i0 = T.axis.spatial(T.int64(1), ax0)
                    v_i1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(8) * T.int64(15) + ax1)
                    v_i2 = T.axis.spatial(T.int64(18), ax2)
                    v_i3 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(5), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(8) * T.int64(15) + oco_1 * T.int64(15) + oco_2_init * T.int64(3) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(5), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(8) * T.int64(15) + oco_1 * T.int64(15) + oco_2 * T.int64(3) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(4) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1470)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(120), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 5, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b62)
l75 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b64)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b105)
b126 = sch.decompose_reduction(block=b105, loop=l112)
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #9: GFLOPs: 121.8175. Time: 40.1597 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #10: GFLOPs: 73.3917. Time: 66.6582 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #11: GFLOPs: 4.9704. Time: 984.2659 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #12: GFLOPs: 2.6673. Time: 1834.1024 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #13: GFLOPs: 24.9573. Time: 196.0210 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #14: GFLOPs: 9.0302. Time: 541.7580 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #15: GFLOPs: 25.7645. Time: 189.8796 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #16: GFLOPs: 14.7733. Time: 331.1481 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #17: GFLOPs: 36.6463. Time: 133.4967 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #18: GFLOPs: 92.1034. Time: 53.1159 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #19: GFLOPs: 8.4305. Time: 580.2899 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #20: GFLOPs: 44.6388. Time: 109.5942 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #21: GFLOPs: 18.1851. Time: 269.0200 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #22: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(12) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(5), T.int64(5)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), oh_2 + b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + kh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), kw_1 + ow_2 * T.int64(7) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(12) + oco_2 * T.int64(12) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 2, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=18)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b63)
l90 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l90)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b64)
l111 = sch.fuse(l91, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b65)
l118 = sch.fuse(l116, l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b119)
b140 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #23: GFLOPs: 82.5718. Time: 59.2473 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #24: GFLOPs: 29.8153. Time: 164.0825 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #25: GFLOPs: 109.5633. Time: 44.6514 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #26: GFLOPs: 30.7495. Time: 159.0973 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #27: GFLOPs: 2.6986. Time: 1812.8692 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #28: GFLOPs: 12.4702. Time: 392.3076 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #29: GFLOPs: 55.6854. Time: 87.8535 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #30: GFLOPs: 69.0271. Time: 70.8730 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #31: GFLOPs: 45.5924. Time: 107.3021 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #32: GFLOPs: 9.0933. Time: 537.9979 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #33: GFLOPs: 53.2203. Time: 91.9227 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #34: GFLOPs: 9.4600. Time: 517.1392 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #35: GFLOPs: 24.0404. Time: 203.4976 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #36: GFLOPs: 25.0959. Time: 194.9386 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #37: GFLOPs: 39.6291. Time: 123.4486 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #38: GFLOPs: 11.8567. Time: 412.6078 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #39: GFLOPs: 49.8382. Time: 98.1609 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #40: GFLOPs: 12.1959. Time: 401.1317 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #41: GFLOPs: 3.5246. Time: 1387.9984 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #42: GFLOPs: 50.2749. Time: 97.3081 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #43: GFLOPs: 20.2121. Time: 242.0411 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #44: GFLOPs: 13.5388. Time: 361.3431 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(12) + oco_2_init * T.int64(12) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(5), T.int64(5)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(12) + ax1)
                            v_i2 = T.axis.spatial(T.int64(18), kh_1 + b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(18), ow_2 + kw_1 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
                    for b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(12) + oco_2 * T.int64(12) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 2, 1, 12])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=18)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b63)
l90 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l90)
l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b64)
l111 = sch.fuse(l91, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b65)
l118 = sch.fuse(l116, l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b119)
b140 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(18), T.int64(18), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(120), T.int64(6), T.int64(18)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(18), b_0_oco_0_oh_0_fused_fused * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(16) and T.int64(2) <= v_i3 and v_i3 < T.int64(16), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2), v_i4], T.float32(0))
            for ow_0, oci_0 in T.grid(T.int64(7), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(5), T.int64(2), T.int64(1)):
                        for oci_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(120), oco_1 * T.int64(40) + oco_2_init * T.int64(5) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_fused_fused * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(2), T.int64(1)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(120), oco_1 * T.int64(40) + oco_2 * T.int64(5) + oco_3)
                                v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_fused_fused * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(120), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_fused_fused * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 8, 5])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b63)
l74 = sch.fuse(l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b109)
b132 = sch.decompose_reduction(block=b109, loop=l118)
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #47: GFLOPs: 23.5251. Time: 207.9548 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #48: GFLOPs: 12.8344. Time: 381.1757 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #49: GFLOPs: 33.9545. Time: 144.0798 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #50: GFLOPs: 3.0945. Time: 1580.9170 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #51: GFLOPs: 4.7614. Time: 1027.4670 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #52: GFLOPs: 14.6436. Time: 334.0809 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #53: GFLOPs: 26.5881. Time: 183.9981 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #54: GFLOPs: 47.4371. Time: 103.1293 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #55: GFLOPs: 19.6845. Time: 248.5284 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #56: GFLOPs: 33.7839. Time: 144.8072 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #57: GFLOPs: 8.8401. Time: 553.4054 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #58: GFLOPs: 31.7868. Time: 153.9054 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #59: GFLOPs: 41.0220. Time: 119.2569 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(120), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(60) // T.int64(4) * T.int64(8) + oco_2_init + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(60) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(60) // T.int64(4) * T.int64(8) + oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(60) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(16) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(60) // T.int64(4) * T.int64(8) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(14), ax2)
                    v_ax3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(60) * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) + ax4)
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 15, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
b96 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b96)
b112 = sch.decompose_reduction(block=b96, loop=l98)
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #61: GFLOPs: 18.3015. Time: 267.3092 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #62: GFLOPs: 2.7364. Time: 1787.8100 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #63: GFLOPs: 16.4662. Time: 297.1037 us. Best GFLOPs: 121.8175
2024-04-29 03:11:50 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #64: GFLOPs: 4.9403. Time: 990.2655 us. Best GFLOPs: 121.8175
2024-04-29 04:10:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:10:18 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 04:10:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 04:10:23 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 04:10:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 04:10:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 04:11:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 04:11:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 04:11:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0012  0.9185  0.9160  0.9130  0.8896  0.8896  0.8861  0.8861  0.8810  0.8750  0.8500  0.8445  0.8439  0.8270  0.8269  0.8186
[17 : 32]:	0.8179  0.8056  0.8040  0.8029  0.8021  0.8021  0.8003  0.7987  0.7987  0.7956  0.7940  0.7910  0.7851  0.7822  0.7795  0.7768
[33 : 48]:	0.7762  0.7758  0.7726  0.7726  0.7726  0.7697  0.7688  0.7658  0.7657  0.7651  0.7651  0.7651  0.7640  0.7633  0.7618  0.7615
[49 : 64]:	0.7607  0.7607  0.7589  0.7589  0.7586  0.7582  0.7557  0.7556  0.7547  0.7539  0.7513  0.7509  0.7485  0.7467  0.7467  0.7449
2024-04-29 04:11:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:11:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #65: GFLOPs: 66.1457. Time: 73.9603 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #66: GFLOPs: 58.3677. Time: 83.8162 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #67: GFLOPs: 64.1176. Time: 76.2998 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #68: GFLOPs: 92.2183. Time: 53.0498 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #69: GFLOPs: 106.2200. Time: 46.0569 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #70: GFLOPs: 105.4763. Time: 46.3816 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #71: GFLOPs: 109.0321. Time: 44.8690 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #72: GFLOPs: 108.8818. Time: 44.9309 us. Best GFLOPs: 121.8175
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #73: GFLOPs: 176.8717. Time: 27.6594 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #74: GFLOPs: 37.6652. Time: 129.8855 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #75: GFLOPs: 75.1867. Time: 65.0669 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #76: GFLOPs: 89.6795. Time: 54.5516 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #77: GFLOPs: 126.0104. Time: 38.8234 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #78: GFLOPs: 118.6630. Time: 41.2273 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #79: GFLOPs: 60.4340. Time: 80.9505 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #80: GFLOPs: 105.9790. Time: 46.1616 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #81: GFLOPs: 45.1483. Time: 108.3577 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #82: GFLOPs: 72.3817. Time: 67.5884 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #83: GFLOPs: 145.2131. Time: 33.6895 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #84: GFLOPs: 127.3464. Time: 38.4162 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #85: GFLOPs: 95.1593. Time: 51.4102 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #86: GFLOPs: 104.1147. Time: 46.9882 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #87: GFLOPs: 120.5454. Time: 40.5835 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #88: GFLOPs: 121.7054. Time: 40.1967 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #89: GFLOPs: 116.5912. Time: 41.9599 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #90: GFLOPs: 120.0759. Time: 40.7422 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #91: GFLOPs: 102.1677. Time: 47.8836 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #92: GFLOPs: 114.7122. Time: 42.6472 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #93: GFLOPs: 78.1483. Time: 62.6010 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #94: GFLOPs: 74.3383. Time: 65.8094 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #95: GFLOPs: 66.7089. Time: 73.3359 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #96: GFLOPs: 109.5209. Time: 44.6687 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #97: GFLOPs: 134.1529. Time: 36.4671 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #98: GFLOPs: 84.0240. Time: 58.2233 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #99: GFLOPs: 58.9605. Time: 82.9735 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #100: GFLOPs: 53.9895. Time: 90.6132 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #101: GFLOPs: 90.4554. Time: 54.0837 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #102: GFLOPs: 85.8827. Time: 56.9633 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #103: GFLOPs: 94.2529. Time: 51.9046 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #104: GFLOPs: 122.8372. Time: 39.8264 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #105: GFLOPs: 114.3926. Time: 42.7664 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #106: GFLOPs: 111.4578. Time: 43.8925 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #107: GFLOPs: 107.9617. Time: 45.3139 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #108: GFLOPs: 75.4778. Time: 64.8159 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #109: GFLOPs: 94.0811. Time: 51.9994 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #110: GFLOPs: 71.6834. Time: 68.2468 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #111: GFLOPs: 57.5002. Time: 85.0808 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #112: GFLOPs: 38.7537. Time: 126.2372 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #113: GFLOPs: 128.4733. Time: 38.0792 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #114: GFLOPs: 138.0687. Time: 35.4328 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #115: GFLOPs: 109.9741. Time: 44.4846 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #116: GFLOPs: 156.5763. Time: 31.2446 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #117: GFLOPs: 65.7930. Time: 74.3569 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #118: GFLOPs: 50.5690. Time: 96.7423 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #119: GFLOPs: 79.9684. Time: 61.1761 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #120: GFLOPs: 90.9415. Time: 53.7946 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #121: GFLOPs: 63.1037. Time: 77.5257 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #122: GFLOPs: 83.1355. Time: 58.8456 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #123: GFLOPs: 52.8093. Time: 92.6383 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #124: GFLOPs: 100.1254. Time: 48.8603 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #125: GFLOPs: 40.3989. Time: 121.0963 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #126: GFLOPs: 55.7154. Time: 87.8062 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #127: GFLOPs: 0.6443. Time: 7593.3758 us. Best GFLOPs: 176.8717
2024-04-29 04:12:51 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #128: GFLOPs: 41.2086. Time: 118.7169 us. Best GFLOPs: 176.8717
2024-04-29 06:10:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:10:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:10:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 06:10:35 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 06:10:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 06:11:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 06:11:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 06:11:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6099c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x542efd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5eb7f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e4a208)]: 0 failure(s)
2024-04-29 06:11:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9030  0.8549  0.8167  0.8167  0.8040  0.8013  0.7778  0.7619  0.7598  0.7598  0.7541  0.7446  0.7446  0.7416  0.7416  0.7369
[17 : 32]:	0.7320  0.7320  0.7274  0.7274  0.7197  0.7197  0.7197  0.7197  0.7193  0.7189  0.7154  0.7154  0.7142  0.7113  0.7111  0.7062
[33 : 48]:	0.7036  0.7029  0.7029  0.7009  0.7001  0.6998  0.6988  0.6988  0.6944  0.6940  0.6940  0.6940  0.6940  0.6932  0.6930  0.6920
[49 : 64]:	0.6920  0.6890  0.6871  0.6849  0.6839  0.6839  0.6829  0.6829  0.6826  0.6811  0.6811  0.6803  0.6783  0.6775  0.6727  0.6727
2024-04-29 06:11:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:11:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #129: GFLOPs: 86.9252. Time: 56.2801 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #130: GFLOPs: 81.3929. Time: 60.1055 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #131: GFLOPs: 76.4494. Time: 63.9921 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #132: GFLOPs: 134.4768. Time: 36.3792 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #133: GFLOPs: 123.3371. Time: 39.6649 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #134: GFLOPs: 115.2467. Time: 42.4494 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #135: GFLOPs: 136.4774. Time: 35.8459 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #136: GFLOPs: 111.7540. Time: 43.7761 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #137: GFLOPs: 118.3037. Time: 41.3525 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #138: GFLOPs: 122.3417. Time: 39.9877 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #139: GFLOPs: 112.5812. Time: 43.4545 us. Best GFLOPs: 176.8717
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #140: GFLOPs: 186.2018. Time: 26.2734 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #141: GFLOPs: 118.8170. Time: 41.1739 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #142: GFLOPs: 124.5650. Time: 39.2740 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #143: GFLOPs: 120.1017. Time: 40.7335 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #144: GFLOPs: 138.4367. Time: 35.3386 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #145: GFLOPs: 119.9960. Time: 40.7694 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #146: GFLOPs: 122.1492. Time: 40.0507 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #147: GFLOPs: 122.8836. Time: 39.8113 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #148: GFLOPs: 119.0496. Time: 41.0935 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #149: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + ow_3_oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + ow_3_oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(16) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l87, l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b98)
b118 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #150: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + ow_3_oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + ow_3_oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(16) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l87, l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b98)
b118 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #151: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + ow_3_oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + ow_3_oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 * T.int64(5) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(16) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[5, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 5])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l87, l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b98)
b118 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #152: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(35), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2_init * T.int64(8) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + ow_3_oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                    for ow_3_oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + oco_1 * T.int64(8) + oco_2 * T.int64(8) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + ow_3_oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(5), kh_0 * T.int64(5) + kh_1)
                            v_kw = T.axis.reduce(T.int64(5), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(2) <= v_oh + v_kh and v_oh + v_kh < T.int64(16) and T.int64(2) <= v_ow + v_kw and v_ow + v_kw < T.int64(16), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(2), v_ow + v_kw - T.int64(2), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(120), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[5, 3, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 5])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[5, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
l90 = sch.fuse(l87, l88, preserve_unit_iters=True)
sch.vectorize(loop=l90)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b64)
l97 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.vectorize(loop=l97)
b98 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b98)
b118 = sch.decompose_reduction(block=b98, loop=l105)
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #153: GFLOPs: 96.2869. Time: 50.8081 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #154: GFLOPs: 108.5819. Time: 45.0550 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #155: GFLOPs: 132.7982. Time: 36.8391 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #156: GFLOPs: 123.8927. Time: 39.4871 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #157: GFLOPs: 182.7663. Time: 26.7673 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #158: GFLOPs: 35.5698. Time: 137.5368 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #159: GFLOPs: 120.4265. Time: 40.6236 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #160: GFLOPs: 118.8285. Time: 41.1699 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #161: GFLOPs: 107.3827. Time: 45.5582 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #162: GFLOPs: 106.8401. Time: 45.7895 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #163: GFLOPs: 105.2672. Time: 46.4737 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #164: GFLOPs: 101.5492. Time: 48.1753 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #165: GFLOPs: 107.6548. Time: 45.4430 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #166: GFLOPs: 61.2521. Time: 79.8692 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #167: GFLOPs: 121.9027. Time: 40.1317 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #168: GFLOPs: 128.2740. Time: 38.1384 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #169: GFLOPs: 130.2603. Time: 37.5568 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #170: GFLOPs: 112.5346. Time: 43.4725 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #171: GFLOPs: 105.4281. Time: 46.4028 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #172: GFLOPs: 105.3462. Time: 46.4389 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #173: GFLOPs: 125.4919. Time: 38.9839 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #174: GFLOPs: 81.3389. Time: 60.1454 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #175: GFLOPs: 136.4323. Time: 35.8578 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #176: GFLOPs: 44.2237. Time: 110.6231 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #177: GFLOPs: 47.1051. Time: 103.8563 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #178: GFLOPs: 136.3727. Time: 35.8735 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #179: GFLOPs: 126.0511. Time: 38.8109 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #180: GFLOPs: 127.9392. Time: 38.2382 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #181: GFLOPs: 109.0806. Time: 44.8490 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #182: GFLOPs: 127.2339. Time: 38.4501 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #183: GFLOPs: 137.7699. Time: 35.5097 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #184: GFLOPs: 139.4199. Time: 35.0894 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #185: GFLOPs: 127.7724. Time: 38.2881 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #186: GFLOPs: 118.5258. Time: 41.2751 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #187: GFLOPs: 125.9154. Time: 38.8528 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #188: GFLOPs: 47.3306. Time: 103.3615 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #189: GFLOPs: 121.8825. Time: 40.1383 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #190: GFLOPs: 3.4031. Time: 1437.5690 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #191: GFLOPs: 85.3458. Time: 57.3216 us. Best GFLOPs: 186.2018
2024-04-29 06:13:09 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_6] Trial #192: GFLOPs: 13.9728. Time: 350.1211 us. Best GFLOPs: 186.2018
