2024-04-29 02:11:05 [INFO] [task_scheduler.cc:160] Initializing Task #34: "fused_mean"
2024-04-29 02:11:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(320), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        p0_red = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(4)))
        for ax0, ax1, ax2, k2, k3 in T.grid(T.int64(1), T.int64(320), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("p0_red"):
                v_ax0, v_ax1, v_ax2, v_k2, v_k3 = T.axis.remap("SSSRR", [ax0, ax1, ax2, k2, k3])
                T.reads(p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2])
                T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                with T.init():
                    p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2]
        for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(320), T.int64(4)):
            with T.block("T_divide"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
2024-04-29 02:11:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:11:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(320), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            p0_red = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(4)))
            p0_red_rf = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(4), T.int64(49)))
            for ax0, ax1, ax2, k2_k3_fused_0, k2_k3_fused_1 in T.grid(T.int64(1), T.int64(320), T.int64(4), T.int64(49), T.int64(1)):
                with T.block("p0_red_rf"):
                    vk2_k3_fused_0, v_ax0, v_ax1, v_ax2, vk2_k3_fused_1 = T.axis.remap("SSSSR", [k2_k3_fused_0, ax0, ax1, ax2, k2_k3_fused_1])
                    T.reads(p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2])
                    T.writes(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0])
                    with T.init():
                        p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0] = T.float32(0)
                    p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0] = p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0] + p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(320)):
                for ax0_1, ax1_1, ax2, ax3 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("p0_red"):
                        vk2_k3_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax2)
                        v_ax2 = T.axis.spatial(T.int64(4), ax3)
                        T.reads(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0])
                        T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                        with T.init():
                            p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                        p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0]
                for ax2 in range(T.int64(4)):
                    with T.block("T_divide"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                        T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                        T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
l2, l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l5, l6, preserve_unit_iters=True)
v8, v9 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[49, 1])
l10, l11 = sch.split(loop=l7, factors=[v8, v9], preserve_unit_iters=True)
b12 = sch.rfactor(loop=l10, factor_axis=3)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-29 02:11:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(320), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            p0_red = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(4)))
            p0_red_rf = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(320)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(49)):
                    with T.block("p0_red_rf"):
                        vk2_k3_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(320), ax1 + ax2)
                        v_ax2, vk2_k3_fused_0 = T.axis.remap("SR", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2])
                        T.writes(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1])
                        with T.init():
                            p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1] = T.float32(0)
                        p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1] = p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1] + p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2]
                for ax2, k2_k3_fused_1 in T.grid(T.int64(4), T.int64(1)):
                    with T.block("p0_red"):
                        vk2_k3_fused_1, v_ax0, v_ax1, v_ax2 = T.axis.remap("RSSS", [k2_k3_fused_1, ax0, ax1, ax2])
                        T.reads(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1])
                        T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                        with T.init():
                            p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                        p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(320), T.int64(4)):
                with T.block("T_divide"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                    T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                    T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
l2, l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l5, l6, preserve_unit_iters=True)
v8, v9 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[49, 1])
l10, l11 = sch.split(loop=l7, factors=[v8, v9], preserve_unit_iters=True)
b12 = sch.rfactor(loop=l11, factor_axis=3)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-29 02:11:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(320), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            p0_red = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(4)))
            for ax0, ax1, ax2, k2, k3 in T.grid(T.int64(1), T.int64(320), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("p0_red"):
                    v_ax0, v_ax1, v_ax2, v_k2, v_k3 = T.axis.remap("SSSRR", [ax0, ax1, ax2, k2, k3])
                    T.reads(p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2])
                    T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                    with T.init():
                        p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                    p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(320), T.int64(4)):
                with T.block("T_divide"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                    T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                    T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
l3 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l3, preserve_unit_loops=True, index=-1)
2024-04-29 03:07:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:07:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:07:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f62c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5219568)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50471e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x452b8d8)]: 0 failure(s)
2024-04-29 03:07:01 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:07:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f62c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5219568)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50471e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x452b8d8)]: 0 failure(s)
2024-04-29 03:07:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f62c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5219568)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50471e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x452b8d8)]: 0 failure(s)
2024-04-29 03:07:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f62c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5219568)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50471e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x452b8d8)]: 0 failure(s)
2024-04-29 03:07:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5f62c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5219568)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x50471e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x452b8d8)]: 0 failure(s)
2024-04-29 03:07:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9920  0.9870  0.9864  0.9808  0.9780  0.9685  0.9683  0.9661  0.9654  0.9623  0.9503  0.9492  0.9440  0.9436  0.9392
[17 : 32]:	0.9376  0.9284  0.9249  0.9220  0.9186  0.9170  0.9168  0.9143  0.9064  0.9054  0.9021  0.8970  0.8905  0.8904  0.8891  0.8865
[33 : 48]:	0.8799  0.8784  0.8738  0.8599  0.8532  0.8521  0.8468  0.8443  0.8415  0.8396  0.8326  0.8317  0.8271  0.8266  0.8247  0.8225
[49 : 64]:	0.8107  0.8107  0.8090  0.8060  0.8046  0.8033  0.7978  0.7914  0.7882  0.7819  0.7759  0.7738  0.7683  0.7666  0.7658  0.7643
2024-04-29 03:07:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:07:11 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #1: GFLOPs: 5.2396. Time: 12.2146 us. Best GFLOPs: 5.2396
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #2: GFLOPs: 6.4900. Time: 9.8614 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #3: GFLOPs: 2.6966. Time: 23.7337 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #4: GFLOPs: 4.5715. Time: 13.9999 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #5: GFLOPs: 5.4777. Time: 11.6837 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #6: GFLOPs: 5.2542. Time: 12.1808 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #7: GFLOPs: 2.7672. Time: 23.1281 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #8: GFLOPs: 5.5026. Time: 11.6308 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #9: GFLOPs: 2.4294. Time: 26.3444 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #10: GFLOPs: 5.0973. Time: 12.5556 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #11: GFLOPs: 4.6068. Time: 13.8924 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #12: GFLOPs: 4.6917. Time: 13.6410 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #13: GFLOPs: 3.0466. Time: 21.0069 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #14: GFLOPs: 2.8000. Time: 22.8569 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #15: GFLOPs: 1.8330. Time: 34.9160 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #16: GFLOPs: 1.9627. Time: 32.6075 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #17: GFLOPs: 2.7763. Time: 23.0522 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #18: GFLOPs: 1.8660. Time: 34.2982 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #19: GFLOPs: 2.5532. Time: 25.0667 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #20: GFLOPs: 4.4450. Time: 14.3981 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #21: GFLOPs: 1.0868. Time: 58.8909 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #22: GFLOPs: 1.7790. Time: 35.9749 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #23: GFLOPs: 5.6527. Time: 11.3219 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #24: GFLOPs: 3.1858. Time: 20.0894 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #25: GFLOPs: 2.0869. Time: 30.6669 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #26: GFLOPs: 6.0132. Time: 10.6432 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #27: GFLOPs: 2.5732. Time: 24.8718 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #28: GFLOPs: 2.6988. Time: 23.7141 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #29: GFLOPs: 5.2275. Time: 12.2430 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #30: GFLOPs: 2.3026. Time: 27.7944 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #31: GFLOPs: 2.5557. Time: 25.0417 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #32: GFLOPs: 6.1088. Time: 10.4767 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #33: GFLOPs: 5.2725. Time: 12.1385 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #34: GFLOPs: 4.6421. Time: 13.7868 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #35: GFLOPs: 2.1136. Time: 30.2799 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #36: GFLOPs: 2.7771. Time: 23.0460 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #37: GFLOPs: 1.9331. Time: 33.1073 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #38: GFLOPs: 1.7435. Time: 36.7087 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #39: GFLOPs: 4.8211. Time: 13.2750 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #40: GFLOPs: 2.8514. Time: 22.4449 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #41: GFLOPs: 3.0302. Time: 21.1208 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #42: GFLOPs: 2.6555. Time: 24.1013 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #43: GFLOPs: 2.7281. Time: 23.4595 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #44: GFLOPs: 2.6726. Time: 23.9471 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #45: GFLOPs: 5.2005. Time: 12.3066 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #46: GFLOPs: 2.7006. Time: 23.6987 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #47: GFLOPs: 5.9154. Time: 10.8192 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #48: GFLOPs: 2.7599. Time: 23.1894 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #49: GFLOPs: 5.0812. Time: 12.5955 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #50: GFLOPs: 1.8812. Time: 34.0209 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #51: GFLOPs: 2.3089. Time: 27.7189 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #52: GFLOPs: 4.9518. Time: 12.9246 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #53: GFLOPs: 4.1033. Time: 15.5974 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #54: GFLOPs: 1.6785. Time: 38.1295 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #55: GFLOPs: 2.1404. Time: 29.9004 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #56: GFLOPs: 2.8992. Time: 22.0750 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #57: GFLOPs: 1.8346. Time: 34.8850 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #58: GFLOPs: 5.9531. Time: 10.7507 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #59: GFLOPs: 5.7819. Time: 11.0690 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #60: GFLOPs: 1.8445. Time: 34.6980 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #61: GFLOPs: 1.2303. Time: 52.0191 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #62: GFLOPs: 2.6395. Time: 24.2472 us. Best GFLOPs: 6.4900
2024-04-29 03:12:57 [INFO] [task_scheduler.cc:131] [Task #34: fused_mean] Trial #63: GFLOPs: 2.5784. Time: 24.8216 us. Best GFLOPs: 6.4900
