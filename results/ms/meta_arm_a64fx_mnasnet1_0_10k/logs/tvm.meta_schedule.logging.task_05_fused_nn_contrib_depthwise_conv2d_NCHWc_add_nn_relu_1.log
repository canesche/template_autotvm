2024-04-29 02:09:03 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1"
2024-04-29 02:09:03 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:09:03 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:09:03 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(113), T.int64(57), T.int64(1)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), ax2)
                        v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(7), T.int64(4), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(12), oco_0 * T.int64(12) + oco_1 * T.int64(12) + oco_2 * T.int64(6) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:03 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for kh_0 in range(T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(111), T.int64(57), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(114), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(56) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(7), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(12), oco_0 * T.int64(12) + oco_1 * T.int64(12) + oco_2 * T.int64(6) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(28), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:09:03 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(111), T.int64(55), T.int64(1)):
                        with T.block("PaddedInput"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(114), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), ow_1 * T.int64(56) + kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(7), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(12), oco_0 * T.int64(12) + oco_1 * T.int64(12) + oco_2 * T.int64(6) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oci_0 * T.int64(2) + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 8, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
2024-04-29 02:18:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:18:07 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:18:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 02:18:13 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:18:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 02:18:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 02:18:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 02:18:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 02:18:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9984  0.9980  0.9975  0.9963  0.9961  0.9958  0.9945  0.9942  0.9934  0.9934  0.9929  0.9924  0.9920  0.9914  0.9911
[17 : 32]:	0.9909  0.9890  0.9887  0.9882  0.9879  0.9856  0.9856  0.9849  0.9847  0.9844  0.9830  0.9829  0.9820  0.9813  0.9801  0.9798
[33 : 48]:	0.9794  0.9793  0.9788  0.9782  0.9770  0.9761  0.9755  0.9751  0.9745  0.9744  0.9737  0.9737  0.9736  0.9734  0.9715  0.9715
[49 : 64]:	0.9712  0.9707  0.9702  0.9699  0.9692  0.9692  0.9691  0.9688  0.9680  0.9671  0.9661  0.9658  0.9658  0.9657  0.9653  0.9650
2024-04-29 02:18:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:18:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #1: GFLOPs: 3.0367. Time: 991.4078 us. Best GFLOPs: 3.0367
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #2: GFLOPs: 65.6199. Time: 45.8788 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #3: GFLOPs: 36.2156. Time: 83.1288 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #4: GFLOPs: 25.6296. Time: 117.4642 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #5: GFLOPs: 11.8436. Time: 254.1940 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #6: GFLOPs: 38.9109. Time: 77.3705 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #7: GFLOPs: 21.0598. Time: 142.9528 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #8: GFLOPs: 6.7277. Time: 447.4874 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #9: GFLOPs: 22.0020. Time: 136.8315 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #10: GFLOPs: 33.1763. Time: 90.7444 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #11: GFLOPs: 18.8123. Time: 160.0318 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #12: GFLOPs: 16.1899. Time: 185.9535 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #13: GFLOPs: 17.8798. Time: 168.3780 us. Best GFLOPs: 65.6199
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #14: GFLOPs: 69.1288. Time: 43.5500 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #15: GFLOPs: 29.7548. Time: 101.1791 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #16: GFLOPs: 4.5184. Time: 666.2824 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #17: GFLOPs: 33.5247. Time: 89.8014 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(57)):
                for ax3_ax4_fused in T.vectorized(T.int64(60)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0 in range(T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        for oci_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(12), oco_1 * T.int64(12) + oco_2_init * T.int64(2) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init * T.int64(2) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(12), oco_1 * T.int64(12) + oco_2 * T.int64(2) + oco_3)
                                v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                                v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(7) + ow_1 + ow_2 + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(28)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(8) * T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(8) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 6, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
l99 = sch.fuse(l97, preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b65)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b108)
b130 = sch.decompose_reduction(block=b108, loop=l116)
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #19: GFLOPs: 5.9400. Time: 506.8318 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #20: GFLOPs: 53.6889. Time: 56.0741 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #21: GFLOPs: 22.0675. Time: 136.4253 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #22: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(57), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(7), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(12), oco_1 * T.int64(12) + oco_2_init * T.int64(6) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(12), oco_1 * T.int64(12) + oco_2 * T.int64(6) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused // T.int64(4) * T.int64(28) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 6])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74 = sch.get_loops(block=b63)
l75 = sch.fuse(l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b64)
l98 = sch.fuse(l77, preserve_unit_iters=True)
sch.parallel(loop=l98)
sch.annotate(block_or_loop=l98, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l98, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b65)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b112)
b134 = sch.decompose_reduction(block=b112, loop=l120)
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #23: GFLOPs: 60.4631. Time: 49.7917 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #24: GFLOPs: 39.7399. Time: 75.7566 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #25: GFLOPs: 2.9536. Time: 1019.2814 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #26: GFLOPs: 66.2419. Time: 45.4480 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(42), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(14) * T.int64(4) + oco_1 * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(14) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(14) * T.int64(4) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                        v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(14) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(113) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(113), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(14) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(14) * T.int64(4) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
l96 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b97)
b118 = sch.decompose_reduction(block=b97, loop=l104)
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(21), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(8) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0 in range(T.int64(3)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(15), T.int64(113)):
                        for ax4_fused in T.vectorized(T.int64(2)):
                            with T.block("PaddedInput"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(21) // T.int64(7) * T.int64(4) + oco_1 + ax1)
                                v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(16) + kh_0 + ax2)
                                v_i3 = T.axis.spatial(T.int64(114), ax3)
                                v_i4 = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + oco_1 + oco_2 + oco_3)
                                v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                                v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2 * T.int64(7) + ow_3)
                                v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(8) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 4, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 8])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 8, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b63)
l82 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b64)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b65)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b113)
b134 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #29: GFLOPs: 52.7770. Time: 57.0431 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #30: GFLOPs: 7.8670. Time: 382.6805 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #31: GFLOPs: 51.6399. Time: 58.2991 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #32: GFLOPs: 27.5593. Time: 109.2394 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #33: GFLOPs: 3.0915. Time: 973.8242 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #34: GFLOPs: 4.4477. Time: 676.8831 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(42), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(29), T.int64(17)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(56) + oh_1 * T.int64(28) + ax2)
                            v_i3 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(16) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(4) + oco_1 * T.int64(4) + oco_2_init * T.int64(2) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(28) + oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(8) + ow_1 * T.int64(8) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(4) + oco_1 * T.int64(4) + oco_2 * T.int64(2) + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(28) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(8) + ow_1 * T.int64(8) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(14) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(8) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[3, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 4, 2])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64, b65 = sch.get_child_blocks(b62)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b63)
l79 = sch.fuse(l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b64)
l101 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b65)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b109)
b130 = sch.decompose_reduction(block=b109, loop=l116)
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #36: GFLOPs: 20.0809. Time: 149.9217 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #37: GFLOPs: 15.6390. Time: 192.5028 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #38: GFLOPs: 37.6361. Time: 79.9914 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #39: GFLOPs: 61.4352. Time: 49.0038 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #40: GFLOPs: 56.2929. Time: 53.4803 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #41: GFLOPs: 10.0006. Time: 301.0392 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #42: GFLOPs: 20.6833. Time: 145.5548 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #43: GFLOPs: 1.3099. Time: 2298.2533 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #44: GFLOPs: 11.5228. Time: 261.2687 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #45: GFLOPs: 4.4069. Time: 683.1508 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #46: GFLOPs: 4.2735. Time: 704.4729 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #47: GFLOPs: 8.5121. Time: 353.6787 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #48: GFLOPs: 41.2615. Time: 72.9630 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #49: GFLOPs: 38.0735. Time: 79.0722 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #50: GFLOPs: 8.5132. Time: 353.6334 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #51: GFLOPs: 67.8784. Time: 44.3522 us. Best GFLOPs: 69.1288
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #52: GFLOPs: 85.3639. Time: 35.2674 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #53: GFLOPs: 76.9623. Time: 39.1173 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #54: GFLOPs: 47.1027. Time: 63.9149 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(12), oco_2_init * T.int64(3) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(8) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(12), oco_2 * T.int64(3) + oco_3)
                    v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(8) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(113) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(113), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
b59, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b59, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v60 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v60)
l61 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l61, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b62 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b62, ann_key="meta_schedule.unroll_explicit")
b63, b64 = sch.get_child_blocks(b62)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b63)
l89 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l89)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b64)
l96 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b97)
b113 = sch.decompose_reduction(block=b97, loop=l99)
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #56: GFLOPs: 1.4704. Time: 2047.4303 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #57: GFLOPs: 50.5540. Time: 59.5513 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #58: GFLOPs: 62.4280. Time: 48.2245 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #59: GFLOPs: 5.3438. Time: 563.3766 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #60: GFLOPs: 5.9390. Time: 506.9173 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #61: GFLOPs: 9.1607. Time: 328.6379 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #62: GFLOPs: 44.6136. Time: 67.4807 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #63: GFLOPs: 55.5961. Time: 54.1506 us. Best GFLOPs: 85.3639
2024-04-29 03:11:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #64: GFLOPs: 7.3345. Time: 410.4668 us. Best GFLOPs: 85.3639
2024-04-29 05:17:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:17:36 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 05:17:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 05:17:41 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 05:17:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 05:18:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 05:18:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 05:18:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3513a68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x45681f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5098bd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4c4ead8)]: 0 failure(s)
2024-04-29 05:18:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9211  0.9064  0.8909  0.8532  0.8382  0.8367  0.8367  0.8367  0.8343  0.8209  0.8102  0.8096  0.8096  0.8040  0.8040  0.7955
[17 : 32]:	0.7863  0.7856  0.7850  0.7850  0.7840  0.7836  0.7770  0.7733  0.7710  0.7671  0.7664  0.7637  0.7637  0.7621  0.7621  0.7568
[33 : 48]:	0.7538  0.7523  0.7523  0.7484  0.7483  0.7471  0.7462  0.7462  0.7454  0.7405  0.7387  0.7387  0.7360  0.7360  0.7360  0.7302
[49 : 64]:	0.7290  0.7267  0.7264  0.7264  0.7256  0.7255  0.7254  0.7246  0.7228  0.7223  0.7169  0.7167  0.7151  0.7151  0.7149  0.7148
2024-04-29 05:18:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:18:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #65: GFLOPs: 113.4540. Time: 26.5355 us. Best GFLOPs: 113.4540
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #66: GFLOPs: 85.0171. Time: 35.4112 us. Best GFLOPs: 113.4540
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #67: GFLOPs: 114.6649. Time: 26.2553 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #68: GFLOPs: 86.6373. Time: 34.7490 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #69: GFLOPs: 79.3280. Time: 37.9508 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #70: GFLOPs: 78.2611. Time: 38.4681 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #71: GFLOPs: 80.3024. Time: 37.4903 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #72: GFLOPs: 78.5624. Time: 38.3206 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #73: GFLOPs: 111.3412. Time: 27.0390 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #74: GFLOPs: 74.6845. Time: 40.3104 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #75: GFLOPs: 78.3032. Time: 38.4475 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #76: GFLOPs: 110.7499. Time: 27.1834 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #77: GFLOPs: 113.3190. Time: 26.5671 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #78: GFLOPs: 68.2701. Time: 44.0978 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #79: GFLOPs: 68.6569. Time: 43.8493 us. Best GFLOPs: 114.6649
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #80: GFLOPs: 146.0063. Time: 20.6194 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #81: GFLOPs: 52.5408. Time: 57.2994 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #82: GFLOPs: 47.4729. Time: 63.4164 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #83: GFLOPs: 86.6239. Time: 34.7544 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #84: GFLOPs: 61.9168. Time: 48.6227 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #85: GFLOPs: 84.2411. Time: 35.7374 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #86: GFLOPs: 61.3038. Time: 49.1088 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #87: GFLOPs: 70.3292. Time: 42.8067 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #88: GFLOPs: 74.8366. Time: 40.2284 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #89: GFLOPs: 73.1529. Time: 41.1543 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #90: GFLOPs: 73.8526. Time: 40.7644 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #91: GFLOPs: 74.1675. Time: 40.5914 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #92: GFLOPs: 69.6322. Time: 43.2352 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #93: GFLOPs: 69.7628. Time: 43.1542 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #94: GFLOPs: 75.4996. Time: 39.8752 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #95: GFLOPs: 75.0707. Time: 40.1030 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #96: GFLOPs: 37.4341. Time: 80.4229 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #97: GFLOPs: 22.2924. Time: 135.0490 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #98: GFLOPs: 42.0399. Time: 71.6120 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #99: GFLOPs: 55.7280. Time: 54.0224 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #100: GFLOPs: 79.8541. Time: 37.7008 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #101: GFLOPs: 68.6707. Time: 43.8406 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #102: GFLOPs: 85.7560. Time: 35.1061 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #103: GFLOPs: 52.1392. Time: 57.7408 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #104: GFLOPs: 113.3170. Time: 26.5676 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #105: GFLOPs: 113.8276. Time: 26.4484 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #106: GFLOPs: 122.8451. Time: 24.5070 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #107: GFLOPs: 82.5343. Time: 36.4765 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #108: GFLOPs: 82.8919. Time: 36.3191 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #109: GFLOPs: 66.8656. Time: 45.0240 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #110: GFLOPs: 61.4473. Time: 48.9942 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #111: GFLOPs: 71.4701. Time: 42.1233 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #112: GFLOPs: 31.5742. Time: 95.3487 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #113: GFLOPs: 72.8547. Time: 41.3228 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #114: GFLOPs: 74.5198. Time: 40.3995 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #115: GFLOPs: 82.4146. Time: 36.5295 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #116: GFLOPs: 81.0874. Time: 37.1273 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #117: GFLOPs: 36.4749. Time: 82.5378 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #118: GFLOPs: 66.8552. Time: 45.0311 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #119: GFLOPs: 67.9440. Time: 44.3094 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #120: GFLOPs: 58.9565. Time: 51.0641 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #121: GFLOPs: 64.8875. Time: 46.3966 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #122: GFLOPs: 27.6928. Time: 108.7127 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #123: GFLOPs: 26.8321. Time: 112.2000 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #124: GFLOPs: 26.7994. Time: 112.3367 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #125: GFLOPs: 43.7896. Time: 68.7506 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #126: GFLOPs: 1.4776. Time: 2037.4250 us. Best GFLOPs: 146.0063
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(12), T.int64(112), T.int64(112), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(114), T.int64(114), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(5), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(12) // T.int64(2) * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(114), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(12) * T.int64(8) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(114), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(12) // T.int64(2) * T.int64(2) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(12) * T.int64(4) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init * T.int64(4) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(56), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oci_3_fused in T.vectorized(T.int64(4)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(12), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(12) // T.int64(2) * T.int64(2) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(56), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(12) * T.int64(4) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(2) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 * T.int64(4) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l4, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l5, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l6, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l7, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l8, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l53, l54 = sch.split(loop=l9, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l10, factors=[v55, v56], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49, l54, l58, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b62)
l78 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b64)
l104 = sch.fuse(l99, l100, l101, l102, l103, preserve_unit_iters=True)
l105, l106 = sch.split(loop=l104, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b107)
b125 = sch.decompose_reduction(block=b107, loop=l111)
2024-04-29 05:20:23 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_depthwise_conv2d_NCHWc_add_nn_relu_1] Trial #128: GFLOPs: 20.2769. Time: 148.4724 us. Best GFLOPs: 146.0063
