2024-04-29 01:54:43 [INFO] [task_scheduler.cc:160] Initializing Task #10: "fused_nn_max_pool2d_1"
2024-04-29 01:54:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 01:54:43 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(55), T.int64(55), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 01:54:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2 * T.int64(2) + rv0_rv1_fused_0 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 01:54:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(27)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(55), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0, rv1 in T.grid(T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 02:10:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:10:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:10:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 02:10:15 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:10:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 02:10:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 02:10:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 02:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 02:10:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9982  0.9830  0.9788  0.9748  0.9658  0.9573  0.9559  0.9546  0.9496  0.9434  0.9369  0.9337  0.9306  0.9286  0.9270
[17 : 32]:	0.9239  0.9212  0.9176  0.9043  0.8864  0.8810  0.8787  0.8731  0.8717  0.8707  0.8670  0.8648  0.8532  0.8516  0.8455  0.8396
[33 : 48]:	0.8348  0.8335  0.8231  0.8194  0.8174  0.8136  0.8103  0.8041  0.8027  0.7960  0.7823  0.7739  0.7596  0.7522  0.7461  0.7436
[49 : 64]:	0.7385  0.7374  0.7249  0.7240  0.7215  0.7163  0.7132  0.7131  0.7125  0.7016  0.6955  0.6871  0.6869  0.6845  0.6784  0.6774
2024-04-29 02:10:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:10:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 11.0285. Time: 76.1491 us. Best GFLOPs: 11.0285
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 24.1351. Time: 34.7961 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 6.7105. Time: 125.1489 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 10.1829. Time: 82.4723 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 16.0524. Time: 52.3167 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 17.7497. Time: 47.3140 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_max_pool2d_1] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(55)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused_fused // T.int64(27) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(27) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused_fused // T.int64(27))
                            v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused_fused % T.int64(27))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                    v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51 = sch.get_loops(block=b46)
b52 = sch.decompose_reduction(block=b46, loop=l50)
b53 = sch.get_block(name="pool_max", func_name="main")
l54, l55, l56, l57 = sch.get_loops(block=b53)
b58 = sch.decompose_reduction(block=b53, loop=l57)
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 12.7851. Time: 65.6864 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 12.3553. Time: 67.9714 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 13.0474. Time: 64.3660 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_max_pool2d_1] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
        for ax0_ax1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(55), T.int64(55)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_fused_fused + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax2, ax3, ax4 in T.grid(T.int64(27), T.int64(27), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                    v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b19)
l29 = sch.fuse(l22, l23, preserve_unit_iters=True)
sch.parallel(loop=l29)
l30 = sch.fuse(l28, preserve_unit_iters=True)
sch.vectorize(loop=l30)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l31, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
b53 = sch.decompose_reduction(block=b46, loop=l51)
b54 = sch.get_block(name="pool_max", func_name="main")
l55, l56, l57, l58 = sch.get_loops(block=b54)
b59 = sch.decompose_reduction(block=b54, loop=l58)
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 18.1610. Time: 46.2424 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 14.0369. Time: 59.8284 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 13.7618. Time: 61.0246 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 14.3989. Time: 58.3246 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 7.5711. Time: 110.9229 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 18.8969. Time: 44.4416 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 23.7737. Time: 35.3251 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 13.8725. Time: 60.5375 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 12.4099. Time: 67.6724 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 6.8050. Time: 123.4100 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 17.8137. Time: 47.1439 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 11.3139. Time: 74.2278 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 14.2126. Time: 59.0891 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 13.4156. Time: 62.5995 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 4.4423. Time: 189.0474 us. Best GFLOPs: 24.1351
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 48.2278. Time: 17.4134 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 7.0153. Time: 119.7114 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 7.8559. Time: 106.9017 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 9.7465. Time: 86.1654 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 19.2145. Time: 43.7069 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 6.6420. Time: 126.4391 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_max_pool2d_1] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1792)):
            for ax3 in range(T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(55) and v_ax3 < T.int64(55), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                            v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(864), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                    v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26 = sch.get_loops(block=b19)
l27 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l27)
l28 = sch.fuse(l26, preserve_unit_iters=True)
sch.vectorize(loop=l28)
l29, l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b20)
l36 = sch.fuse(l29, l30, l31, preserve_unit_iters=True)
sch.parallel(loop=l36)
l37 = sch.fuse(l35, preserve_unit_iters=True)
sch.vectorize(loop=l37)
sch.annotate(block_or_loop=l36, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l36, ann_key="pragma_unroll_explicit", ann_val=1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b21)
l44 = sch.fuse(l38, l39, l40, preserve_unit_iters=True)
sch.parallel(loop=l44)
sch.annotate(block_or_loop=l44, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l44, ann_key="pragma_unroll_explicit", ann_val=1)
b45 = sch.get_block(name="pool_max_rf", func_name="main")
l46, l47, l48, l49, l50 = sch.get_loops(block=b45)
b51 = sch.decompose_reduction(block=b45, loop=l49)
b52 = sch.get_block(name="pool_max", func_name="main")
l53, l54, l55, l56 = sch.get_loops(block=b52)
b57 = sch.decompose_reduction(block=b52, loop=l56)
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 16.6406. Time: 50.4675 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 22.5120. Time: 37.3049 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 9.5674. Time: 87.7784 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 5.7723. Time: 145.4893 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 14.9564. Time: 56.1506 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 12.2322. Time: 68.6554 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 10.9653. Time: 76.5879 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 17.6584. Time: 47.5586 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 15.6622. Time: 53.6202 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 10.9642. Time: 76.5956 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 11.9702. Time: 70.1582 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 10.4952. Time: 80.0184 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 11.5391. Time: 72.7793 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 25.1045. Time: 33.4525 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 7.6470. Time: 109.8212 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 10.8644. Time: 77.2989 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 17.9919. Time: 46.6771 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 7.8270. Time: 107.2956 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 12.7108. Time: 66.0702 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #53: GFLOPs: 12.6439. Time: 66.4202 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #54: GFLOPs: 25.1344. Time: 33.4127 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #55: GFLOPs: 7.1768. Time: 117.0174 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 14.3161. Time: 58.6620 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 9.7811. Time: 85.8605 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 6.0043. Time: 139.8680 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #59: GFLOPs: 17.4177. Time: 48.2157 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #60: GFLOPs: 12.2674. Time: 68.4586 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #61: GFLOPs: 10.5690. Time: 79.4597 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #62: GFLOPs: 20.1023. Time: 41.7766 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #63: GFLOPs: 17.2810. Time: 48.5973 us. Best GFLOPs: 48.2278
2024-04-29 02:32:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #64: GFLOPs: 24.5254. Time: 34.2424 us. Best GFLOPs: 48.2278
2024-04-29 06:10:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:10:12 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 06:10:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 06:10:14 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 06:10:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 06:10:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 06:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 06:10:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30e3aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3d96c48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33ce238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34a16e8)]: 0 failure(s)
2024-04-29 06:10:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8830  0.8040  0.7620  0.6046  0.5817  0.5710  0.5565  0.5216  0.5197  0.4971  0.4926  0.4716  0.4501  0.4475  0.4440  0.4432
[17 : 32]:	0.4367  0.4367  0.4367  0.4331  0.4322  0.4322  0.4042  0.4007  0.3992  0.3920  0.3882  0.3868  0.3849  0.3803  0.3803  0.3777
[33 : 48]:	0.3737  0.3669  0.3652  0.3621  0.3617  0.3609  0.3551  0.3551  0.3541  0.3519  0.3503  0.3490  0.3468  0.3451  0.3438  0.3438
[49 : 64]:	0.3406  0.3406  0.3294  0.3284  0.3275  0.3275  0.3260  0.3254  0.3253  0.3253  0.3229  0.3216  0.3200  0.3197  0.3195  0.3193
2024-04-29 06:10:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:10:39 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #65: GFLOPs: 9.3255. Time: 90.0546 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #66: GFLOPs: 21.8762. Time: 38.3891 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #67: GFLOPs: 23.1453. Time: 36.2841 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #68: GFLOPs: 23.1949. Time: 36.2066 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #69: GFLOPs: 44.7636. Time: 18.7610 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #70: GFLOPs: 25.0587. Time: 33.5136 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #71: GFLOPs: 24.6592. Time: 34.0565 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #72: GFLOPs: 25.1618. Time: 33.3764 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #73: GFLOPs: 14.3050. Time: 58.7075 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #74: GFLOPs: 16.0342. Time: 52.3760 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #75: GFLOPs: 13.8299. Time: 60.7241 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #76: GFLOPs: 24.8325. Time: 33.8189 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #77: GFLOPs: 24.8551. Time: 33.7882 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #78: GFLOPs: 15.0480. Time: 55.8087 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #79: GFLOPs: 23.2794. Time: 36.0751 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #80: GFLOPs: 9.0234. Time: 93.0704 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #81: GFLOPs: 25.2213. Time: 33.2976 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #82: GFLOPs: 13.8749. Time: 60.5272 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #83: GFLOPs: 10.1293. Time: 82.9087 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #84: GFLOPs: 20.9401. Time: 40.1053 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #85: GFLOPs: 24.6918. Time: 34.0116 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #86: GFLOPs: 24.2555. Time: 34.6234 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #87: GFLOPs: 21.4337. Time: 39.1816 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #88: GFLOPs: 18.7875. Time: 44.7003 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #89: GFLOPs: 20.8339. Time: 40.3096 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #90: GFLOPs: 19.5011. Time: 43.0646 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #91: GFLOPs: 16.3153. Time: 51.4738 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #92: GFLOPs: 18.4574. Time: 45.4998 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #93: GFLOPs: 12.9741. Time: 64.7296 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #94: GFLOPs: 16.6687. Time: 50.3824 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #95: GFLOPs: 15.7118. Time: 53.4506 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #96: GFLOPs: 14.6516. Time: 57.3186 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #97: GFLOPs: 19.3856. Time: 43.3212 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #98: GFLOPs: 11.3000. Time: 74.3191 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #99: GFLOPs: 15.0021. Time: 55.9794 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #100: GFLOPs: 22.3383. Time: 37.5950 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #101: GFLOPs: 14.8278. Time: 56.6374 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #102: GFLOPs: 22.4206. Time: 37.4570 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #103: GFLOPs: 17.5089. Time: 47.9646 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #104: GFLOPs: 12.6730. Time: 66.2674 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #105: GFLOPs: 12.1684. Time: 69.0156 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #106: GFLOPs: 18.3668. Time: 45.7243 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #107: GFLOPs: 45.2975. Time: 18.5398 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #108: GFLOPs: 14.6152. Time: 57.4613 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #109: GFLOPs: 10.3672. Time: 81.0061 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #110: GFLOPs: 15.1543. Time: 55.4172 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #111: GFLOPs: 16.9376. Time: 49.5823 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #112: GFLOPs: 16.4175. Time: 51.1532 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #113: GFLOPs: 17.4668. Time: 48.0804 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #114: GFLOPs: 17.8692. Time: 46.9975 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #115: GFLOPs: 16.9520. Time: 49.5404 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #116: GFLOPs: 17.5925. Time: 47.7367 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #117: GFLOPs: 15.6187. Time: 53.7693 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #118: GFLOPs: 15.7836. Time: 53.2077 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #119: GFLOPs: 14.1152. Time: 59.4968 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #120: GFLOPs: 15.8566. Time: 52.9626 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #121: GFLOPs: 16.9920. Time: 49.4237 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #122: GFLOPs: 17.0289. Time: 49.3166 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #123: GFLOPs: 12.7247. Time: 65.9985 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #124: GFLOPs: 14.8181. Time: 56.6746 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #125: GFLOPs: 12.7760. Time: 65.7332 us. Best GFLOPs: 48.2278
2024-04-29 06:12:18 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_max_pool2d_1] Trial #126: GFLOPs: 23.3970. Time: 35.8938 us. Best GFLOPs: 48.2278
