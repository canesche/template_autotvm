2024-04-29 01:54:29 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_max_pool2d"
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(111), T.int64(111), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(112), T.int64(112), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(111) and v_ax3 < T.int64(111), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(111), T.int64(111), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(112), ax2 * T.int64(2) + rv0_rv1_fused_0 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(111) and v_ax3 < T.int64(111), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(111), T.int64(111), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(112), ax2 * T.int64(2) + rv0_rv1_fused_0 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(111) and v_ax3 < T.int64(111), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(111), T.int64(111), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(55)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(111), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(112), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(111) and v_ax3 < T.int64(111), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0, rv1 in T.grid(T.int64(55), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 02:03:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:03:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:03:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 02:03:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:03:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 02:04:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 02:04:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 02:04:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 02:04:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9967  0.9936  0.9795  0.9690  0.9447  0.9433  0.9308  0.9295  0.9217  0.9209  0.9159  0.9153  0.9110  0.9098  0.9085  0.9026
[17 : 32]:	0.8987  0.8946  0.8797  0.8790  0.8728  0.8725  0.8620  0.8604  0.8546  0.8467  0.8409  0.8407  0.8379  0.8348  0.8333  0.8278
[33 : 48]:	0.8201  0.8133  0.8120  0.8117  0.8093  0.8080  0.8070  0.8063  0.8049  0.8024  0.7764  0.7743  0.7724  0.7687  0.7683  0.7672
[49 : 64]:	0.7642  0.7615  0.7595  0.7567  0.7565  0.7538  0.7526  0.7525  0.7517  0.7444  0.7414  0.7384  0.7384  0.7338  0.7294  0.7271
2024-04-29 02:04:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:04:09 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #1: GFLOPs: 9.6639. Time: 180.2992 us. Best GFLOPs: 9.6639
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #2: GFLOPs: 67.7970. Time: 25.7003 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #3: GFLOPs: 16.7412. Time: 104.0783 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #4: GFLOPs: 16.9580. Time: 102.7482 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #5: GFLOPs: 19.7259. Time: 88.3306 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #6: GFLOPs: 16.2237. Time: 107.3985 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #7: GFLOPs: 20.6864. Time: 84.2294 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #8: GFLOPs: 24.4919. Time: 71.1420 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #9: GFLOPs: 21.4085. Time: 81.3881 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #10: GFLOPs: 13.5300. Time: 128.7803 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #11: GFLOPs: 19.8680. Time: 87.6988 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #12: GFLOPs: 21.4374. Time: 81.2785 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #13: GFLOPs: 21.1021. Time: 82.5700 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #14: GFLOPs: 12.3553. Time: 141.0249 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #15: GFLOPs: 15.8315. Time: 110.0594 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #16: GFLOPs: 7.5889. Time: 229.5990 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #17: GFLOPs: 8.5733. Time: 203.2358 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #18: GFLOPs: 11.5266. Time: 151.1628 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #19: GFLOPs: 9.8914. Time: 176.1524 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #20: GFLOPs: 12.6969. Time: 137.2307 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #21: GFLOPs: 17.8989. Time: 97.3469 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #22: GFLOPs: 26.8858. Time: 64.8074 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #23: GFLOPs: 16.5874. Time: 105.0437 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #24: GFLOPs: 36.6480. Time: 47.5443 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_max_pool2d] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(111), T.int64(111), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(880), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(111)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused_fused // T.int64(55) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), ax0_ax1_ax2_fused_fused % T.int64(55) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(111) and v_ax3 < T.int64(111), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4 in T.grid(T.int64(55), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused_fused // T.int64(55))
                        v_ax2 = T.axis.spatial(T.int64(55), ax0_ax1_ax2_fused_fused % T.int64(55))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused_fused // T.int64(55))
                            v_ax2 = T.axis.spatial(T.int64(55), ax0_ax1_ax2_fused_fused % T.int64(55))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(880), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(55), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(55))
                    v_ax2 = T.axis.spatial(T.int64(55), ax0_ax1_ax2_fused % T.int64(55))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(55))
                        v_ax2 = T.axis.spatial(T.int64(55), ax0_ax1_ax2_fused % T.int64(55))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51 = sch.get_loops(block=b46)
b52 = sch.decompose_reduction(block=b46, loop=l50)
b53 = sch.get_block(name="pool_max", func_name="main")
l54, l55, l56, l57 = sch.get_loops(block=b53)
b58 = sch.decompose_reduction(block=b53, loop=l57)
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #26: GFLOPs: 7.1332. Time: 244.2665 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #27: GFLOPs: 7.9129. Time: 220.1981 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #28: GFLOPs: 18.3099. Time: 95.1616 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #29: GFLOPs: 6.6165. Time: 263.3433 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #30: GFLOPs: 13.8508. Time: 125.7974 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #31: GFLOPs: 18.8824. Time: 92.2765 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #32: GFLOPs: 15.5287. Time: 112.2055 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #33: GFLOPs: 13.0719. Time: 133.2932 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #34: GFLOPs: 6.5714. Time: 265.1472 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #35: GFLOPs: 27.3580. Time: 63.6888 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #36: GFLOPs: 17.6779. Time: 98.5639 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #37: GFLOPs: 15.2690. Time: 114.1134 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #38: GFLOPs: 13.7055. Time: 127.1313 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #39: GFLOPs: 39.2595. Time: 44.3816 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #40: GFLOPs: 27.3528. Time: 63.7011 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #41: GFLOPs: 7.6794. Time: 226.8927 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #42: GFLOPs: 12.5585. Time: 138.7423 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #43: GFLOPs: 11.6258. Time: 149.8734 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #44: GFLOPs: 28.0712. Time: 62.0707 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #45: GFLOPs: 24.6097. Time: 70.8015 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #46: GFLOPs: 13.9921. Time: 124.5274 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #47: GFLOPs: 14.5661. Time: 119.6204 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #48: GFLOPs: 9.1678. Time: 190.0575 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #49: GFLOPs: 17.1195. Time: 101.7787 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #50: GFLOPs: 15.6729. Time: 111.1730 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #51: GFLOPs: 15.4919. Time: 112.4719 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #52: GFLOPs: 12.6549. Time: 137.6861 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #53: GFLOPs: 11.5285. Time: 151.1385 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #54: GFLOPs: 17.4827. Time: 99.6642 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #55: GFLOPs: 22.7251. Time: 76.6731 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #56: GFLOPs: 14.7082. Time: 118.4646 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #57: GFLOPs: 4.9110. Time: 354.7963 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #58: GFLOPs: 16.3257. Time: 106.7278 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #59: GFLOPs: 15.2283. Time: 114.4185 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #60: GFLOPs: 8.5632. Time: 203.4758 us. Best GFLOPs: 67.7970
2024-04-29 02:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #61: GFLOPs: 8.7707. Time: 198.6603 us. Best GFLOPs: 67.7970
2024-04-29 04:55:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:55:15 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 04:55:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 04:55:17 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 04:55:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 04:55:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 04:55:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 04:55:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x326af58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x40c5ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x33e39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x42908b8)]: 0 failure(s)
2024-04-29 04:55:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7239  0.6894  0.6894  0.5993  0.5979  0.5811  0.5473  0.5387  0.5298  0.5132  0.4955  0.4701  0.4311  0.4062  0.3943  0.3705
[17 : 32]:	0.3680  0.3530  0.3511  0.3495  0.3406  0.3358  0.3358  0.3263  0.3190  0.3190  0.3171  0.3171  0.3163  0.3160  0.3104  0.3089
[33 : 48]:	0.3082  0.3075  0.3041  0.3018  0.2999  0.2980  0.2969  0.2969  0.2960  0.2882  0.2864  0.2854  0.2848  0.2833  0.2823  0.2776
[49 : 64]:	0.2758  0.2749  0.2730  0.2723  0.2719  0.2709  0.2684  0.2681  0.2673  0.2673  0.2654  0.2653  0.2597  0.2584  0.2575  0.2575
2024-04-29 04:55:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:55:43 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #62: GFLOPs: 22.0148. Time: 79.1469 us. Best GFLOPs: 67.7970
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #63: GFLOPs: 19.0418. Time: 91.5038 us. Best GFLOPs: 67.7970
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #64: GFLOPs: 39.3242. Time: 44.3086 us. Best GFLOPs: 67.7970
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #65: GFLOPs: 28.4131. Time: 61.3237 us. Best GFLOPs: 67.7970
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #66: GFLOPs: 69.9825. Time: 24.8977 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #67: GFLOPs: 27.8633. Time: 62.5339 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #68: GFLOPs: 36.6096. Time: 47.5941 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #69: GFLOPs: 28.0065. Time: 62.2141 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #70: GFLOPs: 27.7369. Time: 62.8189 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #71: GFLOPs: 40.1943. Time: 43.3494 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #72: GFLOPs: 29.1990. Time: 59.6733 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #73: GFLOPs: 27.8168. Time: 62.6383 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #74: GFLOPs: 64.9134. Time: 26.8419 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #75: GFLOPs: 28.0277. Time: 62.1671 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #76: GFLOPs: 16.5567. Time: 105.2387 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #77: GFLOPs: 15.6711. Time: 111.1857 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #78: GFLOPs: 25.2561. Time: 68.9892 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #79: GFLOPs: 15.5404. Time: 112.1208 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #80: GFLOPs: 27.4373. Time: 63.5047 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #81: GFLOPs: 25.0081. Time: 69.6734 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #82: GFLOPs: 68.7002. Time: 25.3624 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #83: GFLOPs: 19.9388. Time: 87.3876 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #84: GFLOPs: 19.6741. Time: 88.5629 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #85: GFLOPs: 21.5558. Time: 80.8321 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #86: GFLOPs: 40.1876. Time: 43.3567 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #87: GFLOPs: 39.9634. Time: 43.5999 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #88: GFLOPs: 22.5403. Time: 77.3016 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #89: GFLOPs: 22.8948. Time: 76.1047 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #90: GFLOPs: 15.7066. Time: 110.9341 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #91: GFLOPs: 18.3389. Time: 95.0110 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #92: GFLOPs: 29.6124. Time: 58.8403 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #93: GFLOPs: 23.5118. Time: 74.1076 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #94: GFLOPs: 19.2095. Time: 90.7053 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #95: GFLOPs: 23.4647. Time: 74.2562 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #96: GFLOPs: 32.7486. Time: 53.2054 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #97: GFLOPs: 16.2727. Time: 107.0749 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #98: GFLOPs: 25.1415. Time: 69.3038 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #99: GFLOPs: 24.0177. Time: 72.5465 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #100: GFLOPs: 39.8522. Time: 43.7215 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #101: GFLOPs: 40.1135. Time: 43.4368 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #102: GFLOPs: 24.8487. Time: 70.1202 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #103: GFLOPs: 24.6700. Time: 70.6282 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #104: GFLOPs: 29.2445. Time: 59.5804 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #105: GFLOPs: 18.8224. Time: 92.5705 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #106: GFLOPs: 21.4752. Time: 81.1353 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #107: GFLOPs: 12.4746. Time: 139.6753 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #108: GFLOPs: 22.1663. Time: 78.6057 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #109: GFLOPs: 13.3391. Time: 130.6235 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #110: GFLOPs: 18.3131. Time: 95.1451 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #111: GFLOPs: 18.2600. Time: 95.4215 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #112: GFLOPs: 17.9053. Time: 97.3122 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #113: GFLOPs: 14.8761. Time: 117.1278 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #114: GFLOPs: 19.9657. Time: 87.2698 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #115: GFLOPs: 21.3042. Time: 81.7868 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #116: GFLOPs: 16.4013. Time: 106.2354 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #117: GFLOPs: 21.1319. Time: 82.4535 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #118: GFLOPs: 13.7589. Time: 126.6380 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #119: GFLOPs: 24.8747. Time: 70.0470 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #120: GFLOPs: 24.1392. Time: 72.1814 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #121: GFLOPs: 19.9058. Time: 87.5321 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #122: GFLOPs: 14.1000. Time: 123.5749 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #123: GFLOPs: 10.8539. Time: 160.5328 us. Best GFLOPs: 69.9825
2024-04-29 04:57:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d] Trial #124: GFLOPs: 8.1435. Time: 213.9611 us. Best GFLOPs: 69.9825
