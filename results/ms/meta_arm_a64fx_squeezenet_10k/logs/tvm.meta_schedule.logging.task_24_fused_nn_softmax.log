2024-04-29 01:55:32 [INFO] [task_scheduler.cc:160] Initializing Task #24: "fused_nn_softmax"
2024-04-29 01:55:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:164] Total 9 design space(s) generated
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(1000)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0 in range(T.int64(1000)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_softmax_maxelem_rf"):
                            vk_0 = T.axis.spatial(T.int64(1000), ax0 + ax0_1)
                            v_i0, vk_1 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(p0[v_i0, vk_0 + vk_1])
                            T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                            with T.init():
                                T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 + vk_1])
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_maxelem"):
                            vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
                for ax0 in range(T.int64(1000)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_softmax_expsum_rf"):
                            vk_0 = T.axis.spatial(T.int64(1000), ax0 + ax0_1)
                            v_i0, vk_1 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(p0[v_i0, vk_0 + vk_1], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                            with T.init():
                                T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                            T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T.exp(p0[v_i0, vk_0 + vk_1] - T_softmax_maxelem[v_i0])
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_expsum"):
                            vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1000, 1])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=2)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=2)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(1)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1, ax2 in T.grid(T.int64(1000), T.int64(1), T.int64(1)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_0, v_i0, vk_1 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 + vk_1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T.exp(p0[v_i0, vk_0 + vk_1] - T_softmax_maxelem[v_i0])
                for ax0, ax1 in T.grid(T.int64(1000), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1000, 1])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1000)))
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 + vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1000), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(125)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(125), T.int64(8)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(8) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(8) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(125)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_1 in T.grid(T.int64(1), T.int64(1)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[125, 8])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #4:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(8)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(125), T.int64(8)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(8) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(8) + vk_1])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(8), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 + vk_1]
            for i0, k_1 in T.grid(T.int64(1), T.int64(1)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[125, 8])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #5:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_exp"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_exp[v_i0, v_i1])
                        T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 + vk_1]
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #6:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(250)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(250), T.int64(4)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(4) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(4) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(250)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[250, 4])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #7:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(4)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0 in range(T.int64(4)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(250)):
                        with T.block("T_softmax_maxelem_rf"):
                            vk_1 = T.axis.spatial(T.int64(4), ax0 + ax0_1)
                            v_i0, vk_0 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(p0[v_i0, vk_0 * T.int64(4) + vk_1])
                            T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                            with T.init():
                                T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(4) + vk_1])
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_maxelem"):
                            vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(T_softmax_exp[v_i0, v_k])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[250, 4])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=2)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-29 01:55:33 [INFO] [task_scheduler.cc:170] Design space #8:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_exp"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_exp[v_i0, v_i1])
                        T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(T_softmax_exp[v_i0, v_k])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v4 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v4)
l5 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l5, preserve_unit_loops=True, index=-1)
l6 = sch.sample_compute_location(block=b1, decision=1)
sch.compute_at(block=b1, loop=l6, preserve_unit_loops=True, index=-1)
l7 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
2024-04-29 02:30:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:30:55 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:30:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 02:30:56 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:30:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 02:30:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 02:31:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 02:31:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 02:31:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9992  0.9988  0.9975  0.9966  0.9952  0.9939  0.9933  0.9929  0.9923  0.9922  0.9918  0.9913  0.9902  0.9901  0.9899
[17 : 32]:	0.9898  0.9894  0.9893  0.9890  0.9890  0.9888  0.9881  0.9875  0.9874  0.9861  0.9853  0.9853  0.9849  0.9841  0.9831  0.9824
[33 : 48]:	0.9791  0.9789  0.9788  0.9774  0.9761  0.9755  0.9751  0.9740  0.9740  0.9738  0.9737  0.9737  0.9735  0.9734  0.9722  0.9713
[49 : 64]:	0.9710  0.9703  0.9697  0.9694  0.9690  0.9681  0.9665  0.9663  0.9654  0.9644  0.9632  0.9630  0.9628  0.9623  0.9620  0.9617
2024-04-29 02:31:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:31:02 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #1: GFLOPs: 0.0021. Time: 1908.0357 us. Best GFLOPs: 0.0021
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #2: GFLOPs: 0.0347. Time: 115.4132 us. Best GFLOPs: 0.0347
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #3: GFLOPs: 0.0108. Time: 369.4100 us. Best GFLOPs: 0.0347
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #4: GFLOPs: 0.0194. Time: 205.6807 us. Best GFLOPs: 0.0347
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #5: GFLOPs: 0.0636. Time: 62.8776 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #6: GFLOPs: 0.0369. Time: 108.2604 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #7: GFLOPs: 0.0449. Time: 89.0972 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #8: GFLOPs: 0.0035. Time: 1143.6079 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #9: GFLOPs: 0.0406. Time: 98.5588 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #10: GFLOPs: 0.0162. Time: 246.3051 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #11: GFLOPs: 0.0525. Time: 76.1922 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #12: GFLOPs: 0.0225. Time: 178.1704 us. Best GFLOPs: 0.0636
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #13: GFLOPs: 0.0694. Time: 57.6471 us. Best GFLOPs: 0.0694
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #14: GFLOPs: 0.0478. Time: 83.6944 us. Best GFLOPs: 0.0694
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #15: GFLOPs: 0.0026. Time: 1557.7316 us. Best GFLOPs: 0.0694
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #16: GFLOPs: 0.0315. Time: 126.9009 us. Best GFLOPs: 0.0694
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #17: GFLOPs: 0.0733. Time: 54.5512 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #18: GFLOPs: 0.0330. Time: 121.0327 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #19: GFLOPs: 0.0032. Time: 1251.2139 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #20: GFLOPs: 0.0408. Time: 97.9570 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #21: GFLOPs: 0.0151. Time: 265.6369 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #22: GFLOPs: 0.0035. Time: 1141.1212 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #23: GFLOPs: 0.0028. Time: 1406.3673 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #24: GFLOPs: 0.0715. Time: 55.9133 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #25: GFLOPs: 0.0699. Time: 57.2309 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #26: GFLOPs: 0.0576. Time: 69.4903 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #27: GFLOPs: 0.0710. Time: 56.3177 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #28: GFLOPs: 0.0467. Time: 85.6521 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #29: GFLOPs: 0.0030. Time: 1353.6565 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #30: GFLOPs: 0.0263. Time: 152.0698 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #31: GFLOPs: 0.0034. Time: 1167.0894 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #32: GFLOPs: 0.0719. Time: 55.6261 us. Best GFLOPs: 0.0733
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #33: GFLOPs: 0.1264. Time: 31.6430 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #34: GFLOPs: 0.0239. Time: 167.6821 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #35: GFLOPs: 0.1187. Time: 33.7109 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #36: GFLOPs: 0.0000. Time: 93129.9360 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #37: GFLOPs: 0.0887. Time: 45.0724 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #38: GFLOPs: 0.1044. Time: 38.3113 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #39: GFLOPs: 0.0622. Time: 64.2571 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #40: GFLOPs: 0.0339. Time: 117.9813 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #41: GFLOPs: 0.0038. Time: 1064.4435 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #42: GFLOPs: 0.0060. Time: 668.6259 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #43: GFLOPs: 0.0070. Time: 574.7835 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #44: GFLOPs: 0.0729. Time: 54.8434 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #45: GFLOPs: 0.0240. Time: 166.5680 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #46: GFLOPs: 0.0829. Time: 48.2643 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #47: GFLOPs: 0.0852. Time: 46.9520 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #48: GFLOPs: 0.0061. Time: 660.4571 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #49: GFLOPs: 0.1005. Time: 39.7872 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #50: GFLOPs: 0.1021. Time: 39.1815 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #51: GFLOPs: 0.0520. Time: 76.9366 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #52: GFLOPs: 0.0269. Time: 148.6204 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #53: GFLOPs: 0.0000. Time: 92746.7240 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #54: GFLOPs: 0.0741. Time: 53.9740 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #55: GFLOPs: 0.0067. Time: 595.5114 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #56: GFLOPs: 0.0068. Time: 586.2196 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #57: GFLOPs: 0.0069. Time: 580.7924 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #58: GFLOPs: 0.0307. Time: 130.3313 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #59: GFLOPs: 0.0068. Time: 588.4061 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #60: GFLOPs: 0.0853. Time: 46.8949 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #61: GFLOPs: 0.0044. Time: 906.7291 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #62: GFLOPs: 0.0835. Time: 47.8922 us. Best GFLOPs: 0.1264
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #63: GFLOPs: 0.0035. Time: 1143.4432 us. Best GFLOPs: 0.1264
2024-04-29 04:32:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:32:00 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 04:32:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 04:32:00 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 04:32:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 04:32:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 04:32:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 04:32:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4687758)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x464fbb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34999e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x45bd488)]: 0 failure(s)
2024-04-29 04:32:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1598  1.0898  1.0431  1.0313  1.0288  1.0048  1.0008  0.9952  0.9950  0.9933  0.9867  0.9768  0.9746  0.9693  0.9674  0.9609
[17 : 32]:	0.9561  0.9458  0.9419  0.9404  0.9345  0.9314  0.9313  0.9303  0.9282  0.9265  0.9262  0.9224  0.9202  0.9196  0.9181  0.9180
[33 : 48]:	0.9148  0.9148  0.9125  0.9114  0.9109  0.9087  0.9039  0.9012  0.8989  0.8945  0.8927  0.8915  0.8905  0.8903  0.8901  0.8837
[49 : 64]:	0.8782  0.8768  0.8762  0.8747  0.8735  0.8717  0.8677  0.8676  0.8649  0.8633  0.8622  0.8616  0.8607  0.8580  0.8566  0.8542
2024-04-29 04:32:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:32:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #64: GFLOPs: 0.0813. Time: 49.2101 us. Best GFLOPs: 0.1264
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #65: GFLOPs: 0.0968. Time: 41.3181 us. Best GFLOPs: 0.1264
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #66: GFLOPs: 0.1427. Time: 28.0220 us. Best GFLOPs: 0.1427
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #67: GFLOPs: 0.1408. Time: 28.4127 us. Best GFLOPs: 0.1427
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #68: GFLOPs: 0.1537. Time: 26.0267 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #69: GFLOPs: 0.1169. Time: 34.2031 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #70: GFLOPs: 0.0783. Time: 51.1111 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #71: GFLOPs: 0.1502. Time: 26.6247 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #72: GFLOPs: 0.1129. Time: 35.4353 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #73: GFLOPs: 0.1228. Time: 32.5860 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #74: GFLOPs: 0.0918. Time: 43.5668 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #75: GFLOPs: 0.1185. Time: 33.7549 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #76: GFLOPs: 0.0835. Time: 47.8907 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #77: GFLOPs: 0.1380. Time: 28.9803 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #78: GFLOPs: 0.1326. Time: 30.1681 us. Best GFLOPs: 0.1537
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #79: GFLOPs: 0.1675. Time: 23.8869 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #80: GFLOPs: 0.0985. Time: 40.6112 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #81: GFLOPs: 0.1211. Time: 33.0369 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #82: GFLOPs: 0.0906. Time: 44.1737 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #83: GFLOPs: 0.1131. Time: 35.3565 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #84: GFLOPs: 0.1136. Time: 35.2045 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #85: GFLOPs: 0.0964. Time: 41.4955 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #86: GFLOPs: 0.1104. Time: 36.2306 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #87: GFLOPs: 0.0936. Time: 42.7395 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #88: GFLOPs: 0.1634. Time: 24.4776 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #89: GFLOPs: 0.1130. Time: 35.3987 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #90: GFLOPs: 0.1492. Time: 26.8009 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #91: GFLOPs: 0.1048. Time: 38.1604 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #92: GFLOPs: 0.0981. Time: 40.7950 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #93: GFLOPs: 0.0898. Time: 44.5312 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #94: GFLOPs: 0.1459. Time: 27.4162 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #95: GFLOPs: 0.0950. Time: 42.0991 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #96: GFLOPs: 0.1226. Time: 32.6279 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #97: GFLOPs: 0.1257. Time: 31.8178 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #98: GFLOPs: 0.1318. Time: 30.3470 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #99: GFLOPs: 0.1161. Time: 34.4573 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #100: GFLOPs: 0.0951. Time: 42.0424 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #101: GFLOPs: 0.0667. Time: 59.9795 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #102: GFLOPs: 0.1159. Time: 34.5117 us. Best GFLOPs: 0.1675
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #103: GFLOPs: 0.1719. Time: 23.2731 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #104: GFLOPs: 0.0960. Time: 41.6700 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #105: GFLOPs: 0.1086. Time: 36.8305 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #106: GFLOPs: 0.1424. Time: 28.0967 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #107: GFLOPs: 0.0960. Time: 41.6488 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #108: GFLOPs: 0.1615. Time: 24.7710 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #109: GFLOPs: 0.1276. Time: 31.3553 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #110: GFLOPs: 0.1035. Time: 38.6495 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #111: GFLOPs: 0.1017. Time: 39.3217 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #112: GFLOPs: 0.1593. Time: 25.1174 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #113: GFLOPs: 0.1662. Time: 24.0654 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #114: GFLOPs: 0.0951. Time: 42.0712 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #115: GFLOPs: 0.1045. Time: 38.2657 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #116: GFLOPs: 0.1333. Time: 30.0153 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #117: GFLOPs: 0.0985. Time: 40.6108 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #118: GFLOPs: 0.1089. Time: 36.7240 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #119: GFLOPs: 0.1085. Time: 36.8584 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #120: GFLOPs: 0.1083. Time: 36.9492 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #121: GFLOPs: 0.1064. Time: 37.5817 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #122: GFLOPs: 0.1128. Time: 35.4682 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #123: GFLOPs: 0.0929. Time: 43.0419 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #124: GFLOPs: 0.1678. Time: 23.8319 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #125: GFLOPs: 0.0329. Time: 121.6645 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #126: GFLOPs: 0.1274. Time: 31.3900 us. Best GFLOPs: 0.1719
2024-04-29 04:33:24 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_softmax] Trial #127: GFLOPs: 0.1039. Time: 38.4806 us. Best GFLOPs: 0.1719
