2024-04-29 14:01:56 [INFO] [task_scheduler.cc:160] Initializing Task #16: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16"
2024-04-29 14:01:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(344), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(344), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(1376), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:01:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:01:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(344), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(344), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(86), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1376), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[86, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:01:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(344), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(344), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(86), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1376), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[86, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:01:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(344), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(344), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(86), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1376), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[86, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:32:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:32:12 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:32:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x91a50a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaec6b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd698428)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa9a89b8)]: 0 failure(s)
2024-04-29 14:32:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:32:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x91a50a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaec6b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd698428)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa9a89b8)]: 0 failure(s)
2024-04-29 14:32:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x91a50a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaec6b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd698428)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa9a89b8)]: 0 failure(s)
2024-04-29 14:32:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x91a50a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaec6b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd698428)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa9a89b8)]: 0 failure(s)
2024-04-29 14:32:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x91a50a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaec6b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd698428)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa9a89b8)]: 0 failure(s)
2024-04-29 14:32:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9993  0.9983  0.9980  0.9979  0.9967  0.9966  0.9964  0.9955  0.9943  0.9931  0.9930  0.9928  0.9925  0.9925  0.9909
[17 : 32]:	0.9903  0.9902  0.9897  0.9893  0.9893  0.9888  0.9883  0.9877  0.9874  0.9872  0.9863  0.9862  0.9859  0.9856  0.9856  0.9855
[33 : 48]:	0.9854  0.9844  0.9844  0.9838  0.9823  0.9821  0.9820  0.9817  0.9806  0.9801  0.9788  0.9786  0.9783  0.9772  0.9772  0.9771
[49 : 64]:	0.9762  0.9759  0.9758  0.9753  0.9744  0.9742  0.9735  0.9735  0.9734  0.9733  0.9730  0.9728  0.9728  0.9725  0.9714  0.9702
2024-04-29 14:32:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:32:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #1: GFLOPs: 11.8815. Time: 1453.7770 us. Best GFLOPs: 11.8815
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #2: GFLOPs: 48.4246. Time: 356.7004 us. Best GFLOPs: 48.4246
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #3: GFLOPs: 71.6251. Time: 241.1599 us. Best GFLOPs: 71.6251
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #4: GFLOPs: 4.2729. Time: 4042.5169 us. Best GFLOPs: 71.6251
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #5: GFLOPs: 28.4577. Time: 606.9745 us. Best GFLOPs: 71.6251
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #6: GFLOPs: 70.0849. Time: 246.4594 us. Best GFLOPs: 71.6251
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #7: GFLOPs: 77.1008. Time: 224.0326 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #8: GFLOPs: 57.1062. Time: 302.4731 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #9: GFLOPs: 68.9223. Time: 250.6170 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #10: GFLOPs: 65.6233. Time: 263.2158 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #11: GFLOPs: 50.5412. Time: 341.7624 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #12: GFLOPs: 56.7419. Time: 304.4153 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #13: GFLOPs: 37.8807. Time: 455.9864 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #14: GFLOPs: 6.3675. Time: 2712.6796 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #15: GFLOPs: 5.5323. Time: 3122.1998 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #16: GFLOPs: 5.3804. Time: 3210.3756 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #17: GFLOPs: 1.7878. Time: 9661.8111 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #18: GFLOPs: 73.5579. Time: 234.8230 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #19: GFLOPs: 22.3271. Time: 773.6364 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #20: GFLOPs: 35.4285. Time: 487.5481 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #21: GFLOPs: 33.3006. Time: 518.7013 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #22: GFLOPs: 29.4439. Time: 586.6433 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #23: GFLOPs: 3.9411. Time: 4382.8413 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #24: GFLOPs: 31.0456. Time: 556.3774 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #25: GFLOPs: 30.5942. Time: 564.5868 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #26: GFLOPs: 19.3076. Time: 894.6243 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #27: GFLOPs: 28.9814. Time: 596.0055 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #28: GFLOPs: 31.3904. Time: 550.2671 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #29: GFLOPs: 44.8718. Time: 384.9429 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #30: GFLOPs: 29.8594. Time: 578.4815 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #31: GFLOPs: 52.2529. Time: 330.5674 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #32: GFLOPs: 7.0405. Time: 2453.3884 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #33: GFLOPs: 8.1125. Time: 2129.1917 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #34: GFLOPs: 21.8630. Time: 790.0604 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #35: GFLOPs: 10.1640. Time: 1699.4416 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #36: GFLOPs: 48.1531. Time: 358.7119 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #37: GFLOPs: 9.3250. Time: 1852.3500 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #38: GFLOPs: 5.5760. Time: 3097.7737 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #39: GFLOPs: 17.9240. Time: 963.6868 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #40: GFLOPs: 14.3620. Time: 1202.6973 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #41: GFLOPs: 9.5100. Time: 1816.3128 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #42: GFLOPs: 60.3103. Time: 286.4034 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #43: GFLOPs: 15.8995. Time: 1086.3925 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #44: GFLOPs: 12.5922. Time: 1371.7325 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #45: GFLOPs: 60.6529. Time: 284.7857 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #46: GFLOPs: 44.9411. Time: 384.3496 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #47: GFLOPs: 3.1615. Time: 5463.6119 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #48: GFLOPs: 44.2496. Time: 390.3554 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #49: GFLOPs: 70.3284. Time: 245.6061 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #50: GFLOPs: 37.3527. Time: 462.4326 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #51: GFLOPs: 9.6332. Time: 1793.0740 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #52: GFLOPs: 46.8411. Time: 368.7592 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #53: GFLOPs: 27.0710. Time: 638.0670 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #54: GFLOPs: 73.6041. Time: 234.6758 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #55: GFLOPs: 10.9230. Time: 1581.3514 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #56: GFLOPs: 22.9784. Time: 751.7106 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #57: GFLOPs: 52.7638. Time: 327.3661 us. Best GFLOPs: 77.1008
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #58: GFLOPs: 87.9648. Time: 196.3637 us. Best GFLOPs: 87.9648
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #59: GFLOPs: 3.9916. Time: 4327.3583 us. Best GFLOPs: 87.9648
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(344), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(344), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(86), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1376), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[86, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #61: GFLOPs: 23.0395. Time: 749.7154 us. Best GFLOPs: 87.9648
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #62: GFLOPs: 68.3146. Time: 252.8462 us. Best GFLOPs: 87.9648
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #63: GFLOPs: 39.1632. Time: 441.0541 us. Best GFLOPs: 87.9648
2024-04-29 17:05:41 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_16] Trial #64: GFLOPs: 27.2831. Time: 633.1063 us. Best GFLOPs: 87.9648
