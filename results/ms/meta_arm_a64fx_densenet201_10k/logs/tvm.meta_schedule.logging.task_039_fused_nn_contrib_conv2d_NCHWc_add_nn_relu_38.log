2024-04-29 14:03:26 [INFO] [task_scheduler.cc:160] Initializing Task #39: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38"
2024-04-29 14:03:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(392), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(392), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1568), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:03:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:03:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(392), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(392), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1568), ic_0 * T.int64(49) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 49])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:03:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(392), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(392), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1568), ic_0 * T.int64(49) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 49])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:03:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(392), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(392), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1568), ic_0 * T.int64(49) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 49])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 15:07:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:07:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 15:07:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 15:07:05 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 15:07:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 15:07:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 15:07:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 15:07:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 15:07:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9992  0.9991  0.9972  0.9952  0.9952  0.9952  0.9951  0.9950  0.9941  0.9941  0.9933  0.9933  0.9931  0.9922  0.9917
[17 : 32]:	0.9916  0.9915  0.9913  0.9910  0.9909  0.9905  0.9890  0.9890  0.9885  0.9884  0.9873  0.9871  0.9868  0.9867  0.9867  0.9854
[33 : 48]:	0.9849  0.9848  0.9845  0.9843  0.9842  0.9823  0.9822  0.9822  0.9819  0.9815  0.9810  0.9805  0.9799  0.9797  0.9794  0.9785
[49 : 64]:	0.9777  0.9769  0.9760  0.9756  0.9751  0.9749  0.9747  0.9744  0.9744  0.9735  0.9731  0.9731  0.9719  0.9718  0.9715  0.9712
2024-04-29 15:07:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:07:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #1: GFLOPs: 26.2682. Time: 2997.0088 us. Best GFLOPs: 26.2682
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #2: GFLOPs: 6.7308. Time: 11696.3556 us. Best GFLOPs: 26.2682
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #3: GFLOPs: 5.5326. Time: 14229.6251 us. Best GFLOPs: 26.2682
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #4: GFLOPs: 37.8229. Time: 2081.4425 us. Best GFLOPs: 37.8229
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #5: GFLOPs: 2.8652. Time: 27476.3960 us. Best GFLOPs: 37.8229
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #6: GFLOPs: 122.8578. Time: 640.7907 us. Best GFLOPs: 122.8578
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #7: GFLOPs: 4.9123. Time: 16026.4607 us. Best GFLOPs: 122.8578
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #8: GFLOPs: 172.9012. Time: 455.3244 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #9: GFLOPs: 155.2864. Time: 506.9738 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #10: GFLOPs: 4.1352. Time: 19038.2140 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #11: GFLOPs: 84.8530. Time: 927.7945 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #12: GFLOPs: 63.5279. Time: 1239.2367 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #13: GFLOPs: 1.8310. Time: 42995.5973 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #14: GFLOPs: 88.4740. Time: 889.8222 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #15: GFLOPs: 61.8673. Time: 1272.4991 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #16: GFLOPs: 82.7730. Time: 951.1093 us. Best GFLOPs: 172.9012
2024-04-29 17:07:23 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #17: GFLOPs: 13.4424. Time: 5856.5540 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(392), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(392), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1568), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1568), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1568, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #19: GFLOPs: 22.9728. Time: 3426.9266 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #20: GFLOPs: 114.3719. Time: 688.3344 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #21: GFLOPs: 66.0483. Time: 1191.9485 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #22: GFLOPs: 91.7946. Time: 857.6338 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #23: GFLOPs: 2.7673. Time: 28448.2850 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #24: GFLOPs: 0.3090. Time: 254808.7473 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #25: GFLOPs: 23.1635. Time: 3398.7093 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #26: GFLOPs: 114.9674. Time: 684.7696 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #27: GFLOPs: 6.8571. Time: 11480.9937 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #28: GFLOPs: 7.1394. Time: 11027.0463 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #29: GFLOPs: 16.3887. Time: 4803.6716 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #30: GFLOPs: 64.0847. Time: 1228.4711 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #31: GFLOPs: 17.0786. Time: 4609.6384 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #32: GFLOPs: 138.9227. Time: 566.6902 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #33: GFLOPs: 67.3725. Time: 1168.5211 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #34: GFLOPs: 4.3649. Time: 18036.0463 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #35: GFLOPs: 34.9109. Time: 2255.0566 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #36: GFLOPs: 99.8438. Time: 788.4927 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #37: GFLOPs: 0.7117. Time: 110621.9840 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #38: GFLOPs: 3.7427. Time: 21034.4240 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #39: GFLOPs: 46.2898. Time: 1700.7235 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #40: GFLOPs: 18.8452. Time: 4177.5139 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #41: GFLOPs: 8.2654. Time: 9524.7551 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #42: GFLOPs: 40.2681. Time: 1955.0497 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #43: GFLOPs: 24.0715. Time: 3270.5176 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #44: GFLOPs: 59.4002. Time: 1325.3505 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #45: GFLOPs: 87.2319. Time: 902.4922 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #46: GFLOPs: 29.8671. Time: 2635.8839 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #47: GFLOPs: 161.2202. Time: 488.3144 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #48: GFLOPs: 24.5632. Time: 3205.0471 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #49: GFLOPs: 77.2009. Time: 1019.7562 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #50: GFLOPs: 68.2854. Time: 1152.8987 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #51: GFLOPs: 42.9844. Time: 1831.5031 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #52: GFLOPs: 12.7097. Time: 6194.1742 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #53: GFLOPs: 0.4098. Time: 192096.9263 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #54: GFLOPs: 16.9277. Time: 4650.7360 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #55: GFLOPs: 104.1403. Time: 755.9623 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #56: GFLOPs: 94.6276. Time: 831.9579 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #57: GFLOPs: 18.8675. Time: 4172.5841 us. Best GFLOPs: 172.9012
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #58: GFLOPs: 174.9640. Time: 449.9563 us. Best GFLOPs: 174.9640
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #59: GFLOPs: 49.0128. Time: 1606.2356 us. Best GFLOPs: 174.9640
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #60: GFLOPs: 55.6182. Time: 1415.4757 us. Best GFLOPs: 174.9640
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #61: GFLOPs: 46.0958. Time: 1707.8803 us. Best GFLOPs: 174.9640
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #62: GFLOPs: 3.9362. Time: 20000.6388 us. Best GFLOPs: 174.9640
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #63: GFLOPs: 1.6543. Time: 47588.8200 us. Best GFLOPs: 174.9640
2024-04-29 17:07:24 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #64: GFLOPs: 51.2079. Time: 1537.3818 us. Best GFLOPs: 174.9640
2024-04-29 18:37:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:37:47 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 18:37:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 18:37:49 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 18:37:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 18:38:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 18:38:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 18:38:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10943a18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6537778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99fb968)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x98bee48)]: 0 failure(s)
2024-04-29 18:38:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8730  0.8397  0.8348  0.8294  0.8228  0.8202  0.8113  0.8113  0.8113  0.7991  0.7881  0.7807  0.7792  0.7683  0.7683  0.7641
[17 : 32]:	0.7599  0.7567  0.7522  0.7514  0.7501  0.7495  0.7495  0.7468  0.7407  0.7407  0.7403  0.7403  0.7402  0.7402  0.7402  0.7326
[33 : 48]:	0.7319  0.7287  0.7280  0.7232  0.7216  0.7187  0.7185  0.7176  0.7159  0.7159  0.7108  0.7089  0.7083  0.7082  0.7063  0.7019
[49 : 64]:	0.7019  0.7011  0.7007  0.6997  0.6997  0.6983  0.6962  0.6962  0.6961  0.6953  0.6953  0.6950  0.6948  0.6920  0.6910  0.6904
2024-04-29 18:38:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:38:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #65: GFLOPs: 177.6564. Time: 443.1371 us. Best GFLOPs: 177.6564
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #66: GFLOPs: 135.9179. Time: 579.2185 us. Best GFLOPs: 177.6564
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #67: GFLOPs: 262.6791. Time: 299.7046 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #68: GFLOPs: 5.6384. Time: 13962.4997 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #69: GFLOPs: 93.9328. Time: 838.1115 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #70: GFLOPs: 173.3044. Time: 454.2650 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #71: GFLOPs: 110.1737. Time: 714.5636 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #72: GFLOPs: 109.7141. Time: 717.5572 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #73: GFLOPs: 109.6554. Time: 717.9412 us. Best GFLOPs: 262.6791
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #74: GFLOPs: 323.8210. Time: 243.1163 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #75: GFLOPs: 78.6175. Time: 1001.3815 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #76: GFLOPs: 102.3039. Time: 769.5325 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #77: GFLOPs: 102.9817. Time: 764.4671 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #78: GFLOPs: 111.6057. Time: 705.3953 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #79: GFLOPs: 90.2000. Time: 872.7952 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #80: GFLOPs: 136.0212. Time: 578.7784 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #81: GFLOPs: 83.5811. Time: 941.9130 us. Best GFLOPs: 323.8210
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #82: GFLOPs: 327.2307. Time: 240.5830 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #83: GFLOPs: 116.6636. Time: 674.8131 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #84: GFLOPs: 135.7692. Time: 579.8527 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #85: GFLOPs: 69.5950. Time: 1131.2046 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #86: GFLOPs: 144.9318. Time: 543.1945 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #87: GFLOPs: 162.0330. Time: 485.8649 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #88: GFLOPs: 104.0304. Time: 756.7613 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #89: GFLOPs: 96.2298. Time: 818.1053 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #90: GFLOPs: 75.7156. Time: 1039.7618 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #91: GFLOPs: 96.6309. Time: 814.7094 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #92: GFLOPs: 95.1810. Time: 827.1203 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #93: GFLOPs: 134.6675. Time: 584.5965 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #94: GFLOPs: 143.8310. Time: 547.3518 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #95: GFLOPs: 134.3563. Time: 585.9505 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #96: GFLOPs: 102.8142. Time: 765.7129 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #97: GFLOPs: 143.2429. Time: 549.5987 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #98: GFLOPs: 223.5478. Time: 352.1669 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #99: GFLOPs: 67.7718. Time: 1161.6361 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #100: GFLOPs: 124.2733. Time: 633.4923 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #101: GFLOPs: 113.6144. Time: 692.9238 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #102: GFLOPs: 231.7841. Time: 339.6529 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #103: GFLOPs: 67.5590. Time: 1165.2955 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #104: GFLOPs: 172.9070. Time: 455.3092 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #105: GFLOPs: 21.7441. Time: 3620.5819 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #106: GFLOPs: 21.7087. Time: 3626.4769 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #107: GFLOPs: 114.8017. Time: 685.7575 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #108: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(392), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(392), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1568), ic_0 * T.int64(49) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) * T.int64(4) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(14), ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 49])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #109: GFLOPs: 145.9793. Time: 539.2965 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #110: GFLOPs: 115.8472. Time: 679.5688 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #111: GFLOPs: 10.9255. Time: 7205.7169 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #112: GFLOPs: 84.2176. Time: 934.7941 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #113: GFLOPs: 83.0629. Time: 947.7897 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #114: GFLOPs: 48.0409. Time: 1638.7322 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #115: GFLOPs: 107.5273. Time: 732.1501 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #116: GFLOPs: 107.3444. Time: 733.3975 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #117: GFLOPs: 116.4164. Time: 676.2459 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #118: GFLOPs: 65.6999. Time: 1198.2683 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #119: GFLOPs: 110.5268. Time: 712.2813 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #120: GFLOPs: 24.1197. Time: 3263.9716 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #121: GFLOPs: 95.1583. Time: 827.3173 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #122: GFLOPs: 95.6828. Time: 822.7828 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #123: GFLOPs: 95.2386. Time: 826.6199 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #124: GFLOPs: 138.4218. Time: 568.7408 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #125: GFLOPs: 140.3474. Time: 560.9377 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #126: GFLOPs: 49.4340. Time: 1592.5512 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #127: GFLOPs: 166.3469. Time: 473.2649 us. Best GFLOPs: 327.2307
2024-04-29 18:39:57 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #128: GFLOPs: 65.6208. Time: 1199.7128 us. Best GFLOPs: 327.2307
