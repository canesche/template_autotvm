2024-04-29 14:07:05 [INFO] [task_scheduler.cc:160] Initializing Task #95: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92"
2024-04-29 14:07:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:07:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:07:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(56), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:07:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(56), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 16:34:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:34:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:34:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 16:34:07 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:34:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 16:34:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 16:34:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 16:34:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 16:34:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9982  0.9981  0.9971  0.9970  0.9967  0.9961  0.9958  0.9953  0.9948  0.9944  0.9943  0.9942  0.9936  0.9935
[17 : 32]:	0.9934  0.9931  0.9929  0.9912  0.9906  0.9901  0.9898  0.9883  0.9867  0.9865  0.9865  0.9857  0.9845  0.9843  0.9837  0.9837
[33 : 48]:	0.9831  0.9828  0.9826  0.9819  0.9807  0.9805  0.9804  0.9801  0.9798  0.9798  0.9789  0.9784  0.9769  0.9766  0.9766  0.9764
[49 : 64]:	0.9764  0.9760  0.9754  0.9747  0.9739  0.9729  0.9714  0.9706  0.9703  0.9696  0.9694  0.9694  0.9688  0.9685  0.9679  0.9679
2024-04-29 16:34:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:34:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:14:58 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #1: GFLOPs: 92.2518. Time: 1679.5715 us. Best GFLOPs: 92.2518
2024-04-29 17:14:58 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #2: GFLOPs: 12.3969. Time: 12498.5393 us. Best GFLOPs: 92.2518
2024-04-29 17:14:58 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #3: GFLOPs: 10.9489. Time: 14151.4921 us. Best GFLOPs: 92.2518
2024-04-29 17:14:58 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #4: GFLOPs: 81.5844. Time: 1899.1805 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:121] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(14) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #6: GFLOPs: 7.2532. Time: 21361.9454 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #7: GFLOPs: 16.6199. Time: 9322.7696 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #8: GFLOPs: 13.6917. Time: 11316.5722 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #9: GFLOPs: 37.6905. Time: 4110.9432 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #10: GFLOPs: 33.8217. Time: 4581.1882 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #11: GFLOPs: 46.5853. Time: 3326.0136 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:121] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(14), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #13: GFLOPs: 36.8123. Time: 4209.0088 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #14: GFLOPs: 68.8802. Time: 2249.4639 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #15: GFLOPs: 62.3860. Time: 2483.6254 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #16: GFLOPs: 51.4766. Time: 3009.9803 us. Best GFLOPs: 92.2518
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #17: GFLOPs: 95.8631. Time: 1616.2996 us. Best GFLOPs: 95.8631
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #18: GFLOPs: 139.5287. Time: 1110.4775 us. Best GFLOPs: 139.5287
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #19: GFLOPs: 5.0714. Time: 30552.4505 us. Best GFLOPs: 139.5287
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #20: GFLOPs: 58.3949. Time: 2653.3758 us. Best GFLOPs: 139.5287
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #21: GFLOPs: 10.5323. Time: 14711.2601 us. Best GFLOPs: 139.5287
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #22: GFLOPs: 197.7397. Time: 783.5731 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #23: GFLOPs: 43.3750. Time: 3572.1812 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #24: GFLOPs: 121.4022. Time: 1276.2822 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #25: GFLOPs: 43.9492. Time: 3525.5129 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #26: GFLOPs: 31.3490. Time: 4942.5380 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #27: GFLOPs: 81.2048. Time: 1908.0574 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #28: GFLOPs: 71.8228. Time: 2157.3008 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #29: GFLOPs: 3.8909. Time: 39822.2157 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #30: GFLOPs: 48.0542. Time: 3224.3479 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #31: GFLOPs: 116.6772. Time: 1327.9666 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #32: GFLOPs: 34.7829. Time: 4454.5903 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #33: GFLOPs: 44.4090. Time: 3489.0093 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #34: GFLOPs: 55.2749. Time: 2803.1448 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #35: GFLOPs: 62.1826. Time: 2491.7503 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #36: GFLOPs: 5.1758. Time: 29936.1447 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #37: GFLOPs: 52.8853. Time: 2929.7999 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #38: GFLOPs: 118.7506. Time: 1304.7810 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #39: GFLOPs: 70.8892. Time: 2185.7128 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #40: GFLOPs: 72.2679. Time: 2144.0153 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #41: GFLOPs: 75.2466. Time: 2059.1417 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #42: GFLOPs: 46.1768. Time: 3355.4400 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #43: GFLOPs: 100.1190. Time: 1547.5938 us. Best GFLOPs: 197.7397
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #44: GFLOPs: 274.5102. Time: 564.4362 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #45: GFLOPs: 12.8153. Time: 12090.4762 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #46: GFLOPs: 9.2860. Time: 16685.6223 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #47: GFLOPs: 69.0207. Time: 2244.8829 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #48: GFLOPs: 35.2581. Time: 4394.5458 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #49: GFLOPs: 53.8616. Time: 2876.6991 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #50: GFLOPs: 65.4593. Time: 2367.0202 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #51: GFLOPs: 108.6618. Time: 1425.9244 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #52: GFLOPs: 105.2274. Time: 1472.4631 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #53: GFLOPs: 16.1146. Time: 9615.0989 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #54: GFLOPs: 131.9259. Time: 1174.4734 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #55: GFLOPs: 125.6201. Time: 1233.4295 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #56: GFLOPs: 59.5321. Time: 2602.6896 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #57: GFLOPs: 81.0208. Time: 1912.3909 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #58: GFLOPs: 36.0271. Time: 4300.7538 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #59: GFLOPs: 23.0913. Time: 6710.0306 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #60: GFLOPs: 11.1028. Time: 13955.3628 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #61: GFLOPs: 9.1933. Time: 16853.9707 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #62: GFLOPs: 93.4117. Time: 1658.7152 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #63: GFLOPs: 146.3554. Time: 1058.6793 us. Best GFLOPs: 274.5102
2024-04-29 17:14:59 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #64: GFLOPs: 104.3921. Time: 1484.2459 us. Best GFLOPs: 274.5102
2024-04-29 18:14:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:14:04 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 18:14:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 18:14:06 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 18:14:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 18:14:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 18:14:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 18:14:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc511fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13e56398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa19f318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa79d648)]: 0 failure(s)
2024-04-29 18:14:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9496  0.9067  0.7954  0.7169  0.7169  0.7167  0.7109  0.7042  0.7022  0.7004  0.6971  0.6952  0.6947  0.6918  0.6904  0.6838
[17 : 32]:	0.6822  0.6806  0.6755  0.6741  0.6731  0.6700  0.6672  0.6660  0.6660  0.6565  0.6512  0.6510  0.6475  0.6467  0.6452  0.6428
[33 : 48]:	0.6415  0.6394  0.6383  0.6383  0.6362  0.6355  0.6348  0.6347  0.6341  0.6306  0.6304  0.6304  0.6277  0.6264  0.6220  0.6213
[49 : 64]:	0.6203  0.6183  0.6167  0.6167  0.6163  0.6152  0.6132  0.6131  0.6120  0.6116  0.6114  0.6106  0.6106  0.6098  0.6080  0.6063
2024-04-29 18:14:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:14:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:121] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(7), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #66: GFLOPs: 122.7413. Time: 1262.3585 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #67: GFLOPs: 81.9476. Time: 1890.7640 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #68: GFLOPs: 196.4472. Time: 788.7283 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #69: GFLOPs: 187.8711. Time: 824.7331 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #70: GFLOPs: 192.8327. Time: 803.5126 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #71: GFLOPs: 167.2548. Time: 926.3920 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #72: GFLOPs: 199.9642. Time: 774.8560 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #73: GFLOPs: 100.0358. Time: 1548.8803 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #74: GFLOPs: 132.4782. Time: 1169.5774 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #75: GFLOPs: 92.5457. Time: 1674.2374 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #76: GFLOPs: 173.4247. Time: 893.4336 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #77: GFLOPs: 100.5075. Time: 1541.6118 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #78: GFLOPs: 162.6061. Time: 952.8760 us. Best GFLOPs: 274.5102
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #79: GFLOPs: 295.9946. Time: 523.4674 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #80: GFLOPs: 181.7514. Time: 852.5025 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #81: GFLOPs: 190.5303. Time: 813.2223 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #82: GFLOPs: 156.9546. Time: 987.1864 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #83: GFLOPs: 182.6808. Time: 848.1651 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #84: GFLOPs: 170.4076. Time: 909.2520 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #85: GFLOPs: 194.9998. Time: 794.5828 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #86: GFLOPs: 186.2028. Time: 832.1222 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #87: GFLOPs: 169.7547. Time: 912.7494 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #88: GFLOPs: 119.9785. Time: 1291.4274 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #89: GFLOPs: 147.9010. Time: 1047.6159 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #90: GFLOPs: 114.2847. Time: 1355.7677 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #91: GFLOPs: 184.6480. Time: 839.1288 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #92: GFLOPs: 113.4037. Time: 1366.2996 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:121] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #93: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(8) * T.int64(14) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #94: GFLOPs: 147.7848. Time: 1048.4403 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #95: GFLOPs: 121.9492. Time: 1270.5575 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #96: GFLOPs: 96.5464. Time: 1604.8600 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #97: GFLOPs: 101.5815. Time: 1525.3127 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #98: GFLOPs: 195.7786. Time: 791.4222 us. Best GFLOPs: 295.9946
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #99: GFLOPs: 302.7439. Time: 511.7973 us. Best GFLOPs: 302.7439
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #100: GFLOPs: 305.7978. Time: 506.6861 us. Best GFLOPs: 305.7978
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #101: GFLOPs: 75.4998. Time: 2052.2375 us. Best GFLOPs: 305.7978
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #102: GFLOPs: 52.8273. Time: 2933.0182 us. Best GFLOPs: 305.7978
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #103: GFLOPs: 112.8331. Time: 1373.2089 us. Best GFLOPs: 305.7978
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #104: GFLOPs: 330.1918. Time: 469.2530 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #105: GFLOPs: 238.2555. Time: 650.3248 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #106: GFLOPs: 137.7998. Time: 1124.4100 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #107: GFLOPs: 173.7191. Time: 891.9197 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #108: GFLOPs: 177.2791. Time: 874.0086 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #109: GFLOPs: 141.4866. Time: 1095.1110 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #110: GFLOPs: 86.1929. Time: 1797.6366 us. Best GFLOPs: 330.1918
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #111: GFLOPs: 333.7212. Time: 464.2902 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #112: GFLOPs: 154.0907. Time: 1005.5341 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #113: GFLOPs: 101.0486. Time: 1533.3558 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #114: GFLOPs: 196.1150. Time: 790.0646 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #115: GFLOPs: 54.4539. Time: 2845.4075 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #116: GFLOPs: 185.8667. Time: 833.6270 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #117: GFLOPs: 122.2909. Time: 1267.0070 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #118: GFLOPs: 175.5068. Time: 882.8346 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #119: GFLOPs: 173.9986. Time: 890.4871 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #120: GFLOPs: 271.7322. Time: 570.2066 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #121: GFLOPs: 138.6439. Time: 1117.5643 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #122: GFLOPs: 161.1875. Time: 961.2625 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #123: GFLOPs: 258.8898. Time: 598.4919 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #124: GFLOPs: 121.8774. Time: 1271.3058 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #125: GFLOPs: 137.0278. Time: 1130.7452 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #126: GFLOPs: 63.1055. Time: 2455.3077 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #127: GFLOPs: 93.9819. Time: 1648.6526 us. Best GFLOPs: 333.7212
2024-04-29 18:16:13 [INFO] [task_scheduler.cc:131] [Task #95: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_92] Trial #128: GFLOPs: 83.6830. Time: 1851.5537 us. Best GFLOPs: 333.7212
