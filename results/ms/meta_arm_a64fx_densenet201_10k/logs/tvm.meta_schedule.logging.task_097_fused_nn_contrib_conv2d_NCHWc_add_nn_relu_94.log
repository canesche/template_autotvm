2024-04-29 14:07:13 [INFO] [task_scheduler.cc:160] Initializing Task #97: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94"
2024-04-29 14:07:13 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:07:13 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:13 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:07:13 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(56), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(2) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:07:13 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(56), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(2) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 16:37:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:37:20 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:37:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 16:37:23 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:37:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 16:37:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 16:37:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 16:37:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 16:37:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9991  0.9989  0.9984  0.9981  0.9980  0.9979  0.9975  0.9973  0.9970  0.9966  0.9964  0.9950  0.9939  0.9932  0.9925
[17 : 32]:	0.9902  0.9900  0.9887  0.9886  0.9884  0.9882  0.9877  0.9875  0.9875  0.9875  0.9869  0.9863  0.9858  0.9856  0.9852  0.9849
[33 : 48]:	0.9843  0.9838  0.9836  0.9836  0.9821  0.9818  0.9817  0.9816  0.9814  0.9813  0.9813  0.9813  0.9813  0.9804  0.9803  0.9801
[49 : 64]:	0.9799  0.9788  0.9786  0.9782  0.9772  0.9759  0.9758  0.9756  0.9749  0.9748  0.9729  0.9727  0.9726  0.9725  0.9721  0.9721
2024-04-29 16:37:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:37:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #1: GFLOPs: 11.2436. Time: 9210.8820 us. Best GFLOPs: 11.2436
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #2: GFLOPs: 59.1496. Time: 1750.8690 us. Best GFLOPs: 59.1496
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #3: GFLOPs: 90.3213. Time: 1146.6101 us. Best GFLOPs: 90.3213
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #4: GFLOPs: 74.1524. Time: 1396.6274 us. Best GFLOPs: 90.3213
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #5: GFLOPs: 9.5768. Time: 10813.9816 us. Best GFLOPs: 90.3213
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #6: GFLOPs: 81.1905. Time: 1275.5587 us. Best GFLOPs: 90.3213
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #7: GFLOPs: 83.2960. Time: 1243.3164 us. Best GFLOPs: 90.3213
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #8: GFLOPs: 101.9332. Time: 1015.9918 us. Best GFLOPs: 101.9332
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #9: GFLOPs: 121.0560. Time: 855.4987 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #10: GFLOPs: 36.2719. Time: 2855.1950 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #11: GFLOPs: 67.8069. Time: 1527.3273 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #12: GFLOPs: 10.2416. Time: 10111.9934 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #13: GFLOPs: 14.2378. Time: 7273.8415 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #14: GFLOPs: 107.5746. Time: 962.7111 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #15: GFLOPs: 66.8545. Time: 1549.0845 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #16: GFLOPs: 56.5832. Time: 1830.2844 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #17: GFLOPs: 77.9987. Time: 1327.7558 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #18: GFLOPs: 65.2254. Time: 1587.7754 us. Best GFLOPs: 121.0560
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #19: GFLOPs: 228.1639. Time: 453.8985 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #20: GFLOPs: 81.3732. Time: 1272.6943 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #21: GFLOPs: 3.5521. Time: 29155.9022 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #22: GFLOPs: 22.9670. Time: 4509.2291 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #23: GFLOPs: 5.5875. Time: 18534.9597 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #24: GFLOPs: 22.8082. Time: 4540.6076 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #25: GFLOPs: 138.3344. Time: 748.6444 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #26: GFLOPs: 1.4728. Time: 70318.2230 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #27: GFLOPs: 4.7551. Time: 21779.2192 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #28: GFLOPs: 15.0319. Time: 6889.5823 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #29: GFLOPs: 106.7891. Time: 969.7923 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #30: GFLOPs: 60.0001. Time: 1726.0514 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #31: GFLOPs: 116.9571. Time: 885.4808 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #32: GFLOPs: 2.9844. Time: 34701.9973 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #33: GFLOPs: 174.4637. Time: 593.6093 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #34: GFLOPs: 42.0986. Time: 2460.0161 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #35: GFLOPs: 56.6049. Time: 1829.5807 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #36: GFLOPs: 37.8184. Time: 2738.4343 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #37: GFLOPs: 43.9151. Time: 2358.2587 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #38: GFLOPs: 80.0608. Time: 1293.5572 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #39: GFLOPs: 14.4582. Time: 7162.9243 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #40: GFLOPs: 57.6744. Time: 1795.6541 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:121] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(4) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(4) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(4) * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(56)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(4) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=16)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b103)
b127 = sch.decompose_reduction(block=b103, loop=l111)
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #42: GFLOPs: 13.5285. Time: 7655.2129 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #43: GFLOPs: 30.6076. Time: 3383.5813 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #44: GFLOPs: 82.5472. Time: 1254.5938 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #45: GFLOPs: 1.4343. Time: 72206.0840 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #46: GFLOPs: 66.8194. Time: 1549.8992 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #47: GFLOPs: 12.2025. Time: 8487.0404 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #48: GFLOPs: 125.9281. Time: 822.3999 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #49: GFLOPs: 71.5103. Time: 1448.2289 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #50: GFLOPs: 89.4812. Time: 1157.3740 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #51: GFLOPs: 18.9029. Time: 5478.6991 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #52: GFLOPs: 8.9432. Time: 11580.1726 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:121] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(56), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #54: GFLOPs: 82.3505. Time: 1257.5907 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #55: GFLOPs: 63.7370. Time: 1624.8523 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #56: GFLOPs: 35.1228. Time: 2948.6061 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #57: GFLOPs: 59.0024. Time: 1755.2376 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #58: GFLOPs: 70.5015. Time: 1468.9509 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #59: GFLOPs: 58.7635. Time: 1762.3751 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #60: GFLOPs: 61.7897. Time: 1676.0599 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #61: GFLOPs: 44.6498. Time: 2319.4540 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #62: GFLOPs: 72.9936. Time: 1418.7996 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #63: GFLOPs: 13.3677. Time: 7747.2708 us. Best GFLOPs: 228.1639
2024-04-29 17:15:20 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #64: GFLOPs: 24.9755. Time: 4146.5971 us. Best GFLOPs: 228.1639
2024-04-29 18:35:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:35:43 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 18:35:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 18:35:45 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 18:35:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 18:35:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 18:36:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 18:36:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xda0b928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x12012128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1092a578)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc122be8)]: 0 failure(s)
2024-04-29 18:36:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8107  0.7529  0.7152  0.7106  0.7091  0.7083  0.7079  0.7079  0.7043  0.7041  0.7011  0.6911  0.6821  0.6619  0.6557  0.6500
[17 : 32]:	0.6442  0.6429  0.6321  0.6302  0.6277  0.6245  0.6215  0.6192  0.6180  0.6158  0.6140  0.6139  0.6088  0.6086  0.6081  0.6072
[33 : 48]:	0.6056  0.6056  0.6032  0.6011  0.6003  0.5990  0.5960  0.5955  0.5938  0.5931  0.5930  0.5891  0.5878  0.5865  0.5864  0.5857
[49 : 64]:	0.5852  0.5844  0.5844  0.5839  0.5834  0.5811  0.5807  0.5800  0.5786  0.5784  0.5774  0.5726  0.5726  0.5722  0.5721  0.5710
2024-04-29 18:36:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:36:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #65: GFLOPs: 111.7363. Time: 926.8541 us. Best GFLOPs: 228.1639
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #66: GFLOPs: 93.1815. Time: 1111.4139 us. Best GFLOPs: 228.1639
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #67: GFLOPs: 259.1846. Time: 399.5733 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #68: GFLOPs: 118.6538. Time: 872.8188 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #69: GFLOPs: 112.0022. Time: 924.6541 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #70: GFLOPs: 183.0915. Time: 565.6366 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #71: GFLOPs: 177.7788. Time: 582.5401 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #72: GFLOPs: 178.6072. Time: 579.8380 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #73: GFLOPs: 177.7913. Time: 582.4989 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #74: GFLOPs: 103.8821. Time: 996.9312 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #75: GFLOPs: 184.0739. Time: 562.6180 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #76: GFLOPs: 209.5343. Time: 494.2544 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #77: GFLOPs: 154.6692. Time: 669.5793 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #78: GFLOPs: 119.9639. Time: 863.2868 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #79: GFLOPs: 112.9884. Time: 916.5831 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #80: GFLOPs: 149.5804. Time: 692.3585 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #81: GFLOPs: 114.8334. Time: 901.8567 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #82: GFLOPs: 94.9504. Time: 1090.7093 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #83: GFLOPs: 237.5575. Time: 435.9503 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #84: GFLOPs: 135.7252. Time: 763.0365 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #85: GFLOPs: 205.2755. Time: 504.5086 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #86: GFLOPs: 77.6921. Time: 1332.9953 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #87: GFLOPs: 174.5321. Time: 593.3765 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #88: GFLOPs: 200.3985. Time: 516.7867 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #89: GFLOPs: 79.4206. Time: 1303.9856 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #90: GFLOPs: 181.2496. Time: 571.3848 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #91: GFLOPs: 148.4677. Time: 697.5474 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #92: GFLOPs: 94.3425. Time: 1097.7375 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #93: GFLOPs: 125.0040. Time: 828.4798 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #94: GFLOPs: 246.3992. Time: 420.3068 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #95: GFLOPs: 165.7461. Time: 624.8309 us. Best GFLOPs: 259.1846
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #96: GFLOPs: 411.7319. Time: 251.5308 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #97: GFLOPs: 109.7805. Time: 943.3666 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #98: GFLOPs: 195.1047. Time: 530.8087 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #99: GFLOPs: 85.7519. Time: 1207.7082 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #100: GFLOPs: 87.9430. Time: 1177.6185 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #101: GFLOPs: 207.3778. Time: 499.3943 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #102: GFLOPs: 163.5531. Time: 633.2087 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #103: GFLOPs: 193.4062. Time: 535.4704 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #104: GFLOPs: 152.9685. Time: 677.0235 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #105: GFLOPs: 138.0661. Time: 750.0992 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #106: GFLOPs: 119.9392. Time: 863.4648 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #107: GFLOPs: 83.3593. Time: 1242.3717 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #108: GFLOPs: 72.9502. Time: 1419.6440 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #109: GFLOPs: 90.0719. Time: 1149.7850 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #110: GFLOPs: 225.5121. Time: 459.2360 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #111: GFLOPs: 157.8953. Time: 655.8984 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #112: GFLOPs: 125.7034. Time: 823.8700 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #113: GFLOPs: 163.4025. Time: 633.7922 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:121] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #114: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(16) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #115: GFLOPs: 341.2675. Time: 303.4665 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #116: GFLOPs: 116.6903. Time: 887.5052 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #117: GFLOPs: 121.5905. Time: 851.7384 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #118: GFLOPs: 60.9219. Time: 1699.9351 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #119: GFLOPs: 60.8016. Time: 1703.2989 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #120: GFLOPs: 115.3790. Time: 897.5917 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #121: GFLOPs: 192.0545. Time: 539.2388 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #122: GFLOPs: 91.9488. Time: 1126.3145 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #123: GFLOPs: 108.1221. Time: 957.8365 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #124: GFLOPs: 129.1797. Time: 801.6993 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #125: GFLOPs: 89.5641. Time: 1156.3031 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #126: GFLOPs: 21.4337. Time: 4831.7935 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #127: GFLOPs: 19.7624. Time: 5240.4167 us. Best GFLOPs: 411.7319
2024-04-29 18:37:46 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_94] Trial #128: GFLOPs: 40.5437. Time: 2554.3642 us. Best GFLOPs: 411.7319
