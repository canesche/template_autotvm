2024-04-29 14:02:55 [INFO] [task_scheduler.cc:160] Initializing Task #31: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31"
2024-04-29 14:02:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(224), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(896), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:02:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:02:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(224), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(896), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[28, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:02:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(224), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(896), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[28, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:02:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(224), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(896), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[28, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:54:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:54:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:54:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc159068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5ac008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99a1248)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff83d58)]: 0 failure(s)
2024-04-29 14:54:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:54:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc159068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5ac008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99a1248)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff83d58)]: 0 failure(s)
2024-04-29 14:54:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc159068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5ac008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99a1248)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff83d58)]: 0 failure(s)
2024-04-29 14:54:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc159068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5ac008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99a1248)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff83d58)]: 0 failure(s)
2024-04-29 14:55:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc159068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5ac008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x99a1248)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xff83d58)]: 0 failure(s)
2024-04-29 14:55:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9990  0.9985  0.9968  0.9964  0.9960  0.9956  0.9954  0.9947  0.9938  0.9937  0.9915  0.9896  0.9894  0.9888  0.9887
[17 : 32]:	0.9886  0.9880  0.9879  0.9877  0.9875  0.9873  0.9864  0.9852  0.9849  0.9849  0.9845  0.9842  0.9835  0.9833  0.9833  0.9831
[33 : 48]:	0.9829  0.9809  0.9806  0.9802  0.9801  0.9799  0.9790  0.9783  0.9780  0.9779  0.9777  0.9776  0.9770  0.9767  0.9757  0.9756
[49 : 64]:	0.9756  0.9751  0.9746  0.9738  0.9727  0.9724  0.9719  0.9717  0.9715  0.9668  0.9656  0.9641  0.9622  0.9616  0.9614  0.9611
2024-04-29 14:55:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:55:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #1: GFLOPs: 142.3671. Time: 79.0349 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #2: GFLOPs: 34.2949. Time: 328.0944 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #3: GFLOPs: 79.2154. Time: 142.0427 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #4: GFLOPs: 42.1417. Time: 267.0033 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #5: GFLOPs: 20.9888. Time: 536.0932 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #6: GFLOPs: 35.0336. Time: 321.1769 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #7: GFLOPs: 10.5159. Time: 1069.9949 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #8: GFLOPs: 87.6470. Time: 128.3783 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #9: GFLOPs: 7.3980. Time: 1520.9396 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #10: GFLOPs: 14.4072. Time: 780.9984 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #11: GFLOPs: 44.4177. Time: 253.3219 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #12: GFLOPs: 5.7592. Time: 1953.7423 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #13: GFLOPs: 124.0977. Time: 90.6702 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #14: GFLOPs: 15.6531. Time: 718.8310 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #15: GFLOPs: 51.4008. Time: 218.9064 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #16: GFLOPs: 75.0745. Time: 149.8774 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #17: GFLOPs: 62.8512. Time: 179.0255 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #18: GFLOPs: 47.3196. Time: 237.7866 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #19: GFLOPs: 69.1111. Time: 162.8098 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #20: GFLOPs: 82.8016. Time: 135.8907 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #21: GFLOPs: 41.4964. Time: 271.1553 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #22: GFLOPs: 3.0661. Time: 3669.8031 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #23: GFLOPs: 19.0548. Time: 590.5046 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #24: GFLOPs: 78.9673. Time: 142.4890 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #25: GFLOPs: 12.3615. Time: 910.2442 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #26: GFLOPs: 23.2130. Time: 484.7269 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #27: GFLOPs: 7.9015. Time: 1424.0295 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #28: GFLOPs: 34.9620. Time: 321.8344 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #29: GFLOPs: 43.7602. Time: 257.1282 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #30: GFLOPs: 64.2012. Time: 175.2610 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #31: GFLOPs: 7.4428. Time: 1511.7898 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #32: GFLOPs: 60.7203. Time: 185.3081 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #33: GFLOPs: 76.3973. Time: 147.2823 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #34: GFLOPs: 8.9808. Time: 1252.8953 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #35: GFLOPs: 19.9726. Time: 563.3693 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #36: GFLOPs: 8.7015. Time: 1293.1041 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #37: GFLOPs: 5.1843. Time: 2170.4009 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #38: GFLOPs: 57.9303. Time: 194.2328 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #39: GFLOPs: 127.8388. Time: 88.0168 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #40: GFLOPs: 66.5078. Time: 169.1827 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #41: GFLOPs: 33.7918. Time: 332.9797 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #42: GFLOPs: 56.7080. Time: 198.4194 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #43: GFLOPs: 8.4710. Time: 1328.2934 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #44: GFLOPs: 20.4988. Time: 548.9096 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #45: GFLOPs: 21.5039. Time: 523.2523 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #46: GFLOPs: 7.5958. Time: 1481.3494 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #47: GFLOPs: 2.7003. Time: 4166.8676 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #48: GFLOPs: 55.5662. Time: 202.4968 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #49: GFLOPs: 99.0561. Time: 113.5918 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #50: GFLOPs: 16.7483. Time: 671.8261 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #51: GFLOPs: 4.1830. Time: 2689.9482 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #52: GFLOPs: 29.9846. Time: 375.2586 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #53: GFLOPs: 78.0168. Time: 144.2249 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #54: GFLOPs: 59.1460. Time: 190.2407 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #55: GFLOPs: 17.8411. Time: 630.6786 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #56: GFLOPs: 56.4391. Time: 199.3648 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #57: GFLOPs: 25.1059. Time: 448.1803 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #58: GFLOPs: 98.0085. Time: 114.8061 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #59: GFLOPs: 53.9943. Time: 208.3917 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #60: GFLOPs: 8.4528. Time: 1331.1550 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #61: GFLOPs: 18.2391. Time: 616.9134 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #62: GFLOPs: 40.7061. Time: 276.4200 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #63: GFLOPs: 5.4987. Time: 2046.2799 us. Best GFLOPs: 142.3671
2024-04-29 17:06:42 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_31] Trial #64: GFLOPs: 24.0355. Time: 468.1401 us. Best GFLOPs: 142.3671
