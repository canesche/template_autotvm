2024-04-29 14:08:01 [INFO] [task_scheduler.cc:160] Initializing Task #116: "fused_nn_global_avg_pool2d"
2024-04-29 14:08:01 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 14:08:02 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:08:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(49)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(480)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(480), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(49)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[49, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:08:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(480)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax0_2, ax1_2, ax2_1, ax3_1, ax4_1, ax5_1, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(49)):
                        with T.block("adaptive_pool_sum_rf"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_2, ax1_2])
                            v_ax1 = T.axis.spatial(T.int64(480), ax1 + ax2_1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                            v_ax4 = T.axis.spatial(T.int64(4), ax5 + ax5_1)
                            vrv0_rv1_fused_0 = T.axis.reduce(T.int64(49), ax6)
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                            T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            with T.init():
                                adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(480), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[49, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=7)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:08:02 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(480), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 17:00:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:00:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:00:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x78577b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa79e4b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x903f728)]: 0 failure(s)
2024-04-29 17:00:53 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 17:00:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x78577b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa79e4b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x903f728)]: 0 failure(s)
2024-04-29 17:00:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x78577b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa79e4b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x903f728)]: 0 failure(s)
2024-04-29 17:01:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x78577b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa79e4b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x903f728)]: 0 failure(s)
2024-04-29 17:01:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x78577b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa79e4b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69c0748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x903f728)]: 0 failure(s)
2024-04-29 17:01:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9957  0.9914  0.9910  0.9674  0.9604  0.9599  0.9590  0.9585  0.9581  0.9577  0.9570  0.9482  0.9470  0.9454  0.9448  0.9347
[17 : 32]:	0.9318  0.9298  0.9281  0.9177  0.9150  0.9142  0.9140  0.9124  0.9116  0.9051  0.9008  0.8971  0.8945  0.8934  0.8898  0.8819
[33 : 48]:	0.8808  0.8804  0.8776  0.8620  0.8611  0.8586  0.8519  0.8482  0.8431  0.8425  0.8408  0.8368  0.8360  0.8288  0.8248  0.8201
[49 : 64]:	0.8193  0.8182  0.8119  0.8115  0.8095  0.8056  0.7966  0.7951  0.7917  0.7850  0.7838  0.7790  0.7760  0.7680  0.7677  0.7676
2024-04-29 17:01:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:01:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 2.7874. Time: 34.4409 us. Best GFLOPs: 2.7874
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 6.2175. Time: 15.4403 us. Best GFLOPs: 6.2175
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 7.5350. Time: 12.7405 us. Best GFLOPs: 7.5350
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 4.1606. Time: 23.0735 us. Best GFLOPs: 7.5350
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 8.1896. Time: 11.7222 us. Best GFLOPs: 8.1896
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 4.2723. Time: 22.4705 us. Best GFLOPs: 8.1896
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 7.0137. Time: 13.6874 us. Best GFLOPs: 8.1896
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 4.9382. Time: 19.4404 us. Best GFLOPs: 8.1896
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 3.6878. Time: 26.0317 us. Best GFLOPs: 8.1896
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 3.3372. Time: 28.7665 us. Best GFLOPs: 8.1896
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 8.7089. Time: 11.0232 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 4.0380. Time: 23.7744 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 4.3840. Time: 21.8977 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 3.9684. Time: 24.1912 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 4.2508. Time: 22.5842 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 2.9709. Time: 32.3131 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 6.2646. Time: 15.3243 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 2.3798. Time: 40.3390 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 3.5053. Time: 27.3870 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.2436. Time: 22.6222 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 8.4515. Time: 11.3589 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 6.9380. Time: 13.8369 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 4.0700. Time: 23.5873 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 7.5049. Time: 12.7916 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 3.3882. Time: 28.3335 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 4.2384. Time: 22.6501 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 7.6449. Time: 12.5575 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 6.0856. Time: 15.7749 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 3.2445. Time: 29.5881 us. Best GFLOPs: 8.7089
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 8.8072. Time: 10.9002 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 2.5652. Time: 37.4246 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 6.4240. Time: 14.9439 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 3.0251. Time: 31.7343 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 3.6147. Time: 26.5585 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 7.5626. Time: 12.6940 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 7.8277. Time: 12.2641 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 3.0712. Time: 31.2586 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 3.6488. Time: 26.3103 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 3.5856. Time: 26.7738 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 3.2272. Time: 29.7475 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 4.3058. Time: 22.2957 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 6.4568. Time: 14.8679 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 6.8746. Time: 13.9645 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 5.9469. Time: 16.1429 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 3.5584. Time: 26.9783 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 3.9776. Time: 24.1350 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 4.0976. Time: 23.4281 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 2.4680. Time: 38.8979 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 6.1082. Time: 15.7165 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 4.3952. Time: 21.8422 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 2.6751. Time: 35.8863 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 1.6265. Time: 59.0211 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 6.3737. Time: 15.0618 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 7.0121. Time: 13.6906 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.6003. Time: 36.9184 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 6.5263. Time: 14.7097 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 4.3452. Time: 22.0931 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 3.9584. Time: 24.2522 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 7.9487. Time: 12.0774 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 4.2669. Time: 22.4989 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 3.8582. Time: 24.8822 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 2.6080. Time: 36.8096 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 6.2512. Time: 15.3571 us. Best GFLOPs: 8.8072
2024-04-29 17:18:54 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 4.4407. Time: 21.6182 us. Best GFLOPs: 8.8072
