2024-04-29 14:07:59 [INFO] [task_scheduler.cc:160] Initializing Task #115: "fused_nn_avg_pool2d_2"
2024-04-29 14:07:59 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 14:07:59 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:59 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(4), ax6)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=4)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:59 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(1), ax6)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=4)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:59 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(224), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        v_rv0, v_rv1 = T.axis.remap("RR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 16:59:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:59:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:59:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11373c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcf90648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe0373d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6fda8e8)]: 0 failure(s)
2024-04-29 16:59:07 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:59:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11373c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcf90648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe0373d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6fda8e8)]: 0 failure(s)
2024-04-29 16:59:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11373c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcf90648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe0373d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6fda8e8)]: 0 failure(s)
2024-04-29 16:59:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11373c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcf90648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe0373d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6fda8e8)]: 0 failure(s)
2024-04-29 16:59:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11373c08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcf90648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe0373d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6fda8e8)]: 0 failure(s)
2024-04-29 16:59:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9974  0.9964  0.9964  0.9948  0.9901  0.9880  0.9870  0.9866  0.9857  0.9856  0.9846  0.9843  0.9816  0.9807  0.9796  0.9781
[17 : 32]:	0.9776  0.9744  0.9742  0.9731  0.9705  0.9704  0.9698  0.9686  0.9590  0.9587  0.9577  0.9549  0.9535  0.9520  0.9440  0.9433
[33 : 48]:	0.9417  0.9408  0.9394  0.9392  0.9383  0.9351  0.9301  0.9295  0.9256  0.9238  0.9206  0.9169  0.9168  0.9066  0.9004  0.8971
[49 : 64]:	0.8950  0.8945  0.8898  0.8877  0.8840  0.8809  0.8786  0.8779  0.8717  0.8710  0.8639  0.8635  0.8630  0.8544  0.8524  0.8470
2024-04-29 16:59:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:59:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #1: GFLOPs: 12.6613. Time: 86.6894 us. Best GFLOPs: 12.6613
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #2: GFLOPs: 13.9368. Time: 78.7557 us. Best GFLOPs: 13.9368
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #3: GFLOPs: 39.1269. Time: 28.0523 us. Best GFLOPs: 39.1269
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #4: GFLOPs: 93.1728. Time: 11.7803 us. Best GFLOPs: 93.1728
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #5: GFLOPs: 89.6961. Time: 12.2369 us. Best GFLOPs: 93.1728
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #6: GFLOPs: 50.7430. Time: 21.6306 us. Best GFLOPs: 93.1728
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #7: GFLOPs: 95.8955. Time: 11.4458 us. Best GFLOPs: 95.8955
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #8: GFLOPs: 13.2441. Time: 82.8748 us. Best GFLOPs: 95.8955
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:121] [Task #115: fused_nn_avg_pool2d_2] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax2, ax3 in T.grid(T.int64(7), T.int64(7)):
                for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_init in T.vectorized(T.int64(4)):
                        with T.block("pool_sum_init"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                            v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2_init)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_init)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_ax5_fused_init])
                            T.reads()
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                for ax0, ax1, ax2_1, ax3_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_sum_update"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                            v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_ax5_fused])
                            T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4_fused])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40, l41, l42 = sch.get_loops(block=b22)
l43 = sch.fuse(l41, l42, preserve_unit_iters=True)
sch.vectorize(loop=l43)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l44, l45, l46, l47 = sch.get_loops(block=b23)
l48 = sch.fuse(l47, preserve_unit_iters=True)
sch.vectorize(loop=l48)
b49 = sch.get_block(name="pool_sum_rf", func_name="main")
l50, l51, l52, l53, l54, l55, l56, l57 = sch.get_loops(block=b49)
b58 = sch.decompose_reduction(block=b49, loop=l57)
b59 = sch.get_block(name="pool_sum", func_name="main")
l60, l61, l62, l63, l64, l65, l66, l67 = sch.get_loops(block=b59)
b68 = sch.decompose_reduction(block=b59, loop=l63)
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #10: GFLOPs: 93.0312. Time: 11.7982 us. Best GFLOPs: 95.8955
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #11: GFLOPs: 96.3228. Time: 11.3950 us. Best GFLOPs: 96.3228
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #12: GFLOPs: 41.3796. Time: 26.5251 us. Best GFLOPs: 96.3228
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #13: GFLOPs: 102.7081. Time: 10.6866 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #14: GFLOPs: 67.7231. Time: 16.2072 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #15: GFLOPs: 31.8969. Time: 34.4109 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #16: GFLOPs: 96.6626. Time: 11.3550 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #17: GFLOPs: 77.3799. Time: 14.1846 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #18: GFLOPs: 41.4255. Time: 26.4958 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #19: GFLOPs: 34.1479. Time: 32.1425 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #20: GFLOPs: 91.4608. Time: 12.0008 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #21: GFLOPs: 88.9956. Time: 12.3332 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #22: GFLOPs: 96.5418. Time: 11.3692 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:121] [Task #115: fused_nn_avg_pool2d_2] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(686)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(224), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43 = sch.get_loops(block=b23)
l44 = sch.fuse(l39, l40, l41, l42, l43, preserve_unit_iters=True)
l45, l46 = sch.split(loop=l44, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.vectorize(loop=l46)
b47 = sch.get_block(name="pool_sum_rf", func_name="main")
l48, l49, l50, l51, l52, l53, l54, l55 = sch.get_loops(block=b47)
b56 = sch.decompose_reduction(block=b47, loop=l55)
b57 = sch.get_block(name="pool_sum", func_name="main")
l58, l59, l60, l61, l62 = sch.get_loops(block=b57)
b63 = sch.decompose_reduction(block=b57, loop=l62)
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #24: GFLOPs: 38.2578. Time: 28.6896 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #25: GFLOPs: 93.8981. Time: 11.6893 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #26: GFLOPs: 37.9958. Time: 28.8874 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #27: GFLOPs: 92.3995. Time: 11.8789 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #28: GFLOPs: 92.9429. Time: 11.8094 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #29: GFLOPs: 52.4373. Time: 20.9317 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #30: GFLOPs: 98.6995. Time: 11.1206 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #31: GFLOPs: 78.1304. Time: 14.0483 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #32: GFLOPs: 43.0769. Time: 25.4800 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #33: GFLOPs: 67.0333. Time: 16.3739 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #34: GFLOPs: 38.7333. Time: 28.3374 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #35: GFLOPs: 32.2217. Time: 34.0640 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #36: GFLOPs: 42.1760. Time: 26.0243 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #37: GFLOPs: 74.3238. Time: 14.7678 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #38: GFLOPs: 41.2802. Time: 26.5890 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #39: GFLOPs: 36.2900. Time: 30.2453 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:121] [Task #115: fused_nn_avg_pool2d_2] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(224), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax2 in range(T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l41)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l42, l43, l44, l45 = sch.get_loops(block=b23)
l46 = sch.fuse(l44, l45, preserve_unit_iters=True)
sch.vectorize(loop=l46)
b47 = sch.get_block(name="pool_sum_rf", func_name="main")
l48, l49, l50, l51, l52, l53, l54, l55 = sch.get_loops(block=b47)
b56 = sch.decompose_reduction(block=b47, loop=l55)
b57 = sch.get_block(name="pool_sum", func_name="main")
l58, l59, l60, l61, l62, l63 = sch.get_loops(block=b57)
b64 = sch.decompose_reduction(block=b57, loop=l59)
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #41: GFLOPs: 72.0957. Time: 15.2242 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #42: GFLOPs: 27.3031. Time: 40.2006 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #43: GFLOPs: 37.9205. Time: 28.9448 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #44: GFLOPs: 40.4269. Time: 27.1503 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #45: GFLOPs: 30.6854. Time: 35.7694 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #46: GFLOPs: 26.0116. Time: 42.1966 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #47: GFLOPs: 39.5333. Time: 27.7639 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #48: GFLOPs: 89.5036. Time: 12.2632 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #49: GFLOPs: 91.1436. Time: 12.0425 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #50: GFLOPs: 90.6293. Time: 12.1109 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #51: GFLOPs: 30.4226. Time: 36.0784 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #52: GFLOPs: 24.8391. Time: 44.1884 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #53: GFLOPs: 31.5600. Time: 34.7782 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #54: GFLOPs: 32.4992. Time: 33.7731 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #55: GFLOPs: 22.6174. Time: 48.5290 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #56: GFLOPs: 42.5045. Time: 25.8232 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #57: GFLOPs: 96.2505. Time: 11.4036 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #58: GFLOPs: 42.4311. Time: 25.8678 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #59: GFLOPs: 91.5512. Time: 11.9889 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #60: GFLOPs: 94.5439. Time: 11.6094 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #61: GFLOPs: 88.3933. Time: 12.4172 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #62: GFLOPs: 21.0786. Time: 52.0718 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #63: GFLOPs: 32.4146. Time: 33.8613 us. Best GFLOPs: 102.7081
2024-04-29 17:18:41 [INFO] [task_scheduler.cc:131] [Task #115: fused_nn_avg_pool2d_2] Trial #64: GFLOPs: 89.7454. Time: 12.2302 us. Best GFLOPs: 102.7081
