2024-04-29 14:04:29 [INFO] [task_scheduler.cc:160] Initializing Task #55: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54"
2024-04-29 14:04:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(1056), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:04:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:04:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1056), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1056), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1056, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:04:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1056), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1056), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1056, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:04:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1056), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1056), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1056, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 15:32:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:32:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 15:32:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 15:32:30 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 15:32:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 15:32:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 15:32:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 15:32:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 15:32:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9987  0.9973  0.9973  0.9970  0.9969  0.9966  0.9966  0.9960  0.9955  0.9952  0.9939  0.9926  0.9911  0.9908  0.9908
[17 : 32]:	0.9907  0.9903  0.9881  0.9881  0.9875  0.9866  0.9847  0.9842  0.9841  0.9837  0.9835  0.9832  0.9829  0.9825  0.9824  0.9822
[33 : 48]:	0.9819  0.9818  0.9810  0.9805  0.9802  0.9799  0.9772  0.9765  0.9761  0.9756  0.9744  0.9743  0.9743  0.9740  0.9739  0.9735
[49 : 64]:	0.9733  0.9731  0.9729  0.9718  0.9704  0.9693  0.9691  0.9680  0.9678  0.9665  0.9662  0.9658  0.9656  0.9649  0.9648  0.9646
2024-04-29 15:32:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:32:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #1: GFLOPs: 69.1405. Time: 767.0761 us. Best GFLOPs: 69.1405
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #2: GFLOPs: 23.0094. Time: 2304.9729 us. Best GFLOPs: 69.1405
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:121] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(7), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(1056), ic_0 * T.int64(11) + ic_1)
                                v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 11])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b106)
b133 = sch.decompose_reduction(block=b106, loop=l117)
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #4: GFLOPs: 99.5516. Time: 532.7493 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #5: GFLOPs: 9.1961. Time: 5767.2558 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #6: GFLOPs: 80.0903. Time: 662.2028 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #7: GFLOPs: 48.3491. Time: 1096.9401 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #8: GFLOPs: 30.5306. Time: 1737.1446 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #9: GFLOPs: 11.1538. Time: 4754.9712 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #10: GFLOPs: 55.9469. Time: 947.9710 us. Best GFLOPs: 99.5516
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #11: GFLOPs: 112.3024. Time: 472.2608 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #12: GFLOPs: 29.4367. Time: 1801.6992 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #13: GFLOPs: 3.6308. Time: 14607.1800 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #14: GFLOPs: 36.2855. Time: 1461.6300 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #15: GFLOPs: 9.7274. Time: 5452.2502 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #16: GFLOPs: 30.9783. Time: 1712.0363 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #17: GFLOPs: 55.1182. Time: 962.2233 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #18: GFLOPs: 7.1885. Time: 7377.8544 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #19: GFLOPs: 5.5079. Time: 9629.1459 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:121] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(16), T.int64(14), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(44), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(14), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1056), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[44, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l93)
sch.annotate(block_or_loop=l67, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l67, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b102)
b129 = sch.decompose_reduction(block=b102, loop=l113)
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #21: GFLOPs: 27.8837. Time: 1902.0411 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #22: GFLOPs: 18.4525. Time: 2874.1873 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #23: GFLOPs: 91.8404. Time: 577.4805 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #24: GFLOPs: 14.2691. Time: 3716.8553 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #25: GFLOPs: 7.0069. Time: 7569.1083 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #26: GFLOPs: 8.0514. Time: 6587.1737 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #27: GFLOPs: 52.9753. Time: 1001.1466 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #28: GFLOPs: 71.7013. Time: 739.6802 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #29: GFLOPs: 2.9457. Time: 18004.4425 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #30: GFLOPs: 46.1401. Time: 1149.4561 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #31: GFLOPs: 0.9373. Time: 56581.0660 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #32: GFLOPs: 75.2336. Time: 704.9512 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #33: GFLOPs: 42.9045. Time: 1236.1410 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #34: GFLOPs: 87.3446. Time: 607.2046 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #35: GFLOPs: 39.4699. Time: 1343.7070 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #36: GFLOPs: 69.7476. Time: 760.3991 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #37: GFLOPs: 36.9309. Time: 1436.0896 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:121] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(264), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(22), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1056), ic_0 * T.int64(22) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 22])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #39: GFLOPs: 75.9583. Time: 698.2257 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #40: GFLOPs: 8.1759. Time: 6486.8803 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #41: GFLOPs: 31.9190. Time: 1661.5803 us. Best GFLOPs: 112.3024
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #42: GFLOPs: 128.9458. Time: 411.3047 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #43: GFLOPs: 26.9444. Time: 1968.3495 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #44: GFLOPs: 5.0183. Time: 10568.6073 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #45: GFLOPs: 8.5522. Time: 6201.4788 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #46: GFLOPs: 12.1345. Time: 4370.6950 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #47: GFLOPs: 47.6954. Time: 1111.9730 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #48: GFLOPs: 109.6225. Time: 483.8061 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #49: GFLOPs: 13.1749. Time: 4025.5210 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #50: GFLOPs: 1.5410. Time: 34417.5897 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #51: GFLOPs: 6.9731. Time: 7605.8335 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #52: GFLOPs: 69.1068. Time: 767.4506 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #53: GFLOPs: 34.5503. Time: 1535.0400 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #54: GFLOPs: 94.7505. Time: 559.7443 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #55: GFLOPs: 6.8197. Time: 7776.9346 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #56: GFLOPs: 2.2659. Time: 23406.0814 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #57: GFLOPs: 98.1831. Time: 540.1749 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #58: GFLOPs: 30.4371. Time: 1742.4799 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #59: GFLOPs: 23.4833. Time: 2258.4567 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #60: GFLOPs: 126.5324. Time: 419.1498 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #61: GFLOPs: 62.0776. Time: 854.3500 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #62: GFLOPs: 2.9725. Time: 17842.1608 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #63: GFLOPs: 29.4963. Time: 1798.0558 us. Best GFLOPs: 128.9458
2024-04-29 17:09:00 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #64: GFLOPs: 57.8195. Time: 917.2691 us. Best GFLOPs: 128.9458
2024-04-29 18:53:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:53:23 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 18:53:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 18:53:25 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 18:53:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 18:53:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 18:53:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 18:53:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xfb812b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1352dee8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x93bfa58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5beb9c8)]: 0 failure(s)
2024-04-29 18:53:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9736  0.9736  0.9736  0.9314  0.9239  0.8970  0.8935  0.8831  0.8822  0.8809  0.8808  0.8807  0.8718  0.8636  0.8634  0.8624
[17 : 32]:	0.8616  0.8614  0.8578  0.8577  0.8517  0.8483  0.8483  0.8456  0.8456  0.8436  0.8412  0.8394  0.8264  0.8263  0.8250  0.8250
[33 : 48]:	0.8250  0.8243  0.8215  0.8215  0.8180  0.8175  0.8153  0.8126  0.8119  0.8119  0.8111  0.8100  0.8067  0.8052  0.8037  0.8035
[49 : 64]:	0.8031  0.8031  0.8030  0.8024  0.7992  0.7957  0.7950  0.7949  0.7947  0.7931  0.7921  0.7867  0.7864  0.7850  0.7839  0.7836
2024-04-29 18:53:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:53:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #65: GFLOPs: 129.1823. Time: 410.5519 us. Best GFLOPs: 129.1823
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #66: GFLOPs: 130.2562. Time: 407.1669 us. Best GFLOPs: 130.2562
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #67: GFLOPs: 129.5366. Time: 409.4289 us. Best GFLOPs: 130.2562
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #68: GFLOPs: 85.9073. Time: 617.3638 us. Best GFLOPs: 130.2562
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #69: GFLOPs: 91.4005. Time: 580.2600 us. Best GFLOPs: 130.2562
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #70: GFLOPs: 99.4909. Time: 533.0742 us. Best GFLOPs: 130.2562
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #71: GFLOPs: 74.0546. Time: 716.1746 us. Best GFLOPs: 130.2562
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #72: GFLOPs: 168.6944. Time: 314.3913 us. Best GFLOPs: 168.6944
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #73: GFLOPs: 116.8210. Time: 453.9941 us. Best GFLOPs: 168.6944
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #74: GFLOPs: 134.2312. Time: 395.1097 us. Best GFLOPs: 168.6944
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #75: GFLOPs: 130.9567. Time: 404.9890 us. Best GFLOPs: 168.6944
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #76: GFLOPs: 152.5519. Time: 347.6588 us. Best GFLOPs: 168.6944
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #77: GFLOPs: 199.1539. Time: 266.3068 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #78: GFLOPs: 187.1784. Time: 283.3449 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #79: GFLOPs: 130.2239. Time: 407.2680 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #80: GFLOPs: 115.4320. Time: 459.4571 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #81: GFLOPs: 98.7295. Time: 537.1851 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #82: GFLOPs: 138.4732. Time: 383.0057 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #83: GFLOPs: 118.2818. Time: 448.3871 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #84: GFLOPs: 142.8484. Time: 371.2749 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #85: GFLOPs: 126.0623. Time: 420.7129 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #86: GFLOPs: 92.2357. Time: 575.0053 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #87: GFLOPs: 93.5815. Time: 566.7364 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #88: GFLOPs: 155.5134. Time: 341.0384 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #89: GFLOPs: 155.6439. Time: 340.7525 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #90: GFLOPs: 152.6085. Time: 347.5300 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #91: GFLOPs: 104.3008. Time: 508.4909 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #92: GFLOPs: 182.2146. Time: 291.0636 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #93: GFLOPs: 71.5979. Time: 740.7484 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #94: GFLOPs: 133.1169. Time: 398.4171 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #95: GFLOPs: 163.5699. Time: 324.2408 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #96: GFLOPs: 163.3322. Time: 324.7127 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #97: GFLOPs: 111.2822. Time: 476.5905 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #98: GFLOPs: 139.7861. Time: 379.4086 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #99: GFLOPs: 169.8377. Time: 312.2747 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #100: GFLOPs: 170.0998. Time: 311.7936 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #101: GFLOPs: 158.3366. Time: 334.9576 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #102: GFLOPs: 65.2743. Time: 812.5099 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #103: GFLOPs: 104.3741. Time: 508.1340 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #104: GFLOPs: 152.9370. Time: 346.7836 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #105: GFLOPs: 123.2253. Time: 430.3990 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #106: GFLOPs: 136.4659. Time: 388.6395 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #107: GFLOPs: 125.1703. Time: 423.7111 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #108: GFLOPs: 108.1128. Time: 490.5619 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #109: GFLOPs: 72.6351. Time: 730.1708 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #110: GFLOPs: 152.3769. Time: 348.0581 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #111: GFLOPs: 86.2608. Time: 614.8334 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #112: GFLOPs: 106.9296. Time: 495.9903 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #113: GFLOPs: 152.3950. Time: 348.0168 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #114: GFLOPs: 154.2476. Time: 343.8371 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #115: GFLOPs: 130.1448. Time: 407.5155 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #116: GFLOPs: 110.8719. Time: 478.3541 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #117: GFLOPs: 26.5238. Time: 1999.5670 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #118: GFLOPs: 70.1138. Time: 756.4279 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #119: GFLOPs: 124.9572. Time: 424.4336 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #120: GFLOPs: 107.4758. Time: 493.4696 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #121: GFLOPs: 96.9103. Time: 547.2693 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #122: GFLOPs: 166.0682. Time: 319.3630 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #123: GFLOPs: 139.6892. Time: 379.6717 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #124: GFLOPs: 82.7542. Time: 640.8863 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #125: GFLOPs: 101.3766. Time: 523.1587 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #126: GFLOPs: 113.3277. Time: 467.9883 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #127: GFLOPs: 39.3527. Time: 1347.7104 us. Best GFLOPs: 199.1539
2024-04-29 18:55:17 [INFO] [task_scheduler.cc:131] [Task #55: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #128: GFLOPs: 69.3329. Time: 764.9476 us. Best GFLOPs: 199.1539
