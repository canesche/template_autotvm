2024-04-29 14:07:02 [INFO] [task_scheduler.cc:160] Initializing Task #94: "fused_nn_contrib_conv2d_NCHWc_2"
2024-04-29 14:07:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4), T.int64(128), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
2024-04-29 14:07:02 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), oc_chunk_0 + ax1)
                        v2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ax3)
                        v4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(30), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), oh_0 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2)):
                    for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(2)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(8), oc_chunk_0 + ax1)
                            v2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), ax3)
                            v4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:02 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
            for n_0, oc_chunk_0, oh_0 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(30), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), oh_0 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
2024-04-29 16:31:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:31:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:31:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 16:31:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:32:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 16:32:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 16:32:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 16:32:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 16:32:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9991  0.9986  0.9985  0.9985  0.9982  0.9977  0.9975  0.9971  0.9970  0.9956  0.9947  0.9945  0.9944  0.9944
[17 : 32]:	0.9937  0.9936  0.9932  0.9927  0.9923  0.9914  0.9912  0.9904  0.9896  0.9896  0.9894  0.9887  0.9886  0.9886  0.9875  0.9874
[33 : 48]:	0.9871  0.9865  0.9863  0.9859  0.9858  0.9854  0.9850  0.9846  0.9841  0.9837  0.9836  0.9836  0.9834  0.9816  0.9805  0.9799
[49 : 64]:	0.9799  0.9798  0.9798  0.9792  0.9790  0.9787  0.9782  0.9781  0.9774  0.9770  0.9754  0.9753  0.9744  0.9737  0.9734  0.9730
2024-04-29 16:32:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:32:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #1: GFLOPs: 17.2027. Time: 3360.0882 us. Best GFLOPs: 17.2027
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #2: GFLOPs: 9.4965. Time: 6086.7572 us. Best GFLOPs: 17.2027
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #3: GFLOPs: 37.5459. Time: 1539.5229 us. Best GFLOPs: 37.5459
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #4: GFLOPs: 35.4807. Time: 1629.1307 us. Best GFLOPs: 37.5459
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #5: GFLOPs: 65.3512. Time: 884.4939 us. Best GFLOPs: 65.3512
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #6: GFLOPs: 108.5300. Time: 532.5971 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #7: GFLOPs: 72.8316. Time: 793.6495 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #8: GFLOPs: 5.1063. Time: 11319.9731 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #9: GFLOPs: 3.4825. Time: 16598.2030 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #10: GFLOPs: 100.3879. Time: 575.7939 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #11: GFLOPs: 45.1312. Time: 1280.7705 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #12: GFLOPs: 2.2648. Time: 25522.5650 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #13: GFLOPs: 23.2750. Time: 2483.4648 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #14: GFLOPs: 27.1754. Time: 2127.0265 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #15: GFLOPs: 5.9780. Time: 9669.1718 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #16: GFLOPs: 19.8645. Time: 2909.8491 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #17: GFLOPs: 23.4821. Time: 2461.5710 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #18: GFLOPs: 89.7862. Time: 643.7823 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #19: GFLOPs: 28.2339. Time: 2047.2784 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(14)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(4), T.int64(14)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_global"):
                            v0, v1, v2, v3, v4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l77, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l77, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b69)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b115)
b142 = sch.decompose_reduction(block=b115, loop=l126)
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #21: GFLOPs: 7.9294. Time: 7289.6735 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #22: GFLOPs: 4.2134. Time: 13718.7276 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #23: GFLOPs: 83.1322. Time: 695.3113 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(6)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(49) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(49) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(49) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_global"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(49) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(49) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                            v4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #25: GFLOPs: 42.7675. Time: 1351.5576 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #26: GFLOPs: 29.2260. Time: 1977.7831 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #27: GFLOPs: 22.2454. Time: 2598.4183 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #28: GFLOPs: 87.9254. Time: 657.4068 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #29: GFLOPs: 2.1682. Time: 26659.0030 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #30: GFLOPs: 2.6569. Time: 21755.8964 us. Best GFLOPs: 108.5300
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #31: GFLOPs: 122.3434. Time: 472.4630 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #32: GFLOPs: 2.8472. Time: 20301.5808 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #33: GFLOPs: 22.8355. Time: 2531.2620 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #34: GFLOPs: 6.7708. Time: 8537.0494 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #35: GFLOPs: 91.6931. Time: 630.3938 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #36: GFLOPs: 17.7671. Time: 3253.3609 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #37: GFLOPs: 18.8556. Time: 3065.5412 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #38: GFLOPs: 46.4930. Time: 1243.2580 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #39: GFLOPs: 67.5559. Time: 855.6286 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #40: GFLOPs: 8.7589. Time: 6599.3114 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #41: GFLOPs: 22.3908. Time: 2581.5453 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #42: GFLOPs: 6.4212. Time: 9001.8387 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72 = sch.get_loops(block=b66)
l73 = sch.fuse(l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #44: GFLOPs: 16.3393. Time: 3537.6531 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #45: GFLOPs: 73.4898. Time: 786.5412 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #46: GFLOPs: 10.2997. Time: 5612.0839 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #47: GFLOPs: 59.9646. Time: 963.9478 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #48: GFLOPs: 66.4943. Time: 869.2883 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #49: GFLOPs: 80.3865. Time: 719.0603 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #50: GFLOPs: 102.9302. Time: 561.5725 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #51: GFLOPs: 86.8800. Time: 665.3172 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #52: GFLOPs: 38.9746. Time: 1483.0860 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #53: GFLOPs: 16.4524. Time: 3513.3354 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #54: GFLOPs: 17.8715. Time: 3234.3501 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #55: GFLOPs: 10.0306. Time: 5762.6419 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #56: GFLOPs: 49.8542. Time: 1159.4357 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #57: GFLOPs: 39.9453. Time: 1447.0464 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #58: GFLOPs: 3.1445. Time: 18382.4300 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #59: GFLOPs: 73.6950. Time: 784.3512 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #60: GFLOPs: 27.9233. Time: 2070.0567 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #61: GFLOPs: 2.0945. Time: 27597.1875 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #62: GFLOPs: 77.4256. Time: 746.5591 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #63: GFLOPs: 4.8380. Time: 11947.7260 us. Best GFLOPs: 122.3434
2024-04-29 17:14:45 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #64: GFLOPs: 4.7195. Time: 12247.7254 us. Best GFLOPs: 122.3434
2024-04-29 17:22:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:22:06 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 17:22:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:22:11 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 17:22:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:22:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:22:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:22:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:23:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9843  0.9835  0.9835  0.9835  0.9835  0.9835  0.9835  0.9835  0.9835  0.9835  0.9835  0.9835  0.9676  0.9663  0.9663  0.9626
[17 : 32]:	0.9494  0.9364  0.9290  0.9254  0.9248  0.9180  0.8899  0.8829  0.8795  0.8774  0.8735  0.8710  0.8642  0.8638  0.8627  0.8618
[33 : 48]:	0.8540  0.8491  0.8466  0.8425  0.8415  0.8389  0.8380  0.8343  0.8333  0.8312  0.8302  0.8291  0.8183  0.8174  0.8171  0.8134
[49 : 64]:	0.8120  0.8110  0.8106  0.8094  0.8089  0.8085  0.8065  0.8065  0.8032  0.8030  0.8022  0.8022  0.7995  0.7986  0.7979  0.7977
2024-04-29 17:23:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:23:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #65: GFLOPs: 81.8050. Time: 706.5919 us. Best GFLOPs: 122.3434
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #66: GFLOPs: 141.1654. Time: 409.4682 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #67: GFLOPs: 125.5577. Time: 460.3682 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #68: GFLOPs: 122.7714. Time: 470.8163 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #69: GFLOPs: 122.6520. Time: 471.2744 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #70: GFLOPs: 70.8187. Time: 816.2076 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #71: GFLOPs: 60.5444. Time: 954.7161 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #72: GFLOPs: 120.7510. Time: 478.6939 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #73: GFLOPs: 135.3342. Time: 427.1113 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #74: GFLOPs: 125.3492. Time: 461.1337 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #75: GFLOPs: 118.9110. Time: 486.1008 us. Best GFLOPs: 141.1654
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #76: GFLOPs: 143.2873. Time: 403.4047 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #77: GFLOPs: 123.3441. Time: 468.6302 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #78: GFLOPs: 94.9411. Time: 608.8276 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #79: GFLOPs: 93.9751. Time: 615.0858 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #80: GFLOPs: 87.0258. Time: 664.2027 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #81: GFLOPs: 88.3119. Time: 654.5292 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #82: GFLOPs: 87.2910. Time: 662.1843 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #83: GFLOPs: 84.4545. Time: 684.4251 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #84: GFLOPs: 67.8105. Time: 852.4160 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #85: GFLOPs: 111.7517. Time: 517.2429 us. Best GFLOPs: 143.2873
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #86: GFLOPs: 194.2408. Time: 297.5830 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #87: GFLOPs: 79.7804. Time: 724.5232 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #88: GFLOPs: 93.6542. Time: 617.1934 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #89: GFLOPs: 184.9253. Time: 312.5735 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #90: GFLOPs: 50.7379. Time: 1139.2431 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #91: GFLOPs: 108.6071. Time: 532.2190 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #92: GFLOPs: 80.4244. Time: 718.7218 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #93: GFLOPs: 98.5274. Time: 586.6668 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #94: GFLOPs: 77.8514. Time: 742.4754 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #95: GFLOPs: 184.6514. Time: 313.0371 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #96: GFLOPs: 98.5936. Time: 586.2726 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #97: GFLOPs: 144.6350. Time: 399.6457 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #98: GFLOPs: 75.7258. Time: 763.3170 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #99: GFLOPs: 79.9335. Time: 723.1354 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #100: GFLOPs: 115.7831. Time: 499.2329 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #101: GFLOPs: 131.6398. Time: 439.0978 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #102: GFLOPs: 145.8161. Time: 396.4085 us. Best GFLOPs: 194.2408
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #103: GFLOPs: 200.6481. Time: 288.0802 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #104: GFLOPs: 141.2108. Time: 409.3367 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #105: GFLOPs: 195.0054. Time: 296.4162 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #106: GFLOPs: 170.5385. Time: 338.9426 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #107: GFLOPs: 73.6497. Time: 784.8340 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #108: GFLOPs: 100.8169. Time: 573.3438 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #109: GFLOPs: 107.2062. Time: 539.1736 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #110: GFLOPs: 132.7212. Time: 435.5200 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #111: GFLOPs: 130.7594. Time: 442.0544 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #112: GFLOPs: 107.0062. Time: 540.1811 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #113: GFLOPs: 92.9976. Time: 621.5511 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #114: GFLOPs: 138.1769. Time: 418.3241 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #115: GFLOPs: 106.9464. Time: 540.4833 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #116: GFLOPs: 73.2768. Time: 788.8280 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #117: GFLOPs: 81.6597. Time: 707.8496 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #118: GFLOPs: 47.3222. Time: 1221.4730 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #119: GFLOPs: 113.1622. Time: 510.7954 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #120: GFLOPs: 100.7640. Time: 573.6450 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #121: GFLOPs: 70.2770. Time: 822.4984 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #122: GFLOPs: 69.1990. Time: 835.3116 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #123: GFLOPs: 72.2462. Time: 800.0805 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #124: GFLOPs: 85.8713. Time: 673.1324 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #125: GFLOPs: 90.0576. Time: 641.8417 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #126: GFLOPs: 10.8923. Time: 5306.7568 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #127: GFLOPs: 20.8576. Time: 2771.3053 us. Best GFLOPs: 200.6481
2024-04-29 17:24:26 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #128: GFLOPs: 2.2480. Time: 25713.1745 us. Best GFLOPs: 200.6481
2024-04-29 17:31:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:31:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:31:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:31:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:31:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:32:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:32:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:32:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:32:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9758  0.9553  0.9374  0.9215  0.9215  0.9215  0.9215  0.9215  0.9215  0.9215  0.9215  0.9215  0.9215  0.9174  0.9174  0.9174
[17 : 32]:	0.9151  0.8975  0.8901  0.8797  0.8791  0.8791  0.8693  0.8280  0.8235  0.8235  0.8143  0.7777  0.7777  0.7641  0.7620  0.7417
[33 : 48]:	0.7378  0.7373  0.7367  0.7347  0.7318  0.7303  0.7303  0.7299  0.7245  0.7200  0.7191  0.7191  0.7191  0.7191  0.7162  0.7151
[49 : 64]:	0.7051  0.7045  0.6954  0.6928  0.6910  0.6874  0.6842  0.6792  0.6792  0.6792  0.6791  0.6783  0.6783  0.6781  0.6781  0.6779
2024-04-29 17:32:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:32:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #129: GFLOPs: 176.4709. Time: 327.5483 us. Best GFLOPs: 200.6481
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #130: GFLOPs: 265.0944. Time: 218.0459 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #131: GFLOPs: 78.5318. Time: 736.0427 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #132: GFLOPs: 59.6369. Time: 969.2453 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #133: GFLOPs: 86.7228. Time: 666.5230 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #134: GFLOPs: 87.9088. Time: 657.5312 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #135: GFLOPs: 185.4191. Time: 311.7411 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #136: GFLOPs: 186.9178. Time: 309.2416 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #137: GFLOPs: 174.2611. Time: 331.7021 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #138: GFLOPs: 171.9131. Time: 336.2324 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #139: GFLOPs: 171.1093. Time: 337.8120 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #140: GFLOPs: 186.2639. Time: 310.3272 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #141: GFLOPs: 175.3312. Time: 329.6776 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #142: GFLOPs: 184.3342. Time: 313.5759 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #143: GFLOPs: 184.3002. Time: 313.6337 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #144: GFLOPs: 175.4834. Time: 329.3916 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #145: GFLOPs: 141.7651. Time: 407.7361 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #146: GFLOPs: 100.9961. Time: 572.3268 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #147: GFLOPs: 177.4457. Time: 325.7490 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #148: GFLOPs: 185.3832. Time: 311.8015 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #149: GFLOPs: 175.9586. Time: 328.5020 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #150: GFLOPs: 184.4480. Time: 313.3824 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #151: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l108, l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
b129 = sch.decompose_reduction(block=b111, loop=l113)
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #152: GFLOPs: 114.3930. Time: 505.2996 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #153: GFLOPs: 186.3489. Time: 310.1856 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #154: GFLOPs: 189.2217. Time: 305.4763 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #155: GFLOPs: 115.0523. Time: 502.4041 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #156: GFLOPs: 128.8232. Time: 448.6985 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #157: GFLOPs: 164.9914. Time: 350.3381 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #158: GFLOPs: 111.1091. Time: 520.2341 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #159: GFLOPs: 163.2551. Time: 354.0639 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #160: GFLOPs: 91.8069. Time: 629.6120 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #161: GFLOPs: 166.3342. Time: 347.5097 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #162: GFLOPs: 114.3199. Time: 505.6228 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #163: GFLOPs: 147.7610. Time: 391.1909 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #164: GFLOPs: 37.4715. Time: 1542.5807 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #165: GFLOPs: 159.3422. Time: 362.7586 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #166: GFLOPs: 116.6607. Time: 495.4773 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #167: GFLOPs: 180.6296. Time: 320.0072 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #168: GFLOPs: 140.5642. Time: 411.2195 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #169: GFLOPs: 114.9849. Time: 502.6986 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #170: GFLOPs: 154.2958. Time: 374.6230 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #171: GFLOPs: 152.8340. Time: 378.2061 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #172: GFLOPs: 158.2024. Time: 365.3721 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #173: GFLOPs: 155.0972. Time: 372.6873 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #174: GFLOPs: 157.2177. Time: 367.6605 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #175: GFLOPs: 108.7387. Time: 531.5748 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #176: GFLOPs: 95.1117. Time: 607.7356 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #177: GFLOPs: 39.8822. Time: 1449.3371 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #178: GFLOPs: 205.2333. Time: 281.6441 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #179: GFLOPs: 141.2620. Time: 409.1882 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #180: GFLOPs: 184.0895. Time: 313.9926 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #181: GFLOPs: 93.2168. Time: 620.0897 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #182: GFLOPs: 96.4226. Time: 599.4729 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #183: GFLOPs: 190.6943. Time: 303.1174 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #184: GFLOPs: 194.1464. Time: 297.7276 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #185: GFLOPs: 204.1050. Time: 283.2011 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #186: GFLOPs: 202.9464. Time: 284.8179 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #187: GFLOPs: 36.8172. Time: 1569.9931 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #188: GFLOPs: 73.0829. Time: 790.9201 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #189: GFLOPs: 77.4030. Time: 746.7767 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #190: GFLOPs: 8.0298. Time: 7198.5108 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #191: GFLOPs: 29.1482. Time: 1983.0662 us. Best GFLOPs: 265.0944
2024-04-29 17:34:09 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #192: GFLOPs: 12.6933. Time: 4553.7890 us. Best GFLOPs: 265.0944
2024-04-29 17:57:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:57:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:57:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:57:24 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:57:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:57:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:57:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:58:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:58:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8593  0.8593  0.8593  0.8357  0.8357  0.8357  0.8276  0.8276  0.7631  0.7564  0.7551  0.7551  0.7551  0.7551  0.7551  0.7551
[17 : 32]:	0.7551  0.7551  0.7534  0.7477  0.7327  0.7253  0.7253  0.7187  0.7187  0.6968  0.6951  0.6888  0.6876  0.6847  0.6847  0.6847
[33 : 48]:	0.6847  0.6841  0.6841  0.6818  0.6808  0.6808  0.6806  0.6786  0.6758  0.6758  0.6758  0.6758  0.6758  0.6758  0.6758  0.6758
[49 : 64]:	0.6758  0.6758  0.6758  0.6746  0.6732  0.6732  0.6715  0.6693  0.6685  0.6619  0.6617  0.6606  0.6577  0.6577  0.6548  0.6531
2024-04-29 17:58:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:58:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #193: GFLOPs: 39.7643. Time: 1453.6344 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #194: GFLOPs: 141.5359. Time: 408.3963 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #195: GFLOPs: 202.1265. Time: 285.9731 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #196: GFLOPs: 209.5924. Time: 275.7864 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #197: GFLOPs: 173.4285. Time: 333.2944 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #198: GFLOPs: 207.1333. Time: 279.0607 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #199: GFLOPs: 151.7050. Time: 381.0207 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #200: GFLOPs: 111.0124. Time: 520.6876 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #201: GFLOPs: 198.5322. Time: 291.1505 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #202: GFLOPs: 141.0024. Time: 409.9417 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #203: GFLOPs: 195.3279. Time: 295.9268 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #204: GFLOPs: 196.0000. Time: 294.9120 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #205: GFLOPs: 186.4352. Time: 310.0420 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #206: GFLOPs: 190.9339. Time: 302.7370 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #207: GFLOPs: 163.2413. Time: 354.0940 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #208: GFLOPs: 189.4275. Time: 305.1445 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #209: GFLOPs: 125.7200. Time: 459.7736 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #210: GFLOPs: 181.9418. Time: 317.6992 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #211: GFLOPs: 182.4880. Time: 316.7482 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #212: GFLOPs: 188.4563. Time: 306.7170 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #213: GFLOPs: 121.8113. Time: 474.5272 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #214: GFLOPs: 204.7820. Time: 282.2647 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #215: GFLOPs: 187.7746. Time: 307.8306 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #216: GFLOPs: 111.3858. Time: 518.9419 us. Best GFLOPs: 265.0944
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #217: GFLOPs: 268.6234. Time: 215.1814 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #218: GFLOPs: 187.3324. Time: 308.5571 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #219: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(36)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l81, l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #220: GFLOPs: 149.0236. Time: 387.8766 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #221: GFLOPs: 144.4283. Time: 400.2177 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #222: GFLOPs: 200.1456. Time: 288.8035 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #223: GFLOPs: 151.3811. Time: 381.8360 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #224: GFLOPs: 186.0176. Time: 310.7380 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #225: GFLOPs: 128.5240. Time: 449.7429 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #226: GFLOPs: 155.6439. Time: 371.3782 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #227: GFLOPs: 152.3003. Time: 379.5314 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #228: GFLOPs: 97.9566. Time: 590.0856 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #229: GFLOPs: 156.8203. Time: 368.5923 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #230: GFLOPs: 155.0977. Time: 372.6862 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #231: GFLOPs: 185.9550. Time: 310.8427 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #232: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l108, l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
b129 = sch.decompose_reduction(block=b111, loop=l113)
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #233: GFLOPs: 175.8082. Time: 328.7830 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #234: GFLOPs: 182.4297. Time: 316.8494 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #235: GFLOPs: 172.5467. Time: 334.9977 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #236: GFLOPs: 175.9403. Time: 328.5361 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #237: GFLOPs: 178.1716. Time: 324.4218 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #238: GFLOPs: 168.4223. Time: 343.2013 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #239: GFLOPs: 172.9531. Time: 334.2106 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #240: GFLOPs: 175.3788. Time: 329.5881 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #241: GFLOPs: 172.0431. Time: 335.9784 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #242: GFLOPs: 174.8572. Time: 330.5711 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #243: GFLOPs: 177.1457. Time: 326.3007 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #244: GFLOPs: 159.2261. Time: 363.0232 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #245: GFLOPs: 88.3899. Time: 653.9521 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #246: GFLOPs: 75.5446. Time: 765.1476 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #247: GFLOPs: 103.5369. Time: 558.2815 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #248: GFLOPs: 172.5090. Time: 335.0710 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #249: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(36)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(112) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(112) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(112) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l81, l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #250: GFLOPs: 130.5089. Time: 442.9027 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #251: GFLOPs: 182.3430. Time: 317.0001 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #252: GFLOPs: 169.6870. Time: 340.6434 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #253: GFLOPs: 91.8170. Time: 629.5430 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #254: GFLOPs: 7.0638. Time: 8182.8984 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #255: GFLOPs: 5.0481. Time: 11450.4342 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #256: GFLOPs: 3.3645. Time: 17180.2297 us. Best GFLOPs: 268.6234
2024-04-29 17:59:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:59:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:59:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 17:59:58 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:00:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:00:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:00:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:00:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:00:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8108  0.7928  0.7631  0.7388  0.7331  0.7225  0.7064  0.7064  0.6971  0.6963  0.6925  0.6925  0.6925  0.6925  0.6925  0.6894
[17 : 32]:	0.6881  0.6878  0.6878  0.6828  0.6814  0.6719  0.6719  0.6705  0.6690  0.6648  0.6648  0.6577  0.6554  0.6553  0.6546  0.6546
[33 : 48]:	0.6546  0.6546  0.6546  0.6546  0.6546  0.6546  0.6546  0.6530  0.6527  0.6527  0.6527  0.6527  0.6527  0.6527  0.6527  0.6527
[49 : 64]:	0.6527  0.6527  0.6527  0.6526  0.6490  0.6471  0.6398  0.6392  0.6370  0.6366  0.6347  0.6346  0.6346  0.6318  0.6310  0.6310
2024-04-29 18:00:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:00:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #257: GFLOPs: 189.5559. Time: 304.9378 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #258: GFLOPs: 126.1898. Time: 458.0619 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #259: GFLOPs: 202.5750. Time: 285.3401 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #260: GFLOPs: 144.0079. Time: 401.3861 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #261: GFLOPs: 199.3174. Time: 290.0035 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #262: GFLOPs: 196.8809. Time: 293.5924 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #263: GFLOPs: 174.6129. Time: 331.0338 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #264: GFLOPs: 188.4140. Time: 306.7859 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #265: GFLOPs: 108.3529. Time: 533.4676 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #266: GFLOPs: 195.3060. Time: 295.9600 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #267: GFLOPs: 125.3109. Time: 461.2748 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #268: GFLOPs: 162.8051. Time: 355.0426 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #269: GFLOPs: 191.6776. Time: 301.5625 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #270: GFLOPs: 198.4423. Time: 291.2825 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #271: GFLOPs: 203.7558. Time: 283.6864 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #272: GFLOPs: 164.0490. Time: 352.3505 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #273: GFLOPs: 184.9522. Time: 312.5281 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #274: GFLOPs: 177.2938. Time: 326.0281 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #275: GFLOPs: 184.9713. Time: 312.4958 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #276: GFLOPs: 179.7976. Time: 321.4880 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #277: GFLOPs: 176.2155. Time: 328.0231 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #278: GFLOPs: 106.5194. Time: 542.6498 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #279: GFLOPs: 106.7728. Time: 541.3619 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #280: GFLOPs: 186.5733. Time: 309.8126 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #281: GFLOPs: 181.3346. Time: 318.7629 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #282: GFLOPs: 171.9398. Time: 336.1802 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #283: GFLOPs: 173.3391. Time: 333.4662 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #284: GFLOPs: 187.1155. Time: 308.9147 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #285: GFLOPs: 87.2886. Time: 662.2025 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #286: GFLOPs: 186.6934. Time: 309.6133 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #287: GFLOPs: 182.9891. Time: 315.8808 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #288: GFLOPs: 171.1239. Time: 337.7831 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #289: GFLOPs: 79.6770. Time: 725.4631 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #290: GFLOPs: 87.4096. Time: 661.2857 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #291: GFLOPs: 79.1587. Time: 730.2136 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #292: GFLOPs: 184.5184. Time: 313.2628 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #293: GFLOPs: 168.3369. Time: 343.3754 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #294: GFLOPs: 171.1571. Time: 337.7175 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #295: GFLOPs: 185.2139. Time: 312.0865 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #296: GFLOPs: 171.2092. Time: 337.6148 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #297: GFLOPs: 163.3915. Time: 353.7685 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #298: GFLOPs: 174.5714. Time: 331.1124 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #299: GFLOPs: 170.7399. Time: 338.5428 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #300: GFLOPs: 162.1149. Time: 356.5541 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #301: GFLOPs: 120.2243. Time: 480.7910 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #302: GFLOPs: 173.5138. Time: 333.1306 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #303: GFLOPs: 171.3348. Time: 337.3673 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #304: GFLOPs: 172.5776. Time: 334.9377 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #305: GFLOPs: 169.0401. Time: 341.9469 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #306: GFLOPs: 171.3814. Time: 337.2755 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #307: GFLOPs: 184.6595. Time: 313.0235 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #308: GFLOPs: 170.0134. Time: 339.9895 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #309: GFLOPs: 180.5816. Time: 320.0921 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #310: GFLOPs: 148.1270. Time: 390.2243 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #311: GFLOPs: 199.8942. Time: 289.1667 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #312: GFLOPs: 84.1848. Time: 686.6176 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #313: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l108, l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
b129 = sch.decompose_reduction(block=b111, loop=l113)
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #314: GFLOPs: 102.5828. Time: 563.4739 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #315: GFLOPs: 203.7360. Time: 283.7139 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #316: GFLOPs: 101.7679. Time: 567.9863 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #317: GFLOPs: 162.3216. Time: 356.1001 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #318: GFLOPs: 9.2443. Time: 6252.8192 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #319: GFLOPs: 1.7224. Time: 33559.3017 us. Best GFLOPs: 268.6234
2024-04-29 18:02:30 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #320: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(960)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(32), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("conv2d_NCHWc_global"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(14) + ax2)
                        v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l108, l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b111)
b134 = sch.decompose_reduction(block=b111, loop=l118)
2024-04-29 18:09:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:09:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:09:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:09:07 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:09:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:09:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:09:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:09:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:10:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7603  0.7603  0.7603  0.7602  0.7601  0.7551  0.7551  0.7518  0.7311  0.7297  0.7275  0.7275  0.7257  0.7257  0.7257  0.7254
[17 : 32]:	0.7254  0.7250  0.7185  0.7126  0.7126  0.7075  0.7075  0.7058  0.7043  0.7033  0.7014  0.7014  0.7006  0.6997  0.6997  0.6997
[33 : 48]:	0.6997  0.6957  0.6956  0.6941  0.6940  0.6863  0.6860  0.6857  0.6828  0.6819  0.6819  0.6785  0.6785  0.6785  0.6777  0.6777
[49 : 64]:	0.6777  0.6777  0.6772  0.6772  0.6772  0.6765  0.6738  0.6738  0.6738  0.6736  0.6736  0.6736  0.6726  0.6709  0.6709  0.6708
2024-04-29 18:10:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:10:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #321: GFLOPs: 202.5823. Time: 285.3297 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #322: GFLOPs: 190.6651. Time: 303.1638 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #323: GFLOPs: 171.3215. Time: 337.3935 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #324: GFLOPs: 201.1966. Time: 287.2949 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #325: GFLOPs: 194.5753. Time: 297.0714 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #326: GFLOPs: 201.5157. Time: 286.8399 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #327: GFLOPs: 200.7286. Time: 287.9647 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #328: GFLOPs: 200.3806. Time: 288.4648 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #329: GFLOPs: 200.0441. Time: 288.9500 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #330: GFLOPs: 199.0959. Time: 290.3262 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #331: GFLOPs: 242.8144. Time: 238.0533 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #332: GFLOPs: 191.7029. Time: 301.5226 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #333: GFLOPs: 196.7104. Time: 293.8470 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #334: GFLOPs: 205.5513. Time: 281.2084 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #335: GFLOPs: 197.3604. Time: 292.8792 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #336: GFLOPs: 198.6308. Time: 291.0060 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #337: GFLOPs: 197.2326. Time: 293.0690 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #338: GFLOPs: 200.1484. Time: 288.7995 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #339: GFLOPs: 146.0349. Time: 395.8145 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #340: GFLOPs: 196.7451. Time: 293.7952 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #341: GFLOPs: 194.6670. Time: 296.9314 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #342: GFLOPs: 198.8293. Time: 290.7155 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #343: GFLOPs: 198.6615. Time: 290.9610 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #344: GFLOPs: 191.0161. Time: 302.6067 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #345: GFLOPs: 199.3372. Time: 289.9748 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #346: GFLOPs: 133.9392. Time: 431.5595 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #347: GFLOPs: 243.3848. Time: 237.4953 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #348: GFLOPs: 185.7503. Time: 311.1853 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #349: GFLOPs: 184.1687. Time: 313.8576 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #350: GFLOPs: 196.2853. Time: 294.4833 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #351: GFLOPs: 186.3504. Time: 310.1831 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #352: GFLOPs: 201.7232. Time: 286.5449 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #353: GFLOPs: 102.3265. Time: 564.8854 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #354: GFLOPs: 112.7883. Time: 512.4887 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #355: GFLOPs: 202.2068. Time: 285.8596 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #356: GFLOPs: 205.3906. Time: 281.4284 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #357: GFLOPs: 216.0062. Time: 267.5976 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #358: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(36)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l81, l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #359: GFLOPs: 157.3591. Time: 367.3301 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #360: GFLOPs: 164.5689. Time: 351.2374 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #361: GFLOPs: 186.9319. Time: 309.2182 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #362: GFLOPs: 201.4060. Time: 286.9962 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #363: GFLOPs: 198.7337. Time: 290.8553 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #364: GFLOPs: 192.8666. Time: 299.7033 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #365: GFLOPs: 179.9437. Time: 321.2269 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #366: GFLOPs: 180.6074. Time: 320.0464 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #367: GFLOPs: 181.4441. Time: 318.5706 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #368: GFLOPs: 203.3308. Time: 284.2794 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #369: GFLOPs: 196.0669. Time: 294.8114 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #370: GFLOPs: 191.2717. Time: 302.2023 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #371: GFLOPs: 196.6591. Time: 293.9236 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #372: GFLOPs: 148.3507. Time: 389.6358 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #373: GFLOPs: 181.0262. Time: 319.3060 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #374: GFLOPs: 186.0470. Time: 310.6889 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #375: GFLOPs: 162.1731. Time: 356.4263 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #376: GFLOPs: 73.9872. Time: 781.2536 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #377: GFLOPs: 103.7287. Time: 557.2491 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #378: GFLOPs: 174.1218. Time: 331.9673 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #379: GFLOPs: 186.2108. Time: 310.4157 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #380: GFLOPs: 194.4252. Time: 297.3007 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #381: GFLOPs: 179.2478. Time: 322.4740 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #382: GFLOPs: 13.5311. Time: 4271.8285 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #383: GFLOPs: 34.0624. Time: 1696.9642 us. Best GFLOPs: 268.6234
2024-04-29 18:11:36 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #384: GFLOPs: 114.3361. Time: 505.5513 us. Best GFLOPs: 268.6234
2024-04-29 18:48:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:48:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:48:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:48:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:48:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:48:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:49:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:49:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123767e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcbbdcc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd8fa878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xccf9438)]: 0 failure(s)
2024-04-29 18:49:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7988  0.7988  0.7988  0.7932  0.7932  0.7932  0.7921  0.7921  0.7921  0.7897  0.7855  0.7855  0.7795  0.7716  0.7586  0.7548
[17 : 32]:	0.7520  0.7499  0.7450  0.7443  0.7443  0.7408  0.7377  0.7377  0.7377  0.7377  0.7376  0.7376  0.7376  0.7364  0.7295  0.7265
[33 : 48]:	0.7264  0.7261  0.7258  0.7252  0.7224  0.7224  0.7196  0.7196  0.7178  0.7150  0.7142  0.7142  0.7142  0.7137  0.7137  0.7137
[49 : 64]:	0.7137  0.7137  0.7137  0.7097  0.7083  0.7081  0.7081  0.7081  0.7081  0.7081  0.7057  0.7057  0.7036  0.7029  0.7029  0.7029
2024-04-29 18:49:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:49:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #385: GFLOPs: 122.6670. Time: 471.2168 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #386: GFLOPs: 226.6670. Time: 255.0117 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #387: GFLOPs: 220.1238. Time: 262.5920 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #388: GFLOPs: 189.6885. Time: 304.7247 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #389: GFLOPs: 118.3782. Time: 488.2887 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #390: GFLOPs: 72.9771. Time: 792.0665 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #391: GFLOPs: 183.3816. Time: 315.2047 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #392: GFLOPs: 109.5762. Time: 527.5121 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #393: GFLOPs: 221.4428. Time: 261.0279 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #394: GFLOPs: 137.4625. Time: 420.4982 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #395: GFLOPs: 174.2876. Time: 331.6516 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #396: GFLOPs: 92.1143. Time: 627.5109 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #397: GFLOPs: 107.0498. Time: 539.9613 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #398: GFLOPs: 79.3276. Time: 728.6587 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #399: GFLOPs: 87.8552. Time: 657.9324 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #400: GFLOPs: 201.6802. Time: 286.6059 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #401: GFLOPs: 123.4608. Time: 468.1870 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #402: GFLOPs: 199.5384. Time: 289.6823 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #403: GFLOPs: 200.5896. Time: 288.1643 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #404: GFLOPs: 200.0433. Time: 288.9512 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #405: GFLOPs: 200.4784. Time: 288.3241 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #406: GFLOPs: 185.2720. Time: 311.9885 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #407: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(4)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(36)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #408: GFLOPs: 192.5639. Time: 300.1744 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #409: GFLOPs: 199.1436. Time: 290.2566 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #410: GFLOPs: 196.2077. Time: 294.5998 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #411: GFLOPs: 188.3122. Time: 306.9517 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #412: GFLOPs: 197.5048. Time: 292.6651 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #413: GFLOPs: 158.4320. Time: 364.8426 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:121] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #414: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(32), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(30), T.int64(30), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(4)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(36)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(32), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #415: GFLOPs: 181.5093. Time: 318.4562 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #416: GFLOPs: 172.1421. Time: 335.7850 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #417: GFLOPs: 192.3242. Time: 300.5485 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #418: GFLOPs: 151.6444. Time: 381.1730 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #419: GFLOPs: 170.9462. Time: 338.1341 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #420: GFLOPs: 145.3428. Time: 397.6996 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #421: GFLOPs: 198.9759. Time: 290.5012 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #422: GFLOPs: 196.9027. Time: 293.5600 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #423: GFLOPs: 204.5212. Time: 282.6248 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #424: GFLOPs: 185.9424. Time: 310.8638 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #425: GFLOPs: 70.0539. Time: 825.1178 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #426: GFLOPs: 199.3631. Time: 289.9371 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #427: GFLOPs: 187.9041. Time: 307.6183 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #428: GFLOPs: 189.3607. Time: 305.2521 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #429: GFLOPs: 183.6645. Time: 314.7193 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #430: GFLOPs: 196.8199. Time: 293.6835 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #431: GFLOPs: 186.0007. Time: 310.7664 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #432: GFLOPs: 191.4658. Time: 301.8959 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #433: GFLOPs: 182.1699. Time: 317.3013 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #434: GFLOPs: 203.9631. Time: 283.3980 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #435: GFLOPs: 189.3558. Time: 305.2599 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #436: GFLOPs: 117.1104. Time: 493.5751 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #437: GFLOPs: 189.7940. Time: 304.5552 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #438: GFLOPs: 201.0411. Time: 287.5171 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #439: GFLOPs: 189.1538. Time: 305.5860 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #440: GFLOPs: 161.5683. Time: 357.7604 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #441: GFLOPs: 189.4803. Time: 305.0595 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #442: GFLOPs: 185.4933. Time: 311.6164 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #443: GFLOPs: 182.4988. Time: 316.7294 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #444: GFLOPs: 55.9850. Time: 1032.4690 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #445: GFLOPs: 117.2318. Time: 493.0637 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #446: GFLOPs: 133.9609. Time: 431.4897 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #447: GFLOPs: 36.1792. Time: 1597.6772 us. Best GFLOPs: 268.6234
2024-04-29 18:50:59 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_contrib_conv2d_NCHWc_2] Trial #448: GFLOPs: 1.5611. Time: 37027.0940 us. Best GFLOPs: 268.6234
