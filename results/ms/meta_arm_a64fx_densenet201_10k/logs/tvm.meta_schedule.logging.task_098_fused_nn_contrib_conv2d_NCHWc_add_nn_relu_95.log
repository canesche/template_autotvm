2024-04-29 14:07:17 [INFO] [task_scheduler.cc:160] Initializing Task #98: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95"
2024-04-29 14:07:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(96), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 14:07:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 14:07:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(4), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:07:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(56), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 16:39:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:39:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:39:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 16:39:03 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:39:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 16:39:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 16:39:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 16:39:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 16:39:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9993  0.9983  0.9981  0.9975  0.9973  0.9969  0.9963  0.9962  0.9958  0.9951  0.9942  0.9940  0.9936  0.9933  0.9923
[17 : 32]:	0.9923  0.9922  0.9920  0.9919  0.9918  0.9908  0.9907  0.9882  0.9880  0.9878  0.9875  0.9873  0.9873  0.9872  0.9854  0.9851
[33 : 48]:	0.9846  0.9839  0.9838  0.9829  0.9814  0.9810  0.9809  0.9805  0.9804  0.9801  0.9791  0.9786  0.9780  0.9775  0.9772  0.9761
[49 : 64]:	0.9757  0.9756  0.9755  0.9728  0.9726  0.9722  0.9719  0.9705  0.9701  0.9685  0.9682  0.9677  0.9675  0.9675  0.9675  0.9672
2024-04-29 16:39:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:39:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #1: GFLOPs: 28.8019. Time: 2703.7490 us. Best GFLOPs: 28.8019
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #2: GFLOPs: 33.1023. Time: 2352.4999 us. Best GFLOPs: 33.1023
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #3: GFLOPs: 44.2141. Time: 1761.2756 us. Best GFLOPs: 44.2141
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #4: GFLOPs: 8.6581. Time: 8994.2589 us. Best GFLOPs: 44.2141
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #5: GFLOPs: 22.5215. Time: 3457.7240 us. Best GFLOPs: 44.2141
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #6: GFLOPs: 42.4020. Time: 1836.5453 us. Best GFLOPs: 44.2141
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #7: GFLOPs: 57.9763. Time: 1343.1900 us. Best GFLOPs: 57.9763
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #8: GFLOPs: 75.0413. Time: 1037.7372 us. Best GFLOPs: 75.0413
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #9: GFLOPs: 74.4767. Time: 1045.6038 us. Best GFLOPs: 75.0413
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #10: GFLOPs: 94.6971. Time: 822.3397 us. Best GFLOPs: 94.6971
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #11: GFLOPs: 105.0920. Time: 740.9997 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #12: GFLOPs: 47.6113. Time: 1635.6030 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #13: GFLOPs: 60.4245. Time: 1288.7670 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #14: GFLOPs: 15.1438. Time: 5142.2309 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #15: GFLOPs: 12.7971. Time: 6085.2014 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #16: GFLOPs: 24.0674. Time: 3235.6278 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #17: GFLOPs: 69.5510. Time: 1119.6559 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #18: GFLOPs: 85.7208. Time: 908.4507 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #19: GFLOPs: 6.0994. Time: 12767.3575 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #20: GFLOPs: 13.8617. Time: 5617.8566 us. Best GFLOPs: 105.0920
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #21: GFLOPs: 142.0319. Time: 548.2794 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #22: GFLOPs: 39.5314. Time: 1969.9072 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #23: GFLOPs: 74.3448. Time: 1047.4591 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #24: GFLOPs: 131.9947. Time: 589.9716 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #25: GFLOPs: 126.6482. Time: 614.8776 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #26: GFLOPs: 74.8180. Time: 1040.8345 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #27: GFLOPs: 40.0631. Time: 1943.7614 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #28: GFLOPs: 73.9463. Time: 1053.1041 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #29: GFLOPs: 95.1443. Time: 818.4740 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #30: GFLOPs: 78.6997. Time: 989.4981 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #31: GFLOPs: 20.5149. Time: 3795.9288 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #32: GFLOPs: 6.6815. Time: 11654.9833 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #33: GFLOPs: 70.2563. Time: 1108.4149 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #34: GFLOPs: 68.9115. Time: 1130.0452 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #35: GFLOPs: 75.4991. Time: 1031.4449 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #36: GFLOPs: 2.8674. Time: 27158.0037 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #37: GFLOPs: 94.3965. Time: 824.9579 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #38: GFLOPs: 55.9950. Time: 1390.7160 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #39: GFLOPs: 26.7182. Time: 2914.6152 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #40: GFLOPs: 41.8484. Time: 1860.8398 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #41: GFLOPs: 67.8858. Time: 1147.1204 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #42: GFLOPs: 104.6267. Time: 744.2949 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #43: GFLOPs: 45.1762. Time: 1723.7653 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:121] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(56), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #45: GFLOPs: 17.9440. Time: 4339.7805 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #46: GFLOPs: 25.3774. Time: 3068.6017 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #47: GFLOPs: 3.4582. Time: 22518.3882 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #48: GFLOPs: 82.5986. Time: 942.7900 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #49: GFLOPs: 90.1784. Time: 863.5456 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #50: GFLOPs: 35.2086. Time: 2211.7670 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #51: GFLOPs: 26.8464. Time: 2900.6922 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #52: GFLOPs: 80.6712. Time: 965.3152 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #53: GFLOPs: 121.2027. Time: 642.5036 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #54: GFLOPs: 80.0228. Time: 973.1376 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #55: GFLOPs: 27.4366. Time: 2838.2945 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #56: GFLOPs: 92.0222. Time: 846.2431 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #57: GFLOPs: 25.7903. Time: 3019.4794 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #58: GFLOPs: 42.4328. Time: 1835.2120 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #59: GFLOPs: 6.3298. Time: 12302.5717 us. Best GFLOPs: 142.0319
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #60: GFLOPs: 163.3191. Time: 476.8158 us. Best GFLOPs: 163.3191
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #61: GFLOPs: 93.1694. Time: 835.8234 us. Best GFLOPs: 163.3191
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #62: GFLOPs: 14.6217. Time: 5325.8773 us. Best GFLOPs: 163.3191
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #63: GFLOPs: 51.0753. Time: 1524.6732 us. Best GFLOPs: 163.3191
2024-04-29 17:15:32 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #64: GFLOPs: 173.6753. Time: 448.3835 us. Best GFLOPs: 173.6753
2024-04-29 18:42:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:42:02 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 18:42:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 18:42:04 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 18:42:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 18:42:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 18:42:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 18:42:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1011fe28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf2a2588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x53c7738)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x122b2f38)]: 0 failure(s)
2024-04-29 18:42:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9043  0.8498  0.8215  0.7760  0.7614  0.7508  0.7313  0.7288  0.7227  0.7170  0.7143  0.7117  0.7103  0.7080  0.7008  0.6980
[17 : 32]:	0.6969  0.6911  0.6894  0.6848  0.6802  0.6777  0.6774  0.6750  0.6747  0.6743  0.6687  0.6645  0.6643  0.6616  0.6596  0.6583
[33 : 48]:	0.6566  0.6540  0.6523  0.6521  0.6496  0.6495  0.6483  0.6483  0.6457  0.6451  0.6447  0.6447  0.6443  0.6425  0.6418  0.6410
[49 : 64]:	0.6399  0.6385  0.6381  0.6377  0.6376  0.6374  0.6374  0.6372  0.6372  0.6371  0.6367  0.6367  0.6341  0.6330  0.6326  0.6311
2024-04-29 18:42:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:42:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:121] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(8) // T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(4) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(8) // T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(4) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(8) // T.int64(4) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(4) * T.int64(14) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(224) // T.int64(8) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b105)
b125 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #66: GFLOPs: 181.6054. Time: 428.8041 us. Best GFLOPs: 181.6054
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #67: GFLOPs: 186.3232. Time: 417.9467 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #68: GFLOPs: 130.2900. Time: 597.6911 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #69: GFLOPs: 129.0525. Time: 603.4223 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #70: GFLOPs: 123.5265. Time: 630.4164 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #71: GFLOPs: 134.8403. Time: 577.5212 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #72: GFLOPs: 111.1980. Time: 700.3106 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #73: GFLOPs: 135.8715. Time: 573.1380 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #74: GFLOPs: 102.6920. Time: 758.3176 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #75: GFLOPs: 118.0950. Time: 659.4111 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #76: GFLOPs: 127.3495. Time: 611.4917 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #77: GFLOPs: 87.9298. Time: 885.6282 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #78: GFLOPs: 142.2167. Time: 547.5669 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #79: GFLOPs: 119.6387. Time: 650.9026 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #80: GFLOPs: 106.8388. Time: 728.8845 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #81: GFLOPs: 103.4680. Time: 752.6304 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:121] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #83: GFLOPs: 94.2175. Time: 826.5250 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #84: GFLOPs: 136.4210. Time: 570.8295 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #85: GFLOPs: 154.1234. Time: 505.2650 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #86: GFLOPs: 151.4661. Time: 514.1293 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #87: GFLOPs: 111.3271. Time: 699.4983 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #88: GFLOPs: 131.1995. Time: 593.5475 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #89: GFLOPs: 126.0779. Time: 617.6592 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #90: GFLOPs: 92.1474. Time: 845.0937 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #91: GFLOPs: 150.3113. Time: 518.0791 us. Best GFLOPs: 186.3232
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #92: GFLOPs: 218.5836. Time: 356.2626 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #93: GFLOPs: 106.6090. Time: 730.4560 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #94: GFLOPs: 140.2128. Time: 555.3927 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #95: GFLOPs: 69.1421. Time: 1126.2764 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #96: GFLOPs: 130.9046. Time: 594.8846 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #97: GFLOPs: 93.0223. Time: 837.1447 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #98: GFLOPs: 109.9705. Time: 708.1280 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #99: GFLOPs: 96.9229. Time: 803.4546 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #100: GFLOPs: 143.2585. Time: 543.5849 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #101: GFLOPs: 155.7739. Time: 499.9115 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #102: GFLOPs: 151.4056. Time: 514.3348 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #103: GFLOPs: 158.0944. Time: 492.5738 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #104: GFLOPs: 134.4138. Time: 579.3537 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #105: GFLOPs: 128.1399. Time: 607.7196 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #106: GFLOPs: 148.6024. Time: 524.0369 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #107: GFLOPs: 150.9633. Time: 515.8416 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #108: GFLOPs: 138.1175. Time: 563.8181 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #109: GFLOPs: 78.7768. Time: 988.5292 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #110: GFLOPs: 118.7289. Time: 655.8905 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #111: GFLOPs: 212.1995. Time: 366.9809 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #112: GFLOPs: 133.1389. Time: 584.9016 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #113: GFLOPs: 82.6060. Time: 942.7053 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #114: GFLOPs: 146.9574. Time: 529.9029 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #115: GFLOPs: 79.1691. Time: 983.6312 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:121] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #116: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(24), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(96), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(4) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #117: GFLOPs: 128.7992. Time: 604.6091 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #118: GFLOPs: 153.3868. Time: 507.6913 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #119: GFLOPs: 142.9799. Time: 544.6440 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #120: GFLOPs: 40.8302. Time: 1907.2432 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #121: GFLOPs: 77.8100. Time: 1000.8122 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #122: GFLOPs: 131.3619. Time: 592.8138 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #123: GFLOPs: 120.1131. Time: 648.3318 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #124: GFLOPs: 138.3603. Time: 562.8287 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #125: GFLOPs: 128.3778. Time: 606.5935 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #126: GFLOPs: 30.4370. Time: 2558.5012 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #127: GFLOPs: 3.6992. Time: 21051.3514 us. Best GFLOPs: 218.5836
2024-04-29 18:44:10 [INFO] [task_scheduler.cc:131] [Task #98: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_95] Trial #128: GFLOPs: 147.7578. Time: 527.0325 us. Best GFLOPs: 218.5836
