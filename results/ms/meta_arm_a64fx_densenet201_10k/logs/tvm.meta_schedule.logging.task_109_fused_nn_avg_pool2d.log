2024-04-29 14:07:47 [INFO] [task_scheduler.cc:160] Initializing Task #109: "fused_nn_avg_pool2d"
2024-04-29 14:07:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 14:07:47 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 14:07:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(2)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(28)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(2)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax3)
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax3)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax3, ax4 in T.grid(T.int64(28), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(2)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5, ax6 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3 + ax4)
                        v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax4 in range(T.int64(4)):
                    for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(28), ax2 + ax3_1)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3 + ax4_1)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=3)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 14:07:47 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(2), T.int64(2)):
                with T.block("pool_sum"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 16:51:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:51:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:51:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc8cbb28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xccf81b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaae4f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xce4c428)]: 0 failure(s)
2024-04-29 16:51:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:51:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc8cbb28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xccf81b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaae4f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xce4c428)]: 0 failure(s)
2024-04-29 16:51:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc8cbb28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xccf81b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaae4f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xce4c428)]: 0 failure(s)
2024-04-29 16:51:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc8cbb28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xccf81b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaae4f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xce4c428)]: 0 failure(s)
2024-04-29 16:51:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc8cbb28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xccf81b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaae4f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xce4c428)]: 0 failure(s)
2024-04-29 16:51:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9977  0.9926  0.9888  0.9886  0.9850  0.9845  0.9841  0.9809  0.9796  0.9786  0.9775  0.9761  0.9742  0.9718  0.9673
[17 : 32]:	0.9669  0.9655  0.9645  0.9606  0.9578  0.9461  0.9459  0.9442  0.9421  0.9402  0.9394  0.9373  0.9333  0.9326  0.9316  0.9298
[33 : 48]:	0.9274  0.9269  0.9246  0.9245  0.9201  0.9199  0.9190  0.9189  0.9173  0.9141  0.9091  0.9088  0.9084  0.9057  0.9050  0.9046
[49 : 64]:	0.9045  0.9031  0.8975  0.8953  0.8951  0.8905  0.8902  0.8896  0.8895  0.8855  0.8819  0.8791  0.8790  0.8783  0.8773  0.8769
2024-04-29 16:51:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:51:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #1: GFLOPs: 52.4824. Time: 47.8027 us. Best GFLOPs: 52.4824
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #2: GFLOPs: 97.4806. Time: 25.7364 us. Best GFLOPs: 97.4806
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #3: GFLOPs: 72.2803. Time: 34.7093 us. Best GFLOPs: 97.4806
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #4: GFLOPs: 122.9902. Time: 20.3984 us. Best GFLOPs: 122.9902
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #5: GFLOPs: 87.9950. Time: 28.5107 us. Best GFLOPs: 122.9902
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #6: GFLOPs: 168.6854. Time: 14.8727 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #7: GFLOPs: 57.8929. Time: 43.3352 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #8: GFLOPs: 157.0935. Time: 15.9701 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #9: GFLOPs: 114.7075. Time: 21.8713 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #10: GFLOPs: 96.0702. Time: 26.1142 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #11: GFLOPs: 37.6006. Time: 66.7223 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #12: GFLOPs: 50.7687. Time: 49.4163 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #13: GFLOPs: 40.6105. Time: 61.7772 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #14: GFLOPs: 38.2190. Time: 65.6427 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #15: GFLOPs: 153.0106. Time: 16.3963 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #16: GFLOPs: 165.6938. Time: 15.1412 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #17: GFLOPs: 29.8700. Time: 83.9906 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #18: GFLOPs: 117.8077. Time: 21.2957 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #19: GFLOPs: 57.4041. Time: 43.7042 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #20: GFLOPs: 35.5119. Time: 70.6468 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #21: GFLOPs: 93.5159. Time: 26.8275 us. Best GFLOPs: 168.6854
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #22: GFLOPs: 186.4642. Time: 13.4546 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #23: GFLOPs: 152.4394. Time: 16.4577 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #24: GFLOPs: 117.2987. Time: 21.3881 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #25: GFLOPs: 45.4239. Time: 55.2309 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #26: GFLOPs: 159.4820. Time: 15.7309 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #27: GFLOPs: 50.3932. Time: 49.7845 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #28: GFLOPs: 103.8859. Time: 24.1496 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #29: GFLOPs: 53.7526. Time: 46.6731 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #30: GFLOPs: 107.6610. Time: 23.3028 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #31: GFLOPs: 77.1812. Time: 32.5053 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #32: GFLOPs: 19.1772. Time: 130.8219 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #33: GFLOPs: 86.3974. Time: 29.0379 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #34: GFLOPs: 51.9776. Time: 48.2669 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #35: GFLOPs: 110.8120. Time: 22.6401 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #36: GFLOPs: 133.4558. Time: 18.7987 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #37: GFLOPs: 137.8896. Time: 18.1943 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #38: GFLOPs: 140.6341. Time: 17.8392 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #39: GFLOPs: 146.9443. Time: 17.0731 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #40: GFLOPs: 170.5009. Time: 14.7143 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #41: GFLOPs: 43.9382. Time: 57.0983 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #42: GFLOPs: 138.0616. Time: 18.1716 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #43: GFLOPs: 76.6592. Time: 32.7266 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #44: GFLOPs: 123.0871. Time: 20.3823 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #45: GFLOPs: 115.7638. Time: 21.6717 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #46: GFLOPs: 108.3996. Time: 23.1440 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #47: GFLOPs: 37.0715. Time: 67.6746 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #48: GFLOPs: 85.4013. Time: 29.3766 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #49: GFLOPs: 129.5978. Time: 19.3584 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #50: GFLOPs: 53.4003. Time: 46.9810 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #51: GFLOPs: 50.2292. Time: 49.9470 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #52: GFLOPs: 62.9141. Time: 39.8766 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #53: GFLOPs: 80.8077. Time: 31.0465 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #54: GFLOPs: 51.7667. Time: 48.4636 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #55: GFLOPs: 60.1064. Time: 41.7393 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #56: GFLOPs: 91.2547. Time: 27.4923 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #57: GFLOPs: 149.1806. Time: 16.8172 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #58: GFLOPs: 36.7883. Time: 68.1956 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #59: GFLOPs: 66.6370. Time: 37.6487 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #60: GFLOPs: 99.6400. Time: 25.1786 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #61: GFLOPs: 24.7818. Time: 101.2356 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #62: GFLOPs: 163.5163. Time: 15.3428 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #63: GFLOPs: 172.4474. Time: 14.5482 us. Best GFLOPs: 186.4642
2024-04-29 17:17:30 [INFO] [task_scheduler.cc:131] [Task #109: fused_nn_avg_pool2d] Trial #64: GFLOPs: 153.2797. Time: 16.3675 us. Best GFLOPs: 186.4642
